--- chfn.c.sec	2002-12-09 14:34:26.000000000 -0700
+++ chfn.c	2004-04-21 14:34:05.000000000 -0600
@@ -98,8 +98,10 @@
 		return NULL;
 
 	check = fgets(buffer, BUFSIZ, stdin);
-	if (check != buffer)
+	if (check != buffer) {
+		free(buffer);
 		return NULL;
+	}
 	slen = strlen(buffer);
 	if (buffer[slen - 1] == '\n')
 		buffer[slen - 1] = '\0';
@@ -493,6 +495,7 @@
 	free(o_gecos);
 
 	retval = pwdb_update_gecos(user_name, new_gecos);
+	free(new_gecos);
 	if (retval != 0) {
 		fprintf(stderr, "%s: Error updating GECOS information.\n",
 			progname);
--- chsh.c.sec	2002-12-09 14:34:26.000000000 -0700
+++ chsh.c	2004-04-21 14:34:50.000000000 -0600
@@ -82,8 +82,10 @@
 		return NULL;
 
 	check = fgets(buffer, BUFSIZ, stdin);
-	if (check != buffer)
+	if (check != buffer) {
+		free(buffer);
 		return NULL;
+	}
 	slen = strlen(buffer);
 	if (buffer[slen - 1] == '\n')
 		buffer[slen - 1] = '\0';
--- version.c.sec	2002-12-09 14:34:26.000000000 -0700
+++ version.c	2004-04-21 14:39:09.000000000 -0600
@@ -66,8 +66,10 @@
 		return NULL;
 
 	check = fgets(buffer, BUFSIZ, stdin);
-	if (check != buffer)
+	if (check != buffer) {
+		free(buffer);
 		return NULL;
+	}
 	slen = strlen(buffer);
 	if (buffer[slen - 1] == '\n')
 		buffer[slen - 1] = '\0';
--- passwd.c.sec	2002-12-09 14:34:26.000000000 -0700
+++ passwd.c	2004-04-27 15:34:49.000000000 -0600
@@ -364,18 +364,32 @@
 	/* If we need to read the new password from stdin, read it and switch
 	 * to the really-quiet stdin conversation function. */
 	if (passwd_flags & PASSWD_STDIN) {
-		char newPassword[80];
+		char *ptr, newPassword[80];
 		int i;
 
 		i = read(STDIN_FILENO, newPassword,
 			 sizeof(newPassword) - 1);
-		newPassword[i - 1] = '\0';
+		if (i < 0) {
+			fprintf(stderr,
+				_("passwd: error reading from stdin\n"));
+			exit(1);
+		}
+		
+		newPassword[i] = '\0';
+		ptr = strchr(newPassword, '\n');
+		if (ptr)
+			*ptr = 0;
 		conv.conv = stdin_conv;
 		conv.appdata_ptr = strdup(newPassword);
 	}
 
 	/* Start up PAM. */
 	retval = pam_start("passwd", username, &conv, &pamh);
+	if (retval != PAM_SUCCESS) {
+		fprintf(stderr,
+			_("passwd: unable to start pam\n"));
+		exit(1);
+	}
 
 #ifdef HAVE_PAM_FAIL_DELAY
 	/* We have to pause on failure, so tell libpam the minimum amount
