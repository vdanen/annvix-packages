diff -rud ash-0.3.8.orig/Makefile ash-0.3.8.static/Makefile
--- ash-0.3.8.orig/Makefile	Fri Dec 29 11:30:31 2000
+++ ash-0.3.8.static/Makefile	Wed Jul 11 17:30:27 2001
@@ -1,62 +1,80 @@
-#	$NetBSD: Makefile,v 1.51 2000/12/29 16:30:31 bjh21 Exp $
-#	@(#)Makefile	8.4 (Berkeley) 5/5/95
-
-WARNS=2
-YHEADER=1
-PROG=	sh
-SHSRCS=	alias.c cd.c echo.c error.c eval.c exec.c expand.c \
-	histedit.c input.c jobs.c mail.c main.c memalloc.c miscbltin.c \
-	mystring.c options.c parser.c redir.c show.c trap.c output.c var.c \
-	test.c
-GENSRCS=arith.c arith.h arith_lex.c builtins.c builtins.h init.c nodes.c \
-	nodes.h syntax.c syntax.h token.h
-SRCS=	${SHSRCS} ${GENSRCS}
+CC	= gcc
+LD	= gcc
+PROG	= sh
+SHSRCS	= alias.c cd.c error.c eval.c exec.c expand.c bltin/echo.c \
+	  histedit.c input.c jobs.c mail.c main.c memalloc.c miscbltin.c \
+	  mystring.c options.c parser.c redir.c show.c trap.c output.c var.c \
+	  bltin/test.c nodes.c init.c builtins.c syntax.c arith.c setmode.c \
+	  arith_lex.c
+GENSRCS	= arith_lex.c builtins.c builtins.h init.c lex.yy.c mkinit mknodes \
+	  mksyntax nodes.c nodes.h syntax.c syntax.h y.tab.h
+LIBS	= -lfl #-ltermcap
+LEX	= flex
+YACC	= yacc
+LFLAGS	= -8	# 8-bit lex scanner for arithmetic
+YFLAGS	= -d
+CFLAGS	= -Wall -DBSD=1 -DSMALL -DGLOB_BROKEN \
+          -DIFS_BROKEN -DFNMATCH_BROKEN \
+          -D__COPYRIGHT\(x\)= -D__RCSID\(x\)= -D_DIAGASSERT\(x\)= -I. \
+	  -Os -fstrict-aliasing -fomit-frame-pointer -DSHELL -DHAVE_STDLIB_H
+LDFLAGS	= -static
+OBJS	= $(SHSRCS:.c=.o)
 
-LDADD+=	-ll -ledit -ltermcap
-DPADD+=	${LIBL} ${LIBEDIT} ${LIBTERMCAP}
 
-LFLAGS= -8	# 8-bit lex scanner for arithmetic
-YFLAGS=	-d
+#CPPFLAGS+=-DSHELL -I. -I$(.CURDIR)
+#
+#CLEANFILES+= mkinit mknodes mksyntax
+#CLEANFILES+= $(GENSRCS) y.tab.h
 
-CPPFLAGS+=-DSHELL -I. -I${.CURDIR}
+.c.o:
+	$(CC) -c $(CFLAGS) -o $*.o $<
 
-.PATH:	${.CURDIR}/bltin ${.CURDIR}/../../usr.bin/printf ${.CURDIR}/../test
+all: y.tab.h signames.h $(OBJS)
+	$(LD) -o $(PROG) $(OBJS) $(LIBS)
 
-CLEANFILES+= mkinit mknodes mksyntax
-CLEANFILES+= ${GENSRCS} y.tab.h
+clean:
+	rm -f core *.o bltin/*.o *~ $(GENSRCS)
 
 token.h: mktokens
-	sh ${.ALLSRC}
+	sh $+
+
+y.tab.h: arith.y
+	$(YACC) $(YFLAGS) $+
 
 builtins.c builtins.h: mkbuiltins shell.h builtins.def
-	sh ${.ALLSRC} ${.OBJDIR}
+	sh $+ .
 
-init.c: mkinit ${SHSRCS}
-	./${.ALLSRC}
+signames.h: mksignames.o
+	$(LD) $(LDFLAGS) -omksignames $+
+	./mksignames > $@
+
+init.c: mkinit $(SHSRCS)
+	./$+
 
 nodes.c nodes.h: mknodes nodetypes nodes.c.pat
-	./${.ALLSRC}
+	./$+
 
 syntax.c syntax.h: mksyntax
-	./${.ALLSRC}
+	./$+
 
 mkinit: mkinit.c
-	${HOST_LINK.c} -o mkinit ${.IMPSRC}
+	$(CC) -o mkinit $+
 
 mknodes: mknodes.c
-	${HOST_LINK.c} -o mknodes ${.IMPSRC}
+	$(CC) -o mknodes $+
 
-.if	(${MACHINE_ARCH} == "powerpc") || \
-	(${MACHINE_ARCH} == "arm32") || \
-	(${MACHINE_ARCH} == "arm26")
-TARGET_CHARFLAG= -DTARGET_CHAR="u_int8_t"
-.else
+#.if $(MACHINE_ARCH) == "powerpc" || \
+#	$(MACHINE_ARCH) == "arm32" || \
+#	$(MACHINE_ARCH) == "arm26"
+#TARGET_CHARFLAG= -DTARGET_CHAR="u_int8_t"
+#.else
 TARGET_CHARFLAG= -DTARGET_CHAR="int8_t"
-.endif
+#.endif
 
 mksyntax: mksyntax.c
-	${HOST_LINK.c} ${TARGET_CHARFLAG} -o mksyntax ${.IMPSRC}
+	$(CC) $(TARGET_CHARFLAG) -o mksyntax $+
 
-.include <bsd.prog.mk>
+#.include <bsd.prog.mk>
+
+$(OBJS): builtins.h nodes.h syntax.h token.h
 
-${OBJS}: builtins.h nodes.h syntax.h token.h
Only in ash-0.3.8.static/: alias.o
Only in ash-0.3.8.static/: arith.c
Only in ash-0.3.8.static/: arith.o
Only in ash-0.3.8.static/: arith_lex.c
diff -rud ash-0.3.8.orig/arith_lex.l ash-0.3.8.static/arith_lex.l
--- ash-0.3.8.orig/arith_lex.l	Fri Feb  5 02:52:52 1999
+++ ash-0.3.8.static/arith_lex.l	Wed Jul 11 16:51:35 2001
@@ -47,7 +47,8 @@
 #endif /* not lint */
 
 #include <unistd.h>
-#include "arith.h"
+//#include "arith.h"
+#include "y.tab.h"
 #include "error.h"
 #include "expand.h"
 
Only in ash-0.3.8.static/: arith_lex.o
Only in ash-0.3.8.static/bltin: echo.o
diff -rud ash-0.3.8.orig/bltin/test.c ash-0.3.8.static/bltin/test.c
--- ash-0.3.8.orig/bltin/test.c	Sun Apr  9 19:24:59 2000
+++ ash-0.3.8.static/bltin/test.c	Wed Jul 11 15:52:35 2001
@@ -23,7 +23,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <err.h>
+//#include <err.h>
 #ifdef __STDC__
 #include <stdarg.h>
 #else
Only in ash-0.3.8.static/bltin: test.o
Only in ash-0.3.8.static/: builtins.c
diff -rud ash-0.3.8.orig/builtins.def ash-0.3.8.static/builtins.def
--- ash-0.3.8.orig/builtins.def	Sun Apr  9 19:27:03 2000
+++ ash-0.3.8.static/builtins.def	Wed Jul 11 17:09:10 2001
@@ -64,7 +64,7 @@
 exportcmd	export readonly
 #exprcmd		expr
 falsecmd	false
-histcmd -h	fc
+#histcmd -h	fc
 fgcmd -j	fg
 getoptscmd	getopts
 hashcmd		hash
@@ -84,10 +84,10 @@
 truecmd		: true
 typecmd		type
 umaskcmd	umask
-unaliascmd	unalias
+#unaliascmd	unalias
 unsetcmd	unset
 waitcmd		wait
 #foocmd		foo
-aliascmd	alias
+#aliascmd	alias
 ulimitcmd	ulimit
 testcmd		test [
Only in ash-0.3.8.static/: builtins.h
Only in ash-0.3.8.static/: builtins.o
Only in ash-0.3.8.static/: cd.o
diff -rud ash-0.3.8.orig/error.h ash-0.3.8.static/error.h
--- ash-0.3.8.orig/error.h	Sun Feb  4 14:52:06 2001
+++ ash-0.3.8.static/error.h	Wed Jul 11 15:22:55 2001
@@ -101,7 +101,7 @@
  * so we use _setjmp instead.
  */
 
-#if defined(BSD) && !defined(__SVR4)
+#if defined(BSD) && !defined(__SVR4) && !defined(__dietlibc__)
 #define setjmp(jmploc)	_setjmp(jmploc)
 #define longjmp(jmploc, val)	_longjmp(jmploc, val)
 #endif
Only in ash-0.3.8.static/: error.o
Only in ash-0.3.8.static/: eval.o
Only in ash-0.3.8.static/: exec.o
Only in ash-0.3.8.static/: expand.o
diff -rud ash-0.3.8.orig/histedit.c ash-0.3.8.static/histedit.c
--- ash-0.3.8.orig/histedit.c	Sun Feb  4 14:52:06 2001
+++ ash-0.3.8.static/histedit.c	Wed Jul 11 15:35:00 2001
@@ -60,9 +60,9 @@
 #include "main.h"
 #include "output.h"
 #include "mystring.h"
-#include "myhistedit.h"
 #include "error.h"
 #ifndef SMALL
+#include "myhistedit.h"
 #include "eval.h"
 #include "memalloc.h"
 
Only in ash-0.3.8.static/: histedit.o
Only in ash-0.3.8.static/: init.c
Only in ash-0.3.8.static/: init.o
diff -rud ash-0.3.8.orig/input.c ash-0.3.8.static/input.c
--- ash-0.3.8.orig/input.c	Sun Feb  4 14:52:06 2001
+++ ash-0.3.8.static/input.c	Wed Jul 11 15:36:29 2001
@@ -66,7 +66,9 @@
 #include "error.h"
 #include "alias.h"
 #include "parser.h"
+#ifndef SMALL
 #include "myhistedit.h"
+#endif
 
 #define EOF_NLEFT -99		/* value of parsenleft when EOF pushed back */
 
@@ -108,7 +110,9 @@
 int init_editline = 0;		/* editline library initialized? */
 int whichprompt;		/* 1 == PS1, 2 == PS2 */
 
+#ifndef SMALL
 EditLine *el;			/* cookie for editline package */
+#endif
 
 STATIC void pushfile __P((void));
 static int preadfd __P((void));
Only in ash-0.3.8.static/: input.o
Only in ash-0.3.8.static/: jobs.o
Only in ash-0.3.8.static/: mail.o
Only in ash-0.3.8.static/: main.o
Only in ash-0.3.8.static/: memalloc.o
diff -rud ash-0.3.8.orig/miscbltin.c ash-0.3.8.static/miscbltin.c
--- ash-0.3.8.orig/miscbltin.c	Sun Feb  4 14:52:06 2001
+++ ash-0.3.8.static/miscbltin.c	Wed Jul 11 16:07:16 2001
@@ -70,6 +70,17 @@
 
 #undef rflag
 
+#ifdef __dietlibc__
+mode_t getmode(const void *, mode_t);
+void *setmode(const char *);
+#endif
+
+#if 0
+#if !defined(__GLIBC__) || __GLIBC__ == 2 && __GLIBC_MINOR__ < 1
+typedef enum __rlimit_resource rlim_t;
+#endif
+#endif
+
 
 
 /*
Only in ash-0.3.8.static/: miscbltin.o
Only in ash-0.3.8.static/: mkinit
Only in ash-0.3.8.static/: mknodes
Only in ash-0.3.8.static/: mksignames
Only in ash-0.3.8.static/: mksignames.o
Only in ash-0.3.8.static/: mksyntax
diff -rud ash-0.3.8.orig/mystring.c ash-0.3.8.static/mystring.c
--- ash-0.3.8.orig/mystring.c	Thu Jul  8 23:05:50 1999
+++ ash-0.3.8.static/mystring.c	Wed Jul 11 16:26:40 2001
@@ -60,6 +60,7 @@
 #include "syntax.h"
 #include "error.h"
 #include "mystring.h"
+#include "memalloc.h"
 
 
 char nullstr[1];		/* zero length string */
@@ -126,6 +127,78 @@
 	return atoi(s);
 }
 
+
+/*
+ * Produce a possibly single quoted string suitable as input to the shell.
+ * The return string is allocated on the stack.
+ */
+
+char *
+single_quote(const char *s) {
+	char *p;
+
+	STARTSTACKSTR(p);
+
+	do {
+		char *q = p;
+		size_t len1, len1p, len2, len2p;
+
+		len1 = strcspn(s, "'");
+		len2 = strspn(s + len1, "'");
+
+		len1p = len1 ? len1 + 2 : len1;
+		switch (len2) {
+		case 0:
+			len2p = 0;
+			break;
+		case 1:
+			len2p = 2;
+			break;
+		default:
+			len2p = len2 + 2;
+		}
+
+		CHECKSTRSPACE(len1p + len2p + 1, p);
+
+		if (len1) {
+			*p = '\'';
+#ifdef _GNU_SOURCE
+			q = mempcpy(p + 1, s, len1);
+#else
+			q = p + 1 + len1;
+			memcpy(p + 1, s, len1);
+#endif
+			*q++ = '\'';
+			s += len1;
+		}
+
+		switch (len2) {
+		case 0:
+			break;
+		case 1:
+			*q++ = '\\';
+			*q = '\'';
+			s++;
+			break;
+		default:
+			*q = '"';
+#ifdef _GNU_SOURCE
+			*(char *) mempcpy(q + 1, s, len2) = '"';
+#else
+			q += 1 + len2;
+			memcpy(q + 1, s, len2);
+			*q = '"';
+#endif
+			s += len2;
+		}
+
+		STADJUST(len1p + len2p, p);
+	} while (*s);
+
+	USTPUTC(0, p);
+
+	return grabstackstr(p);
+}
 
 
 /*
diff -rud ash-0.3.8.orig/mystring.h ash-0.3.8.static/mystring.h
--- ash-0.3.8.orig/mystring.h	Thu May 11 17:29:42 1995
+++ ash-0.3.8.static/mystring.h	Wed Jul 11 16:16:06 2001
@@ -44,6 +44,7 @@
 int prefix __P((const char *, const char *));
 int number __P((const char *));
 int is_number __P((const char *));
+char *single_quote __P((const char *));
 
 #define equal(s1, s2)	(strcmp(s1, s2) == 0)
 #define scopy(s1, s2)	((void)strcpy(s2, s1))
Only in ash-0.3.8.static/: mystring.o
Only in ash-0.3.8.static/: nodes.c
Only in ash-0.3.8.static/: nodes.h
Only in ash-0.3.8.static/: nodes.o
Only in ash-0.3.8.static/: options.o
diff -rud ash-0.3.8.orig/output.c ash-0.3.8.static/output.c
--- ash-0.3.8.orig/output.c	Sun Jan  7 18:39:07 2001
+++ ash-0.3.8.static/output.c	Wed Jul 11 15:52:18 2001
@@ -85,6 +85,8 @@
 struct output *out1 = &output;
 struct output *out2 = &errout;
 
+typedef unsigned long u_long;
+
 
 
 #ifdef mkinit
Only in ash-0.3.8.static/: output.o
Only in ash-0.3.8.static/: parser.o
Only in ash-0.3.8.static/: redir.o
diff -rud ash-0.3.8.orig/setmode.c ash-0.3.8.static/setmode.c
--- ash-0.3.8.orig/setmode.c	Tue Jan 25 10:43:43 2000
+++ ash-0.3.8.static/setmode.c	Wed Jul 11 16:14:03 2001
@@ -45,7 +45,7 @@
 #endif
 #endif /* LIBC_SCCS and not lint */
 
-#include "namespace.h"
+//#include "namespace.h"
 #include <sys/types.h>
 #include <sys/stat.h>
 
@@ -73,6 +73,11 @@
 	char	cmd2;
 	mode_t	bits;
 } BITCMD;
+
+#ifdef __dietlibc__
+typedef unsigned int u_int;
+#define S_ISTXT S_ISVTX
+#endif
 
 #define	CMD2_CLR	0x01
 #define	CMD2_SET	0x02
Only in ash-0.3.8.static/: setmode.o
Only in ash-0.3.8.static/: sh
diff -rud ash-0.3.8.orig/shell.h ash-0.3.8.static/shell.h
--- ash-0.3.8.orig/shell.h	Mon May 22 06:18:47 2000
+++ ash-0.3.8.static/shell.h	Wed Jul 11 15:28:39 2001
@@ -51,6 +51,7 @@
  * a quit signal will generate a core dump.
  */
 
+#include <sys/types.h>
 
 #define JOBS 1
 #ifndef BSD
Only in ash-0.3.8.static/: show.o
Only in ash-0.3.8.static/: signames.h
Only in ash-0.3.8.static/: syntax.c
Only in ash-0.3.8.static/: syntax.h
Only in ash-0.3.8.static/: syntax.o
Only in ash-0.3.8.static/: token.h
diff -rud ash-0.3.8.orig/trap.c ash-0.3.8.static/trap.c
--- ash-0.3.8.orig/trap.c	Sun Feb  4 14:52:07 2001
+++ ash-0.3.8.static/trap.c	Wed Jul 11 17:02:40 2001
@@ -62,7 +62,12 @@
 #include "error.h"
 #include "trap.h"
 #include "mystring.h"
+#include "mail.h"
+#include "signames.h"
 
+#ifdef HETIO
+#include "hetio.h"
+#endif
 
 /*
  * Sigmode records the current value of the signal handlers for the various
@@ -77,12 +82,12 @@
 #define S_RESET 5		/* temporary - to reset a hard ignored sig */
 
 
-char *trap[NSIG+1];		/* trap handler commands */
-MKINIT char sigmode[NSIG];	/* current value of signal */
-char gotsig[NSIG];		/* indicates specified signal received */
+char *trap[NSIG];		/* trap handler commands */
+MKINIT char sigmode[NSIG - 1];	/* current value of signal */
+char gotsig[NSIG - 1];		/* indicates specified signal received */
 int pendingsigs;			/* indicates some signal received */
 
-static int getsigaction __P((int, sig_t *));
+extern char *signal_names[];
 
 /*
  * The trap builtin.
@@ -98,23 +103,35 @@
 	int signo;
 
 	if (argc <= 1) {
-		for (signo = 0 ; signo <= NSIG ; signo++) {
-			if (trap[signo] != NULL)
-				out1fmt("%d: %s\n", signo, trap[signo]);
+		for (signo = 0 ; signo < NSIG ; signo++) {
+			if (trap[signo] != NULL) {
+				char *p;
+
+				p = single_quote(trap[signo]);
+				out1fmt(
+					"trap -- %s %s\n", p,
+					signal_names[signo] + (signo ? 3 : 0)
+				);
+				stunalloc(p);
+			}
 		}
 		return 0;
 	}
 	ap = argv + 1;
-	if (is_number(*ap))
+	if (argc == 2)
 		action = NULL;
 	else
 		action = *ap++;
 	while (*ap) {
-		if ((signo = number(*ap)) < 0 || signo > NSIG)
+		if ((signo = decode_signal(*ap, 0)) < 0)
 			error("%s: bad trap", *ap);
 		INTOFF;
-		if (action)
-			action = savestr(action);
+		if (action) {
+			if (action[0] == '-' && action[1] == '\0')
+				action = NULL;
+			else
+				action = savestr(action);
+		}
 		if (trap[signo])
 			ckfree(trap[signo]);
 		trap[signo] = action;
@@ -136,7 +153,7 @@
 clear_traps() {
 	char **tp;
 
-	for (tp = trap ; tp <= &trap[NSIG] ; tp++) {
+	for (tp = trap ; tp < &trap[NSIG] ; tp++) {
 		if (*tp && **tp) {	/* trap not NULL or SIG_IGN */
 			INTOFF;
 			ckfree(*tp);
@@ -155,13 +172,13 @@
  * out what it should be set to.
  */
 
-long
+void
 setsignal(signo)
 	int signo;
 {
 	int action;
-	sig_t sigact = SIG_DFL;
 	char *t;
+	struct sigaction act;
 
 	if ((t = trap[signo]) == NULL)
 		action = S_DFL;
@@ -204,15 +221,15 @@
 		/*
 		 * current setting unknown
 		 */
-		if (!getsigaction(signo, &sigact)) {
+		if (sigaction(signo, 0, &act) == -1) {
 			/*
 			 * Pretend it worked; maybe we should give a warning
 			 * here, but other shells don't. We don't alter
 			 * sigmode, so that we retry every time.
 			 */
-			return 0;
+			return;
 		}
-		if (sigact == SIG_IGN) {
+		if (act.sa_handler == SIG_IGN) {
 			if (mflag && (signo == SIGTSTP ||
 			     signo == SIGTTIN || signo == SIGTTOU)) {
 				*t = S_IGN;	/* don't hard ignore these */
@@ -223,31 +240,21 @@
 		}
 	}
 	if (*t == S_HARD_IGN || *t == action)
-		return 0;
+		return;
 	switch (action) {
-		case S_DFL:	sigact = SIG_DFL;	break;
-		case S_CATCH:  	sigact = onsig;		break;
-		case S_IGN:	sigact = SIG_IGN;	break;
+	case S_CATCH:
+		act.sa_handler = onsig;
+		break;
+	case S_IGN:
+		act.sa_handler = SIG_IGN;
+		break;
+	default:
+		act.sa_handler = SIG_DFL;
 	}
 	*t = action;
-	siginterrupt(signo, 1);
-	return (long)signal(signo, sigact);
-}
-
-/*
- * Return the current setting for sig w/o changing it.
- */
-static int
-getsigaction(signo, sigact)
-	int signo;
-	sig_t *sigact;
-{
-	struct sigaction sa;
-
-	if (sigaction(signo, (struct sigaction *)0, &sa) == -1)
-		return 0;
-	*sigact = (sig_t) sa.sa_handler;
-	return 1;
+	act.sa_flags = 0;
+	sigemptyset(&act.sa_mask);
+	sigaction(signo, &act, 0);
 }
 
 /*
@@ -273,7 +280,7 @@
 	char *sm;
 
 	clear_traps();
-	for (sm = sigmode ; sm < sigmode + NSIG ; sm++) {
+	for (sm = sigmode ; sm < sigmode + NSIG - 1; sm++) {
 		if (*sm == S_IGN)
 			*sm = S_HARD_IGN;
 	}
@@ -290,7 +297,6 @@
 onsig(signo)
 	int signo;
 {
-	signal(signo, onsig);
 	if (signo == SIGINT && trap[SIGINT] == NULL) {
 		onint();
 		return;
@@ -315,7 +321,7 @@
 		for (i = 1 ; ; i++) {
 			if (gotsig[i - 1])
 				break;
-			if (i >= NSIG)
+			if (i >= NSIG - 1)
 				goto done;
 		}
 		gotsig[i - 1] = 0;
@@ -345,6 +351,7 @@
 	setsignal(SIGINT);
 	setsignal(SIGQUIT);
 	setsignal(SIGTERM);
+	chkmail(1);
 	is_interactive = on;
 }
 
@@ -362,6 +369,9 @@
 	char *p;
 
 	TRACE(("exitshell(%d) pid=%d\n", status, getpid()));
+#ifdef HETIO
+	hetio_reset_term();
+#endif
 	if (setjmp(loc1.loc)) {
 		goto l1;
 	}
@@ -380,4 +390,33 @@
 #endif
 l2:   _exit(status);
 	/* NOTREACHED */
+}
+
+int decode_signal(const char *string, int minsig)
+{
+	int signo;
+
+	if (is_number(string)) {
+		signo = atoi(string);
+		if (signo >= NSIG) {
+			return -1;
+		}
+		return signo;
+	}
+
+	signo = minsig;
+	if (!signo) {
+		goto zero;
+	}
+	for (; signo < NSIG; signo++) {
+		if (!strcasecmp(string, &(signal_names[signo])[3])) {
+			return signo;
+		}
+zero:
+		if (!strcasecmp(string, signal_names[signo])) {
+			return signo;
+		}
+	}
+
+	return -1;
 }
diff -rud ash-0.3.8.orig/trap.h ash-0.3.8.static/trap.h
--- ash-0.3.8.orig/trap.h	Mon May 22 06:18:47 2000
+++ ash-0.3.8.static/trap.h	Wed Jul 11 15:51:00 2001
@@ -42,9 +42,10 @@
 
 int trapcmd __P((int, char **));
 void clear_traps __P((void));
-long setsignal __P((int));
+void setsignal __P((int));
 void ignoresig __P((int));
 void onsig __P((int));
 void dotrap __P((void));
 void setinteractive __P((int));
 void exitshell __P((int)) __attribute__((noreturn));
+int decode_signal __P((const char *, int));
