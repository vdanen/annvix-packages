diff -uNp t1/arch/i386/kernel/Makefile.dc08-2.orig t1/arch/i386/kernel/Makefile
--- t1/arch/i386/kernel/Makefile.dc08-2.orig	2003-02-13 05:17:53.000000000 +0100
+++ t1/arch/i386/kernel/Makefile	2003-02-13 05:20:03.000000000 +0100
@@ -31,6 +31,7 @@ endif
 endif
 
 obj-$(CONFIG_MCA)		+= mca.o
+obj-$(CONFIG_E820_PROC)  	+= e820.o
 obj-$(CONFIG_MTRR)		+= mtrr.o
 obj-$(CONFIG_X86_MSR)		+= msr.o
 obj-$(CONFIG_X86_CPUID)		+= cpuid.o
--- linux/arch/i386/kernel/e820.c.chmou	Wed Feb  7 11:54:11 2001
+++ linux/arch/i386/kernel/e820.c	Wed Feb  7 11:54:11 2001
@@ -0,0 +1,80 @@
+#include <linux/config.h>
+#include <linux/kernel.h>
+#include <linux/init.h>      /* for module_init/exit */
+#include <linux/proc_fs.h>
+#include <linux/module.h>
+#include <linux/version.h>
+#include <linux/types.h>
+
+#include <asm/e820.h>
+
+extern struct e820map e820;
+struct proc_dir_entry *e820_proc_entry;
+
+static int e820_proc_output(char *buffer, int bufsize)
+{
+        int i,bufpos=0;
+
+        for (i = 0; i < e820.nr_map; i++) {
+		/* FIXME: check for overflow */
+                bufpos += sprintf(buffer+bufpos,"%016Lx @ %016Lx ", 
+                        e820.map[i].size, e820.map[i].addr);
+                switch (e820.map[i].type) {
+                case E820_RAM:  bufpos += sprintf(buffer+bufpos,"(usable)\n");
+                                break;
+                case E820_RESERVED:
+                                bufpos += sprintf(buffer+bufpos,"(reserved)\n");
+                                break;
+                case E820_ACPI:
+                                bufpos += sprintf(buffer+bufpos,"(ACPI data)\n");
+                                break;
+                case E820_NVS:
+                                bufpos += sprintf(buffer+bufpos,"(ACPI NVS)\n");
+                                break;
+                default:        bufpos += sprintf(buffer+bufpos,"type %lu\n", e820.map[i].type);
+                                break;
+                }
+        }
+	return bufpos;
+}
+
+
+
+
+
+
+static int e820_read_proc(char *page, char **start, off_t off,
+                         int count, int *eof, void *data)
+{
+        int len = e820_proc_output (page,4096);
+        if (len <= off+count) *eof = 1;
+        *start = page + off;
+        len -= off;
+        if (len>count) len = count;
+        if (len<0) len = 0;
+        return len;
+}
+
+int e820_module_init(void)
+{        
+        /* /proc/e820info probably isn't the best place for it, need
+           to find a better one */
+	e820_proc_entry = create_proc_entry ("e820info", 0, NULL);
+	if (e820_proc_entry==NULL)
+		return -EIO;
+
+	e820_proc_entry->read_proc = e820_read_proc;
+	e820_proc_entry->owner = THIS_MODULE;
+
+	return 0;
+}
+
+
+void e820_module_exit(void)
+{
+	 remove_proc_entry ("e820info", e820_proc_entry);
+}
+
+module_init(e820_module_init);
+module_exit(e820_module_exit);
+
--- linux/arch/i386/config.in.chmou	Wed Feb  7 11:35:36 2001
+++ linux/arch/i386/config.in	Wed Feb  7 11:54:11 2001
@@ -139,6 +139,7 @@
 tristate '/dev/cpu/microcode - Intel IA32 CPU microcode support' CONFIG_MICROCODE
 tristate '/dev/cpu/*/msr - Model-specific register support' CONFIG_X86_MSR
 tristate '/dev/cpu/*/cpuid - CPU information support' CONFIG_X86_CPUID
+bool 'E820 proc support' CONFIG_E820_PROC
 
 choice 'High Memory Support' \
 	"off    CONFIG_NOHIGHMEM \
