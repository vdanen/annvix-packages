diff -Nurp -X /Data/dontdiff -X /Data/dontdiff2 patched/sound/pci/emu10k1/emu10k1.c patched/sound.cvs/pci/emu10k1/emu10k1.c
--- patched/sound/pci/emu10k1/emu10k1.c	2003-07-25 13:39:38.000000000 +0300
+++ patched/sound.cvs/pci/emu10k1/emu10k1.c	2003-08-29 12:22:27.000000000 +0300
@@ -170,7 +170,10 @@ static int __devinit snd_card_emu10k1_pr
 	}
 #endif
  
-	if (emu->audigy) {
+	if (emu->audigy && (emu->revision == 4) ) {
+		strcpy(card->driver, "Audigy2");
+		strcpy(card->shortname, "Sound Blaster Audigy2");
+	} else if (emu->audigy) {
 		strcpy(card->driver, "Audigy");
 		strcpy(card->shortname, "Sound Blaster Audigy");
 	} else if (emu->APS) {
diff -Nurp -X /Data/dontdiff -X /Data/dontdiff2 patched/sound/pci/emu10k1/emufx.c patched/sound.cvs/pci/emu10k1/emufx.c
--- patched/sound/pci/emu10k1/emufx.c	2003-07-25 13:39:38.000000000 +0300
+++ patched/sound.cvs/pci/emu10k1/emufx.c	2003-08-29 12:22:27.000000000 +0300
@@ -364,12 +364,12 @@ static int snd_emu10k1_gpr_ctl_put(snd_k
 		case EMU10K1_GPR_TRANSLATION_TABLE100:
 			snd_emu10k1_ptr_write(emu, emu->gpr_base + ctl->gpr[i], 0, db_table[val]);
 			break;
-		case EMU10K1_GRP_TRANSLATION_BASS:
+		case EMU10K1_GPR_TRANSLATION_BASS:
 			snd_runtime_check((ctl->count % 5) == 0 && (ctl->count / 5) == ctl->vcount, change = -EIO; goto __error);
 			for (j = 0; j < 5; j++)
 				snd_emu10k1_ptr_write(emu, emu->gpr_base + ctl->gpr[j * ctl->vcount + i], 0, bass_table[val][j]);
 			break;
-		case EMU10K1_GRP_TRANSLATION_TREBLE:
+		case EMU10K1_GPR_TRANSLATION_TREBLE:
 			snd_runtime_check((ctl->count % 5) == 0 && (ctl->count / 5) == ctl->vcount, change = -EIO; goto __error);
 			for (j = 0; j < 5; j++)
 				snd_emu10k1_ptr_write(emu, emu->gpr_base + ctl->gpr[j * ctl->vcount + i], 0, treble_table[val][j]);
@@ -1235,6 +1235,7 @@ static void __devinit snd_emu10k1_init_s
  */
 
 #define A_GPR_ACCU 0xd6
+#define A_GPR_COND 0xd7
 
 static int __devinit _snd_emu10k1_audigy_init_efx(emu10k1_t *emu)
 {
@@ -1434,7 +1435,7 @@ A_OP(icode, &ptr, iMAC0, A_GPR(var), A_G
 	ctl->min = 0;
 	ctl->max = 40;
 	ctl->value[0] = ctl->value[1] = 20;
-	ctl->translation = EMU10K1_GRP_TRANSLATION_BASS;
+	ctl->translation = EMU10K1_GPR_TRANSLATION_BASS;
 	ctl = &controls[nctl + 1];
 	ctl->id.iface = SNDRV_CTL_ELEM_IFACE_MIXER;
 	strcpy(ctl->id.name, "Tone Control - Treble");
@@ -1443,7 +1444,7 @@ A_OP(icode, &ptr, iMAC0, A_GPR(var), A_G
 	ctl->min = 0;
 	ctl->max = 40;
 	ctl->value[0] = ctl->value[1] = 20;
-	ctl->translation = EMU10K1_GRP_TRANSLATION_TREBLE;
+	ctl->translation = EMU10K1_GPR_TRANSLATION_TREBLE;
 
 #define BASS_GPR	0x8c
 #define TREBLE_GPR	0x96
@@ -1502,13 +1503,7 @@ A_OP(icode, &ptr, iMAC0, A_GPR(var), A_G
 		A_OP(icode, &ptr, iMAC0, A_GPR(playback+1+SND_EMU10K1_PLAYBACK_CHANNELS), A_C_00000000, A_GPR(gpr+1), A_GPR(playback+1+SND_EMU10K1_PLAYBACK_CHANNELS));
 		snd_emu10k1_init_stereo_control(&controls[nctl++], "Wave Master Playback Volume", gpr, 0);
 		gpr += 2;
-	}
-
-	/* digital outputs */
-	A_PUT_STEREO_OUTPUT(A_EXTOUT_FRONT_L, A_EXTOUT_FRONT_R, playback + SND_EMU10K1_PLAYBACK_CHANNELS);
-	A_PUT_STEREO_OUTPUT(A_EXTOUT_REAR_L, A_EXTOUT_REAR_R, playback+2 + SND_EMU10K1_PLAYBACK_CHANNELS);
-	A_PUT_OUTPUT(A_EXTOUT_CENTER, playback+4 + SND_EMU10K1_PLAYBACK_CHANNELS);
-	A_PUT_OUTPUT(A_EXTOUT_LFE, playback+5 + SND_EMU10K1_PLAYBACK_CHANNELS);
+	}	
 
 	/* analog speakers */
 	if (emu->revision == 4) { /* audigy2 */
@@ -1523,6 +1518,29 @@ A_OP(icode, &ptr, iMAC0, A_GPR(var), A_G
 	/* headphone */
 	A_PUT_STEREO_OUTPUT(A_EXTOUT_HEADPHONE_L, A_EXTOUT_HEADPHONE_R, playback + SND_EMU10K1_PLAYBACK_CHANNELS);
 
+	/* digital outputs */
+//	A_PUT_STEREO_OUTPUT(A_EXTOUT_FRONT_L, A_EXTOUT_FRONT_R, playback + SND_EMU10K1_PLAYBACK_CHANNELS);
+
+	/* IEC958 Optical Raw Playback Switch */ 
+	icode->gpr_map[gpr++] = 0x1008;
+	icode->gpr_map[gpr++] = 0xffff0000;
+	for (z = 0; z < 2; z++) {
+		A_OP(icode, &ptr, iMAC0, A_GPR(tmp + 2), A_FXBUS(FXBUS_PT_LEFT + z), A_C_00000000, A_C_00000000);
+		A_OP(icode, &ptr, iSKIP, A_GPR_COND, A_GPR_COND, A_GPR(gpr - 2), A_C_00000001);
+		A_OP(icode, &ptr, iACC3, A_GPR(tmp + 2), A_C_00000000, A_C_00010000, A_GPR(tmp + 2));
+		A_OP(icode, &ptr, iANDXOR, A_GPR(tmp + 2), A_GPR(tmp + 2), A_GPR(gpr - 1), A_C_00000000);
+		A_SWITCH(icode, &ptr, tmp + 0, tmp + 2, gpr + z);
+		A_SWITCH_NEG(icode, &ptr, tmp + 1, gpr + z);
+		A_SWITCH(icode, &ptr, tmp + 1, playback + SND_EMU10K1_PLAYBACK_CHANNELS + z, tmp + 1);
+		A_OP(icode, &ptr, iACC3, A_EXTOUT(A_EXTOUT_FRONT_L + z), A_GPR(tmp + 0), A_GPR(tmp + 1), A_C_00000000);
+	}
+	snd_emu10k1_init_stereo_onoff_control(controls + nctl++, "IEC958 Optical Raw Playback Switch", gpr, 0);
+	gpr += 2;
+	
+	A_PUT_STEREO_OUTPUT(A_EXTOUT_REAR_L, A_EXTOUT_REAR_R, playback+2 + SND_EMU10K1_PLAYBACK_CHANNELS);
+	A_PUT_OUTPUT(A_EXTOUT_CENTER, playback+4 + SND_EMU10K1_PLAYBACK_CHANNELS);
+	A_PUT_OUTPUT(A_EXTOUT_LFE, playback+5 + SND_EMU10K1_PLAYBACK_CHANNELS);
+
 	/* ADC buffer */
 	A_PUT_OUTPUT(A_EXTOUT_ADC_CAP_L, capture);
 	A_PUT_OUTPUT(A_EXTOUT_ADC_CAP_R, capture+1);
@@ -1946,7 +1964,7 @@ static int __devinit _snd_emu10k1_init_e
 	ctl->min = 0;
 	ctl->max = 40;
 	ctl->value[0] = ctl->value[1] = 20;
-	ctl->translation = EMU10K1_GRP_TRANSLATION_BASS;
+	ctl->translation = EMU10K1_GPR_TRANSLATION_BASS;
 	ctl = &controls[i + 1];
 	ctl->id.iface = SNDRV_CTL_ELEM_IFACE_MIXER;
 	strcpy(ctl->id.name, "Tone Control - Treble");
@@ -1955,7 +1973,7 @@ static int __devinit _snd_emu10k1_init_e
 	ctl->min = 0;
 	ctl->max = 40;
 	ctl->value[0] = ctl->value[1] = 20;
-	ctl->translation = EMU10K1_GRP_TRANSLATION_TREBLE;
+	ctl->translation = EMU10K1_GPR_TRANSLATION_TREBLE;
 
 #define BASS_GPR	0x8c
 #define TREBLE_GPR	0x96
diff -Nurp -X /Data/dontdiff -X /Data/dontdiff2 patched/sound/pci/emu10k1/emupcm.c patched/sound.cvs/pci/emu10k1/emupcm.c
--- patched/sound/pci/emu10k1/emupcm.c	2003-04-09 18:00:06.000000000 +0300
+++ patched/sound.cvs/pci/emu10k1/emupcm.c	2003-08-29 12:22:27.000000000 +0300
@@ -666,8 +666,11 @@ static snd_pcm_uframes_t snd_emu10k1_pla
 #else	/* EMU10K1 Open Source code from Creative */
 	if (ptr < epcm->ccca_start_addr)
 		ptr += runtime->buffer_size - epcm->ccca_start_addr;
-	else
+	else {
 		ptr -= epcm->ccca_start_addr;
+		if (ptr >= runtime->buffer_size)
+			ptr -= runtime->buffer_size;
+	}
 #endif
 	// printk("ptr = 0x%x, buffer_size = 0x%x, period_size = 0x%x\n", ptr, runtime->buffer_size, runtime->period_size);
 	return ptr;
