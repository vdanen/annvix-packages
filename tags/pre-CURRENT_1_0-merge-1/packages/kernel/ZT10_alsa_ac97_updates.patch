diff -Nurp -X /Data/dontdiff -X /Data/dontdiff2 patched/sound/pci/ac97/ac97_codec.c patched/sound.cvs/pci/ac97/ac97_codec.c
--- patched/sound/pci/ac97/ac97_codec.c	2003-07-01 13:07:54.000000000 +0300
+++ patched/sound.cvs/pci/ac97/ac97_codec.c	2003-08-28 18:36:44.000000000 +0300
@@ -64,7 +64,7 @@ static const ac97_codec_id_t snd_ac97_co
 { 0x414b4d00, 0xffffff00, "Asahi Kasei",	NULL,	NULL },
 { 0x41445300, 0xffffff00, "Analog Devices",	NULL,	NULL },
 { 0x414c4300, 0xffffff00, "Realtek",		NULL,	NULL },
-{ 0x414c4700, 0xffffff00, "Avance Logic",	NULL,	NULL },
+{ 0x414c4700, 0xffffff00, "Realtek",		NULL,	NULL },
 { 0x434d4900, 0xffffff00, "C-Media Electronics", NULL,	NULL },
 { 0x43525900, 0xffffff00, "Cirrus Logic",	NULL,	NULL },
 { 0x43585400, 0xffffff00, "Conexant",           NULL,	NULL },
@@ -103,12 +103,15 @@ static const ac97_codec_id_t snd_ac97_co
 { 0x41445370, 0xffffffff, "AD1980",		patch_ad1980,	NULL },
 { 0x41445372, 0xffffffff, "AD1981A",		patch_ad1881,	NULL },
 { 0x41445374, 0xffffffff, "AD1981B",		patch_ad1881,	NULL },
-{ 0x41445375, 0xffffffff, "AD1985",		patch_ad1980,	NULL },
+{ 0x41445375, 0xffffffff, "AD1985",		patch_ad1985,	NULL },
 { 0x414c4300, 0xfffffff0, "RL5306",	 	NULL,		NULL },
 { 0x414c4310, 0xfffffff0, "RL5382", 		NULL,		NULL },
 { 0x414c4320, 0xfffffff0, "RL5383", 		NULL,		NULL },
 { 0x414c4710, 0xfffffff0, "ALC200/200P",	NULL,		NULL },
 { 0x414c4720, 0xfffffff0, "ALC650",		patch_alc650,	NULL },
+{ 0x414c4721, 0xfffffff0, "ALC650D",		patch_alc650,	NULL },
+{ 0x414c4722, 0xfffffff0, "ALC650E",		patch_alc650,	NULL },
+{ 0x414c4723, 0xfffffff0, "ALC650F",		patch_alc650,	NULL },
 { 0x414c4730, 0xffffffff, "ALC101",		NULL,		NULL },
 { 0x414c4740, 0xfffffff0, "ALC202",		NULL,		NULL },
 { 0x414c4750, 0xfffffff0, "ALC250",		NULL,		NULL },
@@ -545,7 +548,7 @@ int snd_ac97_put_single(snd_kcontrol_t *
 #define AC97_DOUBLE(xname, reg, shift_left, shift_right, mask, invert) \
 { .iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname), .info = snd_ac97_info_double, \
   .get = snd_ac97_get_double, .put = snd_ac97_put_double, \
-  .private_value = reg | (shift_left << 8) | (shift_right << 12) | (mask << 16) | (invert << 24) }
+  .private_value = (reg) | ((shift_left) << 8) | ((shift_right) << 12) | ((mask) << 16) | ((invert) << 24) }
 
 static int snd_ac97_info_double(snd_kcontrol_t *kcontrol, snd_ctl_elem_info_t * uinfo)
 {
@@ -599,16 +602,6 @@ static int snd_ac97_put_double(snd_kcont
 				    (val1 << shift_left) | (val2 << shift_right));
 }
 
-static const snd_kcontrol_new_t snd_ac97_controls_master[2] = {
-AC97_SINGLE("Master Playback Switch", AC97_MASTER, 15, 1, 1),
-AC97_DOUBLE("Master Playback Volume", AC97_MASTER, 8, 0, 31, 1)
-};
-
-static const snd_kcontrol_new_t snd_ac97_controls_headphone[2] = {
-AC97_SINGLE("Headphone Playback Switch", AC97_HEADPHONE, 15, 1, 1),
-AC97_DOUBLE("Headphone Playback Volume", AC97_HEADPHONE, 8, 0, 31, 1)
-};
-
 static const snd_kcontrol_new_t snd_ac97_controls_master_mono[2] = {
 AC97_SINGLE("Master Mono Playback Switch", AC97_MASTER_MONO, 15, 1, 1),
 AC97_SINGLE("Master Mono Playback Volume", AC97_MASTER_MONO, 0, 31, 1)
@@ -635,43 +628,17 @@ AC97_SINGLE("Mic Playback Volume", AC97_
 AC97_SINGLE("Mic Boost (+20dB)", AC97_MIC, 6, 1, 0)
 };
 
-static const snd_kcontrol_new_t snd_ac97_controls_line[2] = {
-AC97_SINGLE("Line Playback Switch", AC97_LINE, 15, 1, 1),
-AC97_DOUBLE("Line Playback Volume", AC97_LINE, 8, 0, 31, 1)
-};
-
-static const snd_kcontrol_new_t snd_ac97_controls_cd[2] = {
-AC97_SINGLE("CD Playback Switch", AC97_CD, 15, 1, 1),
-AC97_DOUBLE("CD Playback Volume", AC97_CD, 8, 0, 31, 1)
-};
-
-static const snd_kcontrol_new_t snd_ac97_controls_video[2] = {
-AC97_SINGLE("Video Playback Switch", AC97_VIDEO, 15, 1, 1),
-AC97_DOUBLE("Video Playback Volume", AC97_VIDEO, 8, 0, 31, 1)
-};
-
-static const snd_kcontrol_new_t snd_ac97_controls_aux[2] = {
-AC97_SINGLE("Aux Playback Switch", AC97_AUX, 15, 1, 1),
-AC97_DOUBLE("Aux Playback Volume", AC97_AUX, 8, 0, 31, 1)
-};
-
-static const snd_kcontrol_new_t snd_ac97_controls_pcm[2] = {
-AC97_SINGLE("PCM Playback Switch", AC97_PCM, 15, 1, 1),
-AC97_DOUBLE("PCM Playback Volume", AC97_PCM, 8, 0, 31, 1)
-};
-
-static const snd_kcontrol_new_t snd_ac97_controls_capture[3] = {
-{
+static const snd_kcontrol_new_t snd_ac97_control_capture_src = {
 	.iface = SNDRV_CTL_ELEM_IFACE_MIXER,
 	.name = "Capture Source",
 	.info = snd_ac97_info_mux,
 	.get = snd_ac97_get_mux,
 	.put = snd_ac97_put_mux,
-},
-AC97_SINGLE("Capture Switch", AC97_REC_GAIN, 15, 1, 1),
-AC97_DOUBLE("Capture Volume", AC97_REC_GAIN, 8, 0, 15, 0)
 };
 
+static const snd_kcontrol_new_t snd_ac97_control_capture_vol =
+AC97_DOUBLE("Capture Volume", AC97_REC_GAIN, 8, 0, 15, 0);
+
 static const snd_kcontrol_new_t snd_ac97_controls_mic_capture[2] = {
 AC97_SINGLE("Mic Capture Switch", AC97_REC_GAIN_MIC, 15, 1, 1),
 AC97_SINGLE("Mic Capture Volume", AC97_REC_GAIN_MIC, 0, 15, 0)
@@ -717,11 +684,6 @@ AC97_DOUBLE("Surround Playback Switch", 
 AC97_DOUBLE("Surround Playback Volume", AC97_SURROUND_MASTER, 8, 0, 31, 1),
 };
 
-static const snd_kcontrol_new_t snd_ac97_sigmatel_surround[2] = {
-AC97_SINGLE("Sigmatel Surround Playback Switch", AC97_HEADPHONE, 15, 1, 1),
-AC97_DOUBLE("Sigmatel Surround Playback Volume", AC97_HEADPHONE, 8, 0, 31, 1)
-};
-
 static const snd_kcontrol_new_t snd_ac97_control_eapd =
 AC97_SINGLE("External Amplifier Power Down", AC97_POWERDOWN, 15, 1, 0);
 
@@ -823,7 +785,13 @@ static int snd_ac97_spdif_default_put(sn
 					       AC97_CXR_SPDIF_MASK | AC97_CXR_COPYRGT,
 					       v);
 	} else {
+		unsigned short extst = ac97->regs[AC97_EXTENDED_STATUS];
+		snd_ac97_update_bits(ac97, AC97_EXTENDED_STATUS, AC97_EA_SPDIF, 0); /* turn off */
+
 		change |= snd_ac97_update_bits(ac97, AC97_SPDIF, 0x3fff, val);
+		if (extst & AC97_EA_SPDIF) {
+			snd_ac97_update_bits(ac97, AC97_EXTENDED_STATUS, AC97_EA_SPDIF, AC97_EA_SPDIF); /* turn on again */
+                }
 	}
 
 	return change;
@@ -893,17 +861,23 @@ const snd_kcontrol_new_t snd_ac97_contro
 	},
 };
 
-#define AD18XX_PCM_BITS(xname, codec, shift, mask) \
+#define AD18XX_PCM_BITS(xname, codec, lshift, rshift, mask) \
 { .iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, .info = snd_ac97_ad18xx_pcm_info_bits, \
   .get = snd_ac97_ad18xx_pcm_get_bits, .put = snd_ac97_ad18xx_pcm_put_bits, \
-  .private_value = codec | (shift << 8) | (mask << 16) }
+  .private_value = (codec) | ((lshift) << 8) | ((rshift) << 12) | ((mask) << 24) }
 
 static int snd_ac97_ad18xx_pcm_info_bits(snd_kcontrol_t *kcontrol, snd_ctl_elem_info_t * uinfo)
 {
-	int mask = (kcontrol->private_value >> 16) & 0xff;
+	ac97_t *ac97 = snd_kcontrol_chip(kcontrol);
+	int mask = (kcontrol->private_value >> 16) & 0x0f;
+	int lshift = (kcontrol->private_value >> 8) & 0x0f;
+	int rshift = (kcontrol->private_value >> 12) & 0x0f;
 
 	uinfo->type = mask == 1 ? SNDRV_CTL_ELEM_TYPE_BOOLEAN : SNDRV_CTL_ELEM_TYPE_INTEGER;
-	uinfo->count = 1;
+	if (lshift != rshift && (ac97->flags & AC97_STEREO_MUTES))
+		uinfo->count = 2;
+	else
+		uinfo->count = 1;
 	uinfo->value.integer.min = 0;
 	uinfo->value.integer.max = mask;
 	return 0;
@@ -913,10 +887,13 @@ static int snd_ac97_ad18xx_pcm_get_bits(
 {
 	ac97_t *ac97 = snd_kcontrol_chip(kcontrol);
 	int codec = kcontrol->private_value & 3;
-	int shift = (kcontrol->private_value >> 8) & 0xff;
+	int lshift = (kcontrol->private_value >> 8) & 0x0f;
+	int rshift = (kcontrol->private_value >> 12) & 0x0f;
 	int mask = (kcontrol->private_value >> 16) & 0xff;
 	
-	ucontrol->value.integer.value[0] = mask - ((ac97->spec.ad18xx.pcmreg[codec] >> shift) & mask);
+	ucontrol->value.integer.value[0] = mask - ((ac97->spec.ad18xx.pcmreg[codec] >> lshift) & mask);
+	if (lshift != rshift && (ac97->flags & AC97_STEREO_MUTES))
+		ucontrol->value.integer.value[1] = mask - ((ac97->spec.ad18xx.pcmreg[codec] >> rshift) & mask);
 	return 0;
 }
 
@@ -924,12 +901,18 @@ static int snd_ac97_ad18xx_pcm_put_bits(
 {
 	ac97_t *ac97 = snd_kcontrol_chip(kcontrol);
 	int codec = kcontrol->private_value & 3;
-	int shift = (kcontrol->private_value >> 8) & 0xff;
+	int lshift = (kcontrol->private_value >> 8) & 0x0f;
+	int rshift = (kcontrol->private_value >> 12) & 0x0f;
 	int mask = (kcontrol->private_value >> 16) & 0xff;
-	unsigned short val;
+	unsigned short val, valmask;
 	
-	val = mask - (ucontrol->value.integer.value[0] & mask);
-	return snd_ac97_ad18xx_update_pcm_bits(ac97, codec, mask << shift, val << shift);
+	val = (mask - (ucontrol->value.integer.value[0] & mask)) << lshift;
+	valmask = mask << lshift;
+	if (lshift != rshift && (ac97->flags & AC97_STEREO_MUTES)) {
+		val |= (mask - (ucontrol->value.integer.value[1] & mask)) << rshift;
+		valmask |= mask << rshift;
+	}
+	return snd_ac97_ad18xx_update_pcm_bits(ac97, codec, valmask, val);
 }
 
 #define AD18XX_PCM_VOLUME(xname, codec) \
@@ -970,22 +953,23 @@ static int snd_ac97_ad18xx_pcm_put_volum
 }
 
 static const snd_kcontrol_new_t snd_ac97_controls_ad18xx_pcm[2] = {
-AD18XX_PCM_BITS("PCM Playback Switch", 0, 15, 1),
+AD18XX_PCM_BITS("PCM Playback Switch", 0, 15, 7, 1),
 AD18XX_PCM_VOLUME("PCM Playback Volume", 0)
 };
 
 static const snd_kcontrol_new_t snd_ac97_controls_ad18xx_surround[2] = {
-AD18XX_PCM_BITS("Surround Playback Switch", 1, 15, 1),
+AD18XX_PCM_BITS("Surround Playback Switch", 1, 15, 7, 1),
 AD18XX_PCM_VOLUME("Surround Playback Volume", 1)
 };
 
 static const snd_kcontrol_new_t snd_ac97_controls_ad18xx_center[2] = {
-AD18XX_PCM_BITS("Center Playback Switch", 2, 15, 1),
-AD18XX_PCM_BITS("Center Playback Volume", 2, 8, 31)
+AD18XX_PCM_BITS("Center Playback Switch", 2, 15, 15, 1),
+AD18XX_PCM_BITS("Center Playback Volume", 2, 8, 8, 31)
 };
 
-static const snd_kcontrol_new_t snd_ac97_controls_ad18xx_lfe[1] = {
-AD18XX_PCM_BITS("LFE Playback Volume", 2, 0, 31)
+static const snd_kcontrol_new_t snd_ac97_controls_ad18xx_lfe[2] = {
+AD18XX_PCM_BITS("LFE Playback Switch", 2, 7, 7, 1),
+AD18XX_PCM_BITS("LFE Playback Volume", 2, 0, 0, 31)
 };
 
 /*
@@ -1138,11 +1122,79 @@ snd_kcontrol_t *snd_ac97_cnew(const snd_
 	return snd_ctl_new1(&template, ac97);
 }
 
+/*
+ * create mute switch(es) for normal stereo controls
+ */
+static int snd_ac97_cmute_new(snd_card_t *card, char *name, int reg, ac97_t *ac97)
+{
+	snd_kcontrol_t *kctl;
+	int stereo = 0;
+
+	if (ac97->flags & AC97_STEREO_MUTES) {
+		/* check whether both mute bits work */
+		unsigned short val, val1;
+		val = snd_ac97_read(ac97, reg);
+		val1 = val | 0x8080;
+		snd_ac97_write(ac97, reg, val1);
+		if (val1 == snd_ac97_read(ac97, reg))
+			stereo = 1;
+		snd_ac97_write(ac97, reg, val);
+	}
+	if (stereo) {
+		snd_kcontrol_new_t tmp = AC97_DOUBLE(name, reg, 15, 7, 1, 1);
+		tmp.index = ac97->num;
+		kctl = snd_ctl_new1(&tmp, ac97);
+	} else {
+		snd_kcontrol_new_t tmp = AC97_SINGLE(name, reg, 15, 1, 1);
+		tmp.index = ac97->num;
+		kctl = snd_ctl_new1(&tmp, ac97);
+	}
+	return snd_ctl_add(card, kctl);
+}
+
+/*
+ * create volumes for normal stereo controls
+ */
+static int snd_ac97_cvol_new(snd_card_t *card, char *name, int reg, unsigned int max, ac97_t *ac97)
+{
+	int err;
+	snd_kcontrol_new_t tmp = AC97_DOUBLE(name, reg, 8, 0, (unsigned int)max, 1);
+	tmp.index = ac97->num;
+	if ((err = snd_ctl_add(card, snd_ctl_new1(&tmp, ac97))) < 0)
+		return err;
+	snd_ac97_write_cache(ac97, reg,
+			     ((ac97->flags & AC97_STEREO_MUTES) ? 0x8080 : 0x8000) |
+			     (unsigned short)max | ((unsigned short)max << 8));
+	return 0;
+}
+
+/*
+ * create mute-switch and volumes for normal stereo controls
+ */
+static int snd_ac97_cmix_new(snd_card_t *card, const char *pfx, int reg, int check_res, ac97_t *ac97)
+{
+	int err;
+	char name[44];
+	unsigned char max;
+
+	sprintf(name, "%s Switch", pfx);
+	if ((err = snd_ac97_cmute_new(card, name, reg, ac97)) < 0)
+		return err;
+	sprintf(name, "%s Volume", pfx);
+	if (check_res)
+		snd_ac97_change_volume_params1(ac97, reg, &max);
+	else
+		max = 31; /* 5bit */
+	if ((err = snd_ac97_cvol_new(card, name, reg, max, ac97)) < 0)
+		return err;
+	return 0;
+}
+
+
 static int snd_ac97_mixer_build(ac97_t * ac97)
 {
 	snd_card_t *card = ac97->card;
 	snd_kcontrol_t *kctl;
-	const snd_kcontrol_new_t *knew;
 	int err;
 	unsigned int idx;
 	unsigned char max;
@@ -1150,14 +1202,8 @@ static int snd_ac97_mixer_build(ac97_t *
 	/* build master controls */
 	/* AD claims to remove this control from AD1887, although spec v2.2 does not allow this */
 	if (snd_ac97_try_volume_mix(ac97, AC97_MASTER)) {
-		if ((err = snd_ctl_add(card, snd_ac97_cnew(&snd_ac97_controls_master[0], ac97))) < 0)
-			return err;
-		if ((err = snd_ctl_add(card, kctl = snd_ac97_cnew(&snd_ac97_controls_master[1], ac97))) < 0)
+		if ((err = snd_ac97_cmix_new(card, "Master Playback", AC97_MASTER, 1, ac97)) < 0)
 			return err;
-		snd_ac97_change_volume_params1(ac97, AC97_MASTER, &max);
-		kctl->private_value &= ~(0xff << 16);
-		kctl->private_value |= (int)max << 16;
-		snd_ac97_write_cache(ac97, AC97_MASTER, 0x8000 | max | (max << 8));
 	}
 
 	ac97->regs[AC97_CENTER_LFE_MASTER] = 0x8080;
@@ -1200,15 +1246,11 @@ static int snd_ac97_mixer_build(ac97_t *
 
 	/* build headphone controls */
 	if (snd_ac97_try_volume_mix(ac97, AC97_HEADPHONE) || ac97->id == AC97_ID_STAC9708) {
-		knew = ac97->id == AC97_ID_STAC9708 ? snd_ac97_sigmatel_surround : snd_ac97_controls_headphone;
-		if ((err = snd_ctl_add(card, snd_ac97_cnew(knew, ac97))) < 0)
-			return err;
-		if ((err = snd_ctl_add(card, kctl = snd_ac97_cnew(knew + 1, ac97))) < 0)
+		const char *name = ac97->id == AC97_ID_STAC9708 ? 
+			"Sigmatel Surround Playback" :
+			"Headphone Playback";
+		if ((err = snd_ac97_cmix_new(card, name, AC97_HEADPHONE, 1, ac97)) < 0)
 			return err;
-		snd_ac97_change_volume_params1(ac97, AC97_HEADPHONE, &max);
-		kctl->private_value &= ~(0xff << 16);
-		kctl->private_value |= (int)max << 16;
-		snd_ac97_write_cache(ac97, AC97_HEADPHONE, 0x8000 | max | (max << 8));
 	}
 	
 	/* build master mono controls */
@@ -1270,70 +1312,73 @@ static int snd_ac97_mixer_build(ac97_t *
 	snd_ac97_write_cache(ac97, AC97_MIC, 0x8000 | max);
 
 	/* build Line controls */
-	for (idx = 0; idx < 2; idx++)
-		if ((err = snd_ctl_add(card, snd_ac97_cnew(&snd_ac97_controls_line[idx], ac97))) < 0)
-			return err;
-	snd_ac97_write_cache(ac97, AC97_LINE, 0x9f1f);
+	if ((err = snd_ac97_cmix_new(card, "Line Playback", AC97_LINE, 0, ac97)) < 0)
+		return err;
 	
 	/* build CD controls */
-	for (idx = 0; idx < 2; idx++)
-		if ((err = snd_ctl_add(card, snd_ac97_cnew(&snd_ac97_controls_cd[idx], ac97))) < 0)
-			return err;
-	snd_ac97_write_cache(ac97, AC97_CD, 0x9f1f);
+	if ((err = snd_ac97_cmix_new(card, "CD Playback", AC97_CD, 0, ac97)) < 0)
+		return err;
 	
 	/* build Video controls */
 	if (snd_ac97_try_volume_mix(ac97, AC97_VIDEO)) {
-		for (idx = 0; idx < 2; idx++)
-			if ((err = snd_ctl_add(card, snd_ac97_cnew(&snd_ac97_controls_video[idx], ac97))) < 0)
-				return err;
-		snd_ac97_write_cache(ac97, AC97_VIDEO, 0x9f1f);
+		if ((err = snd_ac97_cmix_new(card, "Video Playback", AC97_VIDEO, 0, ac97)) < 0)
+			return err;
 	}
 
 	/* build Aux controls */
 	if (snd_ac97_try_volume_mix(ac97, AC97_AUX)) {
-		for (idx = 0; idx < 2; idx++)
-			if ((err = snd_ctl_add(card, snd_ac97_cnew(&snd_ac97_controls_aux[idx], ac97))) < 0)
-				return err;
-		snd_ac97_write_cache(ac97, AC97_AUX, 0x9f1f);
+		if ((err = snd_ac97_cmix_new(card, "Aux Playback", AC97_AUX, 0, ac97)) < 0)
+			return err;
 	}
 
 	/* build PCM controls */
 	if (ac97->flags & AC97_AD_MULTI) {
+		unsigned short init_val;
+		if (ac97->flags & AC97_STEREO_MUTES)
+			init_val = 0x9f9f;
+		else
+			init_val = 0x9f1f;
 		for (idx = 0; idx < 2; idx++)
 			if ((err = snd_ctl_add(card, snd_ac97_cnew(&snd_ac97_controls_ad18xx_pcm[idx], ac97))) < 0)
 				return err;
-		ac97->spec.ad18xx.pcmreg[0] = 0x9f1f;
+		ac97->spec.ad18xx.pcmreg[0] = init_val;
 		if (ac97->scaps & AC97_SCAP_SURROUND_DAC) {
 			for (idx = 0; idx < 2; idx++)
 				if ((err = snd_ctl_add(card, snd_ac97_cnew(&snd_ac97_controls_ad18xx_surround[idx], ac97))) < 0)
 					return err;
-			ac97->spec.ad18xx.pcmreg[1] = 0x9f1f;
+			ac97->spec.ad18xx.pcmreg[1] = init_val;
 		}
 		if (ac97->scaps & AC97_SCAP_CENTER_LFE_DAC) {
 			for (idx = 0; idx < 2; idx++)
 				if ((err = snd_ctl_add(card, snd_ac97_cnew(&snd_ac97_controls_ad18xx_center[idx], ac97))) < 0)
 					return err;
-			if ((err = snd_ctl_add(card, snd_ac97_cnew(&snd_ac97_controls_ad18xx_lfe[0], ac97))) < 0)
-				return err;
-			ac97->spec.ad18xx.pcmreg[2] = 0x9f1f;
+			for (idx = 0; idx < 2; idx++)
+				if ((err = snd_ctl_add(card, snd_ac97_cnew(&snd_ac97_controls_ad18xx_lfe[idx], ac97))) < 0)
+					return err;
+			ac97->spec.ad18xx.pcmreg[2] = init_val;
 		}
+		snd_ac97_write_cache(ac97, AC97_PCM, init_val);
 	} else {
-		unsigned int pcm_ctrls = 2;
+		if ((err = snd_ac97_cmute_new(card, "PCM Playback Switch", AC97_PCM, ac97)) < 0)
+			return err;
 		/* FIXME: C-Media chips have no PCM volume!! */
 		if (/*ac97->id == 0x434d4941 ||*/
 		    ac97->id == 0x434d4942 ||
 		    ac97->id == 0x434d4961)
-			pcm_ctrls = 1;
-		for (idx = 0; idx < pcm_ctrls; idx++)
-			if ((err = snd_ctl_add(card, snd_ac97_cnew(&snd_ac97_controls_pcm[idx], ac97))) < 0)
+			snd_ac97_write_cache(ac97, AC97_PCM, 0x9f1f);
+		else {
+			if ((err = snd_ac97_cvol_new(card, "PCM Playback Volume", AC97_PCM, 31, ac97)) < 0)
 				return err;
+		}
 	}
-	snd_ac97_write_cache(ac97, AC97_PCM, 0x9f1f);
 
 	/* build Capture controls */
-	for (idx = 0; idx < 3; idx++)
-		if ((err = snd_ctl_add(card, snd_ac97_cnew(&snd_ac97_controls_capture[idx], ac97))) < 0)
-			return err;
+	if ((err = snd_ctl_add(card, snd_ac97_cnew(&snd_ac97_control_capture_src, ac97))) < 0)
+		return err;
+	if ((err = snd_ac97_cmute_new(card, "Capture Switch", AC97_REC_GAIN, ac97)) < 0)
+		return err;
+	if ((err = snd_ctl_add(card, snd_ac97_cnew(&snd_ac97_control_capture_vol, ac97))) < 0)
+		return err;
 	snd_ac97_write_cache(ac97, AC97_REC_SEL, 0x0000);
 	snd_ac97_write_cache(ac97, AC97_REC_GAIN, 0x0000);
 
@@ -1592,6 +1637,7 @@ int snd_ac97_mixer(snd_card_t * card, ac
 	ac97_t *ac97;
 	char name[64];
 	unsigned long end_time;
+	unsigned int reg;
 	static snd_device_ops_t ops = {
 		.dev_free =	snd_ac97_dev_free,
 	};
@@ -1635,6 +1681,20 @@ int snd_ac97_mixer(snd_card_t * card, ac
 		snd_ac97_free(ac97);
 		return -EIO;
 	}
+	/* AC97 audio codec chip revision detection. */
+	/* Currently only Realtek ALC650 detection implemented. */
+	switch(ac97->id & 0xfffffff0) {
+	case 0x414c4720:        /* ALC650 */
+		reg = snd_ac97_read(ac97, AC97_ALC650_REVISION);
+		if (((reg & 0x3f) >= 0) && ((reg & 0x3f) < 3))
+			ac97->id = 0x414c4720;          /* Old version */
+		else if (((reg & 0x3f) >= 3) && ((reg & 0x3f) < 0x10))
+			ac97->id = 0x414c4721;          /* D version */
+		else if ((reg&0x30) == 0x10)
+			ac97->id = 0x414c4722;          /* E version */
+		else if ((reg&0x30) == 0x20)
+			ac97->id = 0x414c4723;          /* F version */
+        }
 	
 	/* test for AC'97 */
 	if (! (ac97->scaps & AC97_SCAP_AUDIO)) {
@@ -2235,6 +2295,14 @@ static int swap_surround(ac97_t *ac97)
 	return 0;
 }
 
+static int tune_ad_sharing(ac97_t *ac97)
+{
+	unsigned short scfg;
+	/* Turn on OMS bit to route microphone to back panel */
+	scfg = snd_ac97_read(ac97, AC97_AD_SERIAL_CFG);
+	snd_ac97_write_cache(ac97, AC97_AD_SERIAL_CFG, scfg | 0x0200);
+	return swap_headphone(ac97, 1);
+}
 
 /**
  * snd_ac97_tune_hardware - tune up the hardware
@@ -2253,7 +2321,10 @@ int snd_ac97_tune_hardware(ac97_t *ac97,
 	snd_assert(quirk, return -EINVAL);
 
 	for (; quirk->vendor; quirk++) {
-		if (quirk->vendor == ac97->subsystem_vendor && quirk->device == ac97->subsystem_device) {
+		if (quirk->vendor != ac97->subsystem_vendor)
+			continue;
+		if ((! quirk->mask && quirk->device == ac97->subsystem_device) ||
+		    quirk->device == (quirk->mask & ac97->subsystem_device)) {
 			snd_printdd("ac97 quirk for %s (%04x:%04x)\n", quirk->name, ac97->subsystem_vendor, ac97->subsystem_device);
 			switch (quirk->type) {
 			case AC97_TUNE_HP_ONLY:
@@ -2262,6 +2333,8 @@ int snd_ac97_tune_hardware(ac97_t *ac97,
 				return swap_headphone(ac97, 0);
 			case AC97_TUNE_SWAP_SURROUND:
 				return swap_surround(ac97);
+			case AC97_TUNE_AD_SHARING:
+				return tune_ad_sharing(ac97);
 			}
 			snd_printk(KERN_ERR "invalid quirk type %d for %s\n", quirk->type, quirk->name);
 			return -EINVAL;
diff -Nurp -X /Data/dontdiff -X /Data/dontdiff2 patched/sound/pci/ac97/ac97_local.h patched/sound.cvs/pci/ac97/ac97_local.h
--- patched/sound/pci/ac97/ac97_local.h	2003-06-17 21:43:32.000000000 +0300
+++ patched/sound.cvs/pci/ac97/ac97_local.h	2003-08-27 19:17:32.000000000 +0300
@@ -25,7 +25,7 @@
 #define AC97_SINGLE(xname, reg, shift, mask, invert) \
 { .iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, .info = snd_ac97_info_single, \
   .get = snd_ac97_get_single, .put = snd_ac97_put_single, \
-  .private_value = reg | (shift << 8) | (mask << 16) | (invert << 24) }
+  .private_value = (reg) | ((shift) << 8) | ((mask) << 16) | ((invert) << 24) }
 
 /* ac97_codec.c */
 extern const char *snd_ac97_stereo_enhancements[];
diff -Nurp -X /Data/dontdiff -X /Data/dontdiff2 patched/sound/pci/ac97/ac97_patch.c patched/sound.cvs/pci/ac97/ac97_patch.c
--- patched/sound/pci/ac97/ac97_patch.c	2003-07-26 12:46:14.000000000 +0300
+++ patched/sound.cvs/pci/ac97/ac97_patch.c	2003-08-28 18:36:44.000000000 +0300
@@ -695,6 +695,28 @@ int patch_ad1886(ac97_t * ac97)
 	return 0;
 }
 
+/* MISC bits */
+#define AC97_AD198X_MBC		0x0003	/* mic boost */
+#define AC97_AD198X_MBC_20	0x0000	/* +20dB */
+#define AC97_AD198X_MBC_10	0x0001	/* +10dB */
+#define AC97_AD198X_MBC_30	0x0002	/* +30dB */
+#define AC97_AD198X_VREFD	0x0004	/* VREF high-Z */
+#define AC97_AD198X_VREFH	0x0008	/* 2.25V, 3.7V */
+#define AC97_AD198X_VREF_0	0x000c	/* 0V */
+#define AC97_AD198X_SRU		0x0010	/* sample rate unlock */
+#define AC97_AD198X_LOSEL	0x0020	/* LINE_OUT amplifiers input select */
+#define AC97_AD198X_2MIC	0x0040	/* 2-channel mic select */
+#define AC97_AD198X_SPRD	0x0080	/* SPREAD enable */
+#define AC97_AD198X_DMIX0	0x0100	/* downmix mode: 0 = 6-to-4, 1 = 6-to-2 downmix */
+#define AC97_AD198X_DMIX1	0x0300	/* downmix mode: 1 = enabled */
+#define AC97_AD198X_HPSEL	0x0400	/* headphone amplifier input select */
+#define AC97_AD198X_CLDIS	0x0800	/* center/lfe disable */
+#define AC97_AD198X_LODIS	0x1000	/* LINE_OUT disable */
+#define AC97_AD198X_MSPLT	0x2000	/* mute split */
+#define AC97_AD198X_AC97NC	0x4000	/* AC97 no compatible mode */
+#define AC97_AD198X_DACZ	0x8000	/* DAC zero-fill mode */
+
+
 static int snd_ac97_ad1980_spdif_source_info(snd_kcontrol_t *kcontrol, snd_ctl_elem_info_t * uinfo)
 {
 	static char *texts[2] = { "AC-Link", "A/D Converter" };
@@ -754,8 +776,36 @@ int patch_ad1980(ac97_t * ac97)
 	ac97->build_ops = &patch_ad1980_build_ops;
 	/* Switch FRONT/SURROUND LINE-OUT/HP-OUT default connection */
 	/* it seems that most vendors connect line-out connector to headphone out of AC'97 */
+	/* Stereo mutes enabled */
 	misc = snd_ac97_read(ac97, AC97_AD_MISC);
-	snd_ac97_write_cache(ac97, AC97_AD_MISC, misc | 0x0420);
+	snd_ac97_write_cache(ac97, AC97_AD_MISC, misc |
+			     AC97_AD198X_LOSEL |
+			     AC97_AD198X_HPSEL |
+			     AC97_AD198X_MSPLT);
+	ac97->flags |= AC97_STEREO_MUTES;
+	return 0;
+}
+
+int patch_ad1985(ac97_t * ac97)
+{
+	unsigned short misc;
+	
+	patch_ad1881(ac97);
+	ac97->build_ops = &patch_ad1980_build_ops;
+	misc = snd_ac97_read(ac97, AC97_AD_MISC);
+	/* switch front/surround line-out/hp-out */
+	/* center/LFE, surround in High-Z mode */
+	/* AD-compatible mode */
+	/* Stereo mutes enabled */
+	snd_ac97_write_cache(ac97, AC97_AD_MISC, misc |
+			     AC97_AD198X_VREFD |
+			     AC97_AD198X_LOSEL |
+			     AC97_AD198X_HPSEL |
+			     AC97_AD198X_CLDIS |
+			     AC97_AD198X_LODIS |
+			     AC97_AD198X_MSPLT |
+			     AC97_AD198X_AC97NC);
+	ac97->flags |= AC97_STEREO_MUTES;
 	return 0;
 }
 
@@ -847,20 +897,22 @@ static struct snd_ac97_build_ops patch_a
 
 int patch_alc650(ac97_t * ac97)
 {
-	unsigned short val;
+	unsigned short val, reg;
 	int spdif = 0;
 
-	/* FIXME: set the below 1 if we can detect the chip rev.E correctly.
-	 *        this is used for switching mic and center/lfe, which needs
-	 *        resetting GPIO0 level on the older revision.
-	 */
 	ac97->build_ops = &patch_alc650_ops;
-	ac97->spec.dev_flags = 0;
+
+	/* revision E or F */
+	/* FIXME: what about revision D ? */
+	ac97->spec.dev_flags = (ac97->id == 0x414c4722 ||
+				ac97->id == 0x414c4723);
 
 	/* check spdif (should be only on rev.E) */
-	val = snd_ac97_read(ac97, AC97_EXTENDED_STATUS);
-	if (val & AC97_EA_SPCV)
-		spdif = 1;
+	if (ac97->spec.dev_flags) {
+		val = snd_ac97_read(ac97, AC97_EXTENDED_STATUS);
+		if (val & AC97_EA_SPCV)
+			spdif = 1;
+	}
 
 	if (spdif) {
 		/* enable spdif in */
diff -Nurp -X /Data/dontdiff -X /Data/dontdiff2 patched/sound/pci/ac97/ac97_patch.h patched/sound.cvs/pci/ac97/ac97_patch.h
--- patched/sound/pci/ac97/ac97_patch.h	2003-06-17 21:43:32.000000000 +0300
+++ patched/sound.cvs/pci/ac97/ac97_patch.h	2003-07-30 13:54:03.000000000 +0300
@@ -42,6 +42,7 @@ int patch_ad1881(ac97_t * ac97);
 int patch_ad1885(ac97_t * ac97);
 int patch_ad1886(ac97_t * ac97);
 int patch_ad1980(ac97_t * ac97);
+int patch_ad1985(ac97_t * ac97);
 int patch_alc650(ac97_t * ac97);
 int patch_cm9738(ac97_t * ac97);
 int patch_cm9739(ac97_t * ac97);
