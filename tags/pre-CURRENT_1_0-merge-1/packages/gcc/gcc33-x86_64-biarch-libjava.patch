2003-02-02  Gwenole Beauchesne  <gbeauchesne@mandrakesoft.com>

	* include/x86_64-signal.h: Fix native build with older glibc.

2003-01-24  Jakub Jelinek  <jakub@redhat.com>

	* include/x86_64-signal.h: Add -m32 support.

--- gcc-3.3.1/libjava/include/x86_64-signal.h.x86_64-biarch-libjava	2003-07-16 17:32:27.000000000 +0200
+++ gcc-3.3.1/libjava/include/x86_64-signal.h	2003-07-16 17:32:42.000000000 +0200
@@ -18,6 +18,14 @@ details.  */
 
 #ifdef __x86_64__
 
+#ifndef sigcontext_struct
+#define sigcontext_struct sigcontext
+#endif
+
+#ifndef SYS_sigaction
+#define SYS_sigaction __NR_sigaction
+#endif
+
 #define HANDLE_SEGV 1
 
 #define SIGNAL_HANDLER(_name)	\
@@ -81,16 +89,145 @@ while (0)  
  * go away if all systems ever have pthreads libraries that are
  * compiled with unwind info.  */
 
-#else /* __x86_64__ */
+#else /* i386 */
+
+#define HANDLE_SEGV 1
+#define HANDLE_FPE 1
+
+#define SIGNAL_HANDLER(_name)	\
+static void _name (int _dummy)
+
+#define MAKE_THROW_FRAME(_exception)					\
+do									\
+{									\
+  void **_p = (void **)&_dummy;						\
+  struct sigcontext *_regs = (struct sigcontext *)++_p;			\
+									\
+  /* Advance the program counter so that it is after the start of the	\
+     instruction:  the x86 exception handler expects			\
+     the PC to point to the instruction after a call. */		\
+  _regs->eip += 2;							\
+									\
+}									\
+while (0)
+
+#define HANDLE_DIVIDE_OVERFLOW						\
+do									\
+{									\
+  void **_p = (void **)&_dummy;						\
+  struct sigcontext *_regs = (struct sigcontext *)++_p;			\
+									\
+  register unsigned char *_eip = (unsigned char *)_regs->eip;		\
+									\
+  /* According to the JVM spec, "if the dividend is the negative	\
+   * integer of the smallest magnitude and the divisor is -1, then	\
+   * overflow occurs and the result is equal to the dividend.  Despite	\
+   * the overflow, no exception occurs".				\
+									\
+   * We handle this by inspecting the instruction which generated the	\
+   * signal and advancing eip to point to the following instruction.	\
+   * As the instructions are variable length it is necessary to do a	\
+   * little calculation to figure out where the following instruction	\
+   * actually is.							\
+									\
+   */									\
+									\
+  if (_eip[0] == 0xf7)							\
+    {									\
+      unsigned char _modrm = _eip[1];					\
+									\
+      if (_regs->eax == 0x80000000					\
+	  && ((_modrm >> 3) & 7) == 7) /* Signed divide */		\
+	{								\
+	  _regs->edx = 0; /* the remainder is zero */			\
+	  switch (_modrm >> 6)						\
+	    {								\
+	    case 0:							\
+	      if ((_modrm & 7) == 5)					\
+		_eip += 4;						\
+	      break;							\
+	    case 1:							\
+	      _eip += 1;						\
+	      break;							\
+	    case 2:							\
+	      _eip += 4;						\
+	      break;							\
+	    case 3:							\
+	      break;							\
+	    }								\
+	  _eip += 2;							\
+	  _regs->eip = (unsigned long)_eip;				\
+	  return;							\
+	}								\
+      else								\
+	{								\
+	  /* Advance the program counter so that it is after the start	\
+	     of the instruction: this is because the x86 exception	\
+	     handler expects the PC to point to the instruction after a	\
+	     call. */							\
+	  _regs->eip += 2;						\
+	}								\
+    }									\
+}									\
+while (0)
+
+/* We use old_kernel_sigaction here because we're calling the kernel
+   directly rather than via glibc.  The sigaction structure that the
+   syscall uses is a different shape from the one in userland and not
+   visible to us in a header file so we define it here.  */
+
+struct old_i386_kernel_sigaction {
+	void (*k_sa_handler) (int);
+	unsigned long k_sa_mask;
+	unsigned long k_sa_flags;
+	void (*sa_restorer) (void);
+};
+
+#define INIT_SEGV						\
+do								\
+  {								\
+    nullp = new java::lang::NullPointerException ();    	\
+    struct old_i386_kernel_sigaction kact;			\
+    kact.k_sa_handler = catch_segv;				\
+    kact.k_sa_mask = 0;						\
+    kact.k_sa_flags = 0;					\
+    syscall (SYS_sigaction, SIGSEGV, &kact, NULL);		\
+  }								\
+while (0)  
+
+#define INIT_FPE						\
+do								\
+  { 								\
+    arithexception = new java::lang::ArithmeticException 	\
+      (JvNewStringLatin1 ("/ by zero"));			\
+    struct old_i386_kernel_sigaction kact;			\
+    kact.k_sa_handler = catch_fpe;				\
+    kact.k_sa_mask = 0;						\
+    kact.k_sa_flags = 0;					\
+    syscall (SYS_sigaction, SIGFPE, &kact, NULL);		\
+  }								\
+while (0)  
 
-/* This is for the 32-bit subsystem on on x86-64.  Catching signals
-   doesn't yet work on that target.  */
+/* You might wonder why we use syscall(SYS_sigaction) in INIT_FPE
+ * instead of the standard sigaction().  This is necessary because of
+ * the shenanigans above where we increment the PC saved in the
+ * context and then return.  This trick will only work when we are
+ * called _directly_ by the kernel, because linuxthreads wraps signal
+ * handlers and its wrappers do not copy the sigcontext struct back
+ * when returning from a signal handler.  If we return from our divide
+ * handler to a linuxthreads wrapper, we will lose the PC adjustment
+ * we made and return to the faulting instruction again.  Using
+ * syscall(SYS_sigaction) causes our handler to be called directly
+ * by the kernel, bypassing any wrappers.
+
+ * Also, there is at the present time no unwind info in the
+ * linuxthreads library's signal handlers and so we can't unwind
+ * through them anyway.  
 
-#undef HANDLE_SEGV
-#undef HANDLE_FPE
+ * Finally, the code that glibc uses to return from a signal handler
+ * is subject to change.  */
 
-#define INIT_SEGV   do {} while (0)
-#define INIT_FPE   do {} while (0)
+#endif /* i386 */
 
-#endif /* __x86_64__ */
 #endif /* JAVA_SIGNAL_H */
+  
