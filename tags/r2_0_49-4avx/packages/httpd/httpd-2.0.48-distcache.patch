diff -Naur httpd-2.0.48/LAYOUT httpd-2.0.48.oden/LAYOUT
--- httpd-2.0.48/LAYOUT	2002-05-30 20:17:16.000000000 +0200
+++ httpd-2.0.48.oden/LAYOUT	2003-12-14 23:44:36.000000000 +0100
@@ -129,6 +129,7 @@
     ssl_scache_dbm.c ........ session cache via DBM file
     ssl_scache_shmcb.c ...... session cache via shared memory cyclic buffer
     ssl_scache_shmht.c ...... session cache via shared memory hash table
+    ssl_scache_dc.c ......... session cache offloading via 'distcache'
     ssl_util.c .............. utility functions
     ssl_util_ssl.c .......... the OpenSSL companion source
     ssl_util_ssl.h .......... the OpenSSL companion header
diff -Naur httpd-2.0.48/README.distcache httpd-2.0.48.oden/README.distcache
--- httpd-2.0.48/README.distcache	1970-01-01 01:00:00.000000000 +0100
+++ httpd-2.0.48.oden/README.distcache	2003-11-05 00:33:27.000000000 +0100
@@ -0,0 +1,168 @@
+
+     _          _                   _
+  __| |o ___ __| |__ ___  __ _  ___| |__   ___     distcache-httpd-2.0.48-1
+ / _` |_/ __|__   __/ __|/ _` |/ __| '_ \ / , \    Distributed session caching
+| (_| | \__ \  | | | (__| (_| | (__| | | |  __/    (support for Apache 2.0.48)
+ \__,_|_|___/  |_|  \___|\__,_|\___|_| |_|\___|    distcache.sourceforge.net
+
+-------------------------------------------------------------------------------
+
+                                  ``The world is so fast that there are days
+                                    when the person who says it can't be done
+                                    is interrupted by the person who is doing
+                                    it.''      -- Anon.
+
+
+Introduction
+------------
+
+This package is merely a placeholder for the patchfile used to provide
+'distcache' support to Apache 2 (specifically, version 2.0.48). This package is
+released under the LGPL ("Lesser GNU Public License"). However, a special
+exemption is granted to the Apache Software Foundation (ASF) if they wish to
+incorporate this code into the Apache 2 distribution (and any versions
+thereafter). The ASF may incorporate and adapt this code under their own
+licensing arrangements. If the ASF do incorporate this code into Apache 2, this
+package will be removed from the distcache project home - this "patch" is
+hopefully an interim measure :-)
+
+
+See the end of this document for any pertinent "CHANGES" from prior versions.
+
+
+Instructions
+------------
+
+There are two distinct steps involved in incorporating this code into Apache 2.
+The first step is to patch the Apache 2 source code - this is performed by way
+of the "httpd-2.0.48-patch.diff" patch file in this package. As this patches
+various files that are used by "configure" (in fact, it patches the "configure"
+script too!) it is advised to apply this patch file on a clean *untouched*
+2.0.48 source tree. Ie.
+
+   [bob@wherever ~] $ tar zxf distcache-httpd-2.0.48-1.tar.gz
+   [bob@wherever ~] $ tar zxf httpd-2.0.48.tar.gz
+   [bob@wherever ~] $ cd httpd-2.0.48
+   [bob@wherever ~/httpd-2.0.48] $ patch \
+         -p1 < ../distcache-httpd-2.0.48-1/httpd-2.0.48-patch.diff
+
+The result is a Apache 2 source tree with the necessary source changes to be
+able to support the 'distcache' distributed session caching framework.
+
+The second step requires that the 'distcache' libraries and headers be available
+for compilation and linking of Apache 2. It is strongly recommended that you use
+an installed version of 'distcache' so that libraries and header files can be
+found by the compiler/linker when building apache. Eg. to build and install
+'distcache' from source;
+
+   [bob@wherever ~] $ tar zxf distcache-1.4.2.tar.gz
+   [bob@wherever ~] $ cd distcache-1.4.2
+   [bob@wherever ~/distcache-1.4.2] $ ./configure
+   [bob@wherever ~/distcache-1.4.2] $ make
+       (... libraries and utilities are built ...)
+   [bob@wherever ~/distcache-1.4.2] $ su root
+       (... enter root password ...)
+   [root@wherever /home/bob/distcache-1.4.2] # make install
+       (... programs, libraries, and headers are installed ...)
+   [root@wherever /home/bob/distcache-1.4.2] # exit
+
+Assuming this preparation of 'distcache', you would then proceed to configure
+and build the Apache 2 source tree as per usual, but specifying the
+command-line switch to enable distcache;
+
+   -- normal non-distache apache 2 configuration line --
+   [bob@wherever ~/httpd-2.0.48] $ ./configure \
+                                   --enable-ssl --enable-distcache [...]
+
+However, if the installation of distcache is not in a standard location (eg. if
+you don't have root access and specified a local "--prefix" to "./configure"),
+you must provide directives for Apache 2 to find the headers and libraries it
+needs to compile and link. Eg. if you had used "--prefix=/home/bob" when
+configuring distcache;
+
+   -- distache-enabled apache 2 configuration line --
+   [bob@wherever ~/httpd-2.0.48] $ CPPFLAGS="-I/home/bob/include" \
+         LDFLAGS="-L/home/bob/lib" \
+         ./configure --enable-ssl --enable-distcache [...]
+
+... or some equivalent mechanism - this may depend on the platform and other
+circumstances specific to the host environment. Note that [...] refers to any
+other options you would normally provide to the Apache 2 configure script, eg.
+"--with-ssl=<path>", "--prefix=<path>", etc.
+
+After configuration, Apache 2 should build to completion and "make install"
+should work as per usual. To *USE* distcache at run-time, you can change the
+SSLSessionCache directive. Eg. suppose we have a local 'distcache' server
+running for kicks, and we have a 'distcache' proxy running on a unix domain
+socket as per;
+
+   -- launching a test 'distcache' server (background) and proxy (foreground) --
+   [bob@wherever ~] $ dc_server \
+         -listen IP:9001 -progress 1000 \
+	 1> dc_server.log 2> dc_server-error.log &
+   [bob@wherever ~] $ dc_client \
+         -listen UNIX:/tmp/scache -server IP:localhost:9001
+
+Then you would want to alter the SSLSessionCache directive in the appropriate
+configuration file to;
+
+   -- The Apache 2 directive for enabling use of 'distcache' session caching --
+   SSLSessionCache         dc:UNIX:/tmp/scache
+
+The backgrounded 'distcache' server should provide updates to stdout every
+second while there is activity (eg. perhaps whilst using a benchmarking program
+like 'swamp' to test the web server). Even if the Apache 2 server is idle, the
+cache may later show activity when sessions are expiring out of the cache (the
+default session expiry set in Apache 2's config file is usually 5 minutes).
+
+The Apache "error_log" (as per the default apache 2 configuration, you may have
+customised this) will display any unusual errors in the 'distcache' code - and
+if the "LogLevel" is set to "debug", it will also display one line summaries for
+every session caching operation taking place.
+
+For more information, please consult the 'distcache' home page at
+http://www.distcache.org/. Feedback and contributions are always welcome, of
+course :-).
+
+Changes between 2.0.45-1 and 2.0.48-1
+-------------------------------------
+
+  *) Update the patch to support Apache httpd 2.0.48.
+     [Steve Robb]
+
+Changes between 2.0.44-1 and 2.0.45-1
+-------------------------------------
+
+  *) Correct a problem exposed in 2.0.45 that prevented "--enable-distcache"
+     from working. Also added an extra commented-out "SSLSessionCache"
+     directive to Apache's template SSL config file to demonstrate the
+     distcache syntax.
+     [Geoff Thorpe]
+
+  *) Tweak the version check to use a more meaningful error in autoconf's
+     config.log output. Also correct this README for the new format of the
+     Apache 2 patch and correct one or two glitches in the text.
+     [Geoff Thorpe]
+
+  *) Substantially update the support for apache 2. It defaults to not trying
+     to use distcache and if "--enable-distcache" is specified, will verify
+     that headers and libraries are available and functional and that the
+     DISTCACHE_CLIENT_API version is known. Note: the "configure" script in the
+     apache 2 distribution is unlike anything I get if I run autoconf on their
+     configure.in, so I patch the configure.in file as well as applying
+     hand-made edits to configure too.
+     [Geoff Thorpe]
+
+Changes between 2.0.43-1 and 2.0.44-1
+-------------------------------------
+
+  *) Upgraded the patch to Apache 2.0.44, and we now also change the
+     modssl-specific parts of Apache to add "-ldistcache -lnal" when it
+     configures the "-ssl -lcrypto" linker flags.
+     [Geoff Thorpe]
+
+  *) "sserver" and "sclient" are now called "dc_server" and "dc_client"
+     respectively (the change was made recently due to naming conflicts with
+     other applications).
+     [Steve Robb]
+
diff -Naur httpd-2.0.48/acconfig.h httpd-2.0.48.oden/acconfig.h
--- httpd-2.0.48/acconfig.h	2002-01-31 15:51:37.000000000 +0100
+++ httpd-2.0.48.oden/acconfig.h	2003-12-14 23:44:36.000000000 +0100
@@ -1,2 +1,5 @@
 /* Define this if struct tm has a field tm_gmtoff */
 #undef HAVE_GMTOFF
+
+/* Define this if distcache support is enabled */
+#undef HAVE_DISTCACHE
diff -Naur httpd-2.0.48/acinclude.m4 httpd-2.0.48.oden/acinclude.m4
--- httpd-2.0.48/acinclude.m4	2002-11-29 12:05:57.000000000 +0100
+++ httpd-2.0.48.oden/acinclude.m4	2003-12-14 23:44:36.000000000 +0100
@@ -478,6 +478,74 @@
   fi
   AC_MSG_RESULT($ap_ssltk_libdir)
 
+  AC_MSG_CHECKING(whether Distcache is required)
+  ap_ssltk_dc="no"
+  tmp_nomessage=""
+  tmp_forced="no"
+  AC_ARG_ENABLE(distcache,
+    APACHE_HELP_STRING(--enable-distcache=yes/no,Select distcache support),
+    ap_ssltk_dc="$enableval"
+    tmp_nomessage=""
+    tmp_forced="yes"
+    if test "x$ap_ssltk_dc" = "x"; then
+      ap_ssltk_dc="yes"
+      dnl our "error"s become "tests revealed that..."
+      tmp_forced="no"
+    fi
+    if test "$ap_ssltk_dc" != "yes" -a "$ap_ssltk_dc" != "no"; then
+      tmp_nomessage="--enable-distcache had illegal syntax - disabling"
+      ap_ssltk_dc="no"
+    fi)
+  if test "$tmp_forced" = "no"; then
+    AC_MSG_RESULT($ap_ssltk_dc (default))
+  else
+    AC_MSG_RESULT($ap_ssltk_dc (specified))
+  fi
+  if test "$tmp_forced" = "yes" -a "x$ap_ssltk_dc" = "xno" -a "x$tmp_nomessage" != "x"; then
+    AC_MSG_ERROR(distcache support failed: $tmp_nomessage)
+  fi
+  if test "$ap_ssltk_dc" = "yes"; then
+    AC_CHECK_HEADER(
+      [distcache/dc_client.h],
+      [],
+      [tmp_nomessage="can't include distcache headers"
+      ap_ssltk_dc="no"])
+    if test "$tmp_forced" = "yes" -a "x$ap_ssltk_dc" = "xno"; then
+      AC_MSG_ERROR(distcache support failed: $tmp_nomessage)
+    fi
+  fi
+  if test "$ap_ssltk_dc" = "yes"; then
+    AC_MSG_CHECKING(for Distcache version)
+    AC_TRY_COMPILE(
+[#include <distcache/dc_client.h>],
+[#if DISTCACHE_CLIENT_API != 0x0001
+#error "distcache API version is unrecognised"
+#endif],
+[],
+[tmp_nomessage="distcache has an unsupported API version"
+ap_ssltk_dc="no"])
+    AC_MSG_RESULT($ap_ssltk_dc)
+    if test "$tmp_forced" = "yes" -a "x$ap_ssltk_dc" = "xno"; then
+      AC_MSG_ERROR(distcache support failed: $tmp_nomessage)
+    fi
+  fi
+  if test "$ap_ssltk_dc" = "yes"; then
+    AC_MSG_CHECKING(for Distcache libraries)
+    save_libs=$LIBS
+    LIBS="$LIBS -ldistcache -lnal"
+    AC_TRY_LINK(
+      [#include <distcache/dc_client.h>],
+      [DC_CTX *foo = DC_CTX_new((const char *)0,0);],
+      [],
+      [tmp_no_message="failed to link with distcache libraries"
+      ap_ssltk_dc="no"])
+    LIBS=$save_libs
+    AC_MSG_RESULT($ap_ssltk_dc)
+    if test "$tmp_forced" = "yes" -a "x$ap_ssltk_dc" = "xno"; then
+      AC_MSG_ERROR(distcache support failed: $tmp_nomessage)
+    fi
+  fi
+
   dnl #  annotate the Apache build environment with determined information
   APR_ADDTO(INCLUDES, [-I$ap_ssltk_incdir/openssl])
   if test "x$ap_ssltk_incdir" != "x/usr/include"; then
@@ -489,7 +557,12 @@
       APR_ADDTO(LDFLAGS, [$ap_platform_runtime_link_flag$ap_ssltk_libdir])
     fi
   fi
-  APR_ADDTO(SSL_LIBS, [-lssl -lcrypto])
+   if test "$ap_ssltk_dc" = "yes"; then
+     AC_DEFINE(HAVE_DISTCACHE)
+     APR_ADDTO(SSL_LIBS, [-lssl -lcrypto -ldistcache -lnal])
+   else
+     APR_ADDTO(SSL_LIBS, [-lssl -lcrypto])
+   fi
   ap_cv_ssltk="$ap_ssltk_base"
 fi
 ])
diff -Naur httpd-2.0.48/docs/conf/ssl-std.conf.in httpd-2.0.48.oden/docs/conf/ssl-std.conf.in
--- httpd-2.0.48/docs/conf/ssl-std.conf.in	2003-09-29 14:08:06.000000000 +0200
+++ httpd-2.0.48.oden/docs/conf/ssl-std.conf.in	2003-12-14 23:44:36.000000000 +0100
@@ -53,6 +53,7 @@
 #SSLSessionCache        none
 #SSLSessionCache        shmht:@exp_runtimedir@/ssl_scache(512000)
 #SSLSessionCache        shmcb:@exp_runtimedir@/ssl_scache(512000)
+#SSLSessionCache        dc:UNIX:/tmp/scache
 SSLSessionCache         dbm:@exp_runtimedir@/ssl_scache
 SSLSessionCacheTimeout  300
 
diff -Naur httpd-2.0.48/include/ap_config_auto.h.in httpd-2.0.48.oden/include/ap_config_auto.h.in
--- httpd-2.0.48/include/ap_config_auto.h.in	2003-10-24 19:51:25.000000000 +0200
+++ httpd-2.0.48.oden/include/ap_config_auto.h.in	2003-12-14 23:44:36.000000000 +0100
@@ -215,3 +215,6 @@
 
 /* Define to 'int' if <sys/resource.h> doesn't define it for us */
 #undef rlim_t
+
+/* Define if distcache support is enabled */
+#undef HAVE_DISTCACHE
diff -Naur httpd-2.0.48/modules/ssl/config.m4 httpd-2.0.48.oden/modules/ssl/config.m4
--- httpd-2.0.48/modules/ssl/config.m4	2002-03-29 08:36:01.000000000 +0100
+++ httpd-2.0.48.oden/modules/ssl/config.m4	2003-12-14 23:44:36.000000000 +0100
@@ -70,6 +70,7 @@
 ssl_scache_dbm.lo dnl
 ssl_scache_shmcb.lo dnl
 ssl_scache_shmht.lo dnl
+ssl_scache_dc.lo dnl
 ssl_util.lo dnl
 ssl_util_ssl.lo dnl
 ssl_util_table.lo dnl
diff -Naur httpd-2.0.48/modules/ssl/mod_ssl.h httpd-2.0.48.oden/modules/ssl/mod_ssl.h
--- httpd-2.0.48/modules/ssl/mod_ssl.h	2003-09-16 03:00:06.000000000 +0200
+++ httpd-2.0.48.oden/modules/ssl/mod_ssl.h	2003-12-14 23:44:36.000000000 +0100
@@ -151,9 +151,11 @@
 #if APR_HAVE_SYS_TIME_H
 #include <sys/time.h>
 #endif
+#if 0
 #if APR_HAVE_UNISTD_H
 #include <unistd.h> /* needed for STDIN_FILENO et.al., at least on FreeBSD */
 #endif
+#endif
 
 /*
  * Provide reasonable default for some defines
@@ -350,7 +352,8 @@
     SSL_SCMODE_NONE  = 0,
     SSL_SCMODE_DBM   = 1,
     SSL_SCMODE_SHMHT = 2,
-    SSL_SCMODE_SHMCB = 3
+    SSL_SCMODE_SHMCB = 3,
+    SSL_SCMODE_DC    = 4
 } ssl_scmode_t;
 
 /*
@@ -655,6 +658,16 @@
 void         ssl_scache_shmcb_expire(server_rec *);
 void         ssl_scache_shmcb_status(server_rec *, apr_pool_t *, void (*)(char *, void *), void *);
 
+#ifdef HAVE_DISTCACHE
+void         ssl_scache_dc_init(server_rec *, apr_pool_t *);
+void         ssl_scache_dc_kill(server_rec *);
+BOOL         ssl_scache_dc_store(server_rec *, UCHAR *, int, time_t, SSL_SESSION *);
+SSL_SESSION *ssl_scache_dc_retrieve(server_rec *, UCHAR *, int);
+void         ssl_scache_dc_remove(server_rec *, UCHAR *, int);
+void         ssl_scache_dc_expire(server_rec *);
+void         ssl_scache_dc_status(server_rec *, apr_pool_t *, void (*)(char *, void *), void *);
+#endif
+
 /*  Pass Phrase Support  */
 void         ssl_pphrase_Handle(server_rec *, apr_pool_t *);
 
diff -Naur httpd-2.0.48/modules/ssl/ssl_engine_config.c httpd-2.0.48.oden/modules/ssl/ssl_engine_config.c
--- httpd-2.0.48/modules/ssl/ssl_engine_config.c	2003-09-16 03:00:06.000000000 +0200
+++ httpd-2.0.48.oden/modules/ssl/ssl_engine_config.c	2003-12-14 23:44:36.000000000 +0100
@@ -1010,6 +1010,20 @@
                                 arg+4);
         }
     }
+    else if ((arglen > 3) && strcEQn(arg, "dc:", 3)) {
+#ifdef HAVE_DISTCACHE
+        mc->nSessionCacheMode      = SSL_SCMODE_DC;
+        mc->szSessionCacheDataFile = apr_psprintf(mc->pPool, "%s", arg+3);
+        if (!mc->szSessionCacheDataFile) {
+            return apr_psprintf(cmd->pool,
+                                "SSLSessionCache: Invalid cache file path %s",
+                                arg+3);
+        }
+#else
+        return apr_psprintf(cmd->pool,
+                            "SSLSessionCache: distcache support disabled");
+#endif
+    }
     else if ((arglen > 6) && strcEQn(arg, "shmht:", 6)) {
 #if !APR_HAS_SHARED_MEMORY
         return MODSSL_NO_SHARED_MEMORY_ERROR;
diff -Naur httpd-2.0.48/modules/ssl/ssl_scache.c httpd-2.0.48.oden/modules/ssl/ssl_scache.c
--- httpd-2.0.48/modules/ssl/ssl_scache.c	2003-02-03 18:31:54.000000000 +0100
+++ httpd-2.0.48.oden/modules/ssl/ssl_scache.c	2003-12-14 23:44:36.000000000 +0100
@@ -87,6 +87,10 @@
 
     if (mc->nSessionCacheMode == SSL_SCMODE_DBM)
         ssl_scache_dbm_init(s, p);
+#ifdef HAVE_DISTCACHE
+    else if (mc->nSessionCacheMode == SSL_SCMODE_DC)
+        ssl_scache_dc_init(s, p);
+#endif
     else if ((mc->nSessionCacheMode == SSL_SCMODE_SHMHT) ||
              (mc->nSessionCacheMode == SSL_SCMODE_SHMCB)) {
         void *data;
@@ -111,6 +115,10 @@
 
     if (mc->nSessionCacheMode == SSL_SCMODE_DBM)
         ssl_scache_dbm_kill(s);
+#ifdef HAVE_DISTCACHE
+    else if (mc->nSessionCacheMode == SSL_SCMODE_DC)
+        ssl_scache_dc_kill(s);
+#endif
     else if (mc->nSessionCacheMode == SSL_SCMODE_SHMHT)
         ssl_scache_shmht_kill(s);
     else if (mc->nSessionCacheMode == SSL_SCMODE_SHMCB)
@@ -125,6 +133,10 @@
 
     if (mc->nSessionCacheMode == SSL_SCMODE_DBM)
         rv = ssl_scache_dbm_store(s, id, idlen, expiry, sess);
+#ifdef HAVE_DISTCACHE
+    else if (mc->nSessionCacheMode == SSL_SCMODE_DC)
+        rv = ssl_scache_dc_store(s, id, idlen, expiry, sess);
+#endif
     else if (mc->nSessionCacheMode == SSL_SCMODE_SHMHT)
         rv = ssl_scache_shmht_store(s, id, idlen, expiry, sess);
     else if (mc->nSessionCacheMode == SSL_SCMODE_SHMCB)
@@ -139,6 +151,10 @@
 
     if (mc->nSessionCacheMode == SSL_SCMODE_DBM)
         sess = ssl_scache_dbm_retrieve(s, id, idlen);
+#ifdef HAVE_DISTCACHE
+    else if (mc->nSessionCacheMode == SSL_SCMODE_DC)
+        sess = ssl_scache_dc_retrieve(s, id, idlen);
+#endif
     else if (mc->nSessionCacheMode == SSL_SCMODE_SHMHT)
         sess = ssl_scache_shmht_retrieve(s, id, idlen);
     else if (mc->nSessionCacheMode == SSL_SCMODE_SHMCB)
@@ -152,6 +168,10 @@
 
     if (mc->nSessionCacheMode == SSL_SCMODE_DBM)
         ssl_scache_dbm_remove(s, id, idlen);
+#ifdef HAVE_DISTCACHE
+    else if (mc->nSessionCacheMode == SSL_SCMODE_DC)
+        ssl_scache_dc_remove(s, id, idlen);
+#endif
     else if (mc->nSessionCacheMode == SSL_SCMODE_SHMHT)
         ssl_scache_shmht_remove(s, id, idlen);
     else if (mc->nSessionCacheMode == SSL_SCMODE_SHMCB)
@@ -165,6 +185,10 @@
 
     if (mc->nSessionCacheMode == SSL_SCMODE_DBM)
         ssl_scache_dbm_status(s, p, func, arg);
+#ifdef HAVE_DISTCACHE
+    else if (mc->nSessionCacheMode == SSL_SCMODE_DC)
+        ssl_scache_dc_status(s, p, func, arg);
+#endif
     else if (mc->nSessionCacheMode == SSL_SCMODE_SHMHT)
         ssl_scache_shmht_status(s, p, func, arg);
     else if (mc->nSessionCacheMode == SSL_SCMODE_SHMCB)
@@ -178,6 +202,10 @@
 
     if (mc->nSessionCacheMode == SSL_SCMODE_DBM)
         ssl_scache_dbm_expire(s);
+#ifdef HAVE_DISTCACHE
+    else if (mc->nSessionCacheMode == SSL_SCMODE_DC)
+        ssl_scache_dc_expire(s);
+#endif
     else if (mc->nSessionCacheMode == SSL_SCMODE_SHMHT)
         ssl_scache_shmht_expire(s);
     else if (mc->nSessionCacheMode == SSL_SCMODE_SHMCB)
diff -Naur httpd-2.0.48/modules/ssl/ssl_scache_dc.c httpd-2.0.48.oden/modules/ssl/ssl_scache_dc.c
--- httpd-2.0.48/modules/ssl/ssl_scache_dc.c	1970-01-01 01:00:00.000000000 +0100
+++ httpd-2.0.48.oden/modules/ssl/ssl_scache_dc.c	2003-12-14 23:44:36.000000000 +0100
@@ -0,0 +1,185 @@
+/*                      _             _
+**  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
+** | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
+** | | | | | | (_) | (_| |   \__ \__ \ |  www.modssl.org
+** |_| |_| |_|\___/ \__,_|___|___/___/_|  ftp.modssl.org
+**                      |_____|
+**  ssl_scache_dc.c
+**  Distributed Session Cache (client support)
+*/
+
+/* ====================================================================
+ * THIS SOFTWARE IS PROVIDED BY GEOFF THORPE ``AS IS'' AND ANY
+ * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL RALF S. ENGELSCHALL OR
+ * HIS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ * ====================================================================
+ */
+
+#include "mod_ssl.h"
+
+/* Only build this code if it's enabled at configure-time. */
+#ifdef HAVE_DISTCACHE
+
+#include "distcache/dc_client.h"
+
+#if !defined(DISTCACHE_CLIENT_API) || (DISTCACHE_CLIENT_API < 0x0001)
+#error "You must compile with a more recent version of the distcache-base package"
+#endif
+
+/*
+ * This cache implementation allows modssl to access 'distcache' servers (or
+ * proxies) to facilitate distributed session caching. It is based on code
+ * released as open source by Cryptographic Appliances Inc, and was developed by
+ * Geoff Thorpe, Steve Robb, and Chris Zimmerman.
+ */
+
+/*
+**
+** High-Level "handlers" as per ssl_scache.c
+**
+*/
+
+void ssl_scache_dc_init(server_rec *s, apr_pool_t *p)
+{
+    DC_CTX *ctx;
+    SSLModConfigRec *mc = myModConfig(s);
+    /*
+     * Create a session context
+     */
+    if(mc->szSessionCacheDataFile == NULL) {
+        ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, "SSLSessionCache required");
+	ssl_die();
+    }
+#if 0
+    /* If a "persistent connection" mode of operation is preferred, you *must*
+     * also use the PIDCHECK flag to ensure fork()'d processes don't interlace
+     * comms on the same connection as each other. */
+#define SESSION_CTX_FLAGS	SESSION_CTX_FLAG_PERSISTENT | \
+	    			SESSION_CTX_FLAG_PERSISTENT_PIDCHECK | \
+	    			SESSION_CTX_FLAG_PERSISTENT_RETRY | \
+	    			SESSION_CTX_FLAG_PERSISTENT_LATE
+#else
+    /* This mode of operation will open a temporary connection to the 'target'
+     * for each cache operation - this makes it safe against fork()
+     * automatically. This mode is preferred when running a local proxy (over
+     * unix domain sockets) because overhead is negligable and it reduces the
+     * performance/stability danger of file-descriptor bloatage. */
+#define SESSION_CTX_FLAGS	0
+#endif
+    ctx = DC_CTX_new(mc->szSessionCacheDataFile, SESSION_CTX_FLAGS);
+    if(!ctx) {
+        ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, "distributed scache failed to obtain context");
+	ssl_die();
+    }
+    ap_log_error(APLOG_MARK, APLOG_INFO, 0, s, "distributed scache context initialised");
+    /* 
+     * Success ... we hack the context into place by cheating for now and
+     * stealing a member variable the original shared memory cache was using.
+     * :-)
+     */
+    mc->tSessionCacheDataTable = (table_t *) ctx;
+    return;
+}
+
+void ssl_scache_dc_kill(server_rec *s)
+{
+    SSLModConfigRec *mc = myModConfig(s);
+
+    if(mc->tSessionCacheDataTable)
+        DC_CTX_free((DC_CTX *)mc->tSessionCacheDataTable);
+    mc->tSessionCacheDataTable = NULL;
+}
+
+BOOL ssl_scache_dc_store(server_rec *s, UCHAR *id, int idlen,
+                           time_t timeout, SSL_SESSION * pSession)
+{
+    unsigned char der[SSL_SESSION_MAX_DER];
+    int der_len;
+    unsigned char *pder = der;
+    SSLModConfigRec *mc = myModConfig(s);
+    DC_CTX *ctx = (DC_CTX *)mc->tSessionCacheDataTable;
+
+    /* Serialise the SSL_SESSION object */
+    if((der_len = i2d_SSL_SESSION(pSession, NULL)) > SSL_SESSION_MAX_DER)
+        return FALSE;
+    i2d_SSL_SESSION(pSession, &pder);
+    /* !@#$%^ - why do we deal with *absolute* time anyway??? */
+    timeout -= time(NULL);
+    /* Send the serialised session to the distributed cache context */
+    if(!DC_CTX_add_session(ctx, id, idlen, der, der_len,
+			    (unsigned long)timeout * 1000)) {
+	ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, "distributed scache 'add_session' failed");
+	return FALSE;
+    }
+    ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s, "distributed scache 'add_session' successful");
+    return TRUE;
+}
+
+SSL_SESSION *ssl_scache_dc_retrieve(server_rec *s, UCHAR *id, int idlen)
+{
+    unsigned char der[SSL_SESSION_MAX_DER];
+    unsigned int der_len;
+    SSL_SESSION *pSession;
+    unsigned char *pder = der;
+    SSLModConfigRec *mc = myModConfig(s);
+    DC_CTX *ctx = (DC_CTX *)mc->tSessionCacheDataTable;
+
+    /* Retrieve any corresponding session from the distributed cache context */
+    if(!DC_CTX_get_session(ctx, id, idlen, der, SSL_SESSION_MAX_DER,
+			    &der_len)) {
+	ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s, "distributed scache 'get_session' MISS");
+	return NULL;
+    }
+    if(der_len > SSL_SESSION_MAX_DER) {
+	ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, "distributed scache 'get_session' OVERFLOW");
+	return NULL;
+    }
+    pSession = d2i_SSL_SESSION(NULL, &pder, der_len);
+    if(!pSession) {
+	ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, "distributed scache 'get_session' CORRUPT");
+	return NULL;
+    }
+    ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s, "distributed scache 'get_session' HIT");
+    return pSession;
+}
+
+void ssl_scache_dc_remove(server_rec *s, UCHAR *id, int idlen)
+{
+    SSLModConfigRec *mc = myModConfig(s);
+    DC_CTX *ctx = (DC_CTX *)mc->tSessionCacheDataTable;
+
+    /* Remove any corresponding session from the distributed cache context */
+    if(!DC_CTX_remove_session(ctx, id, idlen)) {
+	ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, "distributed scache 'remove_session' MISS");
+    } else {
+	ap_log_error(APLOG_MARK, APLOG_ERR, 0, s, "distributed scache 'remove_session' HIT");
+    }
+}
+
+void ssl_scache_dc_expire(server_rec *s)
+{
+    /* NOP */
+    return;
+}
+
+void ssl_scache_dc_status(server_rec *s, apr_pool_t *p,
+                            void (*func) (char *, void *), void *arg)
+{
+    SSLModConfigRec *mc = myModConfig(s);
+
+    ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s, "distributed scache 'ssl_scache_dc_status'");
+    func(apr_psprintf(p, "cache type: <b>DC (Distributed Cache)</b>, target: <b>%s</b><br>",
+			    mc->szSessionCacheDataFile), arg);
+}
+
+#endif
+
