diff -Naur dietlibc-0.27/dietfeatures.h dietlibc-0.27.oden/dietfeatures.h
--- dietlibc-0.27/dietfeatures.h	2004-01-19 17:47:23.000000000 +0100
+++ dietlibc-0.27.oden/dietfeatures.h	2004-11-02 14:25:26.515660628 +0100
@@ -92,6 +92,16 @@
 /* #define WANT_MALLOC_ZERO */
 
 
+/* do you want ContraPolice support? ContraPolice is a mechanism to protect
+ * buggy programs from buffer overflows on the heap being exploited.  To
+ * enforce it after every library call, you still have to enable CP_FORCE_CHECK,
+ * otherwise you have to do manual calls to cp_check()/cp_check_all().
+ */
+
+#define WANT_CONTRAPOLICE
+
+#define CP_FORCE_CHECK
+
 /* stop uncommenting here ;-) */
 #ifndef WANT_FASTER_STRING_ROUTINES
 #define WANT_SMALL_STRING_ROUTINES
diff -Naur dietlibc-0.27/include/stdlib.h dietlibc-0.27.oden/include/stdlib.h
--- dietlibc-0.27/include/stdlib.h	2004-04-14 15:13:29.000000000 +0200
+++ dietlibc-0.27.oden/include/stdlib.h	2004-11-02 14:25:26.515660628 +0100
@@ -14,6 +14,10 @@
 void free(void *ptr) __THROW;
 void *realloc(void *ptr, size_t size) __THROW __attribute_malloc__;
 
+/* ContraPolice check functions */
+void cp_check(void *);
+void cp_check_all(void);
+
 char *getenv(const char *name) __THROW __pure;
 int putenv(const char *string) __THROW;
 int setenv(const char *name, const char *value, int overwrite) __THROW;
diff -Naur dietlibc-0.27/lib/alloc.c dietlibc-0.27.oden/lib/alloc.c
--- dietlibc-0.27/lib/alloc.c	2004-07-12 14:04:43.000000000 +0200
+++ dietlibc-0.27.oden/lib/alloc.c	2004-11-02 14:25:26.516660330 +0100
@@ -1,6 +1,8 @@
 /*
  * malloc/free by O.Dreesen
  *
+ * ContraPolice support by Andreas Krennmair
+ *
  * first TRY:
  *   lists w/magics
  * and now the second TRY
@@ -18,6 +20,12 @@
 #include <stdlib.h>
 #include <string.h>
 
+#ifdef WANT_CONTRAPOLICE
+#include <stdio.h> /* XXX for printf ... */
+#include <time.h>
+#include <fcntl.h>
+#endif
+
 #include <sys/shm.h>	/* for PAGE_SIZE */
 
 
@@ -31,14 +39,39 @@
 #define NULL ((void*)0)
 #endif
 
-typedef struct {
+typedef struct __alloc {
   void*  next;
   size_t size;
+#ifdef WANT_CONTRAPOLICE
+  struct __alloc * cp_next;
+  size_t alloc_size;
+  uint32_t decoy;
+#endif
 } __alloc_t;
 
+#ifdef WANT_CONTRAPOLICE
+
+static __alloc_t * cp_first = NULL;
+
+/* the decoy is placed right after the allocated memory 
+ * cp_f(__alloc_t.decoy) == __decoy_t.decoy must be true
+ * to make an allocated memory block pass as not overflowed
+ */
+
+typedef struct {
+  uint32_t decoy;
+} __decoy_t;
+
+#endif
+
+
 #define BLOCK_START(b)	(((void*)(b))-sizeof(__alloc_t))
 #define BLOCK_RET(b)	(((void*)(b))+sizeof(__alloc_t))
 
+#ifdef WANT_CONTRAPOLICE
+#define BLOCK_DECOY(b)        (__decoy_t *)(((char *)BLOCK_RET(b))+(((__alloc_t *)(b))->alloc_size))
+#endif
+
 #define MEM_BLOCK_SIZE	PAGE_SIZE
 #define PAGE_ALIGN(s)	(((s)+MEM_BLOCK_SIZE-1)&(unsigned long)(~(MEM_BLOCK_SIZE-1)))
 
@@ -53,6 +86,106 @@
   return mmap(0, size, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, -1, (size_t)0);
 }
 
+#ifdef WANT_CONTRAPOLICE
+
+/* -- ContraPolice -------------------------------------- */
+
+static int cp_srand(int x, int * fd) {
+  int myfd;
+  srand(x);
+  myfd = open ("/dev/urandom", O_RDONLY);
+  if (myfd != -1) {
+    *fd = myfd;
+    return 1;
+  }
+  return 0;
+}
+
+static uint32_t cp_rand(void) {
+  static int initialized;
+  static int urand;
+  static int fd;
+  uint32_t x;
+  if (!initialized) {
+    urand = cp_srand(time(NULL) ^ getpid() ^ getppid(),&fd);
+    initialized = 1;
+  }
+  if (urand) {
+    ssize_t l = read(fd,&x,sizeof(x));
+    if (l!=sizeof(x)) { x = rand(); }
+  } else {
+    x = rand();
+  }
+  return x;
+}
+
+static inline uint32_t cp_f(uint32_t x) {
+  return x; /* should we improve this? */
+}
+
+static inline void cp_add_memblock(__alloc_t * x) {
+  /* simply add memory block to begin of list */
+  if (x) {
+    x->cp_next = cp_first;
+    cp_first = x;
+  }
+}
+
+static void cp_remove_memblock(__alloc_t * x) {
+  if (cp_first && x) {
+    __alloc_t * t;
+    if (cp_first == x) {
+      cp_first = x->next;
+    } else {
+      for (t=cp_first;t->next!=NULL;t=t->next) {
+        if (t->next == x) { t->next = x->next; break; }
+      }
+    }
+  }
+}
+
+static void cp_abort(void * x) {
+  
+  printf("ContraPolice: detected heap buffer overflow while checking address %p.\n",x); /* XXX this means bloat! */
+  abort();
+}
+
+void cp_check(void * x) {
+  if (cp_first && x) {
+    __alloc_t * t;
+    for (t=cp_first;t!=NULL;t=t->next) {
+      size_t alloc_size; 
+      uint32_t decoy;
+      alloc_size = t->alloc_size;
+      decoy = t->decoy;
+
+      /* the range check is done so that a heap overflow check
+       * can be done even when we only have an address to points
+       * to somewhere in the middle of a dynamically allocated buffer
+       */
+      if (((char *)x)>=((char *)BLOCK_RET(t)) && ((char *)x)<(((char *)BLOCK_RET(t))+alloc_size)) {
+        if ( (BLOCK_DECOY(t))->decoy != cp_f(decoy)) {
+          cp_abort(x);
+        }
+      }
+    }
+  }
+}
+
+void cp_check_all(void) {
+  if (cp_first) {
+    __alloc_t * t;
+    for (t=cp_first;t!=NULL;t=t->next) {
+      uint32_t decoy = ((__alloc_t *)t)->decoy;
+      if ((BLOCK_DECOY(t))->decoy != cp_f(decoy)) {
+        cp_abort(BLOCK_RET(t));
+      }
+    }
+  }
+}
+
+#endif
+
 /* -- SMALL MEM ----------------------------------------------------------- */
 
 static __alloc_t* __small_mem[8];
@@ -128,6 +261,12 @@
 static void _alloc_libc_free(void *ptr) {
   register size_t size;
   if (ptr) {
+ #ifdef WANT_CONTRAPOLICE
+ #ifdef CP_FORCECHECK
+    cp_check(BLOCK_START(ptr));
+ #endif
+    cp_remove_memblock(BLOCK_START(ptr));
+ #endif
     size=((__alloc_t*)BLOCK_START(ptr))->size;
     if (size) {
       if (size<=__MAX_SMALL_SIZE)
@@ -148,13 +287,19 @@
 static void* _alloc_libc_malloc(size_t size) {
   __alloc_t* ptr;
   size_t need;
+  size_t orig_size = size;
 #ifdef WANT_MALLOC_ZERO
   if (!size) return BLOCK_RET(zeromem);
 #else
   if (!size) goto err_out;
 #endif
+#ifdef WANT_CONTRAPOLICE
+  size+=sizeof(__alloc_t)+sizeof(__decoy_t);
+  if (size<(sizeof(__alloc_t)+sizeof(__decoy_t))) goto err_out;
+#else
   size+=sizeof(__alloc_t);
   if (size<sizeof(__alloc_t)) goto err_out;
+#endif
   if (size<=__MAX_SMALL_SIZE) {
     need=GET_SIZE(size);
     ptr=__small_malloc(need);
@@ -165,6 +310,11 @@
   }
   if (ptr==MAP_FAILED) goto err_out;
   ptr->size=need;
+#ifdef WANT_CONTRAPOLICE
+  ptr->alloc_size = orig_size;
+  ((__decoy_t *)BLOCK_DECOY(ptr))->decoy = cp_f(ptr->decoy = cp_rand()); /* XXX set random value */
+  cp_add_memblock(ptr);
+#endif
   return BLOCK_RET(ptr);
 err_out:
   (*__errno_location())=ENOMEM;
@@ -187,10 +337,18 @@
 void* __libc_realloc(void* ptr, size_t _size) {
   register size_t size=_size;
   if (ptr) {
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+    cp_check(BLOCK_START(ptr));
+#endif
     if (size) {
       __alloc_t* tmp=BLOCK_START(ptr);
+#ifdef WANT_CONTRAPOLICE
+      size+=(sizeof(__alloc_t)+sizeof(__decoy_t));
+      if (size<(sizeof(__alloc_t)+sizeof(__decoy_t))) goto retzero;
+#else
       size+=sizeof(__alloc_t);
       if (size<sizeof(__alloc_t)) goto retzero;
+#endif
       size=(size<=__MAX_SMALL_SIZE)?GET_SIZE(size):PAGE_ALIGN(size);
       if (tmp->size!=size) {
 	if ((tmp->size<=__MAX_SMALL_SIZE)) {
@@ -199,7 +357,11 @@
 	    register __alloc_t* foo=BLOCK_START(new);
 	    size=foo->size;
 	    if (size>tmp->size) size=tmp->size;
+#ifdef WANT_CONTRAPOLICE
+            if (size) memcpy(new,ptr,size-(sizeof(__alloc_t)+sizeof(__decoy_t)));
+#else
 	    if (size) memcpy(new,ptr,size-sizeof(__alloc_t));
+#endif
 	    _alloc_libc_free(ptr);
 	  }
 	  ptr=new;
@@ -207,6 +369,9 @@
 	else {
 	  register __alloc_t* foo;
 	  size=PAGE_ALIGN(size);
+#ifdef WANT_CONTRAPOLICE
+          cp_remove_memblock(tmp);
+#endif
 	  foo=mremap(tmp,tmp->size,size,MREMAP_MAYMOVE);
 	  if (foo==MAP_FAILED) {
 retzero:
@@ -215,6 +380,11 @@
 	  }
 	  else {
 	    foo->size=size;
+#ifdef WANT_CONTRAPOLICE
+            cp_add_memblock(foo);
+            foo->alloc_size = size-(sizeof(__alloc_t)+sizeof(__decoy_t));
+            ((__decoy_t *)BLOCK_DECOY(foo))->decoy = cp_f(foo->decoy = cp_rand());
+#endif
 	    ptr=BLOCK_RET(foo);
 	  }
 	}
diff -Naur dietlibc-0.27/lib/memccpy.c dietlibc-0.27.oden/lib/memccpy.c
--- dietlibc-0.27/lib/memccpy.c	2001-08-14 18:56:50.000000000 +0200
+++ dietlibc-0.27.oden/lib/memccpy.c	2004-11-02 14:25:26.516660330 +0100
@@ -1,5 +1,6 @@
 #define _POSIX_SOURCE
 #define _XOPEN_SOURCE
+#include "dietfeatures.h"
 #include <sys/types.h>
 #include <string.h>
 
@@ -16,5 +17,8 @@
     }
     b++;
   }
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+  cp_check(dst);
+#endif
   return 0;
 }
diff -Naur dietlibc-0.27/lib/memcpy.c dietlibc-0.27.oden/lib/memcpy.c
--- dietlibc-0.27/lib/memcpy.c	2003-12-21 13:06:36.000000000 +0100
+++ dietlibc-0.27.oden/lib/memcpy.c	2004-11-02 14:25:26.516660330 +0100
@@ -44,6 +44,10 @@
 	    *c1++ = *c2++;
     }
 
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+    cp_check(res);
+#endif
+
     return (res);
 #endif
 }
diff -Naur dietlibc-0.27/lib/snprintf.c dietlibc-0.27.oden/lib/snprintf.c
--- dietlibc-0.27/lib/snprintf.c	2001-08-14 18:56:50.000000000 +0200
+++ dietlibc-0.27.oden/lib/snprintf.c	2004-11-02 14:25:26.517660031 +0100
@@ -1,3 +1,4 @@
+#include "dietfeatures.h"
 #include <stdarg.h>
 #include <sys/types.h>
 #include <stdio.h>
@@ -9,5 +10,8 @@
   va_start(arg_ptr, format);
   n=vsnprintf(str,size,format,arg_ptr);
   va_end (arg_ptr);
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+  cp_check(str);
+#endif
   return n;
 }
diff -Naur dietlibc-0.27/lib/sprintf.c dietlibc-0.27.oden/lib/sprintf.c
--- dietlibc-0.27/lib/sprintf.c	2001-08-14 18:56:50.000000000 +0200
+++ dietlibc-0.27.oden/lib/sprintf.c	2004-11-02 14:25:26.517660031 +0100
@@ -1,3 +1,4 @@
+#include "dietfeatures.h"
 #include <stdarg.h>
 #include <sys/types.h>
 #include <stdlib.h>
@@ -10,5 +11,8 @@
   va_start(arg_ptr, format);
   n=vsprintf(dest,format,arg_ptr);
   va_end (arg_ptr);
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+  cp_check(dest);
+#endif
   return n;
 }
diff -Naur dietlibc-0.27/lib/strcat.c dietlibc-0.27.oden/lib/strcat.c
--- dietlibc-0.27/lib/strcat.c	2001-01-09 18:57:42.000000000 +0100
+++ dietlibc-0.27.oden/lib/strcat.c	2004-11-02 14:25:26.517660031 +0100
@@ -13,6 +13,9 @@
     if (!(*s = *t)) break; ++s; ++t;
 #endif
   }
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+  cp_check(dest);
+#endif
   return dest;
 }
 
diff -Naur dietlibc-0.27/lib/strcpy.c dietlibc-0.27.oden/lib/strcpy.c
--- dietlibc-0.27/lib/strcpy.c	2003-12-21 13:06:36.000000000 +0100
+++ dietlibc-0.27.oden/lib/strcpy.c	2004-11-02 14:25:26.517660031 +0100
@@ -9,30 +9,43 @@
     char           *res = s1;
 #ifdef WANT_SMALL_STRING_ROUTINES
     while ((*s1++ = *s2++));
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+    cp_check(res);
+#endif
     return (res);
 #else
     int             tmp;
     unsigned long   l;
 
     if (UNALIGNED(s1, s2)) {
-	while ((*s1++ = *s2++));
-	return (res);
+        while ((*s1++ = *s2++));
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+        cp_check(res);
+#endif
+        return (res);
     }
     if ((tmp = STRALIGN(s1))) {
-	while (tmp-- && (*s1++ = *s2++));
-	if (tmp != -1) return (res);
+    while (tmp-- && (*s1++ = *s2++));
+    if (tmp != -1) {
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+        cp_check(res);
+#endif
+        return (res);
     }
 
     while (1) {
-	l = *(const unsigned long *) s2;
-	if (((l - MKW(0x1)) & ~l) & MKW(0x80)) {
-	    unsigned char c;
-	    while ((*s1++ = (l & 0xff))) l>>=8;
-	    return (res);
-	}
-	*(unsigned long *) s1 = l;
-	s2 += sizeof(unsigned long);
-	s1 += sizeof(unsigned long);
+    l = *(const unsigned long *) s2;
+    if (((l - MKW(0x1)) & ~l) & MKW(0x80)) {
+        unsigned char c;
+        while ((*s1++ = (l & 0xff))) l>>=8;
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+        cp_check(res);
+#endif
+        return (res);
+    }
+    *(unsigned long *) s1 = l;
+    s2 += sizeof(unsigned long);
+    s1 += sizeof(unsigned long);
     }
 #endif
 }
diff -Naur dietlibc-0.27/lib/strdup.c dietlibc-0.27.oden/lib/strdup.c
--- dietlibc-0.27/lib/strdup.c	2001-01-09 18:57:43.000000000 +0100
+++ dietlibc-0.27.oden/lib/strdup.c	2004-11-02 14:25:26.517660031 +0100
@@ -1,3 +1,4 @@
+#include "dietfeatures.h"
 #include <string.h>
 #include <stdlib.h>
 
@@ -5,5 +6,8 @@
   char *tmp=(char *)malloc(strlen(s)+1);
   if (!tmp) return 0;
   strcpy(tmp,s);
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+  cp_check(tmp);
+#endif
   return tmp;
 }
diff -Naur dietlibc-0.27/lib/strlcat.c dietlibc-0.27.oden/lib/strlcat.c
--- dietlibc-0.27/lib/strlcat.c	2001-01-09 18:57:43.000000000 +0100
+++ dietlibc-0.27.oden/lib/strlcat.c	2004-11-02 14:25:26.518659733 +0100
@@ -31,6 +31,7 @@
 static char *rcsid = "$OpenBSD: strlcat.c,v 1.2 1999/06/17 16:28:58 millert Exp $";
 #endif /* LIBC_SCCS and not lint */
 
+#include "dietfeatures.h"
 #include <sys/types.h>
 #include <string.h>
 
@@ -67,6 +68,8 @@
 		s++;
 	}
 	*d = '\0';
-
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+	cp_check(dst);
+#endif
 	return(dlen + (s - src));	/* count does not include NUL */
 }
diff -Naur dietlibc-0.27/lib/strlcpy.c dietlibc-0.27.oden/lib/strlcpy.c
--- dietlibc-0.27/lib/strlcpy.c	2001-01-09 18:57:43.000000000 +0100
+++ dietlibc-0.27.oden/lib/strlcpy.c	2004-11-02 14:25:26.518659733 +0100
@@ -31,6 +31,7 @@
 static char *rcsid = "$OpenBSD: strlcpy.c,v 1.3 1999/04/24 01:17:37 millert Exp $";
 #endif /* LIBC_SCCS and not lint */
 
+#include "dietfeatures.h"
 #include <sys/types.h>
 #include <string.h>
 
@@ -63,6 +64,8 @@
 		while (*s++)
 			;
 	}
-
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+	cp_check(dst);
+#endif
 	return(s - src - 1);	/* count does not include NUL */
 }
diff -Naur dietlibc-0.27/lib/strncat.c dietlibc-0.27.oden/lib/strncat.c
--- dietlibc-0.27/lib/strncat.c	2003-08-20 01:03:14.000000000 +0200
+++ dietlibc-0.27.oden/lib/strncat.c	2004-11-02 14:25:26.518659733 +0100
@@ -30,5 +30,8 @@
   }
   *s=0;
 fini:
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+  cp_check(dest);
+#endif
   return dest;
 }
diff -Naur dietlibc-0.27/lib/strncpy.c dietlibc-0.27.oden/lib/strncpy.c
--- dietlibc-0.27/lib/strncpy.c	2002-05-07 12:03:07.000000000 +0200
+++ dietlibc-0.27.oden/lib/strncpy.c	2004-11-02 14:25:26.518659733 +0100
@@ -11,5 +11,8 @@
   memset(dest,0,n);
 #endif
   memccpy(dest,src,0,n);
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+  cp_check(dest);
+#endif
   return dest;
 }
diff -Naur dietlibc-0.27/lib/strtok_r.c dietlibc-0.27.oden/lib/strtok_r.c
--- dietlibc-0.27/lib/strtok_r.c	2003-10-11 11:36:49.000000000 +0200
+++ dietlibc-0.27.oden/lib/strtok_r.c	2004-11-02 14:25:26.518659733 +0100
@@ -1,3 +1,4 @@
+#include "dietfeatures.h"
 #include <string.h>
 
 char*strtok_r(char*s,const char*delim,char**ptrptr) {
@@ -11,5 +12,8 @@
     if (__likely(*s)) *s++=0;	/* not the end ? => terminate it */
   }
   *ptrptr=s;
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+  cp_check(*ptrptr);
+#endif
   return tmp;
 }
diff -Naur dietlibc-0.27/lib/vsnprintf.c dietlibc-0.27.oden/lib/vsnprintf.c
--- dietlibc-0.27/lib/vsnprintf.c	2004-03-26 15:46:48.000000000 +0100
+++ dietlibc-0.27.oden/lib/vsnprintf.c	2004-11-02 14:25:26.519659434 +0100
@@ -4,6 +4,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include "dietstdio.h"
+#include "dietfeatures.h"
 
 struct str_data {
   unsigned char* str;
@@ -34,5 +35,8 @@
     if (size!=(size_t)-1 && ((size_t)n>=size)) str[size-1]=0;
     else str[n]=0;
   }
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+  cp_check(str);
+#endif
   return n;
 }
diff -Naur dietlibc-0.27/libshell/realpath.c dietlibc-0.27.oden/libshell/realpath.c
--- dietlibc-0.27/libshell/realpath.c	2004-05-10 18:44:14.000000000 +0200
+++ dietlibc-0.27.oden/libshell/realpath.c	2004-11-02 14:25:26.519659434 +0100
@@ -6,6 +6,7 @@
 #include <unistd.h>
 #include <string.h>
 #include <fcntl.h>
+#include "dietfeatures.h"
 
 static char* myrealpath(const char* file, char* dest, int count) {
 /* assume dest has PATH_MAX space */
@@ -23,18 +24,35 @@
     if (c-file>PATH_MAX) return 0;
     memcpy(buf,file,c-file);
     buf[c-file]=0;
-    if (chdir(buf)==-1) return 0;
+    if (chdir(buf)==-1) {
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+      cp_check(dest);
+#endif
+      return 0;
+    }
     file=c+1;
   }
-  if (readlink(file,buf,PATH_MAX)==0)
+  if (readlink(file,buf,PATH_MAX)==0) {
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+    cp_check(dest);
+#endif
     return myrealpath(buf,dest,count-1);
-  if (getcwd(dest,PATH_MAX)==0) return 0;
+  }
+  if (getcwd(dest,PATH_MAX)==0) {
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+    cp_check(dest);
+#endif
+    return 0;
+  }
   i=strlen(dest); dest[i]='/'; ++i;
   for (; i<PATH_MAX-1; ++i) {
     if (!(dest[i]=*file)) break;
     ++file;
   }
   dest[i]=0;
+#if defined(WANT_CONTRAPOLICE) && defined(CP_FORCE_CHECK)
+  cp_check(dest);
+#endif
   return dest;
 }
 
diff -Naur dietlibc-0.27/test/Makefile dietlibc-0.27.oden/test/Makefile
--- dietlibc-0.27/test/Makefile	2003-12-15 14:07:42.000000000 +0100
+++ dietlibc-0.27.oden/test/Makefile	2004-11-02 14:27:09.761831757 +0100
@@ -14,7 +14,9 @@
 memccpy memchr memcmp memcpy memrchr memusage mktime mmap_test pipe printf printftest \
 protoent prototypes putenv pwent rand48 read1 readdir regex select sendfile servent siglist \
 speed spent sprintf sscanf stdarg strcasecmp strcmp strlen strncat strncpy strptime strrchr \
-strstr strtol sysenter ungetc waitpid
+strstr strtol sysenter ungetc waitpid \
+cp-test1 cp-test2 cp-test3 cp-test4 cp-test5 cp-test6 cp-test7 cp-test8 cp-test9 cp-test10 \
+cp-test11 cp-test12 cp-test13 cp-test14 cp-test15
 
 test: $(TESTPROGRAMS)
 
diff -Naur dietlibc-0.27/test/cp-test1.c dietlibc-0.27.oden/test/cp-test1.c
--- dietlibc-0.27/test/cp-test1.c	1970-01-01 01:00:00.000000000 +0100
+++ dietlibc-0.27.oden/test/cp-test1.c	2004-11-02 14:25:26.519659434 +0100
@@ -0,0 +1,9 @@
+#include <stdlib.h>
+#include <assert.h>
+
+int main(void) {
+  void * x = malloc(100);
+  assert(x);
+  cp_check(x);
+  return 0;
+}
diff -Naur dietlibc-0.27/test/cp-test10.c dietlibc-0.27.oden/test/cp-test10.c
--- dietlibc-0.27/test/cp-test10.c	1970-01-01 01:00:00.000000000 +0100
+++ dietlibc-0.27.oden/test/cp-test10.c	2004-11-02 14:25:26.519659434 +0100
@@ -0,0 +1,11 @@
+#include <stdlib.h>
+#include <assert.h>
+
+int main(void) {
+  void * x = malloc(100);
+  assert(x);
+  memset(x,'x',101);
+  free(x);
+  cp_check_all();
+  return 0;
+}
diff -Naur dietlibc-0.27/test/cp-test11.c dietlibc-0.27.oden/test/cp-test11.c
--- dietlibc-0.27/test/cp-test11.c	1970-01-01 01:00:00.000000000 +0100
+++ dietlibc-0.27.oden/test/cp-test11.c	2004-11-02 14:25:26.519659434 +0100
@@ -0,0 +1,11 @@
+#include <stdlib.h>
+#include <assert.h>
+
+int main(void) {
+  void * x = malloc(100);
+  assert(x);
+  memset(x,'x',101);
+  x = realloc(x,50);
+  cp_check(x);
+  return 0;
+}
diff -Naur dietlibc-0.27/test/cp-test12.c dietlibc-0.27.oden/test/cp-test12.c
--- dietlibc-0.27/test/cp-test12.c	1970-01-01 01:00:00.000000000 +0100
+++ dietlibc-0.27.oden/test/cp-test12.c	2004-11-02 14:25:26.520659136 +0100
@@ -0,0 +1,11 @@
+#include <stdlib.h>
+#include <assert.h>
+
+int main(void) {
+  void * x = malloc(5000);
+  assert(x);
+  memset(x,'x',5001);
+  x = realloc(x,4096);
+  cp_check(x);
+  return 0;
+}
diff -Naur dietlibc-0.27/test/cp-test13.c dietlibc-0.27.oden/test/cp-test13.c
--- dietlibc-0.27/test/cp-test13.c	1970-01-01 01:00:00.000000000 +0100
+++ dietlibc-0.27.oden/test/cp-test13.c	2004-11-02 14:25:26.520659136 +0100
@@ -0,0 +1,9 @@
+#include <stdlib.h>
+#include <assert.h>
+
+int main(void) {
+  void * x = malloc(5000);
+  assert(x);
+  cp_check(x);
+  return 0;
+}
diff -Naur dietlibc-0.27/test/cp-test14.c dietlibc-0.27.oden/test/cp-test14.c
--- dietlibc-0.27/test/cp-test14.c	1970-01-01 01:00:00.000000000 +0100
+++ dietlibc-0.27.oden/test/cp-test14.c	2004-11-02 14:25:26.520659136 +0100
@@ -0,0 +1,10 @@
+#include <stdlib.h>
+#include <assert.h>
+
+int main(void) {
+  void * x = malloc(5000);
+  assert(x);
+  memset(x,'x',5000);
+  cp_check(x);
+  return 0;
+}
diff -Naur dietlibc-0.27/test/cp-test15.c dietlibc-0.27.oden/test/cp-test15.c
--- dietlibc-0.27/test/cp-test15.c	1970-01-01 01:00:00.000000000 +0100
+++ dietlibc-0.27.oden/test/cp-test15.c	2004-11-02 14:25:26.520659136 +0100
@@ -0,0 +1,10 @@
+#include <stdlib.h>
+#include <assert.h>
+
+int main(void) {
+  void * x = malloc(5000);
+  assert(x);
+  memset(x,'x',5001); /* buffer overflow */
+  cp_check(x);
+  return 0;
+}
diff -Naur dietlibc-0.27/test/cp-test2.c dietlibc-0.27.oden/test/cp-test2.c
--- dietlibc-0.27/test/cp-test2.c	1970-01-01 01:00:00.000000000 +0100
+++ dietlibc-0.27.oden/test/cp-test2.c	2004-11-02 14:25:26.520659136 +0100
@@ -0,0 +1,10 @@
+#include <stdlib.h>
+#include <assert.h>
+
+int main(void) {
+  void * x = malloc(100);
+  assert(x);
+  memset(x,'x',100);
+  cp_check(x);
+  return 0;
+}
diff -Naur dietlibc-0.27/test/cp-test3.c dietlibc-0.27.oden/test/cp-test3.c
--- dietlibc-0.27/test/cp-test3.c	1970-01-01 01:00:00.000000000 +0100
+++ dietlibc-0.27.oden/test/cp-test3.c	2004-11-02 14:25:26.520659136 +0100
@@ -0,0 +1,10 @@
+#include <stdlib.h>
+#include <assert.h>
+
+int main(void) {
+  void * x = malloc(100);
+  assert(x);
+  memset(x,'x',101); /* buffer overflow */
+  cp_check(x);
+  return 0;
+}
diff -Naur dietlibc-0.27/test/cp-test4.c dietlibc-0.27.oden/test/cp-test4.c
--- dietlibc-0.27/test/cp-test4.c	1970-01-01 01:00:00.000000000 +0100
+++ dietlibc-0.27.oden/test/cp-test4.c	2004-11-02 14:25:26.521658837 +0100
@@ -0,0 +1,13 @@
+#include <stdlib.h>
+#include <assert.h>
+
+int main(void) {
+  void * x = malloc(100);
+  void * y;
+  assert(x);
+  memset(x,'x',101); /* buffer overflow */
+  y = malloc(30);
+  memset(y,'y',31);
+  cp_check_all();
+  return 0;
+}
diff -Naur dietlibc-0.27/test/cp-test5.c dietlibc-0.27.oden/test/cp-test5.c
--- dietlibc-0.27/test/cp-test5.c	1970-01-01 01:00:00.000000000 +0100
+++ dietlibc-0.27.oden/test/cp-test5.c	2004-11-02 14:25:26.521658837 +0100
@@ -0,0 +1,13 @@
+#include <stdlib.h>
+#include <assert.h>
+
+int main(void) {
+  void * x = malloc(100);
+  void * y;
+  assert(x);
+  memset(x,'x',100); /* buffer overflow */
+  y = malloc(30);
+  memset(y,'y',31);
+  cp_check(x);
+  return 0;
+}
diff -Naur dietlibc-0.27/test/cp-test6.c dietlibc-0.27.oden/test/cp-test6.c
--- dietlibc-0.27/test/cp-test6.c	1970-01-01 01:00:00.000000000 +0100
+++ dietlibc-0.27.oden/test/cp-test6.c	2004-11-02 14:25:26.521658837 +0100
@@ -0,0 +1,13 @@
+#include <stdlib.h>
+#include <assert.h>
+
+int main(void) {
+  void * x = malloc(100);
+  void * y;
+  assert(x);
+  memset(x,'x',101); /* buffer overflow */
+  y = malloc(30);
+  memset(y,'y',31);
+  cp_check(y);
+  return 0;
+}
diff -Naur dietlibc-0.27/test/cp-test7.c dietlibc-0.27.oden/test/cp-test7.c
--- dietlibc-0.27/test/cp-test7.c	1970-01-01 01:00:00.000000000 +0100
+++ dietlibc-0.27.oden/test/cp-test7.c	2004-11-02 14:25:26.521658837 +0100
@@ -0,0 +1,13 @@
+#include <stdlib.h>
+#include <assert.h>
+
+int main(void) {
+  void * x = malloc(100);
+  void * y;
+  assert(x);
+  memset(x,'x',100);
+  y = malloc(30);
+  memset(y,'y',31); /* buffer overflow */
+  cp_check(y);
+  return 0;
+}
diff -Naur dietlibc-0.27/test/cp-test8.c dietlibc-0.27.oden/test/cp-test8.c
--- dietlibc-0.27/test/cp-test8.c	1970-01-01 01:00:00.000000000 +0100
+++ dietlibc-0.27.oden/test/cp-test8.c	2004-11-02 14:25:26.521658837 +0100
@@ -0,0 +1,13 @@
+#include <stdlib.h>
+#include <assert.h>
+
+int main(void) {
+  void * x = malloc(100);
+  void * y;
+  assert(x);
+  memset(x,'x',100);
+  y = malloc(30);
+  memset(y,'y',30);
+  cp_check(y);
+  return 0;
+}
diff -Naur dietlibc-0.27/test/cp-test9.c dietlibc-0.27.oden/test/cp-test9.c
--- dietlibc-0.27/test/cp-test9.c	1970-01-01 01:00:00.000000000 +0100
+++ dietlibc-0.27.oden/test/cp-test9.c	2004-11-02 14:25:26.521658837 +0100
@@ -0,0 +1,11 @@
+#include <stdlib.h>
+#include <assert.h>
+
+int main(void) {
+  void * x = malloc(100);
+  assert(x);
+  memset(x,'x',101);
+  free(x);
+  cp_check(x);
+  return 0;
+}
