--- linux-2.4.24/mm/bootmem.c.ce27.orig	2004-01-19 19:29:38.972478816 +0100
+++ linux-2.4.24/mm/bootmem.c	2004-01-19 19:34:39.379809960 +0100
@@ -263,8 +263,15 @@ static unsigned long __init free_all_boo
 				if (v & m) {
 					count++;
 					ClearPageReserved(page);
+#ifdef CONFIG_BADRAM
+					if (!PageBad(page)) {
+						set_page_count(page, 1);
+						__free_page(page);
+					}
+#else
 					set_page_count(page, 1);
 					__free_page(page);
+#endif
 				}
 			}
 		} else {
@@ -283,8 +290,15 @@ static unsigned long __init free_all_boo
 	for (i = 0; i < ((bdata->node_low_pfn-(bdata->node_boot_start >> PAGE_SHIFT))/8 + PAGE_SIZE-1)/PAGE_SIZE; i++,page++) {
 		count++;
 		ClearPageReserved(page);
+#ifdef CONFIG_BADRAM
+		if (!PageBad(page)) {
+			set_page_count(page, 1);
+			__free_page(page);
+		}
+#else
 		set_page_count(page, 1);
 		__free_page(page);
+#endif
 	}
 	total += count;
 	bdata->node_bootmem_map = NULL;
--- linux-2.4.24/mm/page_alloc.c.ce27.orig	2004-01-19 19:30:18.879412040 +0100
+++ linux-2.4.24/mm/page_alloc.c	2004-01-19 19:34:39.380809808 +0100
@@ -11,6 +11,7 @@
  *  Discontiguous memory support, Kanoj Sarcar, SGI, Nov 1999
  *  Zone balancing, Kanoj Sarcar, SGI, Jan 2000
  *  Per-CPU page pool, Ingo Molnar, Red Hat, 2001, 2002
+ *  BadRAM handling, Rick van Rein, Feb 2001
  */
 
 #include <linux/config.h>
@@ -1023,3 +1024,95 @@ static int __init setup_lower_zone_reser
 }
 
 __setup("lower_zone_reserve=", setup_lower_zone_reserve);
+
+
+#ifdef CONFIG_BADRAM
+
+/* Given a pointed-at address and a mask, increment the page so that the
+ * mask hides the increment. Return 0 if no increment is possible.
+ */
+static int __init next_masked_address (unsigned long *addrp, unsigned long mask)
+{
+	unsigned long inc=1;
+	unsigned long newval = *addrp;
+	while (inc & mask)
+	inc += inc;
+	while (inc != 0) {
+		newval += inc;
+		newval &= ~mask;
+		newval |= ((*addrp) & mask);
+		if (newval > *addrp) {
+			*addrp = newval;
+			return 1;
+		}
+		do {
+			inc += inc;
+		} while (inc & ~mask);
+		while (inc & mask)
+			inc += inc;
+	}
+	return 0;
+}
+
+
+void __init badram_markpages (int argc, unsigned long *argv) {
+       unsigned long addr, mask;
+	while (argc-- > 0) {
+		addr = *argv++;
+		mask = (argc-- > 0) ? *argv++ : ~0L;
+		mask |= ~PAGE_MASK;    // Optimalisation
+		addr &= mask;          //  Normalisation
+		do {
+			struct page *pg = phys_to_page(addr);
+printk ("%05lx ", __pa(__va(addr)) >> PAGE_SHIFT);
+printk ("=%p/%05lx ", pg-mem_map, max_mapnr);
+			// if (VALID_PAGE(pg)) {
+			if (PageTestandSetBad (pg)) {
+				reserve_bootmem (addr, PAGE_SIZE);
+printk ("BAD ");
+			}
+else printk ("BFR ");
+		       // }
+// else printk ("INV ");
+		} while (next_masked_address (&addr,mask));
+	}
+}
+
+
+
+/*********** CONFIG_BADRAM: CUSTOMISABLE SECTION STARTS HERE ******************/
+
+
+// Enter your custom BadRAM patterns here as pairs of unsigned long integers.
+// For more information on these F/M pairs, refer to Documentation/badram.txt
+
+
+static unsigned long __initdata badram_custom[] = {
+	0,     // Number of longwords that follow, as F/M pairs
+};
+
+
+/*********** CONFIG_BADRAM: CUSTOMISABLE SECTION ENDS HERE ********************/
+
+
+
+static int __init badram_setup (char *str)
+{
+	unsigned long opts[3];
+	if (!mem_map) BUG();
+printk ("PAGE_OFFSET=0x%08lx\n", PAGE_OFFSET);
+printk ("BadRAM option is %s\n", str);
+	if (*str++ == '=')
+		while (str=get_options (str, 3, (int *) opts), *opts) {
+printk ("   --> marking 0x%08lx, 0x%08lx  [%ld]\n", opts[1], opts[2], opts[0]);
+  			badram_markpages (*opts, opts+1);
+			if (*opts==1)
+				break;
+		};
+	badram_markpages (*badram_custom, badram_custom+1);
+	return 0;
+}
+
+__setup("badram", badram_setup);
+
+#endif /* CONFIG_BADRAM */
--- linux-2.4.24/include/asm-i386/page.h.ce27.orig	2002-08-03 02:39:45.000000000 +0200
+++ linux-2.4.24/include/asm-i386/page.h	2004-01-19 19:34:39.378810112 +0100
@@ -132,6 +132,7 @@ static __inline__ int get_order(unsigned
 #define __pa(x)			((unsigned long)(x)-PAGE_OFFSET)
 #define __va(x)			((void *)((unsigned long)(x)+PAGE_OFFSET))
 #define virt_to_page(kaddr)	(mem_map + (__pa(kaddr) >> PAGE_SHIFT))
+#define phys_to_page(x)		(mem_map + ((unsigned long)(x) >> PAGE_SHIFT))
 #define VALID_PAGE(page)	((page - mem_map) < max_mapnr)
 
 #define VM_DATA_DEFAULT_FLAGS	(VM_READ | VM_WRITE | VM_EXEC | \
--- linux-2.4.24/arch/i386/mm/init.c.ce27.orig	2003-06-13 16:51:29.000000000 +0200
+++ linux-2.4.24/arch/i386/mm/init.c	2004-01-19 19:34:39.360812848 +0100
@@ -92,7 +92,7 @@ void __init kmap_init(void)
 
 void show_mem(void)
 {
-	int i, total = 0, reserved = 0;
+	int i, total = 0, reserved = 0, badram = 0;
 	int shared = 0, cached = 0;
 	int highmem = 0;
 
@@ -106,6 +106,10 @@ void show_mem(void)
 			highmem++;
 		if (PageReserved(mem_map+i))
 			reserved++;
+#ifdef CONFIG_BADRAM
+		if (PageBad(mem_map+1))
+			badram++;
+#endif
 		else if (PageSwapCache(mem_map+i))
 			cached++;
 		else if (page_count(mem_map+i))
@@ -114,6 +118,9 @@ void show_mem(void)
 	printk("%d pages of RAM\n", total);
 	printk("%d pages of HIGHMEM\n",highmem);
 	printk("%d reserved pages\n",reserved);
+#ifdef CONFIG_BADRAM
+	printk("%d pages of BadRAM\n",badram);
+#endif
 	printk("%d pages shared\n",shared);
 	printk("%d pages swap cached\n",cached);
 	printk("%ld pages in page table cache\n",pgtable_cache_size);
@@ -447,8 +454,13 @@ static inline int page_kills_ppro(unsign
 }
 
 #ifdef CONFIG_HIGHMEM
-void __init one_highpage_init(struct page *page, int pfn, int bad_ppro)
+/**
+ * @param bad  set on return to whether the page is bad RAM
+ */
+void __init one_highpage_init(struct page *page, int pfn, int bad_ppro,
+			     int *bad)
 {
+	*bad = 0;
 	if (!page_is_ram(pfn)) {
 		SetPageReserved(page);
 		return;
@@ -462,7 +474,13 @@ void __init one_highpage_init(struct pag
 	ClearPageReserved(page);
 	set_bit(PG_highmem, &page->flags);
 	atomic_set(&page->count, 1);
+#ifdef CONFIG_BADRAM
+	if (PageBad(page))
+        	*bad = 1;
+	else
+#endif
 	__free_page(page);
+
 	totalhigh_pages++;
 }
 #endif /* CONFIG_HIGHMEM */
@@ -478,10 +496,14 @@ static void __init set_max_mapnr_init(vo
 #endif
 }
 
-static int __init free_pages_init(void)
+/** structure for returning multiple values from free_pages_init() */
+typedef struct { int reserved, bad; } PageCount;
+
+static PageCount __init free_pages_init(void)
 {
 	extern int ppro_with_ram_bug(void);
 	int bad_ppro, reservedpages, pfn;
+	PageCount pages = {0,0};
 
 	bad_ppro = ppro_with_ram_bug();
 
@@ -491,22 +513,31 @@ static int __init free_pages_init(void)
 	reservedpages = 0;
 	for (pfn = 0; pfn < max_low_pfn; pfn++) {
 		/*
-		 * Only count reserved RAM pages
+		 * Only count reserved and bad RAM pages
 		 */
 		if (page_is_ram(pfn) && PageReserved(mem_map+pfn))
 			reservedpages++;
+#ifdef CONFIG_BADRAM
+		if (page_is_ram(pfn) && PageBad(mem_map+pfn))
+			pages.bad++;
+#endif
 	}
 #ifdef CONFIG_HIGHMEM
-	for (pfn = highend_pfn-1; pfn >= highstart_pfn; pfn--)
-		one_highpage_init((struct page *) (mem_map + pfn), pfn, bad_ppro);
+	for (pfn = highend_pfn-1; pfn >= highstart_pfn; pfn--) {
+		int bad;
+		one_highpage_init((struct page *) (mem_map + pfn), pfn, bad_ppro, &bad);
+		if (bad)  pages.bad++;
+	}
 	totalram_pages += totalhigh_pages;
 #endif
-	return reservedpages;
+	pages.reserved = reservedpages;
+	return pages;
 }
 
 void __init mem_init(void)
 {
 	int codesize, reservedpages, datasize, initsize;
+	PageCount pages;
 
 	if (!mem_map)
 		BUG();
@@ -518,12 +549,24 @@ void __init mem_init(void)
 	/* clear the zero-page */
 	memset(empty_zero_page, 0, PAGE_SIZE);
 
-	reservedpages = free_pages_init();
+	reservedpages = (pages = free_pages_init()).reserved;
 
 	codesize =  (unsigned long) &_etext - (unsigned long) &_text;
 	datasize =  (unsigned long) &_edata - (unsigned long) &_etext;
 	initsize =  (unsigned long) &__init_end - (unsigned long) &__init_begin;
 
+#ifdef CONFIG_BADRAM
+	printk(KERN_INFO "Memory: %luk/%luk available (%dk kernel code, %dk reserved, %dk data, %dk init, %ldk highmem, %dk BadRAM)\n",
+		(unsigned long) nr_free_pages() << (PAGE_SHIFT-10),
+		max_mapnr << (PAGE_SHIFT-10),
+		codesize >> 10,
+		reservedpages << (PAGE_SHIFT-10),
+		datasize >> 10,
+		initsize >> 10,
+		(unsigned long) (totalhigh_pages << (PAGE_SHIFT-10)),
+		pages.bad << (PAGE_SHIFT-10)
+	       );
+#else
 	printk(KERN_INFO "Memory: %luk/%luk available (%dk kernel code, %dk reserved, %dk data, %dk init, %ldk highmem)\n",
 		(unsigned long) nr_free_pages() << (PAGE_SHIFT-10),
 		max_mapnr << (PAGE_SHIFT-10),
@@ -533,6 +576,7 @@ void __init mem_init(void)
 		initsize >> 10,
 		(unsigned long) (totalhigh_pages << (PAGE_SHIFT-10))
 	       );
+#endif	
 
 #if CONFIG_X86_PAE
 	if (!cpu_has_pae)
--- linux-2.4.24/arch/i386/config.in.ce27.orig	2004-01-19 19:34:39.248829872 +0100
+++ linux-2.4.24/arch/i386/config.in	2004-01-19 19:34:39.359813000 +0100
@@ -345,6 +345,8 @@ if [ "$CONFIG_APM" != "n" ]; then
    bool '    Use real mode APM BIOS call to power off' CONFIG_APM_REAL_MODE_POWER_OFF
 fi
 
+bool 'Work around bad spots in RAM' CONFIG_BADRAM
+
 source drivers/acpi/Config.in
 
 endmenu
--- linux-2.4.24/arch/i386/defconfig.ce27.orig	2004-01-19 19:24:01.199828064 +0100
+++ linux-2.4.24/arch/i386/defconfig	2004-01-19 19:34:39.360812848 +0100
@@ -83,6 +83,7 @@ CONFIG_PCI_NAMES=y
 # CONFIG_EISA is not set
 # CONFIG_MCA is not set
 CONFIG_HOTPLUG=y
+CONFIG_BADRAM=y
 
 #
 # PCMCIA/CardBus support
--- linux-2.4.24/Documentation/Configure.help.ce27.orig	2004-01-19 19:34:39.286824096 +0100
+++ linux-2.4.24/Documentation/Configure.help	2004-01-19 19:34:39.376810416 +0100
@@ -23251,6 +23251,21 @@ CONFIG_DCACHE_DISABLE
   This option allows you to run the kernel with data cache disabled.
   Say Y if you experience CPM lock-ups.
 
+Work around bad spots in RAM
+CONFIG_BADRAM
+  This small kernel extension makes it possible to use memory chips
+  which are not entirely correct. It works by never allocating the
+  places that are wrong. Those places are specified with the badram
+  boot option to LILO. Read /usr/src/linux/Documentation/badram.txt
+  and/or visit http://home.zonnet.nl/vanrein/badram for information.
+
+  This option co-operates well with a second boot option from LILO
+  that starts memtest86, which is able to automatically produce the
+  patterns for the commandline in case of memory trouble.
+
+  It is safe to say 'Y' here, and it is advised because there is no
+  performance impact.
+
 #
 # m68k-specific kernel options
 # Documented by Chris Lawrence <mailto:quango@themall.net> et al.
@@ -29129,7 +29144,7 @@ CONFIG_SOUND_WM97XX
 # LocalWords:  CramFs Cramfs uid cramfs AVM's kernelcapi PCIV cdrdao Cdparanoia
 # LocalWords:  DMX Domex dmx wellington ftdi sio Accton Billington Corega FEter
 # LocalWords:  MELCO LUA PNA Linksys SNC chkdsk AWACS Webcam RAMFS Ramfs ramfs
-# LocalWords:  ramfiles MAKEDEV pty WDTPCI APA apa
+# LocalWords:  ramfiles MAKEDEV pty WDTPCI APA apa BadRAM badram vanrein zonnet
 #
 # The following sets edit modes for GNU EMACS
 # Local Variables:
--- linux-2.4.24/Documentation/kernel-parameters.txt.ce27.orig	2004-01-19 19:24:01.222824568 +0100
+++ linux-2.4.24/Documentation/kernel-parameters.txt	2004-01-19 19:34:39.377810264 +0100
@@ -14,6 +14,7 @@ restrictions referred to are that the re
 	APIC	APIC support is enabled.
 	APM 	Advanced Power Management support is enabled.
 	AX25	Appropriate AX.25 support is enabled.
+	BADRAM  Support for faulty RAM chips is enabled.
 	CD	Appropriate CD support is enabled.
 	DEVFS   devfs support is enabled. 
 	DRM	Direct Rendering Management support is enabled. 
@@ -122,6 +123,8 @@ running once the system is up.
  
 	aztcd=		[HW,CD] Aztec CD driver.
 
+	badram=		[BADRAM] Avoid allocating faulty RAM addresses.
+
 	baycom_epp=	[HW,AX25]
  
 	baycom_par= 	[HW,AX25] BayCom Parallel Port AX.25 Modem.
--- linux-2.4.24/Documentation/memory.txt.ce27.orig	2001-11-09 22:58:02.000000000 +0100
+++ linux-2.4.24/Documentation/memory.txt	2004-01-19 19:34:39.377810264 +0100
@@ -18,6 +18,14 @@ systems.
 	   as you add more memory.  Consider exchanging your 
            motherboard.
 
+       4) A static discharge or production fault causes a RAM module
+          to have (predictable) errors, usually meaning that certain
+          bits cannot be set or reset. Instead of throwing away your
+          RAM module, you may read /usr/src/linux/Documentation/badram.txt
+          to learn how to detect, locate and circuimvent such errors
+          in your RAM module.
+
+
 All of these problems can be addressed with the "mem=XXXM" boot option
 (where XXX is the size of RAM to use in megabytes).  
 It can also tell Linux to use less memory than is actually installed.
@@ -45,6 +53,8 @@ Try:
 
 	* Try passing the "mem=4M" option to the kernel to limit
 	  Linux to using a very small amount of memory.
+	  If this helps, read /usr/src/linux/Documentation/badram.txt
+	  to learn how to find and circumvent memory errors.
 
 
 Other tricks:
--- linux-2.4.24/CREDITS.ce27.orig	2004-01-19 19:24:01.206827000 +0100
+++ linux-2.4.24/CREDITS	2004-01-19 19:34:39.362812544 +0100
@@ -2573,6 +2573,14 @@ S: 6 Karen Drive
 S: Malvern, Pennsylvania 19355
 S: USA
 
+N: Rick van Rein
+E: vanrein@cs.utwente.nl
+W: http://www.cs.utwente.nl/~vanrein
+D: Memory, the BadRAM subsystem dealing with statically challanged RAM modules.
+S: Binnenes 67
+S: 9407 CX Assen
+S: The Netherlands
+
 N: Stefan Reinauer
 E: stepan@linux.de
 W: http://www.freiburg.linux.de/~stepan/
@@ -2794,6 +2802,13 @@ N: Michael Schmitz
 E:
 D: Macintosh IDE Driver
 
+N: Nico Schmoigl
+E: nico@writemail.com
+W: http://webrum.uni-mannheim.de/math/schmoigl/linux/
+D: Migration of BadRAM patch to 2.4.4 series (with Rick van Rein)
+S: Mannheim, BW, Germany
+P: 2047/38FC9E03  5D DB 09 E4 3F F3 CD 09 75 59 - 11 17 9C 03 46 E3 38 FC 9E 03
+
 N: Peter De Schrijver
 E: stud11@cc4.kuleuven.ac.be
 D: Mitsumi CD-ROM driver patches March version
--- 2425/include/linux/mm.h.ce27.orig	2004-04-02 10:52:38.000000000 +0300
+++ 2425/include/linux/mm.h	2004-04-02 10:55:09.000000000 +0300
@@ -299,6 +299,7 @@ typedef struct page {
 #define PG_reserved		14
 #define PG_launder		15	/* written out by VM pressure.. */
 #define PG_fs_1			16	/* Filesystem specific */
+#define PG_badram		17      /* used by BadRAM patch */
 
 #ifndef arch_set_page_uptodate
 #define arch_set_page_uptodate(page)
@@ -392,6 +393,9 @@ extern void FASTCALL(set_page_dirty(stru
 #define PageSlab(page)		test_bit(PG_slab, &(page)->flags)
 #define PageSetSlab(page)	set_bit(PG_slab, &(page)->flags)
 #define PageClearSlab(page)	clear_bit(PG_slab, &(page)->flags)
+#define PageBad(page)		test_bit(PG_badram, &(page)->flags)
+#define PageSetBad(page)	set_bit(PG_badram, &(page)->flags)
+#define PageTestandSetBad(page)	test_and_set_bit(PG_badram, &(page)->flags)
 #define PageReserved(page)	test_bit(PG_reserved, &(page)->flags)
 
 #define PageActive(page)	test_bit(PG_active, &(page)->flags)
