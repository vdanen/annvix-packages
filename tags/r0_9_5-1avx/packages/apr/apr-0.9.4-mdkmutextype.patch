--- configure.in.mutextype	2004-06-17 16:51:23.000000000 -0400
+++ configure.in	2004-06-17 16:54:06.000000000 -0400
@@ -1515,22 +1515,15 @@
 # The last APR_DECIDE to execute sets the default.
 # At this stage, we match the ordering in Apache 1.3
 # which is (highest to lowest): pthread -> posixsem -> sysvsem -> fcntl -> flock
-#
+# However, Mandrake patches APR_DECIDE so it only considers fcntl and flock, since
+# pthread and posixsem are not portable between linuxthreads and NPTL, and
+# sysvsem is not very robust
+
 APR_BEGIN_DECISION([apr_lock implementation method])
 APR_IFALLYES(func:flock define:LOCK_EX,
             APR_DECIDE(USE_FLOCK_SERIALIZE, [4.2BSD-style flock()]))
 APR_IFALLYES(header:fcntl.h define:F_SETLK,
             APR_DECIDE(USE_FCNTL_SERIALIZE, [SVR4-style fcntl()]))
-APR_IFALLYES(func:semget func:semctl define:SEM_UNDO,
-            APR_DECIDE(USE_SYSVSEM_SERIALIZE, [SysV IPC semget()]))
-APR_IFALLYES(header:semaphore.h func:sem_open func_sem_close dnl
-             func_sem_unlink func:sem_post func_sem_wait,
-             APR_DECIDE(USE_POSIXSEM_SERIALIZE, [POSIX sem_open()]))
-# note: the current APR use of shared mutex requires /dev/zero
-APR_IFALLYES(header:pthread.h define:PTHREAD_PROCESS_SHARED dnl
-            func:pthread_mutexattr_setpshared dnl
-            file:/dev/zero,
-            APR_DECIDE(USE_PROC_PTHREAD_SERIALIZE, [pthread mutex]))
 if test "x$apr_lock_method" != "x"; then
     APR_DECISION_FORCE($apr_lock_method)
 fi
