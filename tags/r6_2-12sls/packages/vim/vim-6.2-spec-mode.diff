--- ./runtime/ftplugin/spec.vim	2003-08-18 19:36:09.000000000 +0200
+++ ./runtime/ftplugin/spec.vim	2003-08-20 12:03:02.000000000 +0200
@@ -1,166 +1,171 @@
-" Plugin to update the %changelog section of RPM spec files
-" Filename: spec.vim
-" Maintainer: Gustavo Niemeyer <niemeyer@conectiva.com>
-" Last Change: Wed, 10 Apr 2002 16:28:52 -0300
+" -*- vim -*-
+" spec plugin
+" Guillaume Rousse <rousse@ccr.jussieu.fr>
+" 10/08/2001
 
 if exists("b:did_ftplugin")
 	finish
 endif
 let b:did_ftplugin = 1
 
+" Add mappings, unless user doesn't want
 if !exists("no_plugin_maps") && !exists("no_spec_maps")
-	if !hasmapto("<Plug>SpecChangelog")
-		map <buffer> <LocalLeader>c <Plug>SpecChangelog
+	if !hasmapto("<Plug>AddChangelogBlock")
+		map <buffer> <LocalLeader>ch <Plug>AddChangelogBlock
 	endif
+	if !hasmapto("<Plug>AddChangelogEntry")
+		map <buffer> <LocalLeader>CH <Plug>AddChangelogEntry
+	endif
+	noremap <buffer> <unique> <script> <Plug>AddChangelogBlock :call <SID>AddChangelogBlock()<CR> 
+	noremap <buffer> <unique> <script> <Plug>AddChangelogEntry :call <SID>AddChangelogEntry()<CR>
+endif
+
+
+" compilation option
+setlocal makeprg=rpm\ -ba\ %
+setlocal errorformat=error:\ line\ %l:\ %m
+
+if !exists("*s:AddChangelogBlock")
+	" Adds a changelog block
+	function s:AddChangelogBlock()
+		" look for changelog section
+		let line = <SID>GetFirstLocation(0, '^%changelog')
+		call <SID>InsertChangelogHeader(line)
+		call <SID>InsertChangelogEntry(line + 1)
+	endfunction
 endif
 
-noremap <buffer> <unique> <script> <Plug>SpecChangelog :call <SID>SpecChangelog("")<CR>
+if !exists("*s:AddChangelogEntry")
+	" Adds a changelog entry
+	function s:AddChangelogEntry()
+		" look for changelog section
+		let line = <SID>GetFirstLocation(0, '^%changelog')
+		" look for last entry
+		let line = <SID>GetLastLocation(line + 1, '^- ')
+		call <SID>InsertChangelogEntry(line)
+	endfunction
+endif
 
-if !exists("*s:SpecChangelog")
-	function s:SpecChangelog(format)
-		if strlen(a:format) == 0
-			if !exists("g:spec_chglog_format")
-				let email = input("Email address: ")
-				let g:spec_chglog_format = "%a %b %d %Y " . l:email
-				echo "\r"
-			endif
-			let format = g:spec_chglog_format
-		else
-			if !exists("g:spec_chglog_format")
-				let g:spec_chglog_format = a:format
-			endif
-			let format = a:format
-		endif
-		let line = 0
-		let name = ""
-		let ver = ""
-		let rel = ""
-		let nameline = -1
-		let verline = -1
-		let relline = -1
-		let chgline = -1
-		while (line <= line("$"))
-			let linestr = getline(line)
-			if (name == "" && linestr =~? '^Name:')
-				let nameline = line
-				let name = substitute(strpart(linestr,5), '^[	 ]*\([^ 	]\+\)[		]*$','\1','')
-			elseif (ver == "" && linestr =~? '^Version:')
-				let verline = line
-				let ver = substitute(strpart(linestr,8), '^[	 ]*\([^ 	]\+\)[		]*$','\1','')
-			elseif (rel == "" && linestr =~? '^Release:')
-				let relline = line
-				let rel = substitute(strpart(linestr,8), '^[	 ]*\([^ 	]\+\)[		]*$','\1','')
-			elseif (linestr =~? '^%changelog')
-				let chgline = line
-				execute line
-				break
+if !exists("*s:InsertChangelogHeader")
+	" Insert a changelog header just after the given line
+	function s:InsertChangelogHeader(line)
+		" ensure english locale
+		language time C
+
+		" get values
+		let rpm_packager = <SID>GetTagValue("Packager")
+		let rpm_version = <SID>GetTagValue("Version")
+		let rpm_release = <SID>GetTagValue("Release")
+
+		" insert blank line first
+		call append(a:line, "")
+		" insert changelog header
+		call append(a:line, "* " . strftime("%a %b %d %Y") . " " . rpm_packager . " " . rpm_version . "-" . rpm_release)
+	endfunction
 			endif
-			let line = line+1
-		endwhile
-		if (nameline != -1 && verline != -1 && relline != -1)
-			let include_release_info = exists("g:spec_chglog_release_info")
-			let name = s:ParseRpmVars(name, nameline)
-			let ver = s:ParseRpmVars(ver, verline)
-			let rel = s:ParseRpmVars(rel, relline)
-		else
-			let include_release_info = 0
-		endif
-		if (chgline == -1)
-			let option = confirm("Can't find %changelog. Create one? ","&End of file\n&Here\n&Cancel",3)
-			if (option == 1)
-				call append(line("$"),"")
-				call append(line("$"),"%changelog")
-				execute line("$")
-				let chgline = line(".")
-			elseif (option == 2)
-				call append(line("."),"%changelog")
-				normal j
-				chgline = line(".")
-			endif
-		endif
-		if (chgline != -1)
-			let parsed_format = "* ".strftime(format)
-			let release_info = "+ ".name."-".ver."-".rel
-			let wrong_format = 0
-			let wrong_release = 0
-			let insert_line = 0
-			if (getline(chgline+1) != parsed_format)
-				let wrong_format = 1
-			endif
-			if (include_release_info && getline(chgline+2) != release_info)
-				let wrong_release = 1
-			endif
-			if (wrong_format || wrong_release)
-				if (include_release_info && !wrong_release && !exists("g:spec_chglog_never_increase_release"))
-					let option = confirm("Increase release? ","&Yes\n&No",1)
-					if (option == 1)
-						execute relline
-						normal 
-						let rel = substitute(strpart(getline(relline),8), '^[	 ]*\([^ 	]\+\)[		]*$','\1','')
-						let release_info = "+ ".name."-".ver."-".rel
-					endif
-				endif
-				let n = 0
-				call append(chgline+n, parsed_format)
-				if include_release_info
-					let n = n + 1
-					call append(chgline+n, release_info)
-				endif
-				let n = n + 1
-				call append(chgline+n,"- ")
-				let n = n + 1
-				call append(chgline+n,"")
-				let insert_line = chgline+n
-			else
-				let line = chgline
-				if !exists("g:spec_chglog_prepend")
-					while !(getline(line+2) =~ '^\( *\|\*.*\)$')
-						let line = line+1
+
+if !exists("*s:InsertChangelogEntry")
+	" Insert a changelog entry just after the given line
+	function s:InsertChangelogEntry(line)
+		" insert changelog entry
+		call append(a:line, "- ")
+		" position cursor here
+		execute a:line + 1
+		" enter insert mode
+		startinsert!
+	endfunction
+endif
+
+if !exists("*s:GetTagValue")
+	" Return value of a rpm tag
+	function s:GetTagValue(tag)
+		let pattern = '^' . a:tag . ':\s*'
+		let line = <SID>GetFirstLine(0, pattern)
+		let value = substitute(line, pattern, "", "")
+
+		" resolve macros
+		while (value =~ '%{.*}')
+			let macro = matchstr(value, '%{.*}')
+			let macro_name = substitute(macro, '%{\(.*\)}', '\1', "")
+			let macro_value = <SID>GetMacroValue(macro_name)
+			let value = substitute(value, '%{' . macro_name . '}', macro_value, "")
 					endwhile
+		
+		" try to read externaly defined values
+		if (value == "")
+			let value = <SID>GetExternalMacroValue(a:tag)
 				endif
-				call append(line+1,"- ")
-				let insert_line = line+2
+
+		return value
+	endfunction
 			endif
-			execute insert_line
-			startinsert!
+
+if !exists("*s:GetMacroValue")
+	" Return value of a rpm macro
+	function s:GetMacroValue(macro)
+		let pattern = '^%define\s*' . a:macro . '\s*'
+		let line = <SID>GetFirstLine(0, pattern)
+		return substitute(line, pattern, "", "")
+	endfunction
+endif
+
+if !exists("*s:GetExternalMacroValue")
+	" Return value of an external rpm macro defined in $HOME/.rpmmacros
+	function s:GetExternalMacroValue(macro)
+		if filereadable($HOME . "/.rpmmacros")
+			let pattern = '^%' . tolower(a:macro) . '\s*'
+			let line = system("grep " . pattern . " $HOME/.rpmmacros")
+			" get rid of this !#&* trailing <NL>
+			let line = strpart(line, 0, strlen(line) - 1)
+			return substitute(line, pattern, "", "")
 		endif
 	endfunction
 endif
 
-function s:ParseRpmVars(str, strline)
-	let end = -1
-	let ret = ""
-	while (1)
-		let start = match(a:str, "\%{", end+1)
-		if (start == -1)
-			let ret = ret . strpart(a:str, end+1)
-			break
-		endif
-		let ret = ret . strpart(a:str, end+1, start-(end+1))
-		let end = match(a:str, "}", start)
-		if (end == -1)
-			let ret = ret . strpart(a:str, start)
-			break
-		endif
-		let varname = strpart(a:str, start+2, end-(start+2))
-		execute a:strline
-		let definestr = "^[ \t]*%define[ \t]\\+" . varname . "[ \t]\\+\\(.*\\)$"
-		let linenum = search(definestr, "bW")
-		if (linenum != -1)
-			let ret = ret .  substitute(getline(linenum), definestr, "\\1", "")
-		else
-			let ret = ret . strpart(str, start, end+1-start)
+if !exists("*s:GetFirstLocation")
+	" Return location of first line matching the given pattern after the given line
+	" Return -1 if not found at the end of the file
+	function s:GetFirstLocation(from, pattern)
+		let linenb = a:from
+		while (linenb <= line("$"))
+			let linenb = linenb + 1
+			let linestr = getline(linenb)
+			if (linestr =~ a:pattern)
+				return linenb
 		endif
 	endwhile
-	return ret
+		return -1
 endfunction
+endif
 
-" The following lines, along with the macros/matchit.vim plugin,
-" make it easy to navigate the different sections of a spec file
-" with the % key (thanks to Max Ischenko).
-
-let b:match_ignorecase = 0
-let b:match_words =
-  \ '^Name:^%description:^%clean:^%setup:^%build:^%install:^%files:' .
-  \ '^%package:^%preun:^%postun:^%changelog'
+if !exists("*s:GetLastLocation")
+	" Return location of last line matching the given pattern after the given line
+	" Return -1 if still found at the end of the file
+	function s:GetLastLocation(from, pattern)
+		let linenb = a:from
+		while (linenb <= line("$"))
+			let linenb = linenb + 1
+			let linestr = getline(linenb)
+			if (linestr !~ a:pattern)
+				return linenb - 1
+			endif
+		endwhile
+		return -1
+	endfunction
+endif
 
+if !exists("*s:GetFirstLine")
+	" Return first line matching the given pattern after the given line
+	" Return "" if not found at the end of the file
+	function s:GetFirstLine(from, pattern)
+		let linenb = a:from
+		while (linenb <= line("$"))
+			let linenb = linenb + 1
+			let linestr = getline(linenb)
+			if (linestr =~ a:pattern)
+				return linestr
+			endif
+		endwhile
+		return ""
+	endfunction
+endif
