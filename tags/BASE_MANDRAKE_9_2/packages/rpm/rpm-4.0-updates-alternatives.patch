--- rpm-4.0/update-alternatives.pix	Thu Apr  5 23:47:06 2001
+++ rpm-4.0/update-alternatives	Thu Apr  5 23:49:34 2001
@@ -0,0 +1,573 @@
+#! /usr/bin/perl --
+
+#use POSIX; &ENOENT;
+sub ENOENT { 2; }
+# Sorry about this, but the errno-part of POSIX.pm isn't in perl-*-base
+
+# Global variables:
+#  $alink            Alternative we are managing (ie the symlink we're making/removing) (install only)
+#  $name             Name of the alternative (the symlink) we are processing
+#  $apath            Path of alternative we are offering            
+#  $apriority        Priority of link (only when we are installing an alternative)
+#  $mode             action to perform (display / install / remove / display / auto / config)
+#  $manual           update-mode for alternative (manual / auto)
+#  $state            State of alternative:
+#                       expected: alternative with highest priority is the active alternative
+#                       expected-inprogress: busy selecting alternative with highest priority
+#                       unexpected: alternative another alternative is active / error during readlink
+#                       nonexistent: alternative-symlink does not exist
+#  $link             Link we are working with
+#  @slavenames       List with names of slavelinks
+#  %slavenum         Map from name of slavelink to slave-index (into @slavelinks)
+#  @slavelinks       List of slavelinks (indexed by slave-index)
+#  %versionnum       Map from currently available versions into @versions and @priorities
+#  @versions         List of available versions for alternative
+#  %priorities       Map from @version-index to priority
+#  %slavepath        Map from (@version-index,slavename) to slave-path
+
+$version="1.8.3"; # This line modified by Makefile
+sub usageversion {
+    print(STDERR <<END)
+Debian GNU/Linux update-alternatives $version.  Copyright (C) 1995
+Ian Jackson.  This is free software; see the GNU General Public Licence
+version 2 or later for copying conditions.  There is NO warranty.
+
+Usage: update-alternatives --install <link> <name> <path> <priority>
+                          [--slave <link> <name> <path>] ...
+       update-alternatives --remove <name> <path>
+       update-alternatives --auto <name>
+       update-alternatives --display <name>
+       update-alternatives --config <name>
+<name> is the name in /etc/alternatives.
+<path> is the name referred to.
+<link> is the link pointing to /etc/alternatives/<name>.
+<priority> is an integer; options with higher numbers are chosen.
+
+Options:  --verbose|--quiet  --test  --help  --version
+          --altdir <directory>  --admindir <directory>
+END
+        || &quit("failed to write usage: $!");
+}
+sub quit { print STDERR "update-alternatives: @_\n"; exit(2); }
+sub badusage { print STDERR "update-alternatives: @_\n\n"; &usageversion; exit(2); }
+
+$altdir= '/etc/alternatives';
+$admindir= '/var/lib/rpm/alternatives';
+$testmode= 0;
+$verbosemode= 0;
+$mode='';
+$manual= 'auto';
+$|=1;
+
+sub checkmanymodes {
+    return unless $mode;
+    &badusage("two modes specified: $_ and --$mode");
+}
+
+while (@ARGV) {
+    $_= shift(@ARGV);
+    last if m/^--$/;
+    if (!m/^--/) {
+        &quit("unknown argument \`$_'");
+    } elsif (m/^--(help|version)$/) {
+        &usageversion; exit(0);
+    } elsif (m/^--test$/) {
+        $testmode= 1;
+    } elsif (m/^--verbose$/) {
+        $verbosemode= +1;
+    } elsif (m/^--quiet$/) {
+        $verbosemode= -1;
+    } elsif (m/^--install$/) {
+        &checkmanymodes;
+        @ARGV >= 4 || &badusage("--install needs <link> <name> <path> <priority>");
+        ($alink,$name,$apath,$apriority,@ARGV) = @ARGV;
+        $apriority =~ m/^[-+]?\d+/ || &badusage("priority must be an integer");
+        $mode= 'install';
+    } elsif (m/^--remove$/) {
+        &checkmanymodes;
+        @ARGV >= 2 || &badusage("--remove needs <name> <path>");
+        ($name,$apath,@ARGV) = @ARGV;
+        $mode= 'remove';
+    } elsif (m/^--(display|auto|config)$/) {
+        &checkmanymodes;
+        @ARGV || &badusage("--$1 needs <name>");
+        $mode= $1;
+        $name= shift(@ARGV);
+    } elsif (m/^--slave$/) {
+        @ARGV >= 3 || &badusage("--slave needs <link> <name> <path>");
+        ($slink,$sname,$spath,@ARGV) = @ARGV;
+        defined($aslavelink{$sname}) && &badusage("slave name $sname duplicated");
+        $aslavelinkcount{$slink}++ && &badusage("slave link $slink duplicated");
+        $aslavelink{$sname}= $slink;
+        $aslavepath{$sname}= $spath;
+    } elsif (m/^--altdir$/) {
+        @ARGV || &badusage("--altdir needs a <directory> argument");
+        $altdir= shift(@ARGV);
+    } elsif (m/^--admindir$/) {
+        @ARGV || &badusage("--admindir needs a <directory> argument");
+        $admindir= shift(@ARGV);
+    } else {
+        &badusage("unknown option \`$_'");
+    }
+}
+
+defined($aslavelink{$name}) && &badusage("name $name is both primary and slave");
+$aslavelinkcount{$alink} && &badusage("link $link is both primary and slave");
+
+$mode || &badusage("need --display, --config, --install, --remove or --auto");
+$mode eq 'install' || !%slavelink || &badusage("--slave only allowed with --install");
+
+if (open(AF,"$admindir/$name")) {
+    $manual= &gl("manflag");
+    $manual eq 'auto' || $manual eq 'manual' || &badfmt("manflag");
+    $link= &gl("link");
+    while (($sname= &gl("sname")) ne '') {
+        push(@slavenames,$sname);
+        defined($slavenum{$sname}) && &badfmt("duplicate slave $tsname");
+        $slavenum{$sname}= $#slavenames;
+        $slink= &gl("slink");
+        $slink eq $link && &badfmt("slave link same as main link $link");
+        $slavelinkcount{$slink}++ && &badfmt("duplicate slave link $slink");
+        push(@slavelinks,$slink);
+    }
+    while (($version= &gl("version")) ne '') {
+        defined($versionnum{$version}) && &badfmt("duplicate path $tver");
+       if ( -r $version || $mode eq 'remove' && $apath eq $version ) {
+           push(@versions,$version);
+           $versionnum{$version}= $i= $#versions;
+           $priority= &gl("priority");
+           $priority =~ m/^[-+]?\d+$/ || &badfmt("priority $version $priority");
+           $priorities[$i]= $priority;
+           for ($j=0; $j<=$#slavenames; $j++) {
+               $slavepath{$i,$j}= &gl("spath");
+           }
+       } else {
+           # File not found - remove
+           &pr("Alternative for $name points to $version - which wasn't found.  Removing from list of alternatives.")
+             if $verbosemode > 0;
+           &gl("priority");
+           for ($j=0; $j<=$#slavenames; $j++) {
+               &gl("spath");
+           }
+       }
+    }
+    close(AF);
+    $dataread=1;
+} elsif ($! != &ENOENT) {
+    &quit("failed to open $admindir/$name: $!");
+}
+
+if ($mode eq 'display') {
+    if (!$dataread) {
+        &pr("No alternatives for $name.");
+    } else {
+        &pr("$name - status is $manual.");
+        if (defined($linkname= readlink("$altdir/$name"))) {
+            &pr(" link currently points to $linkname");
+        } elsif ($! == &ENOENT) {
+            &pr(" link currently absent");
+        } else {
+            &pr(" link unreadable - $!");
+        }
+        $best= '';
+        for ($i=0; $i<=$#versions; $i++) {
+            if ($best eq '' || $priorities[$i] > $bestpri) {
+                $best= $versions[$i]; $bestpri= $priorities[$i];
+            }
+            &pr("$versions[$i] - priority $priorities[$i]");
+            for ($j=0; $j<=$#slavenames; $j++) {
+                next unless length($tspath= $slavepath{$i,$j});
+                &pr(" slave $slavenames[$j]: $tspath");
+            }
+        }
+        if ($best eq '') {
+            &pr("No versions available.");
+        } else {
+            &pr("Current \`best' version is $best.");
+        }
+    }
+    exit 0;
+}
+
+$best= '';
+for ($i=0; $i<=$#versions; $i++) {
+    if ($best eq '' || $priorities[$i] > $bestpri) {
+        $best= $versions[$i]; $bestpri= $priorities[$i];
+    }
+}
+
+if ($mode eq 'config') {
+    if (!$dataread) {
+	&pr("No alternatives for $name.");
+    } else {
+	&config_alternatives($name);
+    }
+}
+
+if (defined($linkname= readlink("$altdir/$name"))) {
+    if ($linkname eq $best) {
+        $state= 'expected';
+    } elsif (defined($linkname2= readlink("$altdir/$name.rpm-tmp"))) {
+        $state= 'expected-inprogress';
+    } else {
+        $state= 'unexpected';
+    }
+} elsif ($! == &ENOENT) {
+    $state= 'nonexistent';
+} else {
+    $state= 'unexpected';
+}
+
+# Possible values for:
+#   $manual      manual, auto
+#   $state       expected, expected-inprogress, unexpected, nonexistent
+#   $mode        auto, install, remove
+# all independent
+
+if ($mode eq 'auto') {
+    &pr("Setting up automatic selection of $name.")
+      if $verbosemode > 0;
+    unlink("$altdir/$name.rpm-tmp") || $! == &ENOENT ||
+        &quit("unable to remove $altdir/$name.rpm-tmp: $!");
+    unlink("$altdir/$name") || $! == &ENOENT ||
+        &quit("unable to remove $altdir/$name.rpm-tmp: $!");
+    $state= 'nonexistent';
+    $manual= 'auto';
+} elsif ($state eq 'nonexistent') {
+    if ($mode eq 'manual') {
+        &pr("$altdir/$name has been deleted, returning to automatic selection.")
+          if $verbosemode > 0;
+        $mode= 'auto';
+    }
+}
+
+#   $manual      manual, auto
+#   $state       expected, expected-inprogress, unexpected, nonexistent
+#   $mode        auto, install, remove
+# mode=auto <=> state=nonexistent
+
+if ($state eq 'unexpected' && $manual eq 'auto') {
+    &pr("$altdir/$name has been changed (manually or by a script).\n".
+        "Switching to manual updates only.")
+      if $verbosemode > 0;
+    $manual= 'manual';
+}
+
+#   $manual      manual, auto
+#   $state       expected, expected-inprogress, unexpected, nonexistent
+#   $mode        auto, install, remove
+# mode=auto <=> state=nonexistent
+# state=unexpected => manual=manual
+
+&pr("Checking available versions of $name, updating links in $altdir ...\n".
+    "(You may modify the symlinks there yourself if desired - see \`man ln'.)")
+  if $verbosemode > 0;
+
+if ($mode eq 'install') {
+    if ($link ne $alink && $link ne '') {
+        &pr("Renaming $name link from $link to $alink.")
+          if $verbosemode > 0;
+        rename_mv($link,$alink) || $! == &ENOENT ||
+            &quit("unable to rename $link to $alink: $!");
+    }
+    $link= $alink;
+    if (!defined($i= $versionnum{$apath})) {
+        push(@versions,$apath);
+        $versionnum{$apath}= $i= $#versions;
+    }
+    $priorities[$i]= $apriority;
+    for $sname (keys %aslavelink) {
+        if (!defined($j= $slavenum{$sname})) {
+            push(@slavenames,$sname);
+            $slavenum{$sname}= $j= $#slavenames;
+        }
+        $oldslavelink= $slavelinks[$j];
+        $newslavelink= $aslavelink{$sname};
+        $slavelinkcount{$oldslavelink}-- if $oldslavelink ne '';
+        $slavelinkcount{$newslavelink}++ &&
+            &quit("slave link name $newslavelink duplicated");
+        if ($newslavelink ne $oldslavelink && $oldslavelink ne '') {
+            &pr("Renaming $sname slave link from $oldslavelink to $newslavelink.")
+              if $verbosemode > 0;
+            rename_mv($oldslavelink,$newslavelink) || $! == &ENOENT ||
+                &quit("unable to rename $oldslavelink to $newslavelink: $!");
+        }
+        $slavelinks[$j]= $newslavelink;
+    }
+    for ($j=0; $j<=$#slavenames; $j++) {
+        $slavepath{$i,$j}= $aslavepath{$slavenames[$j]};
+    }
+}
+
+if ($mode eq 'remove') {
+    if ($manual eq "manual" and $state eq "expected") {
+    	&pr("Removing manually selected alternative - switching to auto mode");
+	$manual= "auto";
+    }
+    if (defined($i= $versionnum{$apath})) {
+        $k= $#versions;
+        $versionnum{$versions[$k]}= $i;
+        delete $versionnum{$versions[$i]};
+        $versions[$i]= $versions[$k]; $#versions--;
+        $priorities[$i]= $priorities[$k]; $#priorities--;
+        for ($j=0; $j<=$#slavenames; $j++) {
+            $slavepath{$i,$j}= $slavepath{$k,$j};
+            delete $slavepath{$k,$j};
+        }
+    } else {
+        &pr("Alternative $apath for $name not registered, not removing.")
+          if $verbosemode > 0;
+    }
+}
+
+for ($j=0; $j<=$#slavenames; $j++) {
+    for ($i=0; $i<=$#versions; $i++) {
+        last if $slavepath{$i,$j} ne '';
+    }
+    if ($i > $#versions) {
+        &pr("Discarding obsolete slave link $slavenames[$j] ($slavelinks[$j]).")
+          if $verbosemode > 0;
+        unlink("$altdir/$slavenames[$j]") || $! == &ENOENT ||
+            &quit("unable to remove $slavenames[$j]: $!");
+        unlink($slavelinks[$j]) || $! == &ENOENT ||
+            &quit("unable to remove $slavelinks[$j]: $!");
+        $k= $#slavenames;
+        $slavenum{$slavenames[$k]}= $j;
+        delete $slavenum{$slavenames[$j]};
+        $slavelinkcount{$slavelinks[$j]}--;
+        $slavenames[$j]= $slavenames[$k]; $#slavenames--;
+        $slavelinks[$j]= $slavelinks[$k]; $#slavelinks--;
+        for ($i=0; $i<=$#versions; $i++) {
+            $slavepath{$i,$j}= $slavepath{$i,$k};
+            delete $slavepath{$i,$k};
+        }
+        $j--;
+    }
+}
+        
+if ($manual eq 'manual') {
+    &pr("Automatic updates of $altdir/$name are disabled, leaving it alone.")
+      if $verbosemode > 0;
+    &pr("To return to automatic updates use \`update-alternatives --auto $name'.")
+      if $verbosemode > 0;
+} else {
+    if ($state eq 'expected-inprogress') {
+        &pr("Recovering from previous failed update of $name ...");
+        rename_mv("$altdir/$name.rpm-tmp","$altdir/$name") ||
+            &quit("unable to rename $altdir/$name.rpm-tmp to $altdir/$name: $!");
+        $state= 'expected';
+    }
+}
+
+#   $manual      manual, auto
+#   $state       expected, expected-inprogress, unexpected, nonexistent
+#   $mode        auto, install, remove
+# mode=auto <=> state=nonexistent
+# state=unexpected => manual=manual
+# manual=auto => state!=expected-inprogress && state!=unexpected
+
+open(AF,">$admindir/$name.rpm-new") ||
+    &quit("unable to open $admindir/$name.rpm-new for write: $!");
+&paf($manual);
+&paf($link);
+for ($j=0; $j<=$#slavenames; $j++) {
+    &paf($slavenames[$j]);
+    &paf($slavelinks[$j]);
+}
+&paf('');
+$best= '';
+for ($i=0; $i<=$#versions; $i++) {
+    if ($best eq '' || $priorities[$i] > $bestpri) {
+        $best= $versions[$i]; $bestpri= $priorities[$i]; $bestnum= $i;
+    }
+    &paf($versions[$i]);
+    &paf($priorities[$i]);
+    for ($j=0; $j<=$#slavenames; $j++) {
+        &paf($slavepath{$i,$j});
+    }
+}
+&paf('');
+close(AF) || &quit("unable to close $admindir/$name.rpm-new: $!");
+
+if ($manual eq 'auto') {
+    if ($best eq '') {
+        &pr("Last package providing $name ($link) removed, deleting it.")
+          if $verbosemode > 0;
+        unlink("$altdir/$name") || $! == &ENOENT ||
+            &quit("unable to remove $altdir/$name: $!");
+        unlink("$link") || $! == &ENOENT ||
+            &quit("unable to remove $altdir/$name: $!");
+        unlink("$admindir/$name.rpm-new") ||
+            &quit("unable to remove $admindir/$name.rpm-new: $!");
+        unlink("$admindir/$name") || $! == &ENOENT ||
+            &quit("unable to remove $admindir/$name: $!");
+        exit(0);
+    } else {
+        if (!defined($linkname= readlink($link)) && $! != &ENOENT) {
+            &pr("warning: $link is supposed to be a symlink to $altdir/$name\n".
+                " (or nonexistent); however, readlink failed: $!")
+              if $verbosemode > 0;
+        } elsif ($linkname ne "$altdir/$name") {
+            unlink("$link.rpm-tmp") || $! == &ENOENT ||
+                &quit("unable to ensure $link.rpm-tmp nonexistent: $!");
+            my_symlink("$altdir/$name","$link.rpm-tmp") ||
+                &quit("unable to make $link.rpm-tmp a symlink to $altdir/$name: $!");
+            rename_mv("$link.rpm-tmp",$link) ||
+                &quit("unable to install $link.rpm-tmp as $link: $!");
+        }
+        if (defined($linkname= readlink("$altdir/$name")) && $linkname eq $best) {
+            &pr("Leaving $name ($link) pointing to $best.")
+              if $verbosemode > 0;
+        } else {
+            &pr("Updating $name ($link) to point to $best.")
+              if $verbosemode > 0;
+        }
+        unlink("$altdir/$name.rpm-tmp") || $! == &ENOENT ||
+            &quit("unable to ensure $altdir/$name.rpm-tmp nonexistent: $!");
+        my_symlink($best,"$altdir/$name.rpm-tmp");
+    }
+}
+
+rename_mv("$admindir/$name.rpm-new","$admindir/$name") ||
+    &quit("unable to rename $admindir/$name.rpm-new to $admindir/$name: $!");
+
+if ($manual eq 'auto') {
+    rename_mv("$altdir/$name.rpm-tmp","$altdir/$name") ||
+        &quit("unable to install $altdir/$name.rpm-tmp as $altdir/$name");
+    for ($j=0; $j<=$#slavenames; $j++) {
+        $sname= $slavenames[$j];
+        $slink= $slavelinks[$j];
+        if (!defined($linkname= readlink($slink)) && $! != &ENOENT) {
+            &pr("warning: $slink is supposed to be a slave symlink to\n".
+                " $altdir/$sname, or nonexistent; however, readlink failed: $!")
+              if $verbosemode > 0;
+        } elsif ($linkname ne "$altdir/$sname") {
+            unlink("$slink.rpm-tmp") || $! == &ENOENT ||
+                &quit("unable to ensure $slink.rpm-tmp nonexistent: $!");
+            my_symlink("$altdir/$sname","$slink.rpm-tmp") ||
+                &quit("unable to make $slink.rpm-tmp a symlink to $altdir/$sname: $!");
+            rename_mv("$slink.rpm-tmp",$slink) ||
+                &quit("unable to install $slink.rpm-tmp as $slink: $!");
+        }
+        $spath= $slavepath{$bestnum,$j};
+        unlink("$altdir/$sname.rpm-tmp") || $! == &ENOENT ||
+            &quit("unable to ensure $altdir/$sname.rpm-tmp nonexistent: $!");
+        if ($spath eq '') {
+            &pr("Removing $sname ($slink), not appropriate with $best.")
+              if $verbosemode > 0;
+            unlink("$altdir/$sname") || $! == &ENOENT ||
+                &quit("unable to remove $altdir/$sname: $!");
+	    unlink("$slink") || $! == &ENOENT ||
+	        &quit("unable to remove $slink: $!");
+        } else {
+            if (defined($linkname= readlink("$altdir/$sname")) && $linkname eq $spath) {
+                &pr("Leaving $sname ($slink) pointing to $spath.")
+                  if $verbosemode > 0;
+            } else {
+                &pr("Updating $sname ($slink) to point to $spath.")
+                  if $verbosemode > 0;
+            }
+            my_symlink("$spath","$altdir/$sname.rpm-tmp") ||
+                &quit("unable to make $altdir/$sname.rpm-tmp a symlink to $spath: $!");
+            rename_mv("$altdir/$sname.rpm-tmp","$altdir/$sname") ||
+                &quit("unable to install $altdir/$sname.rpm-tmp as $altdir/$sname: $!");
+        }
+    }
+}
+
+sub config_message {
+    if ($#versions == 0) {
+	print "\nThere is only 1 program which provides $name\n";
+	print "($versions[0]). Nothing to configure.\n";
+	return;
+    }
+    printf(STDOUT "\nThere are %s programs which provide \`$name'.\n\n", $#versions+1);
+    printf(STDOUT "  Selection    Command\n");
+    printf(STDOUT "-----------------------------------------------\n");
+    for ($i=0; $i<=$#versions; $i++) {
+	printf(STDOUT "%s%s    %s        %s\n", 
+	    (readlink("$altdir/$name") eq $versions[$i]) ? '*' : ' ',
+	    ($best eq $versions[$i]) ? '+' : ' ',
+	    $i+1, $versions[$i]);
+    }
+    printf(STDOUT "\nEnter to keep the default[*], or type selection number: ");
+}
+
+sub config_alternatives {
+    do {
+	&config_message;
+	if ($#versions == 0) { return; }
+	$preferred=<STDIN>;
+	chop($preferred);
+    } until $preferred eq '' || $preferred>=1 && $preferred<=$#versions+1 &&
+	($preferred =~ m/[0-9]*/);
+    if ($preferred ne '') {
+    	$manual = "manual";
+	$preferred--;
+	print STDOUT "Using \`$versions[$preferred]' to provide \`$name'.\n";
+	my $spath = $versions[$preferred];
+	my_symlink("$spath","$altdir/$name.rpm-tmp") ||
+	    &quit("unable to make $altdir/$name.rpm-tmp a symlink to $spath: $!");
+	rename_mv("$altdir/$name.rpm-tmp","$altdir/$name") ||
+	    &quit("unable to install $altdir/$name.rpm-tmp as $altdir/$name: $!");
+	# Link slaves...
+	for( my $slnum = 0; $slnum < @slavenames; $slnum++ ) {
+	    my $slave = $slavenames[$slnum];
+	    if ($slavepath{$preferred,$slnum} ne '') {
+		checked_symlink($slavepath{$preferred,$slnum},
+			"$altdir/$slave.rpm-tmp");
+		checked_mv("$altdir/$slave.rpm-tmp", "$altdir/$slave");
+	    } else {
+		&pr("Removing $slave ($slavelinks[$slnum]), not appropriate with $versions[$preferred].")
+		    if $verbosemode > 0;
+		unlink("$altdir/$slave") || $! == &ENOENT ||
+		    &quit("unable to remove $altdir/$slave: $!");
+	    }
+	}
+
+    }
+}
+
+sub pr { print(STDOUT "@_\n") || &quit("error writing stdout: $!"); }
+sub paf {
+    $_[0] =~ m/\n/ && &quit("newlines prohibited in update-alternatives files ($_[0])");
+    print(AF "$_[0]\n") || &quit("error writing stdout: $!");
+}
+sub gl {
+    $!=0; $_= <AF>;
+    length($_) || &quit("error or eof reading $admindir/$name for $_[0] ($!)");
+    s/\n$// || &badfmt("missing newline after $_[0]");
+    $_;
+}
+sub badfmt {
+    &quit("internal error: $admindir/$name corrupt: $_[0]");
+}
+sub rename_mv {
+    return (rename($_[0], $_[1]) || (system(("mv", $_[0], $_[1])) == 0));
+}
+sub checked_symlink {
+    my ($filename, $linkname) = @_;
+    my_symlink($filename, $linkname) ||
+	&quit("unable to make $linkname a symlink to $filename: $!");
+}
+
+sub my_symlink {
+	my ($filename, $linkname) = @_;
+	local $_ = $linkname;
+	s|//|/|g;
+	my $relative = join('/', ("..")  x (split(m|/|) - 2));
+#	symlink($relative.$filename,$linkname) ||
+	symlink($filename,$linkname) ||
+	&quit("unable to make $linkname a symlink to $relative.$filename: $!");
+
+}
+
+sub checked_mv {
+    my ($source, $dest) = @_;
+    rename_mv($source, $dest) ||
+	&quit("unable to install $source as $dest: $!");
+}
+
+exit(0);
+
+# vim: nowrap ts=8 sw=4
--- rpm-4.0/update-alternatives.8.pix	Thu Apr  5 23:47:06 2001
+++ rpm-4.0/update-alternatives.8	Thu Apr  5 23:47:06 2001
@@ -0,0 +1,364 @@
+.\" update-alternatives.8
+.\" This man page is copyright 1997 Charles Briscoe-Smith
+.\" This is free documentation; you can redistribute it and/or modify
+.\" it under the terms of the GNU General Public License as published
+.\" by the Free Software Foundation; either version 2 of the License, or
+.\" (at your option) any later version.  There is NO WARRANTY.  You can
+.\" find the GNU GPL in /usr/share/common-licenses/GPL on any Debian system.
+.TH UPDATE-ALTERNATIVES 8 "19 January 1998" "MandrakeSoft" "Linux-Mandrake"
+.SH NAME
+update-alternatives \- maintain symbolic links determining default commands
+.SH SYNOPSIS
+.B update-alternatives
+.RI [ options ]
+.B --install
+.I link name path priority
+.RB [ --slave
+.I link name
+.IR path ]...
+.PP
+.B update-alternatives
+.RI [ options ]
+.B --remove
+.I name path
+.PP
+.B update-alternatives
+.RI [ options ]
+.B --auto
+.I name
+.PP
+.B update-alternatives
+.RI [ options ]
+.B --display
+.I name
+.PP
+.B update-alternatives
+.RI [ options ]
+.B --config
+.I name
+.SH DESCRIPTION
+.B update-alternatives
+creates, removes, maintains and displays information about the symbolic
+links comprising the Linux-Mandrake alternatives system.
+.PP
+It is possible for several programs fulfilling the same or similar
+functions to be installed on a single system at the same time.
+For example, many systems have several text editors installed at once.
+This gives choice to the users of a system, allowing each to use a
+different editor, if desired, but makes it difficult for a program
+to make a good choice of editor to invoke if the
+user has not specified a particular preference.
+.PP
+Debian's alternatives system aims to solve this problem.
+A generic name in the filesystem is
+shared by all files providing interchangeable functionality.
+The alternatives system and the system administrator
+together determine which actual file is referenced by this generic name.
+For example, if the text editors
+.BR ed (1)
+and
+.BR nvi (1)
+are both installed on the system, the alternatives system will cause
+the generic name
+.I /usr/bin/editor
+to refer to
+.I /usr/bin/nvi
+by default.  The system administrator can override this and cause
+it
+to refer to
+.I /usr/bin/ed
+instead,
+and the alternatives system will not alter this setting until explicitly
+requested to do so.
+.PP
+The generic name is not a direct symbolic link to the selected alternative.
+Instead, it is a symbolic link to a name in the
+.I alternatives
+.IR directory ,
+which in turn is a symbolic link to the actual file referenced.
+This is done so that the system administrator's changes can be confined
+within the
+.I /etc
+directory: the FHS (q.v.) gives reasons why this is a Good Thing.
+.PP
+When each package
+providing a file with a particular functionality is
+installed, changed or removed,
+.B update-alternatives
+is called to update information about that file in the alternatives system.
+.B update-alternatives
+is usually called from the
+.B postinst
+or
+.B prerm
+scripts in Debian packages.
+.PP
+It is often useful for a number of alternatives to be synchronised,
+so that they are changed as a group; for example, when several versions
+of the
+.BR vi (1)
+editor are installed, the man page referenced by
+.I /usr/share/man/man1/vi.1
+should correspond to the executable referenced by
+.IR /usr/bin/vi .
+.B update-alternatives
+handles this by means of
+.I master
+and
+.I slave
+links; when the master is changed, any associated slaves are changed
+too.
+A master link and its associated slaves make up a
+.I link
+.IR group .
+.PP
+Each link group is, at any given time,
+in one of two modes: automatic or manual.
+When a group is in automatic mode, the alternatives system will
+automatically decide, as packages are installed and removed,
+whether and how to update the links.
+In manual mode, the alternatives system will not change the links;
+it will leave all the decisions to the system administrator.
+.PP
+Link groups are in automatic mode when they are first introduced to
+the system.
+If the system administrator makes changes to the system's
+automatic settings,
+this will be noticed the next time
+.B update-alternatives
+is run on the changed link's group,
+and the group will automatically be switched to manual mode.
+.PP
+Each alternative has a
+.I priority
+associated with it.
+When a link group is in automatic mode,
+the alternatives pointed to by members of the group
+will be those which have the highest priority.
+.PP
+When using the
+.I --config
+option,
+.B update-alternatives
+will list all of the choices for the link group
+of which given
+.I name
+is the master link.
+You will then be prompted for which of the choices to use
+for the link group. Once you make a change, the link group will no
+longer be in
+.I auto
+mode. You will need to use the
+.I --auto
+option in order to return to the automatic state.
+.SH TERMINOLOGY
+Since the activities of
+.B update-alternatives
+are quite involved, some specific terms will help to explain its
+operation.
+.TP
+generic name
+A name, like
+.IR /usr/bin/editor ,
+which refers, via the alternatives system, to one of a number of
+files of similar function.
+.TP
+symlink
+Without any further qualification, this means a symbolic link in the
+alternatives directory: one which the system administrator is expected
+to adjust.
+.TP
+alternative
+The name of a specific file in the filesystem, which may be made
+accessible via a generic name using the alternatives system.
+.TP
+alternatives directory
+A directory, by default
+.IR /etc/alternatives ,
+containing the symlinks.
+.TP
+administrative directory
+A directory, by default
+.IR /var/lib/rpm/alternatives ,
+containing
+.BR update-alternatives '
+state information.
+.TP
+link group
+A set of related symlinks, intended to be updated as a group.
+.TP
+master link
+The link in a link group which determines how the other links in the
+group are configured.
+.TP
+slave link
+A link in a link group which is controlled by the setting of
+the master link.
+.TP
+automatic mode
+When a link group is in automatic mode,
+the alternatives system ensures that the links in the group
+point to the highest priority alternatives
+appropriate for the group.
+.TP
+manual mode
+When a link group is in manual mode,
+the alternatives system will not make any changes
+to the system administrator's settings.
+.SH OPTIONS
+Exactly one action must be specified if
+.B update-alternatives
+is to perform any meaningful task.
+Any number of the common options may be specified together with any action.
+.SS "COMMON OPTIONS"
+.TP
+.B --verbose
+Generate more comments about what
+.B update-alternatives
+is doing.
+.TP
+.B --quiet
+Don't generate any comments unless errors occur.
+This option is not yet implemented.
+.TP
+.B --test
+Don't actually do anything, just say what would be done.
+This option is not yet implemented.
+.TP
+.B --help
+Give some usage information (and say which version of
+.B update-alternatives
+this is).
+.TP
+.B --version
+Tell which version of
+.B update-alternatives
+this is (and give some usage information).
+.TP
+\fB--altdir\fR \fIdirectory\fR
+Specifies the alternatives directory, when this is to be
+different from the default.
+.TP
+\fB--admindir\fR \fIdirectory\fR
+Specifies the administrative directory, when this is to be
+different from the default.
+.SS ACTIONS
+.\" The names of the arguments should be identical with the ones
+.\" in SYNOPSIS section.
+.TP
+\fB--install\fR \fIlink gen path pri\fR [\fB--slave\fR \fIslink sgen spath\fR] ...
+Add a group of alternatives to the system.
+.I gen
+is the generic name for the master link,
+.I link
+is the name of its symlink, and
+.I path
+is the alternative being introduced for the master link.
+.IR sgen ,
+.I slink
+and
+.I spath
+are the generic name, symlink name and alternative
+for a slave link.
+Zero or more
+.B --slave
+options, each followed by three arguments,
+may be specified.
+.IP
+If the master symlink specified exists already
+in the alternatives system's records,
+the information supplied will be added as a new
+set of alternatives for the group.
+Otherwise, a new group, set to automatic mode,
+will be added with this information.
+If the group is in automatic mode,
+and the newly added alternatives' priority is higher than
+any other installed alternatives for this group,
+the symlinks will be updated to point to the newly added alternatives.
+.TP
+\fB--remove\fR \fIname path\fR
+Remove an alternative and all of its associated slave links.
+.I name
+is a name in the alternatives directory, and
+.I path
+is an absolute filename to which
+.I name
+could be linked.  If
+.I name
+is indeed linked to
+.IR path ,
+.I name
+will be updated to point to another appropriate alternative, or
+removed if there is no such alternative left.
+Associated slave links will be updated or removed, correspondingly.
+If the link is not currently pointing to
+.IR path ,
+no links are changed;
+only the information about the alternative is removed.
+.TP
+\fB--auto\fR \fIlink\fR
+Switch the master symlink
+.I link
+to automatic mode.
+In the process, this symlink and its slaves are updated
+to point to the highest priority installed alternatives.
+.TP
+\fB--display\fR \fIlink\fR
+Display information about the link group of which
+.I link
+is the master link.
+Information displayed includes the group's mode
+(auto or manual),
+which alternative the symlink currently points to,
+what other alternatives are available
+(and their corresponding slave alternatives),
+and the highest priority alternative currently installed.
+.SH FILES
+.TP
+.I /etc/alternatives/
+The default alternatives directory.
+Can be overridden by the
+.B --altdir
+option.
+.TP
+.I /var/lib/rpm/alternatives/
+The default administration directory.
+Can be overridden by the
+.B --admindir
+option.
+.SH "EXIT STATUS"
+.IP 0
+The requested action was successfully performed.
+.IP 2
+Problems were encountered whilst parsing the command line
+or performing the action.
+.SH DIAGNOSTICS
+.B update-alternatives
+chatters incessantly about its activities on its standard output channel.
+If problems occur,
+.B update-alternatives
+outputs error messages on its standard error channel and
+returns an exit status of 2.
+These diagnostics should be self-explanatory;
+if you do not find them so, please report this as a bug.
+.SH BUGS
+If you find a bug, please report it using the Debian bug-tracking system,
+or, if that is not possible, email the author directly.
+.PP
+If you find any discrepancy between the operation of
+.B update-alternatives
+and this manual page, it is a bug,
+either in the implementation or the documentation; please report it.
+.SH AUTHOR
+Debian update-alternatives is copyright 1995
+Ian Jackson.  It is free software; see the GNU General Public Licence
+version 2 or later for copying conditions.  There is NO warranty.
+.PP
+This manual page is copyright 1997/98 Charles Briscoe-Smith.
+This is free documentation; see the GNU General Public Licence
+version 2 or later for copying conditions.  There is NO WARRANTY.
+.PP
+You can find the GNU GPL in /usr/share/common-licenses/GPL on any Debian system.
+.SH "SEE ALSO"
+.BR ln (1),
+FHS, the Filesystem Hierarchy Standard.
