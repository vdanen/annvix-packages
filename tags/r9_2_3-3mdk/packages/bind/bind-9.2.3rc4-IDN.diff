diff -Naur bind-9.2.3rc4/README.idnkit bind-9.2.3rc4.oden/README.idnkit
--- bind-9.2.3rc4/README.idnkit	1970-01-01 01:00:00.000000000 +0100
+++ bind-9.2.3rc4.oden/README.idnkit	2003-10-09 16:21:15.000000000 +0200
@@ -0,0 +1,113 @@
+
+			BIND-9 IDN patch
+
+	       Japan Network Information Center (JPNIC)
+
+
+* What is this patch for?
+
+This patch adds internationalized domain name (IDN) support to BIND-9.
+You'll get internationalized version of dig/host/nslookup commands.
+
+    + internationalized dig/host/nslookup
+	dig/host/nslookup accepts non-ASCII domain names in the local
+	codeset (such as Shift JIS, Big5 or ISO8859-1) determined by
+	the locale information.  The domain names are normalized and
+	converted to the encoding on the DNS protocol, and sent to DNS
+	servers.  The replies are converted back to the local codeset
+	and displayed.
+
+
+* Compilation & installation
+
+0. Prerequisite
+
+You have to build and install idnkit before building this patched version
+of bind-9.
+
+1. Running configure script
+
+Run `configure' in the top directory.  See `README' for the
+configuration options.
+
+This patch adds the following 4 options to `configure'.  You should
+at least specify `--with-idn' option to enable IDN support.
+
+    --with-idn[=IDN_PREFIX]
+	To enable IDN support, you have to specify `--with-idn' option.
+	The argument IDN_PREFIX is the install prefix of idnkit.  If
+	IDN_PREFIX is omitted, PREFIX (derived from `--prefix=PREFIX')
+	is assumed.
+
+    --with-libiconv[=LIBICONV_PREFIX]
+	Specify this option if idnkit you have installed links GNU
+	libiconv.  The argument LIBICONV_PREFIX is install prefix of
+	GNU libiconv.  If the argument is omitted, PREFIX (derived
+	from `--prefix=PREFIX') is assumed.
+
+	`--with-libiconv' is shorthand option for GNU libiconv.
+
+	    --with-libiconv=/usr/local
+
+	This is equivalent to:
+
+	    --with-iconv='-L/usr/local/lib -R/usr/local/lib -liconv'
+
+	`--with-libiconv' assumes that your C compiler has `-R'
+	option, and that the option adds the specified run-time path
+	to an exacutable binary.  If `-R' option of your compiler has
+	different meaning, or your compiler lacks the option, you
+	should use `--with-iconv' option instead.  Binary command
+	without run-time path information might be unexecutable.
+	In that case, you would see an error message like:
+
+	    error in loading shared libraries: libiconv.so.2: cannot
+	    open shared object file
+
+	If both `--with-libiconv' and `--with-iconv' options are
+	specified, `--with-iconv' is prior to `--with-libiconv'.
+
+    --with-iconv=ICONV_LIBSPEC
+	If your libc doens't provide iconv(), you need to specify the
+	library containing iconv() with this option.  `ICONV_LIBSPEC'
+	is the argument(s) to `cc' or `ld' to link the library, for
+	example, `--with-iconv="-L/usr/local/lib -liconv"'.
+	You don't need to specify the header file directory for "iconv.h"
+	to the compiler, as it isn't included directly by bind-9 with
+	this patch.
+
+    --with-idnlib=IDN_LIBSPEC
+	With this option, you can explicitly specify the argument(s)
+	to `cc' or `ld' to link the idnkit's library, `libidnkit'.  If
+	this option is not specified, `-L${PREFIX}/lib -lidnkit' is
+	assumed, where ${PREFIX} is the installation prefix specified
+	with `--with-idn' option above.  You may need to use this
+	option to specify extra argments, for example,
+	`--with-idnlib="-L/usr/local/lib -R/usr/local/lib -lidnkit"'.
+
+Please consult `README' for other configuration options.
+
+Note that if you want to specify some extra header file directories,
+you should use the environment variable STD_CINCLUDES instead of
+CFLAGS, as described in README.
+
+2. Compilation and installation
+
+After running "configure", just do
+
+	make
+	make install
+
+for compiling and installing.
+
+
+* Contact information
+
+Please see http//www.nic.ad.jp/en/idn/ for the latest news
+about idnkit and this patch.
+
+Bug reports and comments on this kit should be sent to
+mdnkit-bugs@nic.ad.jp and idn-cmt@nic.ad.jp, respectively.
+
+
+; $Id: bind-9.2.2-patch,v 1.1 2003/03/11 00:22:26 ishisone Exp $
diff -Naur bind-9.2.3rc4/bin/dig/Makefile.in bind-9.2.3rc4.oden/bin/dig/Makefile.in
--- bind-9.2.3rc4/bin/dig/Makefile.in	2001-06-08 19:18:06.000000000 +0200
+++ bind-9.2.3rc4.oden/bin/dig/Makefile.in	2003-10-09 16:21:19.000000000 +0200
@@ -36,7 +36,7 @@
 
 DEPLIBS =	${DNSDEPLIBS} ${ISCDEPLIBS}
 
-LIBS =		${DNSLIBS} ${ISCLIBS} @LIBS@
+LIBS =		${DNSLIBS} ${ISCLIBS} @IDNLIBS@ @LIBS@
 
 SUBDIRS =
 
diff -Naur bind-9.2.3rc4/bin/dig/dig.1 bind-9.2.3rc4.oden/bin/dig/dig.1
--- bind-9.2.3rc4/bin/dig/dig.1	2003-07-23 04:23:04.000000000 +0200
+++ bind-9.2.3rc4.oden/bin/dig/dig.1	2003-10-09 16:21:19.000000000 +0200
@@ -353,6 +353,17 @@
 \fI+noqr\fR which means that \fBdig\fR
 will not print the initial query when it looks up the NS records for
 isc.org.
+.SH "IDN SUPPORT"
+.PP
+If \fBdig\fR has been built with IDN (internationalized
+domain name) support, it can accept and display non-ASCII domain names.
+\fBdig\fR appropriately converts character encoding of
+domain name before sending a request to DNS server or displaying a
+reply from the server.
+If you'd like to turn off the IDN support for some reason, defines
+the \fBIDN_DISABLE\fR environment variable.
+The IDN support is disabled if the the variable is set when 
+\fBdig\fR runs.
 .SH "FILES"
 .PP
 \fI/etc/resolv.conf\fR
diff -Naur bind-9.2.3rc4/bin/dig/dig.docbook bind-9.2.3rc4.oden/bin/dig/dig.docbook
--- bind-9.2.3rc4/bin/dig/dig.docbook	2003-05-12 04:50:15.000000000 +0200
+++ bind-9.2.3rc4.oden/bin/dig/dig.docbook	2003-10-09 16:21:19.000000000 +0200
@@ -529,6 +529,21 @@
 </refsect1>
 
 <refsect1>
+<title>IDN SUPPORT</title>
+<para>
+If <command>dig</command> has been built with IDN (internationalized
+domain name) support, it can accept and display non-ASCII domain names.
+<command>dig</command> appropriately converts character encoding of
+domain name before sending a request to DNS server or displaying a
+reply from the server.
+If you'd like to turn off the IDN support for some reason, defines
+the <envar>IDN_DISABLE</envar> environment variable.
+The IDN support is disabled if the the variable is set when 
+<command>dig</command> runs.
+</para>
+</refsect1>
+
+<refsect1>
 <title>FILES</title>
 <para>
 <filename>/etc/resolv.conf</filename>
diff -Naur bind-9.2.3rc4/bin/dig/dighost.c bind-9.2.3rc4.oden/bin/dig/dighost.c
--- bind-9.2.3rc4/bin/dig/dighost.c	2003-07-25 06:36:43.000000000 +0200
+++ bind-9.2.3rc4.oden/bin/dig/dighost.c	2003-10-09 16:21:19.000000000 +0200
@@ -32,6 +32,17 @@
 #include <string.h>
 #include <limits.h>
 
+#ifdef HAVE_LOCALE_H
+#include <locale.h>
+#endif
+
+#ifdef WITH_IDN
+#include <idn/result.h>
+#include <idn/log.h>
+#include <idn/resconf.h>
+#include <idn/api.h>
+#endif
+
 #include <dns/byaddr.h>
 #include <dns/fixedname.h>
 #include <dns/message.h>
@@ -131,6 +142,18 @@
 isc_mutex_t lookup_lock;
 dig_lookup_t *current_lookup = NULL;
 
+#ifdef WITH_IDN
+static void	      initialize_idn(void);
+static isc_result_t   output_filter(isc_buffer_t *buffer,
+				    unsigned int used_org,
+				    isc_boolean_t absolute);
+static idn_result_t   append_textname(char *name, const char *origin,
+				      size_t namesize);
+static void	      idn_check_result(idn_result_t r, const char *msg);
+
+#define MAXDLEN               256
+#endif
+
 /*
  * Apply and clear locks at the event level in global task.
  * Can I get rid of these using shutdown events?  XXX
@@ -682,6 +705,10 @@
 		ISC_LIST_APPEND(server_list, srv, link);
 	}
 
+#ifdef WITH_IDN
+	initialize_idn();
+#endif
+
 	if (keyfile[0] != 0)
 		setup_file_key();
 	else if (keysecret[0] != 0)
@@ -1202,6 +1229,14 @@
 	isc_buffer_t b;
 	dns_compress_t cctx;
 	char store[MXNAME];
+#ifdef WITH_IDN
+	idn_result_t mr;
+	char utf8_textname[MXNAME], utf8_origin[MXNAME], idn_textname[MXNAME];
+#endif
+
+#ifdef WITH_IDN
+	dns_name_settotextfilter(output_filter);
+#endif
 
 	REQUIRE(lookup != NULL);
 	INSIST(!free_now);
@@ -1230,6 +1265,17 @@
 	isc_buffer_init(&lookup->onamebuf, lookup->onamespace,
 			sizeof(lookup->onamespace));
 
+#ifdef WITH_IDN
+	/*
+	 * We cannot convert `textname' and `origin' separately.
+	 * `textname' doesn't contain TLD, but local mapping needs
+	 * TLD.
+	 */
+	mr = idn_encodename(IDN_LOCALCONV | IDN_DELIMMAP, lookup->textname,
+			    utf8_textname, sizeof(utf8_textname));
+	idn_check_result(mr, "convert textname to UTF-8");
+#endif
+
 	/*
 	 * If the name has too many dots, force the origin to be NULL
 	 * (which produces an absolute lookup).  Otherwise, take the origin
@@ -1238,12 +1284,41 @@
 	 * is TRUE or we got a domain line in the resolv.conf file.
 	 */
 	/* XXX New search here? */
+#ifdef WITH_IDN
+	if ((count_dots(utf8_textname) >= ndots) || !usesearch)
+		lookup->origin = NULL; /* Force abs lookup */
+	else if (lookup->origin == NULL && lookup->new_search && usesearch) {
+		lookup->origin = ISC_LIST_HEAD(search_list);
+	}
+#else
 	if ((count_dots(lookup->textname) >= ndots) || !usesearch)
 		lookup->origin = NULL; /* Force abs lookup */
 	else if (lookup->origin == NULL && lookup->new_search && usesearch) {
 		lookup->origin = ISC_LIST_HEAD(search_list);
 	}
+#endif
+
+#ifdef WITH_IDN
 	if (lookup->origin != NULL) {
+		mr = idn_encodename(IDN_LOCALCONV | IDN_DELIMMAP,
+				    lookup->origin->origin, utf8_origin,
+				    sizeof(utf8_origin));
+		idn_check_result(mr, "convert origin to UTF-8");
+		mr = append_textname(utf8_textname, utf8_origin,
+				     sizeof(utf8_textname));
+		idn_check_result(mr, "append origin to textname");
+	}
+	mr = idn_encodename(IDN_LOCALMAP | IDN_NAMEPREP | IDN_ASCCHECK |
+			    IDN_IDNCONV | IDN_LENCHECK, utf8_textname,
+			    idn_textname, sizeof(idn_textname));
+	idn_check_result(mr, "convert UTF-8 textname to IDN encoding");
+#endif
+
+#ifdef WITH_IDN
+	if (0) {
+#else
+	if (lookup->origin != NULL) {
+#endif
 		debug("trying origin %s", lookup->origin->origin);
 		result = dns_message_gettempname(lookup->sendmsg,
 						 &lookup->oname);
@@ -1288,6 +1363,15 @@
 		if (lookup->trace && lookup->trace_root)
 			dns_name_clone(dns_rootname, lookup->name);
 		else {
+#ifdef WITH_IDN
+			len = strlen(idn_textname);
+			isc_buffer_init(&b, idn_textname, len);
+			isc_buffer_add(&b, len);
+			result = dns_name_fromtext(lookup->name, &b,
+						   dns_rootname,
+						   ISC_FALSE,
+						   &lookup->namebuf);
+#else
 			len = strlen(lookup->textname);
 			isc_buffer_init(&b, lookup->textname, len);
 			isc_buffer_add(&b, len);
@@ -1295,6 +1379,7 @@
 						   dns_rootname,
 						   ISC_FALSE,
 						   &lookup->namebuf);
+#endif
 		}
 		if (result != ISC_R_SUCCESS) {
 			dns_message_puttempname(lookup->sendmsg,
@@ -2723,3 +2808,101 @@
 	if (mctx != NULL)
 		isc_mem_destroy(&mctx);
 }
+
+#ifdef WITH_IDN
+static void
+initialize_idn(void) {
+	idn_result_t r;
+
+#ifdef HAVE_SETLOCALE
+	/* Set locale */
+	(void)setlocale(LC_ALL, "");
+#endif
+	/* Create configuration context. */
+	r = idn_nameinit(1);
+	if (r != idn_success)
+		fatal("idn api initialization failed: %s",
+		      idn_result_tostring(r));
+
+	/* Set domain name -> text post-conversion filter. */
+	dns_name_settotextfilter(output_filter);
+}
+
+static isc_result_t
+output_filter(isc_buffer_t *buffer, unsigned int used_org,
+	      isc_boolean_t absolute)
+{
+	char tmp1[MAXDLEN], tmp2[MAXDLEN];
+	size_t fromlen, tolen;
+	isc_boolean_t end_with_dot;
+
+	/*
+	 * Copy contents of 'buffer' to 'tmp1', supply trailing dot
+	 * if 'absolute' is true, and terminate with NUL.
+	 */
+	fromlen = isc_buffer_usedlength(buffer) - used_org;
+	if (fromlen >= MAXDLEN)
+		return (ISC_R_SUCCESS);
+	memcpy(tmp1, (char *)isc_buffer_base(buffer) + used_org, fromlen);
+	end_with_dot = (tmp1[fromlen - 1] == '.') ? ISC_TRUE : ISC_FALSE;
+	if (absolute && !end_with_dot) {
+		fromlen++;
+		if (fromlen >= MAXDLEN)
+			return (ISC_R_SUCCESS);
+		tmp1[fromlen - 1] = '.';
+	}
+	tmp1[fromlen] = '\0';
+
+	/*
+	 * Convert contents of 'tmp1' to local encoding.
+	 */
+	if (idn_decodename(IDN_DECODE_APP, tmp1, tmp2, MAXDLEN) != idn_success)
+		return (ISC_R_SUCCESS);
+	strcpy(tmp1, tmp2);
+
+	/*
+	 * Copy the converted contents in 'tmp1' back to 'buffer'.
+	 * If we have appended trailing dot, remove it.
+	 */
+	tolen = strlen(tmp1);
+	if (absolute && !end_with_dot && tmp1[tolen - 1] == '.')
+		tolen--;
+
+	if (isc_buffer_length(buffer) < used_org + tolen)
+		return (ISC_R_NOSPACE);
+
+	isc_buffer_subtract(buffer, isc_buffer_usedlength(buffer) - used_org);
+	memcpy(isc_buffer_used(buffer), tmp1, tolen);
+	isc_buffer_add(buffer, tolen);
+
+	return (ISC_R_SUCCESS);
+}
+
+static idn_result_t
+append_textname(char *name, const char *origin, size_t namesize) {
+	size_t namelen = strlen(name);
+	size_t originlen = strlen(origin);
+
+	/* Already absolute? */
+	if (namelen > 0 && name[namelen - 1] == '.')
+		return idn_success;
+
+	/* Append dot and origin */
+
+	if (namelen + 1 + originlen >= namesize)
+		return idn_buffer_overflow;
+
+	name[namelen++] = '.';
+	(void)strcpy(name + namelen, origin);
+	return idn_success;
+}
+
+static void
+idn_check_result(idn_result_t r, const char *msg) {
+	if (r != idn_success) {
+		exitcode = 1;
+		fatal("%s: %s", msg, idn_result_tostring(r));
+	}
+}
+
+#endif /* WITH_IDN */
diff -Naur bind-9.2.3rc4/bin/dig/host.1 bind-9.2.3rc4.oden/bin/dig/host.1
--- bind-9.2.3rc4/bin/dig/host.1	2003-03-06 05:38:10.000000000 +0100
+++ bind-9.2.3rc4.oden/bin/dig/host.1	2003-10-09 16:21:19.000000000 +0200
@@ -120,6 +120,17 @@
 effectively wait forever for a reply. The time to wait for a response
 will be set to the number of seconds given by the hardware's maximum
 value for an integer quantity.
+.SH "IDN SUPPORT"
+.PP
+If \fBhost\fR has been built with IDN (internationalized
+domain name) support, it can accept and display non-ASCII domain names.
+\fBhost\fR appropriately converts character encoding of
+domain name before sending a request to DNS server or displaying a
+reply from the server.
+If you'd like to turn off the IDN support for some reason, defines
+the \fBIDN_DISABLE\fR environment variable.
+The IDN support is disabled if the the variable is set when
+\fBhost\fR runs.
 .SH "FILES"
 .PP
 \fI/etc/resolv.conf\fR
diff -Naur bind-9.2.3rc4/bin/dig/host.docbook bind-9.2.3rc4.oden/bin/dig/host.docbook
--- bind-9.2.3rc4/bin/dig/host.docbook	2003-03-06 05:38:10.000000000 +0100
+++ bind-9.2.3rc4.oden/bin/dig/host.docbook	2003-10-09 16:21:19.000000000 +0200
@@ -181,6 +181,21 @@
 </refsect1>
 
 <refsect1>
+<title>IDN SUPPORT</title>
+<para>
+If <command>host</command> has been built with IDN (internationalized
+domain name) support, it can accept and display non-ASCII domain names.
+<command>host</command> appropriately converts character encoding of
+domain name before sending a request to DNS server or displaying a
+reply from the server.
+If you'd like to turn off the IDN support for some reason, defines
+the <envar>IDN_DISABLE</envar> environment variable.
+The IDN support is disabled if the the variable is set when
+<command>host</command> runs.
+</para>
+</refsect1>
+
+<refsect1>
 <title>FILES</title>
 <para>
 <filename>/etc/resolv.conf</filename>
diff -Naur bind-9.2.3rc4/config.h.in bind-9.2.3rc4.oden/config.h.in
--- bind-9.2.3rc4/config.h.in	2003-08-05 02:44:43.000000000 +0200
+++ bind-9.2.3rc4.oden/config.h.in	2003-10-09 16:23:28.000000000 +0200
@@ -160,6 +160,15 @@
 /* Define to 1 if you have the `socket' library (-lsocket). */
 #undef HAVE_LIBSOCKET
 
+/* Define if you have the setlocale function.  */
+#undef HAVE_SETLOCALE
+
+/* Define if you have the <locale.h> header file.  */
+#undef HAVE_LOCALE_H
+
+/* define if idnkit support is to be included. */
+#undef WITH_IDN
+
 /* Define to 1 if you have the <linux/capability.h> header file. */
 #undef HAVE_LINUX_CAPABILITY_H
 
diff -Naur bind-9.2.3rc4/configure.in bind-9.2.3rc4.oden/configure.in
--- bind-9.2.3rc4/configure.in	2003-08-05 02:42:53.000000000 +0200
+++ bind-9.2.3rc4.oden/configure.in	2003-10-09 16:23:48.000000000 +0200
@@ -1695,6 +1695,82 @@
 NOM_PATH_FILE(DOCBOOK2MANSPEC, docbook2X/docbook2man-spec.pl, $sgmltrees)
 
 #
+# IDN support
+#
+AC_ARG_WITH(idn,
+	[  --with-idn[=MPREFIX]   enable IDN support using idnkit [default PREFIX]],
+	use_idn="$withval", use_idn="no")
+case "$use_idn" in
+yes)
+	if test X$prefix = XNONE ; then
+		idn_path=/usr/local
+	else
+		idn_path=$prefix
+	fi
+	;;
+no)
+	;;
+*)
+	idn_path="$use_idn"
+	;;
+esac
+
+iconvinc=
+iconvlib=
+AC_ARG_WITH(libiconv,
+	[  --with-libiconv[=IPREFIX]   GNU libiconv are in IPREFIX [default PREFIX]],
+	use_libiconv="$withval", use_libiconv="no")
+case "$use_libiconv" in
+yes)
+	if test X$prefix = XNONE ; then
+		iconvlib="-L/usr/local/lib -R/usr/local/lib -liconv"
+	else
+		iconvlib="-L$prefix/lib -R$prefix/lib -liconv"
+	fi
+	;;
+no)
+	iconvlib=
+	;;
+*)
+	iconvlib="-L$use_libiconv/lib -R$use_libiconv/lib -liconv"
+	;;
+esac
+
+AC_ARG_WITH(iconv,
+	[  --with-iconv[=LIBSPEC]   specify iconv library [default -liconv]],
+	iconvlib="$withval")
+case "$iconvlib" in
+no)
+	iconvlib=
+	;;
+yes)
+	iconvlib=-liconv
+	;;
+esac
+
+AC_ARG_WITH(idnlib,
+	[  --with-idnlib=ARG    specify libidnkit],
+	idnlib="$withval", idnlib="no")
+if test "$idnlib" = yes; then
+	AC_MSG_ERROR([You must specify ARG for --with-idnlib.])
+fi
+
+IDNLIBS=
+if test "$use_idn" != no; then
+	AC_DEFINE(WITH_IDN, 1, [define if idnkit support is to be included.])
+	STD_CINCLUDES="$STD_CINCLUDES -I$idn_path/include"
+	if test "$idnlib" != no; then
+		IDNLIBS="$idnlib $iconvlib"
+	else
+		IDNLIBS="-L$idn_path/lib -lidnkit $iconvlib"
+	fi
+fi
+AC_SUBST(IDNLIBS)
+
+AC_CHECK_HEADERS(locale.h)
+AC_CHECK_FUNCS(setlocale)
+
+#
 # Substitutions
 #
 AC_SUBST(BIND9_TOP_BUILDDIR)
diff -Naur bind-9.2.3rc4/lib/dns/include/dns/name.h bind-9.2.3rc4.oden/lib/dns/include/dns/name.h
--- bind-9.2.3rc4/lib/dns/include/dns/name.h	2003-07-25 05:31:44.000000000 +0200
+++ bind-9.2.3rc4.oden/lib/dns/include/dns/name.h	2003-10-09 16:21:19.000000000 +0200
@@ -219,6 +219,17 @@
  */
 #define DNS_NAME_MAXWIRE 255
 
+#ifdef WITH_IDN
+/*
+ * Text output filter procedure.
+ * 'target' is the buffer to be converted.  The region to be converted
+ * is from 'buffer'->base + 'used_org' to the end of the used region.
+ */
+typedef isc_result_t (*dns_name_totextfilter_t)(isc_buffer_t *target,
+						unsigned int used_org,
+						isc_boolean_t absolute);
+#endif
+
 /***
  *** Initialization
  ***/
@@ -1261,6 +1272,14 @@
  *
  */
 
+#ifdef WITH_IDN
+void
+dns_name_settotextfilter(dns_name_totextfilter_t proc);
+/*
+ * Call 'proc' at the end of dns_name_totext.
+ */
+#endif /* WITH_IDN */
+
 #define DNS_NAME_FORMATSIZE (DNS_NAME_MAXTEXT + 1)
 /*
  * Suggested size of buffer passed to dns_name_format().
diff -Naur bind-9.2.3rc4/lib/dns/name.c bind-9.2.3rc4.oden/lib/dns/name.c
--- bind-9.2.3rc4/lib/dns/name.c	2003-07-25 05:31:43.000000000 +0200
+++ bind-9.2.3rc4.oden/lib/dns/name.c	2003-10-09 16:21:19.000000000 +0200
@@ -195,6 +195,13 @@
 /* XXXDCL make const? */
 dns_name_t *dns_wildcardname = &wild;
 
+#ifdef WITH_IDN
+/*
+ * dns_name_t to text post-conversion procedure.
+ */
+static dns_name_totextfilter_t totext_filter_proc = NULL;
+#endif
+
 static void
 set_offsets(const dns_name_t *name, unsigned char *offsets,
 	    dns_name_t *set_name);
@@ -1699,6 +1706,9 @@
 	unsigned int labels;
 	isc_boolean_t saw_root = ISC_FALSE;
 	char num[4];
+#ifdef WITH_IDN
+	unsigned int oused = target->used;
+#endif
 
 	/*
 	 * This function assumes the name is in proper uncompressed
@@ -1876,6 +1886,10 @@
 
 	isc_buffer_add(target, tlen - trem);
 
+#ifdef WITH_IDN
+	if (totext_filter_proc != NULL)
+		return ((*totext_filter_proc)(target, oused, saw_root));
+#endif
 	return (ISC_R_SUCCESS);
 }
 
@@ -3340,3 +3354,9 @@
 	return (ISC_R_SUCCESS);
 }
 
+#ifdef WITH_IDN
+void
+dns_name_settotextfilter(dns_name_totextfilter_t proc) {
+	totext_filter_proc = proc;
+}
+#endif
