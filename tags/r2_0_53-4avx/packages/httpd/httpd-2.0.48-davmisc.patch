
- fix to propagate executable property across MOVE/COPY
- include an EOS bucket in the multistatus response brigade

Upstream-HEAD: committed
Upstream-Status: EOS fixes are pending backport, MOVE/COPY fixes risky on Win32?

--- httpd-2.0.50/modules/dav/fs/repos.c.davmisc
+++ httpd-2.0.50/modules/dav/fs/repos.c
@@ -296,21 +296,43 @@
            tms.tm_hour, tms.tm_min, tms.tm_sec);
 }
 
+/* Copy or move src to dst; src_finfo is used to propagate permissions
+ * bits across if non-NULL; dst_finfo must be non-NULL iff dst already
+ * exists. */
 static dav_error * dav_fs_copymove_file(
     int is_move,
     apr_pool_t * p,
     const char *src,
     const char *dst,
+    const apr_finfo_t *src_finfo,
+    const apr_finfo_t *dst_finfo,
     dav_buffer *pbuf)
 {
     dav_buffer work_buf = { 0 };
     apr_file_t *inf = NULL;
     apr_file_t *outf = NULL;
     apr_status_t status;
+    apr_fileperms_t perms;
 
     if (pbuf == NULL)
         pbuf = &work_buf;
 
+    /* Determine permissions to use for destination */
+    if (src_finfo && src_finfo->valid & APR_FINFO_PROT
+        && src_finfo->protection & APR_UEXECUTE) {
+        if (dst_finfo != NULL) {
+            /* chmod it if it already exist */
+            if (apr_file_perms_set(dst, perms)) {
+                return dav_new_error(p, HTTP_INTERNAL_SERVER_ERROR, 0,
+                                     "Could not set permissions on destination");
+            }
+        }
+        perms = src_finfo->protection;
+    } 
+    else {
+        perms = APR_OS_DEFAULT;
+    }
+
     dav_set_bufsize(p, pbuf, DAV_FS_COPY_BLOCKSIZE);
 
     if ((apr_file_open(&inf, src, APR_READ | APR_BINARY, APR_OS_DEFAULT, p)) 
@@ -322,7 +344,7 @@
 
     /* ### do we need to deal with the umask? */
     status = apr_file_open(&outf, dst, APR_WRITE | APR_CREATE | APR_TRUNCATE 
-                           | APR_BINARY, APR_OS_DEFAULT, p);
+                           | APR_BINARY, perms, p);
     if (status != APR_SUCCESS) {
         apr_file_close(inf);
 
@@ -477,7 +499,7 @@
     else
     {
         /* gotta copy (and delete) */
-        return dav_fs_copymove_file(is_move, p, src, dst, pbuf);
+        return dav_fs_copymove_file(is_move, p, src, dst, NULL, NULL, pbuf);
     }
 
     return NULL;
@@ -1034,6 +1057,8 @@
     else {
         err = dav_fs_copymove_file(ctx->is_move, ctx->pool, 
                                    srcinfo->pathname, dstinfo->pathname, 
+                                   &srcinfo->finfo, 
+                                   ctx->res_dst->exists ? &dstinfo->finfo : NULL,
                                    &ctx->work_buf);
         /* ### push a higher-level description? */
     }
@@ -1115,6 +1140,8 @@
     /* not a collection */
     if ((err = dav_fs_copymove_file(is_move, src->info->pool,
                                     src->info->pathname, dst->info->pathname,
+                                    &src->info->finfo, 
+                                    dst->exists ? &dst->info->finfo : NULL,
                                     &work_buf)) != NULL) {
         /* ### push a higher-level description? */
         return err;
--- httpd-2.0.50/modules/dav/main/mod_dav.c.davmisc
+++ httpd-2.0.50/modules/dav/main/mod_dav.c
@@ -508,6 +508,21 @@
     ap_fputs(r->output_filters, bb, ">" DEBUG_CR);
 }
 
+/* Finish a multistatus response started by dav_begin_multistatus: */
+static apr_status_t dav_finish_multistatus(request_rec *r,
+                                           apr_bucket_brigade *bb)
+{
+    apr_bucket *b;
+    
+    ap_fputs(r->output_filters, bb, "</D:multistatus>" DEBUG_CR);
+    
+    /* indicate the end of the response body */
+    b = apr_bucket_eos_create(r->connection->bucket_alloc);
+    APR_BRIGADE_INSERT_TAIL(bb, b);
+
+    /* deliver whatever might be remaining in the brigade */
+    return ap_pass_brigade(r->output_filters, bb);
+}
 
 static void dav_send_multistatus(request_rec *r, int status,
                                  dav_response *first,
@@ -527,8 +542,7 @@
     }
     apr_pool_destroy(subpool);
 
-    ap_fputs(r->output_filters, bb, "</D:multistatus>" DEBUG_CR);
-    ap_filter_flush(bb, r->output_filters);
+    dav_finish_multistatus(r, bb);
 }
 
 /*
@@ -2048,9 +2062,7 @@
         return DONE;
     }
 
-    /* Finish up the multistatus response. */
-    ap_fputs(r->output_filters, ctx.bb, "</D:multistatus>" DEBUG_CR);
-    ap_filter_flush(ctx.bb, r->output_filters);
+    dav_finish_multistatus(r, ctx.bb);
 
     /* the response has been sent. */
     return DONE;
