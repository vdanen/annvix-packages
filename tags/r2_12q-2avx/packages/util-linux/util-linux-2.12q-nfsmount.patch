Index: util-linux-2.12q/mount/nfsmount.c
===================================================================
--- util-linux-2.12q.orig/mount/nfsmount.c	2005-05-03 12:01:19.000000000 +0200
+++ util-linux-2.12q/mount/nfsmount.c	2005-05-03 13:29:59.000000000 +0200
@@ -26,6 +26,9 @@
  * 
  * Modified by Olaf Kirch and Trond Myklebust for new NFS code,
  * plus NFSv3 stuff.
+ *
+ * 2003-04-14 David Black <david.black@xilinx.com>
+ * - added support for multiple hostname NFS mounts
  */
 
 /*
@@ -50,6 +53,7 @@
 #include <sys/stat.h>
 #include <netinet/in.h>
 #include <arpa/inet.h>
+#include <values.h>
 
 #include "sundries.h"
 #include "nfsmount.h"
@@ -768,6 +772,196 @@ nfsmnt_check_compat(const struct pmap *n
 	return 0;
 }
 
+/*
+ *
+ * Pick the 'best' host from a list of hosts supplied for a replicated NFS
+ * mount, possibly including weighting for each host, as in Solaris.
+ * David Black <david.black@xilinx.com>
+ *
+ * This function called from nfsmount() when a multi hostname list is detected.
+ * 
+ */
+static char *
+select_host (char *hostlist) {
+
+/* max number of hosts to consider - ignore the rest */
+#define MAX_HOSTNAMES	10
+/* debugging/info */
+#define SH_INFO		1
+
+	struct {
+		char		*name;	/* hostname */
+		short		weight;	/* weight specified or default of 0 */
+		unsigned int	rt;	/* weighted resp. time in mS */
+	} htab[MAX_HOSTNAMES];
+	int i, j, nrhosts;
+	char *s, *t;
+	char hl[256];	/* max length of hostlist */
+	struct sockaddr_in servaddr;
+	struct hostent *he;
+	int mountprog = MOUNTPROG;
+	int mountvers = 0;
+	int mountport = 0;
+	int proto = IPPROTO_TCP; /* for contacting mount daemon */
+	struct pmap *pm_mnt;
+	int msock;
+	CLIENT *mc;
+	struct timeval timeout, t1, t2;
+	struct timezone tz;
+	void *nothing1, *nothing2 = "";
+	static char *myhost;
+	unsigned int rt, minrt;
+
+	/* make malleable copy of hostlist */
+	(void)strncpy(hl, hostlist, sizeof(hl));
+
+	/* point to the first name */
+	htab[0].name = hl;
+	nrhosts = 1;
+
+	/* put rest of the names into table */
+	t = hl;
+	while ((s = strchr(t, ',')) && (nrhosts < MAX_HOSTNAMES)) {
+		*s++ = '\0';
+		htab[nrhosts].name = s;
+		nrhosts++;
+		t = s;
+	}
+
+	/* parse weights if present */
+	for (i = 0; i < nrhosts; i++) {
+		if ((s = strchr(htab[i].name, '('))) {
+			t = strchr(s, ')');
+			if (t != NULL) {
+				*t = '\0';
+				htab[i].weight = atoi(s+1);
+				if (htab[i].weight < 0) {
+				 /* normalize any negative weights to 0 */
+				 htab[i].weight = 0;
+				}
+			} else {
+			 	fprintf(stderr,
+			 "mount: bad weight specifier in \"%s\" - ignoring\n",
+			 	htab[i].name);
+			 	htab[i].weight = 0;
+			}
+			/* truncate hostname at left paren */
+			*s = '\0';
+		} else {
+			/* use weight zero if none specified */
+			htab[i].weight = 0;
+		}
+	}
+
+	/* attempt connect to each host and ping MOUNTPROC_NULL RPC service */
+	for (i = 0; i < nrhosts; i++) {
+		if ((htab[i].name[0] >= '0') && (htab[i].name[0] <= '9')) {
+			/* hostname is an IP address - use it directly */
+			servaddr.sin_addr.s_addr = inet_addr(htab[i].name);
+		} else {
+			/* hostname is a name, resolve it first */
+			if ((he = gethostbyname(htab[i].name)) == NULL) {
+			 fprintf(stderr, "mount: can't get address for %s\n",
+			 	htab[i].name);
+			 /* set resp. time as impossibly high value */
+			 htab[i].rt = INT_MAX;
+			 /* and continue to the next host */
+			 continue;
+			} else {
+			 /* got the host info, and... */
+			 /* correct h_length if necessary */
+			 if (he->h_length > sizeof(struct in_addr)) {
+			 	fprintf(stderr,
+				 "mount: got bad he->h_length?\n");
+				he->h_length = sizeof(struct in_addr);
+			 }
+			 memcpy(&servaddr.sin_addr, he->h_addr, he->h_length);
+			}
+		}
+		/* have the host info in servaddr - now set up for RPC ping */
+		servaddr.sin_family = AF_INET;
+
+		mc=clnt_ping(&servaddr, mountprog, mountvers, mountport);
+
+		if (mc) {
+			/* RPC connected, now time MOUNTPROC_NULL */
+		 	tz.tz_minuteswest = 0; /* doesn't matter for this */
+			tz.tz_dsttime = 0; /* deprecated */
+			gettimeofday(&t1, &tz);
+			/* try v1 first */
+			nothing1 = mountproc_null_1(nothing2, mc);
+			gettimeofday(&t2, &tz);
+			/* check for v1 error */
+			if (nothing1 == NULL) {
+#ifdef SH_INFO
+		fprintf(stderr,
+		 "mount: %s mount v1 RPC error, trying v2...\n", htab[i].name);
+#endif
+				/* now try v2 */
+				gettimeofday(&t1, &tz);
+				nothing1 = mountproc_null_2(nothing2, mc);
+				gettimeofday(&t2, &tz);
+			}
+			if (nothing1 == NULL) {
+				/* ver 2 failed too, bummer */
+#ifdef SH_INFO
+		fprintf(stderr,
+		 "mount: %s mount v2 RPC also failed - ignoring server\n",
+		 	htab[i].name);
+#endif
+		 		htab[i].rt = INT_MAX;
+			} else {
+				/* figure resp time in rounded mS */
+				rt = (t2.tv_sec - t1.tv_sec) * 1000;
+				rt = ((rt + (t2.tv_usec - t1.tv_usec)) +
+				 500) / 1000;
+				htab[i].rt = rt * (htab[i].weight + 1);
+#ifdef SH_INFO
+		fprintf(stderr,
+		 "mount: %s resp time %d mS (weighted %d mS)\n",
+		 	htab[i].name, rt, htab[i].rt);
+#endif
+			}
+		} else {
+#ifdef SH_INFO
+		fprintf(stderr,
+		 "mount: %s did not respond - ignoring server\n",
+		 htab[i].name);
+#endif
+			htab[i].rt = INT_MAX;
+		}
+	}
+
+	/* pick out host with lowest weighted resp. time */
+	j = -1;
+	minrt = INT_MAX;
+	for (i = 0; i < nrhosts; i++) {
+		if (htab[i].rt < minrt) {
+			j = i;
+			minrt = htab[i].rt;
+		}
+	}
+
+	if (j == -1) {
+		/* nothing looks good - return first name */
+#ifdef SH_INFO
+	fprintf(stderr,
+	 "mount: no servers responded - defaulting to first server!\n");
+#endif
+		j = 0;
+	} 
+
+#ifdef SH_INFO
+	fprintf(stderr,
+	 "mount: selected NFS server %s\n", htab[j].name);
+#endif
+
+	myhost = malloc(sizeof(htab[j].name));
+	(void)strcpy(myhost, htab[j].name);
+	return myhost;
+
+}
+
 int
 nfsmount(const char *spec, const char *node, int *flags,
 	 char **extra_opts, char **mount_opts, int *nfs_mount_vers,
@@ -817,13 +1011,9 @@ nfsmount(const char *spec, const char *n
 		hostname = hostdir;
 		dirname = s + 1;
 		*s = '\0';
-		/* Ignore all but first hostname in replicated mounts
-		   until they can be fully supported. (mack@sgi.com) */
+		/* if given a list of hosts, find the 'best' one */
 		if ((s = strchr(hostdir, ','))) {
-			*s = '\0';
-			fprintf(stderr,
-				_("mount: warning: "
-				  "multiple hostnames not supported\n"));
+			hostname = select_host(hostdir);
 		}
 	} else {
 		fprintf(stderr,
