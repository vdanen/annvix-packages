--- linux-2.4.20/fs/partitions/check.c.fd01-4.orig	2002-11-29 00:53:15.000000000 +0100
+++ linux-2.4.20/fs/partitions/check.c	2003-04-15 04:38:20.000000000 +0200
@@ -272,7 +272,7 @@ setup_devfs:
 	truncate_inode_pages(bdev->bd_inode->i_mapping, 0);
 	bdput(bdev);
 	i = first_part_minor - 1;
-	devfs_register_partitions (hd, i, hd->sizes ? 0 : 1);
+	devfs_register_partitions (hd, i, 0);
 }
 
 #ifdef CONFIG_DEVFS_FS
@@ -437,3 +437,10 @@ fail:
 	p->v = NULL;
 	return NULL;
 }
+
+void ungrok_partitions(struct gendisk *dev, int drive)
+{
+	int first_minor = drive << dev->minor_shift;
+	devfs_register_partitions(dev, first_minor, 1);
+}
+
--- linux-2.4.20/kernel/ksyms.c.fd01-4.orig	2003-04-15 04:31:30.000000000 +0200
+++ linux-2.4.20/kernel/ksyms.c	2003-04-15 04:38:20.000000000 +0200
@@ -331,6 +331,7 @@ EXPORT_SYMBOL(blkdev_get);
 EXPORT_SYMBOL(blkdev_put);
 EXPORT_SYMBOL(ioctl_by_bdev);
 EXPORT_SYMBOL(grok_partitions);
+EXPORT_SYMBOL(ungrok_partitions);
 EXPORT_SYMBOL(register_disk);
 EXPORT_SYMBOL(tq_disk);
 EXPORT_SYMBOL(init_buffer);
--- linux-2.4.20/include/linux/blkdev.h.fd01-4.orig	2003-04-15 04:31:16.000000000 +0200
+++ linux-2.4.20/include/linux/blkdev.h	2003-04-15 04:38:20.000000000 +0200
@@ -213,6 +213,7 @@ struct sec_size {
 extern struct sec_size * blk_sec[MAX_BLKDEV];
 extern struct blk_dev_struct blk_dev[MAX_BLKDEV];
 extern void grok_partitions(struct gendisk *dev, int drive, unsigned minors, long size);
+extern void ungrok_partitions(struct gendisk *dev, int drive);
 extern void register_disk(struct gendisk *dev, kdev_t first, unsigned minors, struct block_device_operations *ops, long size);
 extern void generic_make_request(int rw, struct buffer_head * bh);
 extern inline request_queue_t *blk_get_queue(kdev_t dev);
--- linux-2.4.20/drivers/block/paride/pd.c.fd01-4.orig	2002-11-29 00:53:12.000000000 +0100
+++ linux-2.4.20/drivers/block/paride/pd.c	2003-04-15 04:38:20.000000000 +0200
@@ -458,7 +458,10 @@ static int pd_ioctl(struct inode *inode,
 
         switch (cmd) {
 	    case CDROMEJECT:
-		if (PD.access == 1) pd_eject(unit);
+		if (PD.access == 1) {
+		  ungrok_partitions(&pd_gendisk,unit);
+		  pd_eject(unit);
+		}
 		return 0;
             case HDIO_GETGEO:
                 if (!geo) return -EINVAL;
@@ -551,9 +554,10 @@ static int pd_revalidate(kdev_t dev)
                 pd_hd[minor].nr_sects = 0;
         }
 
-	if (pd_identify(unit))
-		grok_partitions(&pd_gendisk,unit,1<<PD_BITS,PD.capacity);
-
+	if (pd_identify(unit)) {
+	  ungrok_partitions(&pd_gendisk,unit);
+	  grok_partitions(&pd_gendisk,unit,1<<PD_BITS,PD.capacity);
+	}
         pd_valid = 1;
         wake_up(&pd_wait_open);
 
--- linux-2.4.20/drivers/block/acsi.c.fd01-4.orig	2002-11-29 00:53:12.000000000 +0100
+++ linux-2.4.20/drivers/block/acsi.c	2003-04-15 04:38:20.000000000 +0200
@@ -1893,7 +1893,8 @@ static int revalidate_acsidisk( int dev,
 
 	ENABLE_IRQ();
 	stdma_release();
-	
+
+	ungrok_partitions(gdev, device);
 	grok_partitions(gdev, device, (aip->type==HARDDISK)?1<<4:1, aip->size);
 
 	DEVICE_BUSY = 0;
--- linux-2.4.20/drivers/block/cciss.c.fd01-4.orig	2003-04-15 04:30:46.000000000 +0200
+++ linux-2.4.20/drivers/block/cciss.c	2003-04-15 04:38:20.000000000 +0200
@@ -1024,6 +1024,7 @@ static int revalidate_logvol(kdev_t dev,
                 blksize_size[MAJOR_NR+ctlr][minor] = 1024;
         }
 	/* setup partitions per disk */
+	ungrok_partitions(gdev, target);
 	grok_partitions(gdev, target, MAX_PART, 
 			hba[ctlr]->drv[target].nr_blocks);
         hba[ctlr]->drv[target].usage_count--;
--- linux-2.4.20/drivers/block/cpqarray.c.fd01-4.orig	2003-04-15 04:30:46.000000000 +0200
+++ linux-2.4.20/drivers/block/cpqarray.c	2003-04-15 04:38:20.000000000 +0200
@@ -2203,6 +2203,7 @@ static int revalidate_logvol(kdev_t dev,
 	}
 
 	/* 16 minors per disk... */
+	ungrok_partitions(gdev, target);
 	grok_partitions(gdev, target, IDA_MAX_PART, 
 		hba[ctlr]->drv[target].nr_blks);
 	hba[ctlr]->drv[target].usage_count--;
--- linux-2.4.20/drivers/block/ps2esdi.c.fd01-4.orig	2002-11-29 00:53:12.000000000 +0100
+++ linux-2.4.20/drivers/block/ps2esdi.c	2003-04-15 04:38:20.000000000 +0200
@@ -1151,6 +1151,7 @@ static int ps2esdi_reread_partitions(kde
 		ps2esdi_gendisk.part[minor].nr_sects = 0;
 	}
 
+	ungrok_partitions(&ps2esdi_gendisk, target);
 	grok_partitions(&ps2esdi_gendisk, target, 1<<6, 
 		ps2esdi_info[target].head * ps2esdi_info[target].cyl * ps2esdi_info[target].sect);
 
--- linux-2.4.20/drivers/block/xd.c.fd01-4.orig	2002-11-29 00:53:12.000000000 +0100
+++ linux-2.4.20/drivers/block/xd.c	2003-04-15 04:38:20.000000000 +0200
@@ -412,6 +412,7 @@ static int xd_reread_partitions(kdev_t d
 		xd_gendisk.part[minor].nr_sects = 0;
 	};
 
+	ungrok_partitions(&xd_gendisk, target);
 	grok_partitions(&xd_gendisk, target, 1<<6,
 			xd_info[target].heads * xd_info[target].cylinders * xd_info[target].sectors);
 
--- linux-2.4.20/drivers/scsi/sd.c.fd01-4.orig	2003-04-15 04:31:30.000000000 +0200
+++ linux-2.4.20/drivers/scsi/sd.c	2003-04-15 04:38:20.000000000 +0200
@@ -1366,6 +1366,7 @@ int revalidate_scsidisk(kdev_t dev, int 
 	MAYBE_REINIT;
 #endif
 
+	ungrok_partitions(&SD_GENDISK(target), target % SCSI_DISKS_PER_MAJOR);
 	grok_partitions(&SD_GENDISK(target), target % SCSI_DISKS_PER_MAJOR,
 			1<<4, CAPACITY);
 
--- linux-2.4.20/drivers/ide/legacy/hd.c.fd01-4.orig	2003-04-15 04:30:47.000000000 +0200
+++ linux-2.4.20/drivers/ide/legacy/hd.c	2003-04-15 04:38:20.000000000 +0200
@@ -905,6 +905,7 @@ static int revalidate_hddisk(kdev_t dev,
 	MAYBE_REINIT;
 #endif
 
+	ungrok_partitions(gdev, target);
 	grok_partitions(gdev, target, 1<<6, CAPACITY);
 
 	DEVICE_BUSY = 0;
--- linux-2.4.20/drivers/ide/ide-disk.c.fd01-4.orig	2003-04-15 04:31:25.000000000 +0200
+++ linux-2.4.20/drivers/ide/ide-disk.c	2003-04-15 04:38:46.000000000 +0200
@@ -775,6 +775,7 @@ static int idedisk_media_change (ide_dri
 
 static void idedisk_revalidate (ide_drive_t *drive)
 {
+	ungrok_partitions(HWIF(drive)->gd, drive->select.b.unit);
 	grok_partitions(HWIF(drive)->gd, drive->select.b.unit,
 			1<<PARTN_BITS,
 			current_capacity(drive));
@@ -1728,6 +1729,7 @@ static void idedisk_setup (ide_drive_t *
 
 static int idedisk_cleanup(ide_drive_t *drive)
 {
+	ungrok_partitions(HWIF(drive)->gd, drive->select.b.unit);
 	ide_cacheflush_p(drive);
 	return ide_unregister_subdriver(drive);
 }
--- linux-2.4.20/drivers/ide/ide-floppy.c.fd01-4.orig	2003-04-15 04:30:47.000000000 +0200
+++ linux-2.4.20/drivers/ide/ide-floppy.c	2003-04-15 04:38:20.000000000 +0200
@@ -1667,7 +1667,7 @@ static int idefloppy_get_format_progress
 /*
  *	Our special ide-floppy ioctl's.
  *
- *	Currently there aren't any ioctl's.
+ *	Currently the only ioctl supported is to eject the cartridge, using the CDROMEJECT ioctl
  */
 static int idefloppy_ioctl (ide_drive_t *drive, struct inode *inode, struct file *file,
 				 unsigned int cmd, unsigned long arg)
@@ -1692,6 +1692,7 @@ static int idefloppy_ioctl (ide_drive_t 
 		if (cmd == CDROMEJECT) {
 			idefloppy_create_start_stop_cmd(&pc, 2);
 			(void) idefloppy_queue_pc_tail(drive, &pc);
+ 			ungrok_partitions(HWIF(drive)->gd, drive->select.b.unit);
 		}
 		return 0;
 	case IDEFLOPPY_IOCTL_FORMAT_SUPPORTED:
@@ -1838,6 +1839,7 @@ static int idefloppy_media_change (ide_d
  */
 static void idefloppy_revalidate (ide_drive_t *drive)
 {
+	ungrok_partitions(HWIF(drive)->gd, drive->select.b.unit);
 	grok_partitions(HWIF(drive)->gd, drive->select.b.unit,
 			1<<PARTN_BITS,
 			current_capacity(drive));
@@ -2058,6 +2060,7 @@ static int idefloppy_cleanup (ide_drive_
 {
 	idefloppy_floppy_t *floppy = drive->driver_data;
 
+ 	ungrok_partitions(HWIF(drive)->gd, drive->select.b.unit);
 	if (ide_unregister_subdriver(drive))
 		return 1;
 
--- linux-2.4.20/drivers/acorn/block/mfmhd.c.fd01-4.orig	2002-08-03 02:39:43.000000000 +0200
+++ linux-2.4.20/drivers/acorn/block/mfmhd.c	2003-04-15 04:38:20.000000000 +0200
@@ -1486,6 +1486,7 @@ static int mfm_reread_partitions(kdev_t 
 
 	/* Divide by 2, since sectors are 2 times smaller than usual ;-) */
 
+	ungrok_partitions(&mfm_gendisk, target);
 	grok_partitions(&mfm_gendisk, target, 1<<6, mfm_info[target].heads *
 		    mfm_info[target].cylinders * mfm_info[target].sectors / 2);
 
--- linux-2.4.20/drivers/mtd/nftlcore.c.fd01-4.orig	2003-04-15 04:30:49.000000000 +0200
+++ linux-2.4.20/drivers/mtd/nftlcore.c	2003-04-15 04:38:20.000000000 +0200
@@ -172,6 +172,7 @@ static void NFTL_setup(struct mtd_info *
 #if LINUX_VERSION_CODE < 0x20328
 	resetup_one_dev(&nftl_gendisk, firstfree);
 #else
+	ungrok_partitions(&nftl_gendisk, firstfree);
 	grok_partitions(&nftl_gendisk, firstfree, 1<<NFTL_PARTN_BITS, nftl->nr_sects);
 #endif
 }
@@ -847,6 +848,7 @@ static int nftl_ioctl(struct inode * ino
 #if LINUX_VERSION_CODE < 0x20328
 		resetup_one_dev(&nftl_gendisk, MINOR(inode->i_rdev) >> NFTL_PARTN_BITS);
 #else
+		ungrok_partitions(&nftl_gendisk, MINOR(inode->i_rdev) >> NFTL_PARTN_BITS);
 		grok_partitions(&nftl_gendisk, MINOR(inode->i_rdev) >> NFTL_PARTN_BITS,
 				1<<NFTL_PARTN_BITS, nftl->nr_sects);
 #endif
--- linux-2.4.20/drivers/message/i2o/i2o_block.c.fd01-4.orig	2003-04-15 04:31:25.000000000 +0200
+++ linux-2.4.20/drivers/message/i2o/i2o_block.c	2003-04-15 04:38:20.000000000 +0200
@@ -1362,6 +1362,7 @@ static int i2ob_install_device(struct i2
 	 */
 	dev->req_queue = &i2ob_queues[c->unit]->req_queue;
 
+	ungrok_partitions(&i2ob_gendisk, unit>>4);
 	grok_partitions(&i2ob_gendisk, unit>>4, 1<<4, (long)(size>>9));
 
 	/*
