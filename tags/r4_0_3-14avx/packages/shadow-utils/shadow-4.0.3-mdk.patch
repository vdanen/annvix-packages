--- shadow-4.0.3/man/useradd.8.mdk	2002-03-08 05:39:12.000000000 +0100
+++ shadow-4.0.3/man/useradd.8	2002-11-18 23:58:02.000000000 +0100
@@ -36,9 +36,9 @@
 .br
 [\fB-g\fR \fIinitial_group\fR] [\fB-G\fR \fIgroup\fR[,...]]
 .br
-[\fB-m\fR [\fB-k\fR \fIskeleton_dir\fR]] [\fB-o\fR] [\fB-p\fR \fIpasswd\fR]
+[\fB-m\fR [\fB-k\fR \fIskeleton_dir\fR] " |" " " -M ]] [\fB-o\fR] [\fB-p\fR \fIpasswd\fR]
 .br
-[\fB-s\fR \fIshell\fR] [\fB-u\fR \fIuid\fR] \fIlogin\fR
+[\fB-s\fR \fIshell\fR] [\fB-u\fR \fIuid\fR] [\fB-N\fR] [\fB-r\fR]\fIlogin\fR
 .TP 8
 \fBuseradd\fR \fB-D\fR [\fB-g\fI default_group\fR] [\fB-b\fI default_home\fR]
 .br
@@ -139,19 +139,26 @@
 .SH NOTES
 The system administrator is responsible for placing the default
 user files in the \fI/etc/skel\fR directory.
+.br
+This version of useradd was modified by Mandrake to suit Mandrake
+user/group conventions.
 .SH CAVEATS
 You may not add a user to an NIS group.
 This must be performed on the NIS server.
 .SH FILES
-/etc/passwd \- user account information
+\fB/etc/passwd\fR \- user account information
+.br
+\fB/etc/shadow\fR \- secure user account information
+.br
+\fB/etc/group\fR \- group information
 .br
-/etc/shadow \- secure user account information
+\fB/etc/gshadow\fR \- secure group information
 .br
-/etc/group \- group information
+\fB/etc/default/useradd\fR \- default information
 .br
-/etc/default/useradd \- default information
+\fB/etc/login.defs\fR \- system-wide settings
 .br
-/etc/skel \- directory containing default files
+\fB/etc/skel\fR \- directory containing default files
 .SH SEE ALSO
 .BR chfn (1),
 .BR chsh (1),
--- shadow-4.0.3/man/groupadd.8.mdk	2002-03-09 15:37:43.000000000 +0100
+++ shadow-4.0.3/man/groupadd.8	2002-11-18 23:58:02.000000000 +0100
@@ -29,7 +29,7 @@
 .SH NAME
 groupadd \- Create a new group
 .SH SYNOPSIS
-\fBgroupadd\fR [\fB-g\fI gid \fR[\fB-o\fR]] \fIgroup\fR
+\fBgroupadd\fR [\fB-g\fI gid \fR[\fB-o\fR]] [\fB-r\fR] [\fB-f\fR] \fIgroup\fR 
 .SH DESCRIPTION
 The \fBgroupadd\fR command
 creates a new group account using the values specified on the
@@ -40,9 +40,29 @@
 The numerical value of the group's ID.
 This value must be unique, unless the \fB-o\fR option is used.
 The value must be non-negative.
-The default is to use the smallest ID value greater than 99 and
+The default is to use the smallest ID value greater than 500 and
 greater than every other group.
-Values between 0 and 99 are typically reserved for system accounts.
+Values between 0 and 499 are typically reserved for \fIsystem accounts\fR.
+.IP \fB-r\fR
+This flag instructs \fBgroupadd\fR to add a \fIsystem
+account\fR.  The first available \fIgid\fR lower than 499 will be
+automatically selected unless the \fB-g\fR option is also given on the
+command line.
+.br
+This is an option added by MandrakeSoft.
+.IP \fB-f\fR
+This is the \fIforce\fR flag. This will cause \fBgroupadd\fR to exit with an
+error when the group about to be added already exists on the
+system. If that is the case, the group won't be altered (or added
+again).
+.br
+This option also modifies the way \fB-g\fR option works. When you
+request a \fIgid\fR that it is not unique and you don't specify the \fB-o\fR
+option too, the group creation will fall back to the standard behavior
+(adding a group as if neither \fB-g\fR or \fB-o\fR options were
+specified).
+.br
+This is an option added by MandrakeSoft.
 .SH FILES
 /etc/group \- group account information
 .br
--- shadow-4.0.3/src/useradd.c.mdk	2002-01-10 14:01:28.000000000 +0100
+++ shadow-4.0.3/src/useradd.c	2002-11-18 23:58:37.000000000 +0100
@@ -74,7 +74,7 @@
 static gid_t def_group = 100;
 static const char *def_gname = "other";
 static const char *def_home = "/home";
-static const char *def_shell = "";
+static const char *def_shell = "/sbin/nologin";
 static const char *def_template = SKEL_DIR;
 
 #ifdef SHADOWPWD
@@ -87,7 +87,7 @@
 #define	VALID(s)	(strcspn (s, ":\n") == strlen (s))
 
 static const char *user_name = "";
-static const char *user_pass = "!";
+static const char *user_pass = "!!";
 static uid_t user_id;
 static gid_t user_gid;
 static const char *user_comment = "";
@@ -118,8 +118,11 @@
  Gflg = 0,	/* secondary group set for new account */
  kflg = 0,	/* specify a directory to fill new user directory */
  mflg = 0,	/* create user's home directory if it doesn't exist */
- nflg = 0,	/* create a group having the same name as the user */
+ Mflg = 0,      /* do NOT create user's home directory no matter what */
+/* nflg = 0,	 create a group having the same name as the user */
+ nflg = 0,      /* do not add a group for this user */
  oflg = 0,	/* permit non-unique user ID to be specified with -u */
+ rflg = 0,      /* create a system account */
  sflg = 0,	/* shell program for new account */
  uflg = 0;	/* specify user ID for new account */
 
@@ -731,7 +734,7 @@
  * usage - display usage message and exit
  */
 
-static void usage (void)
+static void usage ()
 {
 	fprintf (stderr,
 		 _
@@ -747,7 +750,7 @@
 #ifdef AUTH_METHODS
 	fprintf (stderr, _("[-A program] "));
 #endif
-	fprintf (stderr, _("[-p passwd] name\n"));
+	fprintf (stderr, _("[-p passwd] [-M] [-n] [-r] name\n"));
 
 	fprintf (stderr,
 		 _("       %s\t-D [-g group] [-b base] [-s shell]\n"),
@@ -842,34 +845,6 @@
 #endif
 
 	/*
-	 * Lock and open the group file. This will load all of the group
-	 * entries.
-	 */
-
-	if (!gr_lock ()) {
-		fprintf (stderr, _("%s: error locking group file\n"),
-			 Prog);
-		fail_exit (E_GRP_UPDATE);
-	}
-	if (!gr_open (O_RDWR)) {
-		fprintf (stderr, _("%s: error opening group file\n"),
-			 Prog);
-		fail_exit (E_GRP_UPDATE);
-	}
-#ifdef	SHADOWGRP
-	if (is_shadow_grp && !sgr_lock ()) {
-		fprintf (stderr,
-			 _("%s: error locking shadow group file\n"), Prog);
-		fail_exit (E_GRP_UPDATE);
-	}
-	if (is_shadow_grp && !sgr_open (O_RDWR)) {
-		fprintf (stderr,
-			 _("%s: error opening shadow group file\n"), Prog);
-		fail_exit (E_GRP_UPDATE);
-	}
-#endif
-
-	/*
 	 * Scan through the entire group file looking for the groups that
 	 * the user is a member of.
 	 */
@@ -1006,8 +981,13 @@
 	const struct passwd *pwd;
 	uid_t uid_min, uid_max;
 
-	uid_min = getdef_unum ("UID_MIN", 100);
-	uid_max = getdef_unum ("UID_MAX", 60000);
+	if (!rflg) {
+ 	    uid_min = getdef_num("UID_MIN", 500);
+ 	    uid_max = getdef_num("UID_MAX", 60000);
+ 	} else {
+ 	    uid_min = 1;
+ 	    uid_max = getdef_num("UID_MIN", 500) - 1;
+	}
 
 	/*
 	 * Start with some UID value if the user didn't provide us with
@@ -1035,7 +1015,7 @@
 				 Prog, user_name);
 			exit (E_NAME_IN_USE);
 		}
-		if (uflg && user_id == pwd->pw_uid) {
+		if (!oflg && uflg && user_id == pwd->pw_uid) {
 			fprintf (stderr, _("%s: uid %u is not unique\n"),
 				 Prog, (unsigned int) user_id);
 			exit (E_UID_IN_USE);
@@ -1073,6 +1053,87 @@
 	}
 }
 
+/*
+ * find_new_gid - find the next available GID
+ *
+ *	find_new_gid() locates the next highest unused GID in the group
+ *	file, or checks the given group ID against the existing ones for
+ *	uniqueness.
+ */
+
+static void
+find_new_gid()
+{
+	const struct group *grp;
+	gid_t gid_min, gid_max;
+
+	if (!rflg) {
+	    gid_min = getdef_num("GID_MIN", 500);
+	    gid_max = getdef_num("GID_MAX", 60000);
+	} else {
+	    gid_min = 1;
+	    gid_max = getdef_num("GID_MIN", 500) - 1;
+	}
+
+	/*
+	 * Start with some GID value if the user didn't provide us with
+	 * one already.
+	 */
+	user_gid = gid_min;
+
+	/*
+	 * Search the entire group file, either looking for this
+	 * GID (if the user specified one with -g) or looking for the
+	 * largest unused value.
+	 */
+
+#ifdef NO_GETGRENT
+	gr_rewind();
+	while ((grp = gr_next()))
+#else
+	setgrent();
+	while ((grp = getgrent()))
+#endif
+	    {
+		if (strcmp(user_name, grp->gr_name) == 0) {
+		    user_gid = grp->gr_gid;
+		    return;
+		}
+		if (grp->gr_gid >= user_gid) {
+		    if (grp->gr_gid > gid_max)
+			continue;
+		    user_gid = grp->gr_gid + 1;
+		}
+	}
+#ifndef NO_GETGRENT /* RH Linux does have this, so ... */
+	/* A quick test gets here: if the UID is available
+	 * as a GID, go ahead and use it */
+	if (!getgrgid(user_id)) {
+	    user_gid = user_id;
+	    return;
+	}
+#endif
+	if (user_gid == gid_max + 1) {
+		for (user_gid = gid_min; user_gid < gid_max; user_gid++) {
+#ifdef NO_GETGRENT
+			gr_rewind();
+			while ((grp = gr_next()) && grp->gr_gid != user_gid)
+				;
+			if (!grp)
+				break;
+#else
+			if (!getgrgid(user_gid))
+				break;
+#endif
+		}
+		if (user_gid == gid_max) {
+			fprintf(stderr, "%s: can't get unique gid (run out of GIDs)\n",
+				Prog);
+			fail_exit(4);
+		}
+	}
+}
+
 #ifdef AUTH_METHODS
 /*
  * convert_auth - convert the argument list to a authentication list
@@ -1158,11 +1219,10 @@
 	int anyflag = 0;
 	int arg;
 	char *cp;
-
 #ifdef SHADOWPWD
-#define FLAGS "A:Du:og:G:d:s:c:mk:p:f:e:b:O:M"
+#define FLAGS "A:Du:og:G:d:s:c:mk:p:f:e:b:O:Mnr"
 #else
-#define FLAGS "A:Du:og:G:d:s:c:mk:p:b:O:M"
+#define FLAGS "A:Du:og:G:d:s:c:mk:p:b:O:Mnr"
 #endif
 	while ((arg = getopt (argc, argv, FLAGS)) != EOF) {
 #undef FLAGS
@@ -1292,12 +1352,6 @@
 		case 'm':
 			mflg++;
 			break;
-		case 'M':
-			/*
-			 * don't create home dir - this is the default,
-			 * ignored for RedHat/PLD adduser compatibility.
-			 */
-			break;
 		case 'o':
 			oflg++;
 			break;
@@ -1345,12 +1399,24 @@
 			user_id = get_uid (optarg);
 			uflg++;
 			break;
+		case 'n':
+		    nflg++;
+		    break;
+		case 'r':
+		    rflg++;
+		    break;
+		case 'M':
+		    Mflg++;
+		    break;
 		default:
 			usage ();
 		}
 		anyflag++;
 	}
 
+	if (mflg && Mflg) /* the admin is not decided .. create or not ? */
+	    usage();
+	
 	/*
 	 * Certain options are only valid in combination with others.
 	 * Check it here so that they can be specified in any order.
@@ -1429,7 +1495,6 @@
 				 Prog);
 			fail_exit (E_GRP_UPDATE);
 		}
-		gr_unlock ();
 #ifdef	SHADOWGRP
 		if (is_shadow_grp && !sgr_close ()) {
 			fprintf (stderr,
@@ -1438,10 +1503,13 @@
 				 Prog);
 			fail_exit (E_GRP_UPDATE);
 		}
-		if (is_shadow_grp)
-			sgr_unlock ();
 #endif
 	}
+ 	gr_unlock();
+#ifdef	SHADOWGRP
+ 	if (is_shadow_grp)
+ 		sgr_unlock();
+#endif
 #ifdef	SHADOWPWD
 	if (is_shadow_pwd)
 		spw_unlock ();
@@ -1485,6 +1553,33 @@
 		exit (E_PW_UPDATE);
 	}
 #endif
+	/*
+	 * Lock and open the group file. This will load all of the group
+	 * entries.
+	 */
+
+	if (!gr_lock ()) {
+		fprintf (stderr, _("%s: error locking group file\n"),
+			 Prog);
+		fail_exit (E_GRP_UPDATE);
+	}
+	if (!gr_open (O_RDWR)) {
+		fprintf (stderr, _("%s: error opening group file\n"),
+			 Prog);
+		fail_exit (E_GRP_UPDATE);
+	}
+#ifdef	SHADOWGRP
+	if (is_shadow_grp && !sgr_lock ()) {
+		fprintf (stderr,
+			 _("%s: error locking shadow group file\n"), Prog);
+		fail_exit (E_GRP_UPDATE);
+	}
+	if (is_shadow_grp && !sgr_open (O_RDWR)) {
+		fprintf (stderr,
+			 _("%s: error opening shadow group file\n"), Prog);
+		fail_exit (E_GRP_UPDATE);
+	}
+#endif
 }
 
 
@@ -1531,9 +1626,6 @@
 	struct spwd spent;
 #endif
 
-	if (!oflg)
-		find_new_uid ();
-
 #ifdef AUTH_METHODS
 	if (Aflg) {
 		convert_auth (user_auth, auth_arg);
@@ -1665,6 +1757,118 @@
 		grp_update ();
 }
 
+/* a fake something */
+static char *empty_list = NULL;
+
+/*
+ * new_grent - initialize the values in a group file entry
+ *
+ *	new_grent() takes all of the values that have been entered and
+ *	fills in a (struct group) with them.
+ */
+
+static void
+new_grent(grent)
+	struct group *grent;
+{
+	bzero ((char *) grent, sizeof *grent);
+	(const char *) (grent->gr_name) = user_name;
+	grent->gr_passwd = "x";
+	grent->gr_gid = user_gid;
+	grent->gr_mem = &empty_list;
+}
+
+#ifdef	SHADOWGRP
+/*
+ * new_sgent - initialize the values in a shadow group file entry
+ *
+ *	new_sgent() takes all of the values that have been entered and
+ *	fills in a (struct sgrp) with them.
+ */
+
+static void
+new_sgent(sgent)
+	struct sgrp *sgent;
+{
+	bzero ((char *) sgent, sizeof *sgent);
+	(const char *)(sgent->sg_name) = user_name;
+	sgent->sg_passwd = "!";
+	sgent->sg_adm = &empty_list;
+	sgent->sg_mem = &empty_list;
+}
+#endif	/* SHADOWGRP */
+
+/*
+ * grp_update - add new group file entries
+ *
+ *	grp_update() writes the new records to the group files.
+ */
+
+static void grp_add()
+{
+	struct	group	grp;
+#ifdef	SHADOWGRP
+	struct	sgrp	sgrp;
+#endif	/* SHADOWGRP */
+
+	/*
+	 * Create the initial entries for this new group.
+	 */
+
+	new_grent (&grp);
+#ifdef	SHADOWGRP
+	new_sgent (&sgrp);
+#endif	/* SHADOWGRP */
+
+	/*
+	 * Write out the new group file entry.
+	 */
+	if (! gr_update (&grp)) {
+		fprintf (stderr, "%s: error adding new group entry\n", Prog);
+		fail_exit (10);
+	}
+#ifdef	NDBM
+
+	/*
+	 * Update the DBM group file with the new entry as well.
+	 */
+
+	if (gr_dbm_present() && ! gr_dbm_update (&grp)) {
+		fprintf (stderr, "%s: cannot add new dbm group entry\n", Prog);
+		fail_exit (10);
+	}
+	endgrent ();
+#endif	/* NDBM */
+
+#ifdef	SHADOWGRP
+
+	/*
+	 * Write out the new shadow group entries as well.
+	 */
+
+	if (is_shadow_grp && ! sgr_update (&sgrp)) {
+		fprintf (stderr, "%s: error adding new group entry\n", Prog);
+		fail_exit (10);
+	}
+#ifdef	NDBM
+
+	/*
+	 * Update the DBM group file with the new entry as well.
+	 */
+
+	if (is_shadow_grp && sg_dbm_present() && ! sg_dbm_update (&sgrp)) {
+		fprintf (stderr, "%s: cannot add new dbm group entry\n", Prog);
+		fail_exit (10);
+	}
+	endsgent ();
+#endif	/* NDBM */
+#endif	/* SHADOWGRP */
+	SYSLOG((LOG_INFO, "new group: name=%s, gid=%d\n",
+		user_name, user_gid));
+	/* we need to remeber we have to close the group file... */
+	do_grp_update++;
+}
+
 /*
  * create_home - create the user's home directory
  *
@@ -1765,7 +1969,7 @@
 #ifdef SHADOWGRP
 	is_shadow_grp = sgr_file_present ();
 #endif
-
+	
 	/*
 	 * The open routines for the NDBM files don't use read-write
 	 * as the mode, so we have to clue them in.
@@ -1785,6 +1989,14 @@
 
 	process_flags (argc, argv);
 
+	if (!rflg) /* for system accounts defaults are ignored and we
+		    * do not create a home dir -- gafton */
+	    if (getdef_bool("CREATE_HOME"))
+		mflg = 1;
+
+	if (Mflg) /* absolutely sure that we do not create home dirs */
+	    mflg = 0;
+
 	/*
 	 * See if we are messing with the defaults file, or creating
 	 * a new user.
@@ -1831,30 +2043,34 @@
 
 	open_files ();
 
+ 	/* first, seek for a valid uid to use for this user.
+ 	 * We do this because later we can use the uid we found as
+ 	 * gid too ... --gafton */
+ 	find_new_uid ();
+ 
+ 	/* do we have to add a group for that user? This is why we need to
+ 	 * open the group files in the open_files() function  --gafton */
+ 	if (! (nflg || gflg)) {
+ 	    find_new_gid();
+ 	    grp_add();
+ 	}
+
 	usr_update ();
 
 	if (mflg) {
 		create_home ();
 		copy_tree (def_template, user_home, user_id, user_gid);
-	} else if (getdef_str ("CREATE_HOME")) {
-		/*
-		 * RedHat added the CREATE_HOME option in login.defs in their
-		 * version of shadow-utils (which makes -m the default, with
-		 * new -M option to turn it off). Unfortunately, this
-		 * changes the way useradd works (it can be run by scripts
-		 * expecting some standard behaviour), compared to other
-		 * Unices and other Linux distributions, and also adds a lot
-		 * of confusion :-(.
-		 * So we now recognize CREATE_HOME and give a warning here
-		 * (better than "configuration error ... notify administrator"
-		 * errors in every program that reads /etc/login.defs). -MM
-		 */
-		fprintf (stderr,
-			 _
-			 ("%s: warning: CREATE_HOME not supported, please use -m instead.\n"),
-			 Prog);
-	}
-
+	} /* Stupid warning removed for the innocent's protection */
+ 	    /*
+ 	     * The whole idea about breaking some stupid scripts by creating a new
+ 	     * variable is crap - I could care less about the scripts. Historically
+ 	     * adduser  type programs have always created the home directories and
+ 	     * I don't  like the idea of providing a script when we can fix the binary
+ 	     * itself. And if the scripts are using the right options to the useradd
+ 	     * then they will not break. If not, they depend on unspecified behavior
+ 	     * and they will break, but they were broken anyway to begin with --gafton
+ 	     */
+  
 	close_files ();
 
 #ifdef USE_PAM
--- shadow-4.0.3/src/groupadd.c.mdk	2002-01-06 15:09:07.000000000 +0100
+++ shadow-4.0.3/src/groupadd.c	2002-11-18 23:58:02.000000000 +0100
@@ -72,6 +72,11 @@
 static int gflg = 0;		/* ID value for the new group */
 static int fflg = 0;		/* if group already exists, do nothing and exit(0) */
 
+static int rflg = 0; /* for adding system accounts (Mandrake) */
+
+/* For adding "system" accounts */
+#define MIN_GID		10
+ 
 #ifdef	NDBM
 extern int gr_dbm_mode;
 extern int sg_dbm_mode;
@@ -98,7 +103,7 @@
 
 static void usage (void)
 {
-	fprintf (stderr, _("usage: groupadd [-g gid [-o]] group\n"));
+	fprintf (stderr, _("usage: groupadd [-g gid [-o]] [-r] [-f] group\n"));
 	exit (E_USAGE);
 }
 
@@ -224,8 +229,13 @@
 	const struct group *grp;
 	gid_t gid_min, gid_max;
 
-	gid_min = getdef_unum ("GID_MIN", 100);
-	gid_max = getdef_unum ("GID_MAX", 60000);
+ 	if (!rflg) {
+ 	    gid_min = getdef_num("GID_MIN", 500);
+ 	    gid_max = getdef_num("GID_MAX", 60000);
+ 	} else {
+ 	    gid_min = MIN_GID;
+ 	    gid_max = getdef_num("GID_MIN", 499);
+	}
 
 	/*
 	 * Start with some GID value if the user didn't provide us with
@@ -333,7 +343,7 @@
 	char *cp;
 	int arg;
 
-	while ((arg = getopt (argc, argv, "og:O:f")) != EOF) {
+	while ((arg = getopt (argc, argv, "og:O:fr")) != EOF) {
 		switch (arg) {
 		case 'g':
 			gflg++;
@@ -379,7 +389,13 @@
 			 */
 			fflg++;
 			break;
-		default:
+	       	case 'r':
+ 			/*
+ 			 * create a system group
+ 			 */
+ 			rflg++;
+ 			break;
+		    default:
 			usage ();
 		}
 	}
--- shadow-4.0.3/src/userdel.c.mdk	2002-01-05 16:41:44.000000000 +0100
+++ shadow-4.0.3/src/userdel.c	2002-11-18 23:58:02.000000000 +0100
@@ -60,7 +60,9 @@
 #define E_HOMEDIR	12	/* can't remove home directory */
 static char *user_name;
 static uid_t user_id;
+static gid_t user_gid;
 static char *user_home;
+static char *user_group;
 
 static char *Prog;
 static int fflg = 0, rflg = 0;
@@ -285,6 +287,100 @@
 #endif				/* SHADOWGRP */
 }
 
+/* remove_group()
+ * remove the user's group unless it is not really a user-private group
+ */
+static void
+remove_group ()
+{
+	char	*glist_name;
+	struct	group	*gr;
+	struct	passwd	*pwd;
+#ifdef	NDBM
+	struct	group	*ogrp;
+#endif
+
+	if (user_group == NULL || user_name == NULL)
+	    return;
+	
+	if (strcmp(user_name, user_group)) {
+	    return;
+	}
+
+	glist_name = NULL;
+	gr = getgrnam(user_group);
+	if (gr)
+	    glist_name = *(gr->gr_mem);
+	while (glist_name) {
+	    while (glist_name && *glist_name) {
+		if (strncmp(glist_name, user_name, 16)) {
+		    return;
+		}
+		glist_name++;
+	    }
+	}
+
+	setpwent();
+	while ((pwd = getpwent())) {
+	    if (strcmp(pwd->pw_name, user_name) == 0)
+		continue;
+	    
+	    if (pwd->pw_gid == user_gid) {
+		return;
+	    }
+	}
+
+	/* now actually do the removal if we haven't already returned */
+
+	if (! gr_remove (user_group)) {
+	    fprintf (stderr, "%s: error removing group entry\n", Prog);
+	}
+#ifdef	NDBM
+
+	/*
+	 * Update the DBM group file
+	 */
+
+	if (gr_dbm_present()) {
+		if ((ogrp = getgrnam (user_group)) &&
+				! gr_dbm_remove (ogrp)) {
+			fprintf (stderr, "%s: error removing group dbm entry\n",
+				Prog);
+		}
+	}
+	endgrent ();
+#endif	/* NDBM */
+
+#ifdef	SHADOWGRP
+
+	/*
+	 * Delete the shadow group entries as well.
+	 */
+
+	if (is_shadow_grp && ! sgr_remove (user_group)) {
+		fprintf (stderr, "%s: error removing shadow group entry\n",
+			Prog);
+	}
+#ifdef	NDBM
+
+	/*
+	 * Update the DBM shadow group file
+	 */
+
+	if (is_shadow_grp && sg_dbm_present()) {
+		if (! sg_dbm_remove (user_group)) {
+			fprintf (stderr,
+				"%s: error removing shadow group dbm entry\n",
+				Prog);
+		}
+	}
+	endsgent ();
+#endif	/* NDBM */
+#endif	/* SHADOWGRP */
+	SYSLOG((LOG_INFO, "remove group `%s'\n", user_group));
+	return;
+}
+
 /*
  * close_files - close all of the files that were opened
  *
@@ -567,7 +663,10 @@
 			fprintf (stderr,
 				 _
 				 ("%s: user %s is currently logged in\n"),
-				 Prog, name); exit (E_USER_BUSY);}
+				 Prog, name); 
+			if (!fflg)
+			    exit(E_USER_BUSY);
+			}
 			}
 
 /* 
@@ -677,6 +776,7 @@
  */
 			int main (int argc, char **argv) {
 			struct passwd *pwd; int arg; int errors = 0;
+			struct group *gr;
 
 #ifdef USE_PAM
 			pam_handle_t * pamh = NULL;
@@ -779,6 +879,9 @@
 #endif
 			user_id = pwd->pw_uid;
 			user_home = xstrdup (pwd->pw_dir);
+			user_gid = pwd->pw_gid;
+			gr = getgrgid(pwd->pw_gid);
+			if (gr) user_group = xstrdup(gr->gr_name);
 			/*
 			 * Check to make certain the user isn't logged in.
 			 */
@@ -822,6 +925,9 @@
 			}
 #endif
 
+			/* remove user's group if appropriate */
+			remove_group ();
+
 			if (rflg) {
 			if (remove_tree (user_home)
 			    || rmdir (user_home)) {
