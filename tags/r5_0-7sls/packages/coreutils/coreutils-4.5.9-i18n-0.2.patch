diff -uprN coreutils-4.5.9.orig/lib/linebuffer.c coreutils-4.5.9/lib/linebuffer.c
--- coreutils-4.5.9.orig/lib/linebuffer.c	2003-03-11 00:31:53.000000000 +0900
+++ coreutils-4.5.9/lib/linebuffer.c	2003-03-11 00:33:29.000000000 +0900
@@ -22,6 +22,13 @@
 #endif
 
 #include <stdio.h>
+
+#if STDC_HEADERS || HAVE_STRING_H
+# include <string.h>
+#else
+# include <strings.h>
+#endif
+
 #include <sys/types.h>
 #include "linebuffer.h"
 #include "unlocked-io.h"
@@ -37,6 +44,9 @@ initbuffer (struct linebuffer *linebuffe
   linebuffer->length = 0;
   linebuffer->size = 200;
   linebuffer->buffer = xmalloc (linebuffer->size);
+#if HAVE_WCHAR_H
+  memset(&(linebuffer->state), 0, sizeof(mbstate_t));
+#endif
 }
 
 /* Read an arbitrarily long line of text from STREAM into LINEBUFFER.
diff -uprN coreutils-4.5.9.orig/lib/linebuffer.h coreutils-4.5.9/lib/linebuffer.h
--- coreutils-4.5.9.orig/lib/linebuffer.h	2003-03-11 00:31:53.000000000 +0900
+++ coreutils-4.5.9/lib/linebuffer.h	2003-03-11 00:33:29.000000000 +0900
@@ -18,6 +18,11 @@
 #if !defined LINEBUFFER_H
 # define LINEBUFFER_H
 
+/* Get mbstate_t.  */
+# if HAVE_WCHAR_H
+#  include <wchar.h>
+# endif
+
 /* A `struct linebuffer' holds a line of text. */
 
 struct linebuffer
@@ -25,6 +30,9 @@ struct linebuffer
   size_t size;			/* Allocated. */
   size_t length;		/* Used. */
   char *buffer;
+# if HAVE_WCHAR_H
+  mbstate_t state;
+# endif
 };
 
 # ifndef PARAMS
diff -uprN coreutils-4.5.9.orig/src/cut.c coreutils-4.5.9/src/cut.c
--- coreutils-4.5.9.orig/src/cut.c	2003-03-11 00:31:53.000000000 +0900
+++ coreutils-4.5.9/src/cut.c	2003-03-11 00:32:56.000000000 +0900
@@ -28,11 +28,29 @@
 #include <assert.h>
 #include <getopt.h>
 #include <sys/types.h>
+
+/* Get mbstate_t, mbrtowc(). */
+#if HAVE_WCHAR_H
+# include <wchar.h>
+#endif
+
 #include "system.h"
 #include "getstr.h"
 #include "closeout.h"
 #include "error.h"
 
+/* MB_LEN_MAX is incorrectly defined to be 1 in at least one GCC
+   installation; work around this configuration error. */
+#if !defined MB_LEN_MAX || MB_LEN_MAX < 2
+# undef MB_LEN_MAX
+# define MB_LEN_MAX 16
+#endif
+
+/* Some systems, like BeOS, have multibyte encodings but lack mbstate_t.  */
+#if HAVE_MBRTOWC && defined mbstate_t
+# define mbrtowc(pwc, s, n, ps) (mbrtowc) (pwc, s, n, 0)
+#endif
+
 /* The official name of this program (e.g., no `g' prefix).  */
 #define PROGRAM_NAME "cut"
 
@@ -71,6 +89,54 @@ struct range_pair
     unsigned int hi;
   };
 
+/* Refill the buffer BUF. */
+#define REFILL_BUFFER(BUF, BUFPOS, BUFLEN, STREAM)			\
+  do									\
+    { 									\
+      if (BUFLEN < MB_LEN_MAX && !feof (STREAM) && !ferror (STREAM))	\
+	{								\
+	  memmove (BUF, BUFPOS, BUFLEN);				\
+	  BUFLEN += fread (BUF + BUFLEN, sizeof(char), BUFSIZ, STREAM);	\
+	  BUFPOS = BUF;							\
+	}								\
+    }									\
+  while (0)
+
+/* Get wide character which starts at BUFPOS. If the byte sequence is
+   not valid as a character, CONVFAIL is 1. Otherwise 0. */
+#define GET_NEXT_WC_FROM_BUFFER(WC, BUFPOS, BUFLEN, MBLENGTH, STATE, CONVFAIL) \
+  do									\
+    {									\
+      wchar_t   tmp;							\
+      mbstate_t state_bak;						\
+									\
+      if (BUFLEN < 1)							\
+	{								\
+	  WC = WEOF;							\
+	  break;							\
+	}								\
+									\
+      /* Get a wide character. */					\
+      CONVFAIL = 0;							\
+      state_bak = STATE;						\
+      MBLENGTH = mbrtowc (&tmp, BUFPOS, BUFLEN, &STATE);		\
+      WC = tmp;								\
+									\
+      switch (MBLENGTH)							\
+	{								\
+	case (size_t)-1:						\
+	case (size_t)-2:						\
+	  ++CONVFAIL;							\
+	  STATE = state_bak;						\
+	    /* Fall througn. */						\
+									\
+	case 0:								\
+	  MBLENGTH = 1;							\
+	  break;							\
+	}								\
+    }									\
+  while (0)
+
 /* This buffer is used to support the semantics of the -s option
    (or lack of same) when the specified field list includes (does
    not include) the first field.  In both of those cases, the entire
@@ -83,7 +149,7 @@ static char *field_1_buffer;
 /* The number of bytes allocated for FIELD_1_BUFFER.  */
 static size_t field_1_bufsize;
 
-/* The largest field or byte index used as an endpoint of a closed
+/* The largest field, character or byte index used as an endpoint of a closed
    or degenerate range specification;  this doesn't include the starting
    index of right-open-ended ranges.  For example, with either range spec
    `2-5,9-', `2-3,5,9-' this variable would be set to 5.  */
@@ -98,10 +164,11 @@ static unsigned int eol_range_start;
 #define RANGE_START_SENTINEL 2
 
 /* In byte mode, which bytes to output.
+   In character mode, which characters to output.
    In field mode, which DELIM-separated fields to output.
-   Both bytes and fields are numbered starting with 1,
+   Bytes, characters and fields are numbered starting with 1,
    so the zeroth element of this array is unused.
-   A field or byte K has been selected if
+   A byte, character or field K has been selected if
    (K <= MAX_RANGE_ENDPOINT and PRINTABLE_FIELD[K])
     || (EOL_RANGE_START > 0 && K >= EOL_RANGE_START).  */
 static int *printable_field;
@@ -110,9 +177,12 @@ enum operating_mode
   {
     undefined_mode,
 
-    /* Output characters that are in the given bytes. */
+    /* Output bytes that are in the given bytes. */
     byte_mode,
 
+    /* Output characters that are at the given positions. */
+    character_mode,
+
     /* Output the given delimeter-separated fields. */
     field_mode
   };
@@ -122,6 +192,13 @@ char *program_name;
 
 static enum operating_mode operating_mode;
 
+/* If nonzero, when in byte mode, don't split multibyte characters.  */
+static int byte_mode_character_aware;
+
+/* If nonzero, the function for single byte locale is work
+   if this program runs on multibyte locale. */
+static int force_singlebyte_mode;
+
 /* If nonzero do not output lines containing no delimeter characters.
    Otherwise, all such lines are printed.  This option is valid only
    with field mode.  */
@@ -129,6 +206,9 @@ static int suppress_non_delimited;
 
 /* The delimeter character for field mode. */
 static int delim;
+#if HAVE_WCHAR_H
+static wchar_t wcdelim;
+#endif
 
 /* Nonzero if the --output-delimiter=STRING option was specified.  */
 static int output_delimiter_specified;
@@ -191,7 +271,7 @@ Mandatory arguments to long options are 
   -f, --fields=LIST       output only these fields;  also print any line\n\
                             that contains no delimiter character, unless\n\
                             the -s option is specified\n\
-  -n                      (ignored)\n\
+  -n                      with -b: don't split multibyte characters\n\
 "), stdout);
       fputs (_("\
   -s, --only-delimited    do not print lines not containing delimiters\n\
@@ -309,7 +389,9 @@ set_fields (const char *fieldstr)
 	      if (value == 0)
 		{
 		  /* `n-'.  From `initial' to end of line. */
-		  eol_range_start = initial;
+		  if(eol_range_start == 0 ||
+		      (eol_range_start != 0 && eol_range_start > initial))
+		    eol_range_start = initial;
 		  field_found = 1;
 		}
 	      else
@@ -460,6 +542,79 @@ cut_bytes (FILE *stream)
     }
 }
 
+#if HAVE_MBRTOWC
+/* This function is in use for the following case.
+ 
+   1. Read from the stream STREAM, printing to standard output any selected
+      characters. 
+ 
+   2. Read from stream STREAM, printing to standard output any selected bytes,
+      without splitting multibyte characters.  */
+
+static void
+cut_characters_or_cut_bytes_no_split (FILE *stream)
+{
+  int idx;		/* number of bytes or characters in the line so far. */
+  /* Whether to begin printing delimiters between ranges for the current line.
+     Set after we've begun printing data corresponding to the first range.  */
+  int print_delimiter;
+
+  char buf[MB_LEN_MAX + BUFSIZ];	/* For spooling a read byte sequence. */
+  char *bufpos;		/* Next read position of BUF. */
+  size_t buflen;	/* The length of the byte sequence in buf. */
+  wint_t wc;		/* A gotten wide character. */
+  size_t mblength;	/* The byte size of a multibyte character which shows
+			   as same character as WC. */
+  mbstate_t state;	/* State of the stream. */
+  int convfail;		/* 1, when conversion is failed. Otherwise 0. */
+
+
+  idx = 0;
+  print_delimiter = 0;
+  buflen = 0;
+  bufpos = buf;
+  memset (&state, '\0', sizeof(mbstate_t));
+
+  while (1)
+    {
+      REFILL_BUFFER (buf, bufpos, buflen, stream);
+
+      GET_NEXT_WC_FROM_BUFFER (wc, bufpos, buflen, mblength, state, convfail);
+
+      if (wc == WEOF)
+	{
+	  if (idx > 0)
+	    putchar ('\n');
+	  break;
+	}
+      else if (wc == L'\n')
+	{
+	  putchar ('\n');
+	  idx = 0;
+	}
+      else
+	{
+	  int range_start;
+
+	  idx += (operating_mode == byte_mode) ? mblength : 1;
+	  if (print_kth (idx, &range_start))
+	    {
+	      if (range_start && print_delimiter && output_delimiter_specified)
+		{
+		  fwrite (output_delimiter_string, sizeof (char),
+		      output_delimiter_length, stdout);
+		}
+	      print_delimiter = 1;
+	      fwrite (bufpos, mblength, sizeof(char), stdout);
+	    }
+	}
+
+      buflen -= mblength;
+      bufpos += mblength;
+    }
+}
+#endif
+
 /* Read from stream STREAM, printing to standard output any selected fields.  */
 
 static void
@@ -583,13 +738,192 @@ cut_fields (FILE *stream)
     }
 }
 
+#if HAVE_MBRTOWC
+static void
+cut_fields_mb (FILE *stream)
+{
+  int c;
+  unsigned int field_idx;
+  int found_any_selected_field;
+  int buffer_first_field;
+  int empty_input;
+  char buf[MB_LEN_MAX + BUFSIZ];     	/* For spooling a read byte sequence. */
+  char *bufpos;		/* Next read position of BUF. */
+  size_t buflen;	/* The length of the byte sequence in buf. */
+  wint_t wc;		/* A gotten wide character. */
+  size_t mblength;	/* The byte size of a multibyte character which shows
+			   as same character as WC. */
+  mbstate_t state;	/* State of the stream. */
+  int convfail;		/* 1, when conversion is failed. Otherwise 0. */
+
+  found_any_selected_field = 0;
+  field_idx = 1;
+  bufpos = buf;
+  buflen = 0;
+  memset (&state, '\0', sizeof(mbstate_t));
+
+  c = getc (stream);
+  empty_input = (c == EOF);
+  if (c != EOF)
+    ungetc (c, stream);
+  else
+    wc = WEOF;
+
+  /* To support the semantics of the -s flag, we may have to buffer
+     all of the first field to determine whether it is `delimited.'
+     But that is unnecessary if all non-delimited lines must be printed
+     and the first field has been selected, or if non-delimited lines
+     must be suppressed and the first field has *not* been selected.
+     That is because a non-delimited line has exactly one field.  */
+  buffer_first_field = (suppress_non_delimited ^ !print_kth (1, NULL));
+
+  while (1)
+    {
+      if (field_idx == 1 && buffer_first_field)
+	{
+	  size_t n_bytes = 0;
+
+	  while (1)
+	    {
+	      REFILL_BUFFER (buf, bufpos, buflen, stream);
+
+	      GET_NEXT_WC_FROM_BUFFER
+		(wc, bufpos, buflen, mblength, state, convfail);
+
+	      if (wc == WEOF)
+		break;
+
+	      field_1_buffer = xrealloc (field_1_buffer, n_bytes + mblength);
+	      memcpy (field_1_buffer + n_bytes, bufpos, mblength);
+	      n_bytes += mblength;
+	      buflen -= mblength;
+	      bufpos += mblength;
+
+	      if (!convfail && (wc == L'\n' || wc == wcdelim))
+		break;
+	    }
+
+	  if (wc == WEOF)
+	    break;
+
+	  /* If the first field extends to the end of line (it is not
+	     delimited) and we are printing all non-delimited lines,
+	     print this one.  */
+	  if (convfail || (!convfail && wc != wcdelim))
+	    {
+	      if (suppress_non_delimited)
+		{
+		  /* Empty.     */
+		}
+	      else
+		{
+		  fwrite (field_1_buffer, sizeof (char), n_bytes, stdout);
+		  /* Make sure the output line is newline terminated.  */
+		  if (convfail || (!convfail && wc != L'\n'))
+		    putchar ('\n');
+		}
+	      continue;
+	    }
+
+	  if (print_kth (1, NULL))
+	    {
+	      /* Print the field, but not the trailing delimiter.  */
+	      fwrite (field_1_buffer, sizeof (char), n_bytes - 1, stdout);
+	      found_any_selected_field = 1;
+	    }
+	  ++field_idx;
+	}
+
+      if (wc != WEOF)
+	{
+	  if (print_kth (field_idx, NULL))
+	    {
+	      if (found_any_selected_field)
+		{
+		  fwrite (output_delimiter_string, sizeof (char),
+		      output_delimiter_length, stdout);
+		}
+	      found_any_selected_field = 1;
+	    }
+
+	  while (1)
+	    {
+	      REFILL_BUFFER (buf, bufpos, buflen, stream);
+
+	      GET_NEXT_WC_FROM_BUFFER
+		(wc, bufpos, buflen, mblength, state, convfail);
+
+	      if (wc == WEOF)
+		break;
+	      else if (!convfail && (wc == wcdelim || wc == L'\n'))
+		{
+		  buflen -= mblength;
+		  bufpos += mblength;
+		  break;
+		}
+
+	      if (print_kth (field_idx, NULL))
+		fwrite (bufpos, mblength, sizeof(char), stdout);
+
+	      buflen -= mblength;
+	      bufpos += mblength;
+	    }
+	}
+
+      if ((!convfail || wc == L'\n') && buflen < 1)
+	wc = WEOF;
+
+      if (!convfail && wc == wcdelim)
+	++field_idx;
+      else if (wc == WEOF || (!convfail && wc == L'\n'))
+	{
+	  if (found_any_selected_field
+	      || (!empty_input && !(suppress_non_delimited && field_idx == 1)))
+	    putchar ('\n');
+	  if (wc == WEOF)
+	    break;
+	  field_idx = 1;
+	  found_any_selected_field = 0;
+	}
+    }
+}
+#endif
+
 static void
 cut_stream (FILE *stream)
 {
-  if (operating_mode == byte_mode)
-    cut_bytes (stream);
+#if HAVE_MBRTOWC
+  if (MB_CUR_MAX > 1 && !force_singlebyte_mode)
+    {
+      switch (operating_mode)
+	{
+	case byte_mode:
+	  if (byte_mode_character_aware)
+	    cut_characters_or_cut_bytes_no_split (stream);
+	  else
+	    cut_bytes (stream);
+	  break;
+
+	case character_mode:
+	  cut_characters_or_cut_bytes_no_split (stream);
+	  break;
+
+	case field_mode:
+	  cut_fields_mb (stream);
+	  break;
+
+	default:
+	  abort ();
+	}
+    }
   else
-    cut_fields (stream);
+#endif
+    {
+      if (operating_mode == field_mode)
+	cut_fields (stream);
+      else
+	cut_bytes (stream);
+    }
 }
 
 /* Process file FILE to standard output.
@@ -637,6 +971,8 @@ main (int argc, char **argv)
 {
   int optc, exit_status = 0;
   int delim_specified = 0;
+  char mbdelim[MB_LEN_MAX + 1];
+  size_t delimlen = 0;
 
   program_name = argv[0];
   setlocale (LC_ALL, "");
@@ -661,7 +997,6 @@ main (int argc, char **argv)
 	  break;
 
 	case 'b':
-	case 'c':
 	  /* Build the byte list. */
 	  if (operating_mode != undefined_mode)
 	    FATAL_ERROR (_("only one type of list may be specified"));
@@ -670,6 +1005,15 @@ main (int argc, char **argv)
 	    FATAL_ERROR (_("missing list of positions"));
 	  break;
 
+	case 'c':
+	  /* Build the character list. */
+	  if (operating_mode != undefined_mode)
+	    FATAL_ERROR (_("only one type of list may be specified"));
+	  operating_mode = character_mode;
+	  if (set_fields (optarg) == 0)
+	    FATAL_ERROR (_("missing list of positions"));
+	  break;
+
 	case 'f':
 	  /* Build the field list. */
 	  if (operating_mode != undefined_mode)
@@ -682,9 +1026,32 @@ main (int argc, char **argv)
 	case 'd':
 	  /* New delimiter. */
 	  /* Interpret -d '' to mean `use the NUL byte as the delimiter.'  */
-	  if (optarg[0] != '\0' && optarg[1] != '\0')
-	    FATAL_ERROR (_("the delimiter must be a single character"));
-	  delim = (unsigned char) optarg[0];
+#if HAVE_MBRTOWC
+	  if(MB_CUR_MAX > 1)
+	    {
+	      mbstate_t state;
+
+	      memset (&state, '\0', sizeof(mbstate_t));
+	      delimlen = mbrtowc (&wcdelim, optarg, MB_LEN_MAX, &state);
+
+	      if (delimlen == (size_t)-1 || delimlen == (size_t)-2)
+		++force_singlebyte_mode;
+	      else
+		{
+		  delimlen = (delimlen < 1) ? 1 : delimlen;
+		  if (wcdelim != L'\0' && *(optarg + delimlen) != '\0')
+		    FATAL_ERROR (_("the delimiter must be a single character"));
+		  memcpy (mbdelim, optarg, delimlen);
+		}
+	    }
+
+	  if (MB_CUR_MAX <= 1 || force_singlebyte_mode)
+#endif
+	    {
+	      if (optarg[0] != '\0' && optarg[1] != '\0')
+		FATAL_ERROR (_("the delimiter must be a single character"));
+	      delim = (unsigned char) optarg[0];
+	    }
 	  delim_specified = 1;
 	  break;
 
@@ -698,6 +1065,7 @@ main (int argc, char **argv)
 	  break;
 
 	case 'n':
+	  byte_mode_character_aware = 1;
 	  break;
 
 	case 's':
@@ -716,7 +1084,7 @@ main (int argc, char **argv)
   if (operating_mode == undefined_mode)
     FATAL_ERROR (_("you must specify a list of bytes, characters, or fields"));
 
-  if (delim != '\0' && operating_mode != field_mode)
+  if (delim_specified && operating_mode != field_mode)
     FATAL_ERROR (_("an input delimiter may be specified only\
  when operating on fields"));
 
@@ -725,15 +1093,34 @@ main (int argc, char **argv)
 \tonly when operating on fields"));
 
   if (!delim_specified)
-    delim = '\t';
+    {
+      delim = '\t';
+#ifdef HAVE_MBRTOWC
+      wcdelim = L'\t';
+      mbdelim[0] = '\t';
+      mbdelim[1] = '\0';
+      delimlen = 1;
+    }
+#endif
 
   if (output_delimiter_string == NULL)
     {
-      static char dummy[2];
-      dummy[0] = delim;
-      dummy[1] = '\0';
-      output_delimiter_string = dummy;
-      output_delimiter_length = 1;
+#ifdef HAVE_MBRTOWC
+      if (MB_CUR_MAX > 1 && !force_singlebyte_mode)
+	{
+	  output_delimiter_string = xstrdup(mbdelim);
+	  output_delimiter_length = delimlen;
+	}
+
+      if (MB_CUR_MAX <= 1 || force_singlebyte_mode)
+#endif
+	{
+	  static char dummy[2];
+	  dummy[0] = delim;
+	  dummy[1] = '\0';
+	  output_delimiter_string = dummy;
+	  output_delimiter_length = 1;
+	}
     }
 
   if (optind == argc)
diff -uprN coreutils-4.5.9.orig/src/expand.c coreutils-4.5.9/src/expand.c
--- coreutils-4.5.9.orig/src/expand.c	2003-03-11 00:31:54.000000000 +0900
+++ coreutils-4.5.9/src/expand.c	2003-03-11 00:32:56.000000000 +0900
@@ -38,11 +38,28 @@
 #include <stdio.h>
 #include <getopt.h>
 #include <sys/types.h>
+
+/* Get mbstate_t, mbrtowc(), wcwidth(). */
+#if HAVE_WCHAR_H
+# include <wchar.h>
+#endif
+
 #include "system.h"
 #include "closeout.h"
 #include "error.h"
 #include "posixver.h"
 
+/* MB_LEN_MAX is incorrectly defined to be 1 in at least one GCC
+   installation; work around this configuration error.  */
+#if !defined MB_LEN_MAX || MB_LEN_MAX < 2
+# define MB_LEN_MAX 16
+#endif
+
+/* Some systems, like BeOS, have multibyte encodings but lack mbstate_t.  */
+#if HAVE_MBRTOWC && defined mbstate_t
+# define mbrtowc(pwc, s, n, ps) (mbrtowc) (pwc, s, n, 0)
+#endif
+
 /* The official name of this program (e.g., no `g' prefix).  */
 #define PROGRAM_NAME "expand"
 
@@ -320,7 +337,8 @@ expand (void)
 		}
 	      else
 		{
-		  ++column;
+		  if (!ISCNTRL (c))
+		    ++column;
 		  if (convert_entire_line == 0)
 		    convert = 0;
 		}
@@ -330,6 +348,146 @@ expand (void)
     }
 }
 
+#if HAVE_MBRTOWC
+static void
+expand_multibyte (void)
+{
+  FILE *fp;			/* Input strem. */
+  mbstate_t i_state;		/* Current shift state of the input stream. */
+  mbstate_t i_state_bak;	/* Back up the I_STATE. */
+  mbstate_t o_state;		/* Current shift state of the output stream. */
+  char buf[MB_LEN_MAX + BUFSIZ];  /* For spooling a read byte sequence. */
+  char *bufpos;			/* Next read position of BUF. */
+  size_t buflen = 0;		/* The length of the byte sequence in buf. */
+  wchar_t wc;			/* A gotten wide character. */
+  size_t mblength;		/* The byte size of a multibyte character
+				   which shows as same character as WC. */
+  int tab_index = 0;		/* Index in `tab_list' of next tabstop. */
+  int column = 0;		/* Column on screen of the next char. */
+  int next_tab_column;		/* Column the next tab stop is on. */
+  int convert = 1;		/* If nonzero, perform translations. */
+
+  fp = next_file ((FILE *) NULL);
+  if (fp == NULL)
+    return;
+
+  /* Binary I/O will preserve the original EOL style (DOS/Unix) of files. */
+  SET_BINARY2 (fileno (fp), STDOUT_FILENO);
+
+  memset (&o_state, '\0', sizeof(mbstate_t));
+  memset (&i_state, '\0', sizeof(mbstate_t));
+
+  for (;;)
+    {
+      /* Refill the buffer BUF. */
+      if (buflen < MB_LEN_MAX && !feof(fp) && !ferror(fp))
+	{
+	  memmove (buf, bufpos, buflen);
+	  buflen += fread (buf + buflen, sizeof(char), BUFSIZ, fp);
+	  bufpos = buf;
+	}
+
+      /* No character is left in BUF. */
+      if (buflen < 1)
+	{
+	  fp = next_file (fp);
+
+	  if (fp == NULL)
+	    break;		/* No more files. */
+	  else
+	    {
+	      memset (&i_state, '\0', sizeof(mbstate_t));
+	      SET_BINARY2 (fileno (fp), STDOUT_FILENO);
+	      continue;
+	    }
+	}
+
+      /* Get a wide character. */
+      i_state_bak = i_state;
+      mblength = mbrtowc (&wc, bufpos, buflen, &i_state);
+
+      switch (mblength)
+	{
+	case (size_t)-1:	/* illegal byte sequence. */
+	case (size_t)-2:
+	  mblength = 1;
+	  i_state = i_state_bak;
+	  if (convert)
+	    {
+	      ++column;
+	      if (convert_entire_line == 0)
+		convert = 0;
+	    }
+	  putchar (*bufpos);
+	  break;
+
+	case 0:			/* null. */
+	  mblength = 1;
+	  if (convert && convert_entire_line == 0)
+	    convert = 0;
+	  putchar ('\0');
+	  break;
+
+	default:
+	  if (wc == L'\n')	/* LF. */
+	    {
+	      tab_index = 0;
+	      column = 0;
+	      convert = 1;
+	      putchar ('\n');
+	    }
+	  else if (wc == L'\t' && convert)	/* Tab. */
+	    {
+	      if (tab_size == 0)
+		{
+		  /* Do not let tab_index == first_free_tab;
+		     stop when it is 1 less. */
+		  while (tab_index < first_free_tab - 1
+		      && column >= tab_list[tab_index])
+		    tab_index++;
+		  next_tab_column = tab_list[tab_index];
+		  if (tab_index < first_free_tab - 1)
+		    tab_index++;
+		  if (column >= next_tab_column)
+		    next_tab_column = column + 1;
+		}
+	      else
+		next_tab_column = column + tab_size - column % tab_size;
+
+	      while (column < next_tab_column)
+		{
+		  putchar (' ');
+		  ++column;
+		}
+	    }
+	  else		/* Other Characters. */
+	    {
+	      if (convert)
+		{
+		  if (wc == L'\b')
+		    {
+		      if (column > 0)
+			--column;
+		    }
+		  else
+		    {
+		      int width;		/* The width of WC. */
+
+		      width = wcwidth (wc);
+		      column += (width > 0) ? width : 0;
+		      if (convert_entire_line == 0)
+			convert = 0;
+		    }
+		}
+	      fwrite (bufpos, sizeof(char), mblength, stdout);
+	    }
+	}
+      buflen -= mblength;
+      bufpos += mblength;
+    }
+}
+#endif
+
 int
 main (int argc, char **argv)
 {
@@ -403,7 +561,12 @@ main (int argc, char **argv)
   else
     file_list = &argv[optind];
 
-  expand ();
+#if HAVE_MBRTOWC
+  if (MB_CUR_MAX > 1)
+    expand_multibyte ();
+  else
+#endif
+    expand ();
 
   if (have_read_stdin && fclose (stdin) == EOF)
     error (EXIT_FAILURE, errno, "-");
diff -uprN coreutils-4.5.9.orig/src/fold.c coreutils-4.5.9/src/fold.c
--- coreutils-4.5.9.orig/src/fold.c	2003-03-11 00:31:54.000000000 +0900
+++ coreutils-4.5.9/src/fold.c	2003-03-11 00:32:56.000000000 +0900
@@ -23,32 +23,90 @@
 #include <getopt.h>
 #include <sys/types.h>
 
+/* Get MB_CUR_MAX.  */
+#include <stdlib.h>
+
+/* Get mbrtowc, mbstate_t, wcwidth(). */
+#if HAVE_WCHAR_H
+# include <wchar.h>
+#endif
+
+/* Get iswprint(), iswctype(), wctype(). */
+#if HAVE_WCTYPE_H
+# include <wctype.h>
+#endif
+
 #include "system.h"
 #include "closeout.h"
 #include "error.h"
 #include "posixver.h"
 #include "xstrtol.h"
 
+/* MB_LEN_MAX is incorrectly defined to be 1 in at least one GCC
+   installation; work around this configuration error. */
+#if !defined MB_LEN_MAX || MB_LEN_MAX < 2
+# undef MB_LEN_MAX
+# define MB_LEN_MAX 16
+#endif
+
+#ifndef HAVE_DECL_WCWIDTH
+"this configure-time declaration test was not run"
+#endif
+#if !HAVE_DECL_WCWIDTH
+extern int wcwidth ();
+#endif
+
+/* If wcwidth() doesn't exist, assume all printable characters have
+   width 1.  */
+#if !defined wcwidth && !HAVE_WCWIDTH
+# define wcwidth(wc) ((wc) == 0 ? 0 : iswprint (wc) ? 1 : -1)
+#endif
+
 /* The official name of this program (e.g., no `g' prefix).  */
 #define PROGRAM_NAME "fold"
 
 #define AUTHORS "David MacKenzie"
 
+#define FATAL_ERROR(Message)						\
+  do									\
+    {									\
+      error (0, 0, (Message));						\
+	usage (2);							\
+    }									\
+  while (0)
+
+enum operating_mode
+{
+  /* Fold texts by columns that are at the given positions. */
+  column_mode,
+
+  /* Fold texts by bytes that are at the given positions. */
+  byte_mode,
+
+  /* Fold texts by characters that are at the given positions. */
+  character_mode,
+};
+
 /* The name this program was run with. */
 char *program_name;
 
+/* The argument shows current mode. (Default: column_mode) */
+static enum operating_mode operating_mode;
+
 /* If nonzero, try to break on whitespace. */
 static int break_spaces;
 
-/* If nonzero, count bytes, not column positions. */
-static int count_bytes;
-
 /* If nonzero, at least one of the files we read was standard input. */
 static int have_read_stdin;
 
+/* wide character class `blank' */
+#if HAVE_MBRTOWC
+wctype_t blank_type;
+#endif
 static struct option const longopts[] =
 {
   {"bytes", no_argument, NULL, 'b'},
+  {"characters", no_argument, NULL, 'c'},
   {"spaces", no_argument, NULL, 's'},
   {"width", required_argument, NULL, 'w'},
   {GETOPT_HELP_OPTION_DECL},
@@ -78,6 +136,7 @@ Mandatory arguments to long options are 
 "), stdout);
       fputs (_("\
   -b, --bytes         count bytes rather than columns\n\
+  -c, --characters    count characters rather than columns\n\
   -s, --spaces        break at spaces\n\
   -w, --width=WIDTH   use WIDTH columns instead of 80\n\
 "), stdout);
@@ -95,7 +154,7 @@ Mandatory arguments to long options are 
 static int
 adjust_column (int column, char c)
 {
-  if (!count_bytes)
+  if (operating_mode != byte_mode)
     {
       if (c == '\b')
 	{
@@ -114,34 +173,15 @@ adjust_column (int column, char c)
   return column;
 }
 
-/* Fold file FILENAME, or standard input if FILENAME is "-",
-   to stdout, with maximum line length WIDTH.
-   Return 0 if successful, 1 if an error occurs. */
-
-static int
-fold_file (char *filename, int width)
+static void
+fold_text (FILE *istream, int width)
 {
-  FILE *istream;
   register int c;
   int column = 0;		/* Screen column where next char will go. */
   int offset_out = 0;	/* Index in `line_out' for next char. */
   static char *line_out = NULL;
   static int allocated_out = 0;
 
-  if (STREQ (filename, "-"))
-    {
-      istream = stdin;
-      have_read_stdin = 1;
-    }
-  else
-    istream = fopen (filename, "r");
-
-  if (istream == NULL)
-    {
-      error (0, errno, "%s", filename);
-      return 1;
-    }
-
   while ((c = getc (istream)) != EOF)
     {
       if (offset_out + 1 >= allocated_out)
@@ -171,6 +211,13 @@ fold_file (char *filename, int width)
 	      /* Look for the last blank. */
 	      int logical_end;
 
+	      /* If LINE_OUT has no character, put next character in LINE_OUT */
+	      if (offset_out == 0)
+		{
+		  line_out[offset_out++] = c;
+		  continue;
+		}
+
 	      for (logical_end = offset_out - 1; logical_end >= 0;
 		   logical_end--)
 		if (ISBLANK (line_out[logical_end]))
@@ -213,6 +260,233 @@ fold_file (char *filename, int width)
 
   if (offset_out)
     fwrite (line_out, sizeof (char), (size_t) offset_out, stdout);
+}
+
+#if HAVE_MBRTOWC
+static void
+fold_multibyte_text (FILE *istream, int width)
+{
+  int i;
+  char buf[MB_LEN_MAX + BUFSIZ];    /* For spooling a read byte sequence. */
+  size_t buflen;	/* The length of the byte sequence in buf. */
+  char *bufpos;		/* Next read position of BUF. */
+  wint_t wc;		/* A gotten wide character. */
+  wchar_t tmp;
+  size_t mblength;	/* The byte size of a multibyte character which shows
+			   as same character as WC. */
+  mbstate_t state, state_bak;	/* State of the stream. */
+  int convfail;		/* 1, when conversion is failed. Otherwise 0. */
+
+  char *line_out = NULL;
+  size_t offset_out = 0;	/* Index in `line_out' for next char. */
+  size_t allocated_out = 1024;
+
+  int increment;
+  size_t column = 0;
+
+  size_t last_blank_pos;
+  size_t last_blank_column;
+  int is_blank_seen;
+  int last_blank_increment;
+  int is_bs_following_last_blank;
+  size_t bs_following_last_blank_num;
+  int is_cr_after_last_blank;
+
+
+#define CLEAR_FLAGS				\
+  do						\
+    {						\
+      last_blank_pos = 0;			\
+      last_blank_column = 0;			\
+      is_blank_seen = 0;			\
+      is_bs_following_last_blank = 0;		\
+      bs_following_last_blank_num = 0;		\
+      is_cr_after_last_blank = 0;		\
+    }						\
+  while (0)
+
+#define START_NEW_LINE			\
+  do					\
+    {					\
+      putchar ('\n');			\
+      column = 0;			\
+      offset_out = 0;			\
+      CLEAR_FLAGS;			\
+    }					\
+  while (0)
+
+  CLEAR_FLAGS;
+
+  memset (&state, '\0', sizeof(mbstate_t));
+  line_out = xmalloc (allocated_out);
+
+  buflen = fread (buf, sizeof(char), BUFSIZ, istream);
+  bufpos = buf;
+
+  for (;; bufpos += mblength, buflen -= mblength)
+    {
+      if (buflen < MB_LEN_MAX && !feof (istream) && !ferror (istream))
+	{
+	  memmove (buf, bufpos, buflen);
+	  buflen += fread (buf + buflen, sizeof(char), BUFSIZ, istream);
+	  bufpos = buf;
+	}
+
+      if (buflen < 1)
+	break;
+
+      /* Get a wide character. */
+      convfail = 0;
+      state_bak = state;
+      mblength = mbrtowc (&tmp, bufpos, buflen, &state);
+      wc = tmp;
+
+      switch (mblength)
+	{
+	case (size_t)-1:
+	case (size_t)-2:
+	  convfail++;
+	  state = state_bak;
+	    /* Fall through. */
+
+	case 0:
+	  mblength = 1;
+	  break;
+	}
+
+      if (!convfail && wc == L'\n')
+	{
+	  if (offset_out > 0)
+	    {
+	      fwrite (line_out, sizeof(char), offset_out, stdout);
+	      START_NEW_LINE;
+	    }
+	  continue;
+	}
+
+rescan:
+      if (operating_mode == byte_mode)		/* byte mode */
+	increment = mblength;
+      else if (operating_mode == character_mode)	/* character mode */
+	increment = 1;
+      else						/* column mode */
+	{
+	  if (convfail)
+	    increment = 1;
+	  else
+	    {
+	      switch (wc)
+		{
+		case L'\b':
+		  increment = (column > 0) ? -1 : 0;
+		  break;
+
+		case L'\r':
+		  increment = -1 * column;
+		  break;
+
+		case L'\t':
+		  increment = 8 - column % 8;
+		  break;
+
+		default:
+		  increment = wcwidth (wc);
+		  increment = (increment < 0) ? 0 : increment;
+		}
+	    }
+	}
+
+      if (column + increment > width && break_spaces && last_blank_pos)
+	{
+	  fwrite (line_out, sizeof(char), last_blank_pos, stdout);
+	  putchar ('\n');
+
+	  offset_out = offset_out - last_blank_pos;
+	  column = column - last_blank_column + ((is_cr_after_last_blank)
+	      ? last_blank_increment : bs_following_last_blank_num);
+	  memmove (line_out, line_out + last_blank_pos, offset_out);
+	  CLEAR_FLAGS;
+	  goto rescan;
+	}
+
+      if (column + increment > width && column != 0)
+	{
+	  fwrite (line_out, sizeof(char), offset_out, stdout);
+	  START_NEW_LINE;
+	  goto rescan;
+	}
+
+      if (allocated_out < offset_out + mblength)
+	{
+	  allocated_out += 1024;
+	  line_out = xrealloc (line_out, allocated_out);
+	}
+
+      for  (i = 0; i < mblength; i++)
+	{
+	  *(line_out + offset_out) = *(bufpos + i);
+	  ++offset_out;
+	}
+
+      column += increment;
+
+      if (is_blank_seen && !convfail && wc == L'\r')
+	is_cr_after_last_blank = 1;
+
+      if (is_bs_following_last_blank && !convfail && wc == L'\b')
+	++bs_following_last_blank_num;
+      else
+	is_bs_following_last_blank = 0;
+
+      if (break_spaces && !convfail && iswctype (wc, blank_type))
+	{
+	  last_blank_pos = offset_out;
+	  last_blank_column = column;
+	  is_blank_seen = 1;
+	  last_blank_increment = increment;
+	  is_bs_following_last_blank = 1;
+	  bs_following_last_blank_num = 0;
+	  is_cr_after_last_blank = 0;
+	}
+    }
+
+  if (offset_out)
+    fwrite (line_out, sizeof (char), (size_t) offset_out, stdout);
+
+  free(line_out);
+}
+#endif
+
+/* Fold file FILENAME, or standard input if FILENAME is "-",
+   to stdout, with maximum line length WIDTH.
+   Return 0 if successful, 1 if an error occurs. */
+
+static int
+fold_file (char *filename, int width)
+{
+  FILE *istream;
+
+  if (STREQ (filename, "-"))
+    {
+      istream = stdin;
+      have_read_stdin = 1;
+    }
+  else
+    istream = fopen (filename, "r");
+
+  if (istream == NULL)
+    {
+      error (0, errno, "%s", filename);
+      return 1;
+    }
+
+  /* Define how ISTREAM is being folded. */
+#if HAVE_MBRTOWC
+  if (MB_CUR_MAX > 1)
+    fold_multibyte_text (istream, width);
+  else
+#endif
+    fold_text (istream, width);
 
   if (ferror (istream))
     {
@@ -243,9 +517,14 @@ main (int argc, char **argv)
   bindtextdomain (PACKAGE, LOCALEDIR);
   textdomain (PACKAGE);
 
+#if HAVE_MBRTOWC
+  blank_type = wctype ("blank");
+#endif
+
   atexit (close_stdout);
 
-  break_spaces = count_bytes = have_read_stdin = 0;
+  operating_mode = column_mode;
+  break_spaces = have_read_stdin = 0;
 
   /* Turn any numeric options into -w options.  */
   for (i = 1; i < argc; i++)
@@ -271,7 +550,7 @@ main (int argc, char **argv)
 	}
     }
 
-  while ((optc = getopt_long (argc, argv, "bsw:", longopts, NULL)) != -1)
+  while ((optc = getopt_long (argc, argv, "bcsw:", longopts, NULL)) != -1)
     {
       switch (optc)
 	{
@@ -279,7 +558,15 @@ main (int argc, char **argv)
 	  break;
 
 	case 'b':		/* Count bytes rather than columns. */
-	  count_bytes = 1;
+	  if (operating_mode != column_mode)
+	    FATAL_ERROR (_("only one way of folding may be specified"));
+	  operating_mode = byte_mode;
+	  break;
+
+	case 'c':		/* Count characters rather than columns. */
+	  if (operating_mode != column_mode)
+	    FATAL_ERROR (_("only one way of folding may be specified"));
+	  operating_mode = character_mode;
 	  break;
 
 	case 's':		/* Break at word boundaries. */
diff -uprN coreutils-4.5.9.orig/src/join.c coreutils-4.5.9/src/join.c
--- coreutils-4.5.9.orig/src/join.c	2003-03-11 00:31:54.000000000 +0900
+++ coreutils-4.5.9/src/join.c	2003-03-11 00:32:56.000000000 +0900
@@ -24,6 +24,16 @@
 #include <sys/types.h>
 #include <getopt.h>
 
+/* Get mbstate_t, mbrtowc(), wcrtomb(), wcwidth() */
+#if HAVE_WCHAR_H
+# include <wchar.h>
+#endif
+
+/* Get iswctype(), wctype(), towupper().  */
+#if HAVE_WCTYPE_H
+# include <wctype.h>
+#endif
+
 #include "system.h"
 #include "closeout.h"
 #include "error.h"
@@ -33,6 +43,18 @@
 #include "xmemcoll.h"
 #include "xstrtol.h"
 
+/* MB_LEN_MAX is incorrectly defined to be 1 in at least one GCC
+  installation; work around this configuration error. */
+#if !defined MB_LEN_MAX || MB_LEN_MAX < 2
+# undef MB_LEN_MAX
+# define MB_LEN_MAX 16
+#endif
+
+/* Some systems, like BeOS, have multibyte encodings but lack mbstate_t.  */
+#if HAVE_MBRTOWC && defined mbstate_t
+# define mbrtowc(pwc, s, n, ps) (mbrtowc) (pwc, s, n, 0)
+#endif
+
 /* The official name of this program (e.g., no `g' prefix).  */
 #define PROGRAM_NAME "join"
 
@@ -112,7 +134,10 @@ static struct outlist *outlist_end = &ou
 /* Tab character separating fields; if this is NUL fields are separated
    by any nonempty string of white space, otherwise by exactly one
    tab character.  */
-static unsigned char tab;
+static unsigned char *tab = NULL;
+
+/* The number of bytes used for tab. */
+static size_t tablen = 0;
 
 /* When using getopt_long_only, no long option can start with
    a character that is a short option.  */
@@ -133,6 +158,11 @@ static struct line uni_blank;
 /* If nonzero, ignore case when comparing join fields.  */
 static int ignore_case;
 
+#if HAVE_MBRTOWC
+/* Wide blank character class. */
+wctype_t blank_type;
+#endif
+
 void
 usage (int status)
 {
@@ -211,7 +241,7 @@ xfields (struct line *line)
   ptr = ptr0;
   lim = ptr0 + line->buf.length - 1;
 
-  if (!tab)
+  if (tab == NULL)
     {
       /* Skip leading blanks before the first field.  */
       while (ptr < lim && ISBLANK (*ptr))
@@ -220,12 +250,12 @@ xfields (struct line *line)
 
   for (i = 0; ptr < lim; ++i)
     {
-      if (tab)
+      if (tab != NULL)
 	{
 	  unsigned char *beg;
 
 	  beg = ptr;
-	  while (ptr < lim && *ptr != tab)
+	  while (ptr < lim && *ptr != tab[0])
 	    ++ptr;
 	  ADD_FIELD (line, beg, ptr - beg);
 	  if (ptr < lim)
@@ -244,7 +274,8 @@ xfields (struct line *line)
 	}
     }
 
-  if (ptr != ptr0 && ((!tab && ISBLANK (ptr[-1])) || ptr[-1] == tab))
+  if (ptr != ptr0 && ((tab == NULL && ISBLANK (*(ptr - 1)))
+	|| (tab != NULL && *(ptr - 1) == *tab)))
     {
       /* Add one more (empty) field because the last character of the
 	 line was a delimiter.  */
@@ -252,6 +283,137 @@ xfields (struct line *line)
     }
 }
 
+#if HAVE_MBRTOWC
+static void
+xfields_multibyte (struct line *line)
+{
+  int i;
+  unsigned char *ptr0 = (unsigned char *) line->buf.buffer;
+  unsigned char *ptr;
+  unsigned char *lim;
+  wchar_t wc = 0;
+  size_t mblength;
+  mbstate_t state, state_bak;
+
+  memset(&state, 0, sizeof(mbstate_t));
+
+  ptr = ptr0;
+  lim = ptr0 + line->buf.length - 1;
+
+  if (tab == NULL)
+    {
+      /* Skip leading blanks before the first field.  */
+      while(ptr < lim)
+	{
+	  state_bak = state;
+	  mblength = mbrtowc (&wc, ptr, lim - ptr + 1, &state);
+
+	  if (mblength == (size_t)-1 || mblength == (size_t)-2)
+	    {
+	      mblength = 1;
+	      state = state_bak;
+	      break;
+	    }
+	  mblength = (mblength < 1) ? 1 : mblength;
+
+	  if (!iswctype (wc, blank_type))
+	    break;
+	  ptr += mblength;
+	}
+    }
+
+  for (i = 0; ptr < lim; ++i)
+    {
+      if (tab != NULL)
+	{
+	  unsigned char *beg;
+
+	  beg = ptr;
+	  while (ptr < lim)
+	    {
+	      state_bak = state;
+	      mblength = mbrtowc (&wc, ptr, lim - ptr + 1, &state);
+
+	      if (mblength == (size_t)-1 || mblength == (size_t)-2)
+		{
+		  mblength = 1;
+		  state = state_bak;
+		}
+	      mblength = (mblength < 1) ? 1 : mblength;
+
+	      if (mblength == tablen && !memcmp(ptr, tab, mblength))
+		break;
+	      else
+		{
+		  ptr += mblength;
+		  continue;
+		}
+	    }
+
+	  ADD_FIELD (line, beg, ptr - beg);
+	  if (ptr < lim)
+	    ptr += mblength;
+	}
+      else
+	{
+	  unsigned char *beg;
+
+	  beg = ptr;
+	  while (ptr < lim)
+	    {
+	      state_bak = state;
+	      mblength = mbrtowc (&wc, ptr, lim - ptr + 1, &state);
+
+	      if (mblength == (size_t)-1 || mblength == (size_t)-2)
+		{
+		  mblength = 1;
+		  state = state_bak;
+		}
+	      mblength = (mblength < 1) ? 1 : mblength;
+
+	      if (iswctype (wc, blank_type))
+		break;
+	      else
+		{
+		  ptr += mblength;
+		  continue;
+		}
+	    }
+
+	  ADD_FIELD (line, beg, ptr - beg);
+	  if (ptr < lim)
+	    ptr += mblength;
+	}
+    }
+
+  if (ptr != ptr0)
+    {
+      mblength = mbrtowc(&wc, ptr - mblength, mblength, &state);
+      wc = (mbsinit(&state) && *(ptr - mblength) == '\0') ? L'\0' : wc;
+      if (tab != NULL)
+	{
+	  if (mblength == (size_t)-1 || mblength == (size_t)-2)
+	    mblength = 1;
+
+	  if (mblength == tablen && !memcmp(ptr - mblength, tab, mblength))
+	    /* Add one more (empty) field because the last character of
+	       the line was a delimiter.  */
+	    ADD_FIELD (line, NULL, 0);
+	}
+      else
+	{
+	  if (mblength != (size_t)-1 && mblength != (size_t)-2)
+	    {
+	      if (iswctype (wc, blank_type))
+		/* Add one more (empty) field because the last character of
+		   the line was a delimiter.  */
+		ADD_FIELD (line, NULL, 0);
+	    }
+	}
+    }
+}
+#endif
+
 /* Read a line from FP into LINE and split it into fields.
    Return 0 if EOF, 1 otherwise.  */
 
@@ -270,7 +432,13 @@ get_line (FILE *fp, struct line *line)
   line->nfields_allocated = 0;
   line->nfields = 0;
   line->fields = NULL;
-  xfields (line);
+
+#if HAVE_MBRTOWC
+  if (MB_CUR_MAX > 1)
+    xfields_multibyte (line);
+  else
+#endif
+    xfields (line);
   return 1;
 }
 
@@ -328,36 +496,37 @@ static int
 keycmp (struct line *line1, struct line *line2)
 {
   /* Start of field to compare in each file.  */
-  const unsigned char *beg1, *beg2;
-
-  size_t len1, len2;		/* Length of fields to compare.  */
+  const unsigned char *beg[2];
+  unsigned char *copy[2];
+  int len[2];		/* Length of fields to compare.  */
   int diff;
+  int i, j;
 
   if (join_field_1 < line1->nfields)
     {
-      beg1 = line1->fields[join_field_1].beg;
-      len1 = line1->fields[join_field_1].len;
+      beg[0] = line1->fields[join_field_1].beg;
+      len[0] = line1->fields[join_field_1].len;
     }
   else
     {
-      beg1 = NULL;
-      len1 = 0;
+      beg[0] = NULL;
+      len[0] = 0;
     }
 
   if (join_field_2 < line2->nfields)
     {
-      beg2 = line2->fields[join_field_2].beg;
-      len2 = line2->fields[join_field_2].len;
+      beg[1] = line2->fields[join_field_2].beg;
+      len[1] = line2->fields[join_field_2].len;
     }
   else
     {
-      beg2 = NULL;
-      len2 = 0;
+      beg[1] = NULL;
+      len[1] = 0;
     }
 
-  if (len1 == 0)
-    return len2 == 0 ? 0 : -1;
-  if (len2 == 0)
+  if (len[0] == 0)
+    return len[1] == 0 ? 0 : -1;
+  if (len[1] == 0)
     return 1;
 
   /* Use an if-statement here rather than a function variable to
@@ -365,20 +534,80 @@ keycmp (struct line *line1, struct line 
      of memcmp.  */
   if (ignore_case)
     {
-      /* FIXME: ignore_case does not work with NLS (in particular,
-         with multibyte chars).  */
-      diff = memcasecmp (beg1, beg2, min (len1, len2));
+#ifdef HAVE_MBRTOWC
+      if (MB_CUR_MAX > 1)
+	{
+	  size_t mblength;
+	  wchar_t wc, uwc;
+	  mbstate_t state, state_bak;
+
+	  memset (&state, '\0', sizeof (mbstate_t));
+
+	  for (i = 0; i < 2; i++)
+	    {
+	      copy[i] = alloca (len[i] + 1);
+
+	      for (j = 0; j < min (len[0], len[1]);)
+		{
+		  state_bak = state;
+		  mblength = mbrtowc (&wc, beg[i] + j, len[i] - j, &state);
+
+		  switch (mblength)
+		    {
+		    case (size_t)-1:
+		    case (size_t)-2:
+		      state = state_bak;
+			/* Fall through */
+		    case 0:
+		      mblength = 1;
+		      break;
+
+		    default:
+		      uwc = towupper (wc);
+
+		      if (uwc != wc)
+			{
+			  mbstate_t state_wc;
+
+			  memset (&state_wc, '\0', sizeof(mbstate_t));
+			  wcrtomb (copy[i] + j, uwc, &state_wc);
+			}
+		      else
+			memcpy (copy[i] + j, beg[i] + j, mblength);
+		    }
+		  j += mblength;
+		}
+	      copy[i][j] = '\0';
+	    }
+	}
+      else
+#endif
+	{
+	  for (i = 0; i < 2; i++)
+	    {
+	      copy[i] = alloca (len[i] + 1);
+
+	      for (j = 0; j < min (len[0], len[1]); j++)
+		copy[i][j] = toupper (beg[i][j]);
+
+	      copy[i][j] = '\0';
+	    }
+	}
     }
   else
     {
-      if (HAVE_SETLOCALE && hard_LC_COLLATE)
-	return xmemcoll ((char *) beg1, len1, (char *) beg2, len2);
-      diff = memcmp (beg1, beg2, min (len1, len2));
+      copy[0] = (unsigned char *)beg[0];
+      copy[1] = (unsigned char *)beg[1];
     }
 
+  if (HAVE_SETLOCALE && hard_LC_COLLATE)
+    return xmemcoll ((char *) copy[0], len[0], (char *) copy[1], len[1]);
+
+  diff = memcmp (copy[0], copy[1], min (len[0], len[1]));
+
   if (diff)
     return diff;
-  return len1 < len2 ? -1 : len1 != len2;
+  return len[0] < len[1] ? -1 : len[0] != len[1];
 }
 
 /* Print field N of LINE if it exists and is nonempty, otherwise
@@ -403,6 +632,14 @@ prfield (int n, struct line *line)
 
 /* Print the join of LINE1 and LINE2.  */
 
+#define PUT_TAB_CHAR							\
+  do									\
+    {									\
+      (tab != NULL) ?							\
+	fwrite(tab, sizeof(char), tablen, stdout) : putchar (' ');	\
+    }									\
+  while (0)
+
 static void
 prjoin (struct line *line1, struct line *line2)
 {
@@ -442,7 +679,7 @@ prjoin (struct line *line1, struct line 
 	  o = o->next;
 	  if (o == NULL)
 	    break;
-	  putchar (tab ? tab : ' ');
+	  PUT_TAB_CHAR;
 	}
       putchar ('\n');
     }
@@ -460,23 +697,23 @@ prjoin (struct line *line1, struct line 
       prfield (join_field_1, line1);
       for (i = 0; i < join_field_1 && i < line1->nfields; ++i)
 	{
-	  putchar (tab ? tab : ' ');
+	  PUT_TAB_CHAR;
 	  prfield (i, line1);
 	}
       for (i = join_field_1 + 1; i < line1->nfields; ++i)
 	{
-	  putchar (tab ? tab : ' ');
+	  PUT_TAB_CHAR;
 	  prfield (i, line1);
 	}
 
       for (i = 0; i < join_field_2 && i < line2->nfields; ++i)
 	{
-	  putchar (tab ? tab : ' ');
+	  PUT_TAB_CHAR;
 	  prfield (i, line2);
 	}
       for (i = join_field_2 + 1; i < line2->nfields; ++i)
 	{
-	  putchar (tab ? tab : ' ');
+	  PUT_TAB_CHAR;
 	  prfield (i, line2);
 	}
       putchar ('\n');
@@ -745,6 +982,10 @@ main (int argc, char **argv)
 
   atexit (close_stdout);
 
+#if HAVE_MBRTOWC
+  blank_type = wctype ("blank");
+#endif
+
   /* Initialize this before parsing options.  In parsing options,
      it may be increased.  */
   uni_blank.nfields = 1;
@@ -815,7 +1056,23 @@ main (int argc, char **argv)
 	  break;
 
 	case 't':
-	  tab = *optarg;
+	  tab = xstrdup(optarg);
+#if HAVE_MBRTOWC
+	  if (MB_CUR_MAX > 1)
+	    {
+	      mbstate_t state;
+
+	      memset(&state, 0, sizeof(mbstate_t));
+	      tablen = mbrtowc(NULL, optarg, MB_LEN_MAX, &state);
+	      if (tablen == (size_t) 0
+		 || tablen == (size_t)-1 || tablen == (size_t)-2)
+		tablen = 1;
+	    }
+	  else
+	    {
+#endif
+	      tablen = 1;
+	    }
 	  break;
 
 	case 1:		/* Non-option argument.  */
diff -uprN coreutils-4.5.9.orig/src/pr.c coreutils-4.5.9/src/pr.c
--- coreutils-4.5.9.orig/src/pr.c	2003-03-11 00:31:54.000000000 +0900
+++ coreutils-4.5.9/src/pr.c	2003-03-11 00:32:56.000000000 +0900
@@ -315,6 +315,12 @@
 #include <getopt.h>
 #include <sys/types.h>
 #include <time.h>
+
+/* Get mbstate_t, mbrtowc(), wcwidth(). */
+#if HAVE_WCHAR_H
+# include <wchar.h>
+#endif
+
 #include "system.h"
 #include "closeout.h"
 #include "error.h"
@@ -322,6 +328,13 @@
 #include "posixver.h"
 #include "xstrtol.h"
 
+/* MB_LEN_MAX is incorrectly defined to be 1 in at least one GCC
+   installation; work around this configuration error. */
+#if !defined MB_LEN_MAX || MB_LEN_MAX < 2
+# undef MB_LEN_MAX
+# define MB_LEN_MAX 16
+#endif
+
 /* The official name of this program (e.g., no `g' prefix).  */
 #define PROGRAM_NAME "pr"
 
@@ -414,7 +427,14 @@ typedef struct COLUMN COLUMN;
 
 #define NULLCOL (COLUMN *)0
 
-static int char_to_clump (int c);
+static void (*print_char) (int c);
+static void print_char_uni (int c);
+static void print_char_multi (int c);
+
+static int (*char_to_clump) (int c);
+static int char_to_clump_uni (int c);
+static int char_to_clump_multi (int c);
+
 static int read_line (COLUMN *p);
 static int print_page (void);
 static int print_stored (COLUMN *p);
@@ -424,6 +444,7 @@ static void print_header (void);
 static void pad_across_to (int position);
 static void add_line_number (COLUMN *p);
 static void getoptarg (char *arg, char switch_char, char *character,
+		       int *character_length, int *character_width,
 		       int *number);
 void usage (int status);
 static void print_files (int number_of_files, char **av);
@@ -438,7 +459,6 @@ static void store_char (int c);
 static void pad_down (int lines);
 static void read_rest_of_line (COLUMN *p);
 static void skip_read (COLUMN *p, int column_number);
-static void print_char (int c);
 static void cleanup (void);
 static void first_last_page (char *pages);
 static void print_sep_string (void);
@@ -454,7 +474,7 @@ static COLUMN *column_vector;
    we store the leftmost columns contiguously in buff.
    To print a line from buff, get the index of the first character
    from line_vector[i], and print up to line_vector[i + 1]. */
-static char *buff;
+static unsigned char *buff;
 
 /* Index of the position in buff where the next character
    will be stored. */
@@ -558,7 +578,9 @@ static int chars_per_column;
 static int untabify_input = FALSE;
 
 /* (-e) The input tab character. */
-static char input_tab_char = '\t';
+static char input_tab_char[MB_LEN_MAX] = "\t";
+static int input_tab_char_length = 1;
+static int input_tab_char_width = 0;
 
 /* (-e) Tabstops are at chars_per_tab, 2*chars_per_tab, 3*chars_per_tab, ...
    where the leftmost column is 1. */
@@ -568,7 +590,9 @@ static int chars_per_input_tab = 8;
 static int tabify_output = FALSE;
 
 /* (-i) The output tab character. */
-static char output_tab_char = '\t';
+static char output_tab_char[MB_LEN_MAX] = "\t";
+static int output_tab_char_length = 1;
+static int output_tab_char_width = 0;
 
 /* (-i) The width of the output tab. */
 static int chars_per_output_tab = 8;
@@ -642,7 +666,9 @@ static int power_10;
 static int numbered_lines = FALSE;
 
 /* (-n) Character which follows each line number. */
-static char number_separator = '\t';
+static char number_separator[MB_LEN_MAX] = "\t";
+static int number_separator_length = 1;
+static int number_separator_width = 0;
 
 /* (-n) line counting starts with 1st line of input file (not with 1st
    line of 1st page printed). */
@@ -695,6 +721,7 @@ static int use_col_separator = FALSE;
    -a|COLUMN|-m is a `space' and with the -J option a `tab'. */
 static char *col_sep_string = "";
 static int col_sep_length = 0;
+static int col_sep_width = 0;
 static char *column_separator = " ";
 static char *line_separator = "\t";
 
@@ -844,6 +871,15 @@ separator_string (const char *optarg_S)
   col_sep_length = (int) strlen (optarg_S);
   col_sep_string = (char *) xmalloc (col_sep_length + 1);
   strcpy (col_sep_string, optarg_S);
+#if HAVE_MBRTOWC
+  if (MB_CUR_MAX > 1)
+    {
+      col_sep_width = mbswidth (col_sep_string, 0);
+      col_sep_width = (col_sep_width > 0) ? col_sep_width : 1;
+    }
+  else
+#endif
+    col_sep_width = col_sep_length;
 }
 
 int
@@ -867,6 +903,19 @@ main (int argc, char **argv)
 
   atexit (close_stdout);
 
+#if HAVE_MBRTOWC
+  if (MB_CUR_MAX > 1)
+    {
+      print_char = print_char_multi;
+      char_to_clump = char_to_clump_multi;
+    }
+  else
+#endif
+    {
+      print_char = print_char_uni;
+      char_to_clump = char_to_clump_uni;
+    }
+
   n_files = 0;
   file_names = (argc > 1
 		? (char **) xmalloc ((argc - 1) * sizeof (char *))
@@ -944,8 +993,8 @@ main (int argc, char **argv)
 	  break;
 	case 'e':
 	  if (optarg)
-	    getoptarg (optarg, 'e', &input_tab_char,
-		       &chars_per_input_tab);
+	    getoptarg (optarg, 'e', input_tab_char, &input_tab_char_length,
+		       &input_tab_char_width, &chars_per_input_tab);
 	  /* Could check tab width > 0. */
 	  untabify_input = TRUE;
 	  break;
@@ -958,8 +1007,8 @@ main (int argc, char **argv)
 	  break;
 	case 'i':
 	  if (optarg)
-	    getoptarg (optarg, 'i', &output_tab_char,
-		       &chars_per_output_tab);
+	    getoptarg (optarg, 'i', output_tab_char, &output_tab_char_length,
+		       &output_tab_char_width, &chars_per_output_tab);
 	  /* Could check tab width > 0. */
 	  tabify_output = TRUE;
 	  break;
@@ -986,8 +1035,8 @@ main (int argc, char **argv)
 	case 'n':
 	  numbered_lines = TRUE;
 	  if (optarg)
-	    getoptarg (optarg, 'n', &number_separator,
-		       &chars_per_number);
+	    getoptarg (optarg, 'n', number_separator, &number_separator_length,
+		       &number_separator_width, &chars_per_number);
 	  break;
 	case 'N':
 	  skip_count = FALSE;
@@ -1026,7 +1075,7 @@ main (int argc, char **argv)
 	  old_s = FALSE;
 	  /* Reset an additional input of -s, -S dominates -s */
 	  col_sep_string = "";
-	  col_sep_length = 0;
+	  col_sep_length = col_sep_width = 0;
 	  use_col_separator = TRUE;
 	  if (optarg)
 	    separator_string (optarg);
@@ -1174,10 +1223,35 @@ main (int argc, char **argv)
    a number. */
 
 static void
-getoptarg (char *arg, char switch_char, char *character, int *number)
+getoptarg (char *arg, char switch_char, char *character, int *character_length,
+	   int *character_width, int *number)
 {
   if (!ISDIGIT (*arg))
-    *character = *arg++;
+    {
+#ifdef HAVE_MBRTOWC
+      if (MB_CUR_MAX > 1)
+	{
+	  wchar_t wc;
+	  size_t mblength;
+	  mbstate_t state = {'\0'};
+
+	  mblength = mbrtowc (&wc, arg, MB_LEN_MAX, &state);
+	  strncpy (character, arg, mblength);
+	  *character_length = (mblength == (size_t)-1 || mblength == (size_t)-2
+			       || mblength == 0) ? 1 : mblength;
+	  *character_width = (mblength == (size_t)-1 || mblength == (size_t)-2
+			      || mblength == 0) ? 1 : wcwidth (wc);
+	  arg += *character_length;
+	}
+      else
+#endif
+	{
+	  *character = *arg++;
+	  *character_length = 1;
+	  *character_width = 1;
+	}
+    }
+
   if (*arg)
     {
       long int tmp_long;
@@ -1242,7 +1316,7 @@ init_parameters (int number_of_files)
 	  else
 	    col_sep_string = column_separator;
 
-	  col_sep_length = 1;
+	  col_sep_length = col_sep_width = 1;
 	  use_col_separator = TRUE;
 	}
       /* It's rather pointless to define a TAB separator with column
@@ -1274,11 +1348,11 @@ init_parameters (int number_of_files)
 	     TAB_WIDTH (chars_per_input_tab, chars_per_number);   */
 
       /* Estimate chars_per_text without any margin and keep it constant. */
-      if (number_separator == '\t')
+      if (number_separator[0] == '\t')
 	number_width = chars_per_number +
 	  TAB_WIDTH (chars_per_default_tab, chars_per_number);
       else
-	number_width = chars_per_number + 1;
+	number_width = chars_per_number + number_separator_width;
 
       /* The number is part of the column width unless we are
 	 printing files in parallel. */
@@ -1293,7 +1367,7 @@ init_parameters (int number_of_files)
     }
 
   chars_per_column = (chars_per_line - chars_used_by_number -
-		     (columns - 1) * col_sep_length) / columns;
+		     (columns - 1) * col_sep_width) / columns;
 
   if (chars_per_column < 1)
     error (EXIT_FAILURE, 0, _("page width too narrow"));
@@ -1422,7 +1496,7 @@ init_funcs (void)
 
   /* Enlarge p->start_position of first column to use the same form of
      padding_not_printed with all columns. */
-  h = h + col_sep_length;
+  h = h + col_sep_width;
 
   /* This loop takes care of all but the rightmost column. */
 
@@ -1456,7 +1530,7 @@ init_funcs (void)
 	}
       else
 	{
-	  h = h_next + col_sep_length;
+	  h = h_next + col_sep_width;
 	  h_next = h + chars_per_column;
 	}
     }
@@ -1740,9 +1814,9 @@ static void
 align_column (COLUMN *p)
 {
   padding_not_printed = p->start_position;
-  if (padding_not_printed - col_sep_length > 0)
+  if (padding_not_printed - col_sep_width > 0)
     {
-      pad_across_to (padding_not_printed - col_sep_length);
+      pad_across_to (padding_not_printed - col_sep_width);
       padding_not_printed = ANYWHERE;
     }
 
@@ -2017,13 +2091,13 @@ store_char (int c)
       buff_allocated = 2 * buff_allocated;
       buff = (char *) xrealloc (buff, buff_allocated * sizeof (char));
     }
-  buff[buff_current++] = (char) c;
+  buff[buff_current++] = (unsigned char) c;
 }
 
 static void
 add_line_number (COLUMN *p)
 {
-  int i;
+  int i, j;
   char *s;
   int left_cut;
 
@@ -2046,22 +2120,24 @@ add_line_number (COLUMN *p)
       /* Tabification is assumed for multiple columns, also for n-separators,
 	 but `default n-separator = TAB' hasn't been given priority over
 	 equal column_width also specified by POSIX. */
-      if (number_separator == '\t')
+      if (number_separator[0] == '\t')
         {
           i = number_width - chars_per_number;
           while (i-- > 0)
 	    (p->char_func) ((int) ' ');
         }
       else
-        (p->char_func) ((int) number_separator);
+	for (j = 0; j < number_separator_length; j++)
+	  (p->char_func) ((int) number_separator[j]);
     }
   else
     /* To comply with POSIX, we avoid any expansion of default TAB
        separator with a single column output. No column_width requirement
        has to be considered. */
     {
-      (p->char_func) ((int) number_separator);
-      if (number_separator == '\t')
+	for (j = 0; j < number_separator_length; j++)
+	  (p->char_func) ((int) number_separator[j]);
+      if (number_separator[0] == '\t')
         output_position = POS_AFTER_TAB (chars_per_output_tab,
 			  output_position);
     }
@@ -2221,7 +2297,7 @@ print_white_space (void)
   while (goal - h_old > 1
 	 && (h_new = POS_AFTER_TAB (chars_per_output_tab, h_old)) <= goal)
     {
-      putchar (output_tab_char);
+      fwrite (output_tab_char, sizeof(char), output_tab_char_length, stdout);
       h_old = h_new;
     }
   while (++h_old <= goal)
@@ -2241,6 +2317,7 @@ print_sep_string ()
 {
   char *s;
   int l = col_sep_length;
+  int not_space_flag;
 
   s = col_sep_string;
 
@@ -2254,6 +2331,7 @@ print_sep_string ()
     {
       for (; separators_not_printed > 0; --separators_not_printed)
 	{
+	  not_space_flag = 0;
 	  while (l-- > 0)
 	    {
 	      /* 3 types of sep_strings: spaces only, spaces and chars,
@@ -2267,12 +2345,15 @@ print_sep_string ()
 		}
 	      else
 		{
+		  not_space_flag = 1;
 		  if (spaces_not_printed > 0)
 		    print_white_space ();
 		  putchar (*s++);
-		  ++output_position;
 		}
 	    }
+	  if (not_space_flag)
+	    output_position += col_sep_width;
+
           /* sep_string ends with some spaces */
 	  if (spaces_not_printed > 0)
 	    print_white_space ();
@@ -2299,8 +2380,9 @@ print_clump (COLUMN *p, int n, int *clum
    a nonspace is encountered, call print_white_space() to print the
    required number of tabs and spaces. */
 
+
 static void
-print_char (int c)
+print_char_uni (int c)
 {
   if (tabify_output)
     {
@@ -2324,6 +2406,74 @@ print_char (int c)
   putchar (c);
 }
 
+#ifdef HAVE_MBRTOWC
+static void
+print_char_multi (int c)
+{
+  static size_t mbc_pos = 0;
+  static unsigned char mbc[MB_LEN_MAX] = {'\0'};
+  static mbstate_t state = {'\0'};
+  mbstate_t state_bak;
+  wchar_t wc;
+  size_t mblength;
+  int width;
+
+  if (tabify_output)
+    {
+      state_bak = state;
+      mbc[mbc_pos++] = (unsigned char)c;
+      mblength = mbrtowc (&wc, mbc, mbc_pos, &state);
+
+      while (mbc_pos > 0)
+	{
+	  switch (mblength)
+	    {
+	    case (size_t)-2:
+	      state = state_bak;
+	      return;
+
+	    case (size_t)-1:
+	      state = state_bak;
+	      ++output_position;
+	      putchar (mbc[0]);
+	      memmove (mbc, mbc + 1, MB_CUR_MAX - 1);
+	      --mbc_pos;
+	      break;
+
+	    case 0:
+	      mblength = 1;
+
+	    default:
+	      if (wc == L' ')
+		{
+		  memmove (mbc, mbc + mblength, MB_CUR_MAX - mblength);
+		  --mbc_pos;
+		  ++spaces_not_printed;
+		  return;
+		}
+	      else if (spaces_not_printed > 0)
+		print_white_space ();
+
+	      /* Nonprintables are assumed to have width 0, except L'\b'. */
+	      if ((width = wcwidth (wc)) < 1)
+		{
+		  if (wc == L'\b')
+		    --output_position;
+		}
+	      else
+		output_position += width;
+
+	      fwrite (mbc, sizeof(char), mblength, stdout);
+	      memmove (mbc, mbc + mblength, MB_CUR_MAX - mblength);
+	      mbc_pos -= mblength;
+	    }
+	}
+      return;
+    }
+  putchar (c);
+}
+#endif
+
 /* Skip to page PAGE before printing.
    PAGE may be larger than total number of pages. */
 
@@ -2498,9 +2648,9 @@ read_line (COLUMN *p)
 	  align_empty_cols = FALSE;
 	}
 
-      if (padding_not_printed - col_sep_length > 0)
+      if (padding_not_printed - col_sep_width > 0)
 	{
-	  pad_across_to (padding_not_printed - col_sep_length);
+	  pad_across_to (padding_not_printed - col_sep_width);
 	  padding_not_printed = ANYWHERE;
 	}
 
@@ -2601,9 +2751,9 @@ print_stored (COLUMN *p)
 	}
     }
 
-  if (padding_not_printed - col_sep_length > 0)
+  if (padding_not_printed - col_sep_width > 0)
     {
-      pad_across_to (padding_not_printed - col_sep_length);
+      pad_across_to (padding_not_printed - col_sep_width);
       padding_not_printed = ANYWHERE;
     }
 
@@ -2616,8 +2766,8 @@ print_stored (COLUMN *p)
   if (spaces_not_printed == 0)
     {
       output_position = p->start_position + end_vector[line];
-      if (p->start_position - col_sep_length == chars_per_margin)
-	output_position -= col_sep_length;
+      if (p->start_position - col_sep_width == chars_per_margin)
+	output_position -= col_sep_width;
     }
 
   return TRUE;
@@ -2635,8 +2785,9 @@ print_stored (COLUMN *p)
    characters in clump_buff.  (e.g, the width of '\b' is -1, while the
    number of characters is 1.) */
 
+
 static int
-char_to_clump (int c)
+char_to_clump_uni (int c)
 {
   register int *s = clump_buff;
   register int i;
@@ -2645,10 +2796,10 @@ char_to_clump (int c)
   int chars;
   int chars_per_c = 8;
 
-  if (c == input_tab_char)
+  if (c == input_tab_char[0])
     chars_per_c = chars_per_input_tab;
 
-  if (c == input_tab_char || c == '\t')
+  if (c == input_tab_char[0] || c == '\t')
     {
       width = TAB_WIDTH (chars_per_c, input_position);
 
@@ -2719,6 +2870,153 @@ char_to_clump (int c)
   return chars;
 }
 
+#ifdef HAVE_MBRTOWC
+static int
+char_to_clump_multi (int c)
+{
+  static size_t mbc_pos = 0;
+  static unsigned char mbc[MB_LEN_MAX] = {'\0'};
+  static mbstate_t state = {'\0'};
+  mbstate_t state_bak;
+  wchar_t wc;
+  size_t mblength;
+  int wc_width;
+  register int *s = clump_buff;
+  register int i, j;
+  char esc_buff[4];
+  int width;
+  int chars;
+  int chars_per_c = 8;
+
+  state_bak = state;
+  mbc[mbc_pos++] = (unsigned char)c;
+  mblength = mbrtowc (&wc, mbc, mbc_pos, &state);
+
+  width = 0;
+  chars = 0;
+  while (mbc_pos > 0)
+    {
+      switch (mblength)
+	{
+	case (size_t)-2:
+	  state = state_bak;
+	  return 0;
+
+	case (size_t)-1:
+	  state = state_bak;
+	  mblength = 1;
+
+	  if (use_esc_sequence || use_cntrl_prefix)
+	    {
+	      width = +4;
+	      chars = +4;
+	      *s++ = '\\';
+	      sprintf (esc_buff, "%03o", mbc[0]);
+	      for (i = 0; i <= 2; ++i)
+		*s++ = (int) esc_buff[i];
+	    }
+	  else
+	    {
+	      width += 1;
+	      chars += 1;
+	      *s++ = mbc[0];
+	    }
+	  break;
+
+	case 0:
+	  mblength = 1;
+
+	default:
+	  if (memcmp (mbc, input_tab_char, mblength) == 0)
+	    chars_per_c = chars_per_input_tab;
+
+	  if (memcmp (mbc, input_tab_char, mblength) == 0 || c == '\t')
+	    {
+	      int  width_inc;
+
+	      width_inc = TAB_WIDTH (chars_per_c, input_position);
+	      width += width_inc;
+
+	      if (untabify_input)
+		{
+		  for (i = width_inc; i; --i)
+		    *s++ = ' ';
+		  chars += width_inc;
+		}
+	      else
+		{
+		  for (i = 0; i <  mblength; i++)
+		    *s++ = mbc[i];
+		  chars += mblength;
+		}
+	    }
+	  else if ((wc_width = wcwidth (wc)) < 1)
+	    {
+	      if (use_esc_sequence)
+		{
+		  for (i = 0; i < mblength; i++)
+		    {
+		      width += 4;
+		      chars += 4;
+		      *s++ = '\\';
+		      sprintf (esc_buff, "%03o", c);
+		      for (j = 0; j <= 2; ++j)
+			*s++ = (int) esc_buff[j];
+		    }
+		}
+	      else if (use_cntrl_prefix)
+		{
+		  if (wc < 0200)
+		    {
+		      width += 2;
+		      chars += 2;
+		      *s++ = '^';
+		      *s++ = wc ^ 0100;
+		    }
+		  else
+		    {
+		      for (i = 0; i < mblength; i++)
+			{
+			  width += 4;
+			  chars += 4;
+			  *s++ = '\\';
+			  sprintf (esc_buff, "%03o", c);
+			  for (j = 0; j <= 2; ++j)
+			    *s++ = (int) esc_buff[j];
+			}
+		    }
+		}
+	      else if (wc == L'\b')
+		{
+		  width += -1;
+		  chars += 1;
+		  *s++ = c;
+		}
+	      else
+		{
+		  width += 0;
+		  chars += mblength;
+		  for (i = 0; i < mblength; i++)
+		    *s++ = mbc[i];
+		}
+	    }
+	  else
+	    {
+	      width += wc_width;
+	      chars += mblength;
+	      for (i = 0; i < mblength; i++)
+		*s++ = mbc[i];
+	    }
+	}
+      memmove (mbc, mbc + mblength, MB_CUR_MAX - mblength);
+      mbc_pos -= mblength;
+    }
+
+  input_position += width;
+  return chars;
+}
+#endif
+
 /* We've just printed some files and need to clean up things before
    looking for more options and printing the next batch of files.
 
diff -uprN coreutils-4.5.9.orig/src/sort.c coreutils-4.5.9/src/sort.c
--- coreutils-4.5.9.orig/src/sort.c	2003-03-11 00:31:54.000000000 +0900
+++ coreutils-4.5.9/src/sort.c	2003-03-11 00:32:56.000000000 +0900
@@ -28,6 +28,18 @@
 #include <signal.h>
 #include <stdio.h>
 #include <assert.h>
+
+/* Get mbstate_t, mbrtowc(), wcrtomb().  */
+#if HAVE_WCHAR_H
+# include <wchar.h>
+#endif
+
+/* Get iswprint(), iswctype() towupper().  */
+#if HAVE_WCTYPE_H
+# include <wctype.h>
+wctype_t blank_type;		/* = wctype ("blank"); */
+#endif
+
 #include "system.h"
 #include "long-options.h"
 #include "error.h"
@@ -47,6 +59,17 @@ struct rlimit { size_t rlim_cur; };
 # define getrlimit(Resource, Rlp) (-1)
 #endif
 
+/* MB_LEN_MAX is incorrectly defined to be 1 in at least one GCC
+   installation; work around this configuration error.  */
+#if !defined MB_LEN_MAX || MB_LEN_MAX == 1
+# define MB_LEN_MAX 16
+#endif
+
+/* Some systems, like BeOS, have multibyte encodings but lack mbstate_t.  */
+#if HAVE_MBRTOWC && defined mbstate_t
+# define mbrtowc(pwc, s, n, ps) (mbrtowc) (pwc, s, n, 0)
+#endif
+
 /* The official name of this program (e.g., no `g' prefix).  */
 #define PROGRAM_NAME "sort"
 
@@ -95,10 +118,11 @@ double strtod ();
 
 static char decimal_point;
 static int th_sep; /* if CHAR_MAX + 1, then there is no thousands separator */
+static int force_general_numcompare = 0;
 
 /* Nonzero if the corresponding locales are hard.  */
 static int hard_LC_COLLATE;
-# if HAVE_NL_LANGINFO
+# if HAVE_LANGINFO_CODESET
 static int hard_LC_TIME;
 # endif
 
@@ -113,6 +137,28 @@ static int hard_LC_TIME;
 
 #define NONZERO(x) (x != 0)
 
+/* get a multibyte character's byte length. */
+#define GET_BYTELEN_OF_CHAR(LIM, PTR, MBLENGTH, STATE)			\
+  do									\
+    {									\
+      wchar_t wc;							\
+      mbstate_t state_bak;						\
+									\
+      state_bak = STATE;						\
+      mblength = mbrtowc (&wc, PTR, LIM - PTR, &STATE);			\
+									\
+      switch (MBLENGTH)							\
+	{								\
+	case (size_t)-1:						\
+	case (size_t)-2:						\
+	  STATE = state_bak;						\
+		/* Fall through. */					\
+	case 0:								\
+	  MBLENGTH = 1;							\
+	}								\
+    }									\
+  while (0)
+  
 /* The kind of blanks for '-b' to skip in various options. */
 enum blanktype { bl_start, bl_end, bl_both };
 
@@ -253,7 +299,8 @@ static int stable;
 /* Tab character separating fields.  If NUL, then fields are separated
    by the empty string between a non-whitespace character and a whitespace
    character. */
-static char tab;
+static unsigned char tab[MB_LEN_MAX + 1];
+static size_t tab_length = 1;
 
 /* Flag to remove consecutive duplicate lines from the output.
    Only the last of a sequence of equal lines will be output. */
@@ -387,6 +434,46 @@ struct tempnode
 };
 static struct tempnode *volatile temphead;
 
+/* Fucntion pointers. */
+static void
+(*inittables) (void);
+
+static char *
+(* begfield) (const struct line *line, const struct keyfield *key);
+
+static char *
+(* limfield) (const struct line *line, const struct keyfield *key);
+
+static int
+(*getmonth) (const char *s, size_t len);
+
+static int
+(* keycompare) (const struct line *a, const struct line *b);
+
+/* Test for white space multibyte character.
+   Set LENGTH the byte length of investigated multibyte character. */
+#if HAVE_MBRTOWC
+static int
+ismbblank (const char *str, size_t *length)
+{
+  size_t mblength;
+  wchar_t wc;
+  mbstate_t state;
+
+  memset (&state, '\0', sizeof(mbstate_t));
+  mblength = mbrtowc (&wc, str, MB_LEN_MAX, &state); 
+
+  if (mblength == (size_t)-1 || mblength == (size_t)-2)
+    {
+      *length = 1;
+      return 0;
+    }
+  
+  *length = (mblength < 1) ? 1 : mblength;
+  return (iswctype (wc, blank_type));
+}
+#endif
+
 /* Clean up any remaining temporary files. */
 
 static void
@@ -527,7 +614,7 @@ zaptemp (const char *name)
       }
 }
 
-#if HAVE_NL_LANGINFO
+#if HAVE_LANGINFO_CODESET
 
 static int
 struct_month_cmp (const void *m1, const void *m2)
@@ -541,7 +628,7 @@ struct_month_cmp (const void *m1, const 
 /* Initialize the character class tables. */
 
 static void
-inittables (void)
+inittables_uni (void)
 {
   int i;
 
@@ -559,7 +646,7 @@ inittables (void)
 	fold_toupper[i] = i;
     }
 
-#if HAVE_NL_LANGINFO
+#if HAVE_LANGINFO_CODESET
   /* If we're not in the "C" locale, read different names for months.  */
   if (hard_LC_TIME)
     {
@@ -585,6 +672,64 @@ inittables (void)
 #endif
 }
 
+#if HAVE_MBRTOWC
+static void
+inittables_mb (void)
+{
+  int i, j, k, l;
+  char *name, *s;
+  size_t s_len, mblength;
+  char mbc[MB_LEN_MAX];
+  wchar_t wc, pwc;
+  mbstate_t state_mb, state_wc;
+
+  for (i = 0; i < MONTHS_PER_YEAR; i++)
+    {
+      s = (char *) nl_langinfo (ABMON_1 + i);
+      s_len = strlen (s);
+      monthtab[i].name = name = (char *) xmalloc (s_len + 1);
+      monthtab[i].val = i + 1;
+
+      memset (&state_mb, '\0', sizeof (mbstate_t));
+      memset (&state_wc, '\0', sizeof (mbstate_t));
+
+      for (j = 0; j < s_len;)
+	{
+	  if (!ismbblank (s + j, &mblength))
+	    break;
+	  j += mblength;
+	}
+
+      for (k = 0; j < s_len;)
+	{
+	  mblength = mbrtowc (&wc, (s + j), (s_len - j), &state_mb);
+	  assert (mblength != (size_t)-1 && mblength != (size_t)-2);
+	  if (mblength == 0)
+	    break;
+
+	  pwc = towupper (wc);
+	  if (pwc == wc)
+	    {
+	      memcpy (mbc, s + j, mblength);
+	      j += mblength;
+	    }
+	  else
+	    {
+	      j += mblength;
+	      mblength = wcrtomb (mbc, wc, &state_wc);
+	      assert (mblength != (size_t)0 && mblength != (size_t)-1);
+	    }
+
+	  for (l = 0; l < mblength; l++)
+	    name[k++] = mbc[l];
+	}
+      name[k] = '\0';
+    }
+  qsort ((void *) monthtab, MONTHS_PER_YEAR,
+      sizeof (struct month), struct_month_cmp);
+}
+#endif
+
 /* Specify the amount of main memory to use when sorting.  */
 static void
 specify_sort_size (char const *s)
@@ -769,17 +914,17 @@ buffer_linelim (struct buffer const *buf
    by KEY in LINE. */
 
 static char *
-begfield (const struct line *line, const struct keyfield *key)
+begfield_uni (const struct line *line, const struct keyfield *key)
 {
   register char *ptr = line->text, *lim = ptr + line->length - 1;
   register size_t sword = key->sword;
   register size_t schar = key->schar;
   register size_t remaining_bytes;
 
-  if (tab)
+  if (tab[0])
     while (ptr < lim && sword--)
       {
-	while (ptr < lim && *ptr != tab)
+	while (ptr < lim && *ptr != tab[0])
 	  ++ptr;
 	if (ptr < lim)
 	  ++ptr;
@@ -807,11 +952,71 @@ begfield (const struct line *line, const
   return ptr;
 }
 
+
+#if HAVE_MBRTOWC
+static char *
+begfield_mb (const struct line *line, const struct keyfield *key)
+{
+  int i;
+  char *ptr = line->text, *lim = ptr + line->length - 1;
+  size_t sword = key->sword;
+  size_t schar = key->schar;
+  size_t mblength;
+  mbstate_t state;
+
+  memset (&state, '\0', sizeof(mbstate_t));
+
+  if (tab[0])
+    while (ptr < lim && sword--)
+      {
+	while (ptr < lim && memcmp (ptr, tab, tab_length) != 0)
+	  {
+	    GET_BYTELEN_OF_CHAR (lim, ptr, mblength, state);
+	    ptr += mblength;
+	  }
+	if (ptr < lim)
+	  {
+	    GET_BYTELEN_OF_CHAR (lim, ptr, mblength, state);
+	    ptr += mblength;
+	  }
+      }
+  else
+    while (ptr < lim && sword--)
+      {
+	while (ptr < lim && ismbblank (ptr, &mblength))
+	  ptr += mblength;
+	if (ptr < lim)
+	  {
+	    GET_BYTELEN_OF_CHAR (lim, ptr, mblength, state);
+	    ptr += mblength;
+	  }
+	while (ptr < lim && !ismbblank (ptr, &mblength))
+	  ptr += mblength;
+      }
+
+  if (key->skipsblanks)
+    while (ptr < lim && ismbblank (ptr, &mblength))
+      ptr += mblength;
+
+  for (i = 0; i < schar; i++)
+    {
+      GET_BYTELEN_OF_CHAR (lim, ptr, mblength, state);
+
+      if (ptr + mblength > lim)
+	break;
+      else 
+	ptr += mblength;
+    }
+
+  return ptr;
+}
+#endif
+
 /* Return the limit of (a pointer to the first character after) the field
    in LINE specified by KEY. */
 
 static char *
-limfield (const struct line *line, const struct keyfield *key)
+limfield_uni (const struct line *line, const struct keyfield *key)
 {
   register char *ptr = line->text, *lim = ptr + line->length - 1;
   register size_t eword = key->eword, echar = key->echar;
@@ -828,10 +1033,10 @@ limfield (const struct line *line, const
      `beginning' is the first character following the delimiting TAB.
      Otherwise, leave PTR pointing at the first `blank' character after
      the preceding field.  */
-  if (tab)
+  if (tab[0])
     while (ptr < lim && eword--)
       {
-	while (ptr < lim && *ptr != tab)
+	while (ptr < lim && *ptr != tab[0])
 	  ++ptr;
 	if (ptr < lim && (eword | echar))
 	  ++ptr;
@@ -912,13 +1117,126 @@ limfield (const struct line *line, const
   return ptr;
 }
 
+#if HAVE_MBRTOWC
+static char *
+limfield_mb (const struct line *line, const struct keyfield *key)
+{
+  char *ptr = line->text, *lim = ptr + line->length - 1;
+  size_t eword = key->eword, echar = key->echar;
+  int i;
+  size_t mblength;
+  mbstate_t state;
+
+  memset (&state, '\0', sizeof(mbstate_t));
+
+  if (tab[0])
+    while (ptr < lim && eword--)
+      {
+	while (ptr < lim && memcmp (ptr, tab, tab_length) != 0)
+	  {
+	    GET_BYTELEN_OF_CHAR (lim, ptr, mblength, state);
+	    ptr += mblength;
+	  }
+	if (ptr < lim)
+	  {
+	    GET_BYTELEN_OF_CHAR (lim, ptr, mblength, state);
+	    ptr += mblength;
+	  }
+      }
+  else
+    while (ptr < lim && eword--)
+      {
+	while (ptr < lim && ismbblank (ptr, &mblength))
+	  ptr += mblength;
+	if (ptr < lim)
+	  {
+	    GET_BYTELEN_OF_CHAR (lim, ptr, mblength, state);
+	    ptr += mblength;
+	  }
+	while (ptr < lim && !ismbblank (ptr, &mblength))
+	  ptr += mblength;
+      }
+
+# ifdef POSIX_UNSPECIFIED
+
+  /* Make LIM point to the end of (one byte past) the current field.  */
+  if (tab[0])
+    {
+      char *newlim, *p;
+
+      newlim = NULL;
+      for (p = ptr; p < lim;)
+	{
+	  if (memcmp (p, tab, tab_length) == 0)
+	    {
+	      newlim = p;
+	      break;
+	    }
+
+	  GET_BYTELEN_OF_CHAR (lim, ptr, mblength, state);
+	  p += mblength;
+	}
+    }
+  else
+    {
+      char *newlim;
+      newlim = ptr;
+
+      while (newlim < lim && ismbblank (newlim, &mblength))
+	newlim += mblength;
+      if (ptr < lim)
+	{
+	  GET_BYTELEN_OF_CHAR (lim, ptr, mblength, state);
+	  ptr += mblength;
+	}
+      while (newlim < lim && !ismbblank (newlim, &mblength))
+	newlim += mblength;
+      lim = newlim;
+    }
+# endif
+
+  /* If we're skipping leading blanks, don't start counting characters
+     until after skipping past any leading blanks.  */
+  if (key->skipsblanks)
+    while (ptr < lim && ismbblank (ptr, &mblength))
+      ptr += mblength;
+
+  memset (&state, '\0', sizeof(mbstate_t));
+
+  /* Advance PTR by ECHAR (if possible), but no further than LIM.  */
+  for (i = 0; i < echar; i++)
+    {
+      GET_BYTELEN_OF_CHAR (lim, ptr, mblength, state);
+
+      if (ptr + mblength > lim)
+	break;
+      else
+	ptr += mblength;
+    }
+
+  return ptr;
+}
+#endif
+
 /* FIXME */
 
 static void
 trim_trailing_blanks (const char *a_start, char **a_end)
 {
-  while (*a_end > a_start && blanks[UCHAR (*(*a_end - 1))])
-    --(*a_end);
+#if HAVE_MBRTOWC
+  if (MB_CUR_MAX > 1)
+    {
+      size_t mblength;
+
+      while (*a_end > a_start && ismbblank ((*a_end - 1), &mblength))
+	*a_end -= mblength;
+    }
+  else
+#endif
+    {
+      while (*a_end > a_start && blanks[UCHAR (*(*a_end - 1))])
+	--(*a_end);
+    }
 }
 
 /* Fill BUF reading from FP, moving buf->left bytes from the end
@@ -1003,8 +1321,22 @@ fillbuf (struct buffer *buf, register FI
 		  else
 		    {
 		      if (key->skipsblanks)
-			while (blanks[UCHAR (*line_start)])
-			  line_start++;
+			{
+#if HAVE_MBRTOWC
+			  if (MB_CUR_MAX > 1)
+			    {
+			      size_t mblength;
+
+			      while (ismbblank (line_start, &mblength))
+				line_start += mblength;
+			    }
+			  else
+#endif
+			    {
+			      while (blanks[UCHAR (*line_start)])
+				line_start++;
+			    }
+			}
 		      line->keybeg = line_start;
 		    }
 		  if (key->skipeblanks)
@@ -1112,13 +1444,30 @@ numcompare (register const char *a, regi
   register int tmpa, tmpb, tmp;
   register size_t loga, logb;
 
-  tmpa = *a;
-  tmpb = *b;
+#if HAVE_MBRTOWC
+  if (MB_CUR_MAX > 1)
+    {
+      size_t mblength;
+
+      while (ismbblank (a, &mblength))
+	a += mblength;
+      while (ismbblank (b, &mblength))
+	b += mblength;
+
+      tmpa = *a;
+      tmpb = *b;
+    }
+  else
+#endif
+    {
+      tmpa = *a;
+      tmpb = *b;
 
-  while (blanks[UCHAR (tmpa)])
-    tmpa = *++a;
-  while (blanks[UCHAR (tmpb)])
-    tmpb = *++b;
+      while (blanks[UCHAR (tmpa)])
+	tmpa = *++a;
+      while (blanks[UCHAR (tmpb)])
+	tmpb = *++b;
+    }
 
   if (tmpa == NEGATION_SIGN)
     {
@@ -1252,15 +1601,59 @@ general_numcompare (const char *sa, cons
   /* FIXME: maybe add option to try expensive FP conversion
      only if A and B can't be compared more cheaply/accurately.  */
 
-  char *ea;
-  char *eb;
-  double a = strtod (sa, &ea);
-  double b = strtod (sb, &eb);
+  char *bufa, *ea;
+  char *bufb, *eb;
+  double a;
+  double b;
+
+  char *p;
+  struct lconv *lconvp = localeconv ();
+  size_t thousands_sep_len = strlen (lconvp->thousands_sep);
+
+  bufa = (char *) malloc (strlen (sa) + 1);
+  bufb = (char *) malloc (strlen (sb) + 1);
+  strcpy (bufa, sa);
+  strcpy (bufb, sb);
+
+  if (force_general_numcompare)
+    {
+      while (1)
+	{
+	  a = strtod (bufa, &ea);
+	  if (memcmp (ea, lconvp->thousands_sep, thousands_sep_len) == 0)
+	    {
+	      for (p = ea; *(p + thousands_sep_len) != '\0'; p++)
+		*p = *(p + thousands_sep_len);
+	      p = '\0';
+	      continue;
+	    }
+	  break;
+	}
+
+      while (1)
+	{
+	  b = strtod (bufb, &eb);
+	  if (memcmp (eb, lconvp->thousands_sep, thousands_sep_len) == 0)
+	    {
+	      for (p = eb; *(p + thousands_sep_len) != '\0'; p++)
+		*p = *(p + thousands_sep_len);
+	      *p = '\0';
+	      continue;
+	    }
+	  break;
+	}
+    }
+  else
+    {
+      a = strtod (bufa, &ea);
+      b = strtod (bufb, &eb);
+    }
+
 
   /* Put conversion errors at the start of the collating sequence.  */
-  if (sa == ea)
-    return sb == eb ? 0 : -1;
-  if (sb == eb)
+  if (bufa == ea)
+    return bufb == eb ? 0 : -1;
+  if (bufb == eb)
     return 1;
 
   /* Sort numbers in the usual way, where -0 == +0.  Put NaNs after
@@ -1278,7 +1671,7 @@ general_numcompare (const char *sa, cons
    Return 0 if the name in S is not recognized.  */
 
 static int
-getmonth (const char *s, size_t len)
+getmonth_uni (const char *s, size_t len)
 {
   char *month;
   register size_t i;
@@ -1312,16 +1705,84 @@ getmonth (const char *s, size_t len)
   while (hi - lo > 1);
 
   result = (!strncmp (month, monthtab[lo].name, strlen (monthtab[lo].name))
+      ? monthtab[lo].val : 0);
+
+  return result;
+}
+
+#if HAVE_MBRTOWC
+static int
+getmonth_mb (const char *s, size_t len)
+{
+  char *month;
+  register size_t i;
+  register int lo = 0, hi = MONTHS_PER_YEAR, result;
+  char *tmp;
+  size_t wclength, mblength;
+  const char **pp;
+  const wchar_t **wpp;
+  wchar_t *month_wcs;
+  mbstate_t state;
+
+  while (len > 0 && ismbblank (s, &mblength))
+    {
+      s += mblength;
+      len -= mblength;
+    }
+
+  if (len == 0)
+    return 0;
+
+  month = (char *) alloca (len + 1);
+
+  tmp = (char *) alloca (len + 1);
+  memcpy (tmp, s, len);
+  tmp[len] = '\0';
+  pp = (const char **)&tmp;
+  month_wcs = (wchar_t *) alloca ((len + 1) * sizeof (wchar_t));
+  memset (&state, '\0', sizeof(mbstate_t));
+
+  wclength = mbsrtowcs (month_wcs, pp, len + 1, &state);
+  assert (wclength != (size_t)1 && *pp == NULL);
+
+  for (i = 0; i < wclength; i++)
+    {
+      month_wcs[i] = towupper(month_wcs[i]);
+      if (iswctype (month_wcs[i], blank_type))
+	{
+	  month_wcs[i] = L'\0';
+	  break;
+	}
+    }
+
+  wpp = (const wchar_t **)&month_wcs;
+
+  mblength = wcsrtombs (month, wpp, len + 1, &state);
+  assert (mblength != (-1) && *wpp == NULL);
+
+  do
+    {
+      int ix = (lo + hi) / 2;
+
+      if (strncmp (month, monthtab[ix].name, strlen (monthtab[ix].name)) < 0)
+	hi = ix;
+      else
+	lo = ix;
+    }
+  while (hi - lo > 1);
+
+  result = (!strncmp (month, monthtab[lo].name, strlen (monthtab[lo].name))
 	    ? monthtab[lo].val : 0);
 
   return result;
 }
+#endif
 
 /* Compare two lines A and B trying every key in sequence until there
    are no more keys or a difference is found. */
 
 static int
-keycompare (const struct line *a, const struct line *b)
+keycompare_uni (const struct line *a, const struct line *b)
 {
   struct keyfield *key = keylist;
 
@@ -1490,11 +1951,193 @@ keycompare (const struct line *a, const 
 
   return 0;
 
+greater:
+  diff = 1;
+not_equal:
+  return key->reverse ? -diff : diff;
+}
+
+#if HAVE_MBRTOWC
+static int
+keycompare_mb (const struct line *a, const struct line *b)
+{
+  struct keyfield *key = keylist;
+
+  /* For the first iteration only, the key positions have been
+     precomputed for us. */
+  char *texta = a->keybeg;
+  char *textb = b->keybeg;
+  char *lima = a->keylim;
+  char *limb = b->keylim;
+
+  size_t mblength_a, mblength_b;
+  wchar_t wc_a, wc_b;
+  mbstate_t state_a, state_b;
+
+  int diff;
+
+  memset (&state_a, '\0', sizeof(mbstate_t));
+  memset (&state_b, '\0', sizeof(mbstate_t));
+
+  for (;;)
+    {
+      unsigned char *translate = (unsigned char *) key->translate;
+      int *ignore = key->ignore;
+
+      /* Find the lengths. */
+      size_t lena = lima <= texta ? 0 : lima - texta;
+      size_t lenb = limb <= textb ? 0 : limb - textb;
+
+      if (key->skipeblanks)
+	{
+	  char *a_end = texta + lena;
+	  char *b_end = textb + lenb;
+	  trim_trailing_blanks (texta, &a_end);
+	  trim_trailing_blanks (textb, &b_end);
+	  lena = a_end - texta;
+	  lenb = b_end - textb;
+	}
+
+      /* Actually compare the fields. */
+      if (key->numeric | key->general_numeric)
+	{
+	  char savea = *lima, saveb = *limb;
+
+	  *lima = *limb = '\0';
+	  if (force_general_numcompare)
+	    diff = general_numcompare (texta, textb);
+	  else
+	    diff = ((key->numeric ? numcompare : general_numcompare)
+		    (texta, textb));
+	  *lima = savea, *limb = saveb;
+	}
+      else if (key->month)
+	diff = getmonth (texta, lena) - getmonth (textb, lenb);
+      else
+	{
+	  if (ignore || translate)
+	    {
+	      char *copy_a = (char *) alloca (lena + 1 + lenb + 1);
+	      char *copy_b = copy_a + lena + 1;
+	      size_t new_len_a, new_len_b;
+	      size_t i, j;
+
+/* Ignore and/or translate chars before comparing.  */
+# define IGNORE_CHARS(NEW_LEN, LEN, TEXT, COPY, WC, MBLENGTH, STATE)	\
+  do									\
+    {									\
+      wchar_t uwc;							\
+      char mbc[MB_LEN_MAX];						\
+      mbstate_t state_wc;						\
+									\
+      for (NEW_LEN = i = 0; i < LEN;)					\
+	{								\
+	  mbstate_t state_bak;						\
+									\
+	  state_bak = STATE;						\
+	  MBLENGTH = mbrtowc (&WC, TEXT + i, LEN - i, &STATE);		\
+									\
+	  if (MBLENGTH == (size_t)-2 || MBLENGTH == (size_t)-1		\
+	      || MBLENGTH == 0)						\
+	    {								\
+	      if (MBLENGTH == (size_t)-2 || MBLENGTH == (size_t)-1)	\
+		STATE = state_bak;					\
+	      if (!ignore)						\
+		COPY[NEW_LEN++] = TEXT[i++];				\
+	      continue;							\
+	    }								\
+									\
+	  if (ignore)							\
+	    {								\
+	      if ((ignore == nonprinting && !iswprint (WC))		\
+		   || (ignore == nondictionary				\
+		       && !iswalnum (WC) && !iswctype (WC, blank_type)))  \
+		{							\
+		  i += MBLENGTH;					\
+		  continue;						\
+		}							\
+	    }								\
+									\
+	  if (translate)						\
+	    {								\
+									\
+	      uwc = toupper(WC);					\
+	      if (WC == uwc)						\
+		{							\
+		  memcpy (mbc, TEXT + i, MBLENGTH);			\
+	          i += MBLENGTH;					\
+		}							\
+	      else							\
+	        {							\
+	          i += MBLENGTH;					\
+		  WC = uwc;						\
+		  memset (&state_wc, '\0', sizeof (mbstate_t));		\
+									\
+		  MBLENGTH = wcrtomb (mbc, WC, &state_wc);		\
+		  assert (MBLENGTH != (size_t)-1 && MBLENGTH != 0);	\
+		}							\
+									\
+	      for (j = 0; j < MBLENGTH; j++)				\
+		COPY[NEW_LEN++] = mbc[j];				\
+	    }								\
+	  else								\
+	    for (j = 0; j < MBLENGTH; j++)				\
+	      COPY[NEW_LEN++] = TEXT[i++];				\
+	}								\
+      COPY[NEW_LEN] = '\0';						\
+    }									\
+  while (0)
+
+	      IGNORE_CHARS (new_len_a, lena, texta, copy_a,
+			    wc_a, mblength_a, state_a);
+	      IGNORE_CHARS (new_len_b, lenb, textb, copy_b,
+			    wc_b, mblength_b, state_b);
+	      diff = xmemcoll (copy_a, new_len_a, copy_b, new_len_b);
+	    }
+	  else if (lena == 0)
+	    diff = - NONZERO (lenb);
+	  else if (lenb == 0)
+	    goto greater;
+	  else
+	    diff = xmemcoll (texta, lena, textb, lenb);
+	}
+
+      if (diff)
+	goto not_equal;
+
+      key = key->next;
+      if (! key)
+	break;
+
+      /* Find the beginning and limit of the next field.  */
+      if (key->eword != -1)
+	lima = limfield (a, key), limb = limfield (b, key);
+      else
+	lima = a->text + a->length - 1, limb = b->text + b->length - 1;
+
+      if (key->sword != -1)
+	texta = begfield (a, key), textb = begfield (b, key);
+      else
+	{
+	  texta = a->text, textb = b->text;
+	  if (key->skipsblanks)
+	    {
+	      while (texta < lima && ismbblank (texta, &mblength_a))
+	        texta += mblength_a;
+	      while (textb < limb && ismbblank (textb, &mblength_b))
+	        textb += mblength_b;
+	    }
+	}
+    }
+
+  return 0;
+
  greater:
   diff = 1;
  not_equal:
   return key->reverse ? -diff : diff;
 }
+#endif
 
 /* Compare two lines A and B, returning negative, zero, or positive
    depending on whether A compares less than, equal to, or greater than B. */
@@ -2181,7 +2824,7 @@ main (int argc, char **argv)
   atexit (cleanup);
 
   hard_LC_COLLATE = hard_locale (LC_COLLATE);
-#if HAVE_NL_LANGINFO
+#if HAVE_LANGINFO_CODESET
   hard_LC_TIME = hard_locale (LC_TIME);
 #endif
 
@@ -2190,20 +2833,44 @@ main (int argc, char **argv)
   {
     struct lconv *lconvp = localeconv ();
 
-    /* If the locale doesn't define a decimal point, or if the decimal
-       point is multibyte, use the C decimal point.  We don't support
-       multibyte decimal points yet.  */
     decimal_point = *lconvp->decimal_point;
     if (! decimal_point || lconvp->decimal_point[1])
-      decimal_point = C_DECIMAL_POINT;
+      {   
+	decimal_point = C_DECIMAL_POINT;
+	if (lconvp->decimal_point[0] && lconvp->decimal_point[1])
+	  force_general_numcompare = 1;
+      }     
 
-    /* We don't support multibyte thousands separators yet.  */
     th_sep = *lconvp->thousands_sep;
     if (! th_sep || lconvp->thousands_sep[1])
-      th_sep = CHAR_MAX + 1;
+      {
+	th_sep = CHAR_MAX + 1;
+	if (lconvp->thousands_sep[0] && lconvp->thousands_sep[1])
+	  force_general_numcompare = 1;
+      }
   }
 #endif
 
+#if HAVE_MBRTOWC 
+  if (MB_CUR_MAX > 1)
+    {
+      blank_type = wctype ("blank");
+      inittables = inittables_mb;
+      begfield = begfield_mb;
+      limfield = limfield_mb;
+      getmonth = getmonth_mb;
+      keycompare = keycompare_mb;
+    }
+  else
+#endif
+    {
+      inittables = inittables_uni;
+      begfield = begfield_uni;
+      limfield = limfield_uni;
+      keycompare = keycompare_uni;
+      getmonth = getmonth_uni;
+    }
+
   have_read_stdin = 0;
   inittables ();
 
@@ -2401,14 +3068,43 @@ main (int argc, char **argv)
 	  break;
 
 	case 't':
-	  tab = optarg[0];
-	  if (tab && optarg[1])
+	  strncpy (tab, optarg, MB_LEN_MAX);
+	  if (tab[0])
+#if HAVE_MBRTOWC
 	    {
-	      /* Provoke with `sort -txx'.  Complain about
-		 "multi-character tab" instead of "multibyte tab", so
-		 that the diagnostic's wording does not need to be
-		 changed once multibyte characters are supported.  */
-	      error (SORT_FAILURE, 0, _("multi-character tab `%s'"), optarg);
+	      if (MB_CUR_MAX > 1)
+		{
+		  wchar_t wc;
+		  mbstate_t state;
+
+		  memset (&state, '\0', sizeof (mbstate_t));
+		  tab_length = mbrtowc (&wc, tab, MB_LEN_MAX, &state);
+		  tab_length = (tab_length == (size_t)-1
+				|| tab_length == (size_t)-2 
+				|| tab_length == 0) ? 1 : tab_length;
+		  if (optarg[tab_length])
+		    {
+		      /* Provoke with `sort -txx'.  Complain about
+			 "multi-character tab" instead of "multibyte tab", so
+			 that the diagnostic's wording does not need to be
+			 changed once multibyte characters are supported.  */
+		      error (SORT_FAILURE, 0, _("multi-character tab `%s'"),
+			     optarg);
+		    }
+		}
+	      else
+#endif
+		{
+		  if (optarg[1])
+		    {
+		      /* Provoke with `sort -txx'.  Complain about
+			 "multi-character tab" instead of "multibyte tab", so
+			 that the diagnostic's wording does not need to be
+			 changed once multibyte characters are supported.  */
+		      error (SORT_FAILURE, 0, _("multi-character tab `%s'"),
+			     optarg);
+		    }
+		}
 	    }
 	  break;
 
diff -uprN coreutils-4.5.9.orig/src/unexpand.c coreutils-4.5.9/src/unexpand.c
--- coreutils-4.5.9.orig/src/unexpand.c	2003-03-11 00:31:54.000000000 +0900
+++ coreutils-4.5.9/src/unexpand.c	2003-03-11 00:32:56.000000000 +0900
@@ -40,11 +40,24 @@
 #include <stdio.h>
 #include <getopt.h>
 #include <sys/types.h>
+
+/* Get mbstate_t, mbrtowc(), wcwidth() */
+#if HAVE_WCHAR_H
+# include <wchar.h>
+#endif
+
 #include "system.h"
 #include "closeout.h"
 #include "error.h"
 #include "posixver.h"
 
+/* MB_LEN_MAX is incorrectly defined to be 1 in at least one GCC
+   installation; work around this configuration error. */
+#if !defined MB_LEN_MAX || MB_LEN_MAX < 2
+# undef MB_LEN_MAX
+# define MB_LEN_MAX 16
+#endif
+
 /* The official name of this program (e.g., no `g' prefix).  */
 #define PROGRAM_NAME "unexpand"
 
@@ -346,7 +359,8 @@ unexpand (void)
 		}
 	      else
 		{
-		  ++column;
+		  if (!ISCNTRL (c))
+		    ++column;
 		  if (convert_entire_line == 0)
 		    convert = 0;
 		}
@@ -364,6 +378,212 @@ unexpand (void)
     }
 }
 
+#if HAVE_MBRTOWC
+static void
+unexpand_multibyte (void)
+{
+  FILE *fp;			/* Input stream. */
+  mbstate_t i_state;		/* Current shift state of the input stream. */
+  mbstate_t i_state_bak;	/* Back up the I_STATE. */
+  mbstate_t o_state;		/* Current shift state of the output stream. */
+  char buf[MB_LEN_MAX + BUFSIZ];  /* For spooling a read byte sequence. */
+  char *bufpos;			/* Next read position of BUF. */
+  size_t buflen = 0;		/* The length of the byte sequence in buf. */
+  wint_t wc;			/* A gotten wide character. */
+  size_t mblength;		/* The byte size of a multibyte character
+				   which shows as same character as WC. */
+
+  /* Index in `tab_list' of next tabstop: */
+  int tab_index = 0;		/* For calculating width of pending tabs. */
+  int print_tab_index = 0;	/* For printing as many tabs as possible. */
+  unsigned int column = 0;	/* Column on screen of next char. */
+  int next_tab_column;		/* Column the next tab stop is on. */
+  int convert = 1;		/* If nonzero, perform translations. */
+  unsigned int pending = 0;	/* Pending columns of blanks. */
+
+  fp = next_file ((FILE *) NULL);
+  if (fp == NULL)
+    return;
+
+  /* Binary I/O will preserve the original EOL style (DOS/Unix) of files. */
+  SET_BINARY2 (fileno (fp), STDOUT_FILENO);
+
+  memset (&o_state, '\0', sizeof(mbstate_t));
+  memset (&i_state, '\0', sizeof(mbstate_t));
+
+  for (;;)
+    {
+      if (buflen < MB_LEN_MAX && !feof(fp) && !ferror(fp))
+	{
+	  memmove (buf, bufpos, buflen);
+	  buflen += fread (buf + buflen, sizeof(char), BUFSIZ, fp);
+	  bufpos = buf;
+	}
+
+      /* Get a wide character. */
+      if (buflen < 1)
+	{
+	  mblength = 1;
+	  wc = WEOF;
+	}
+      else
+	{
+	  wchar_t tmp;
+
+	  i_state_bak = i_state;
+	  mblength = mbrtowc (&tmp, bufpos, buflen, &i_state);
+	  wc = tmp;
+	}
+
+      if (mblength == (size_t)-1 || mblength == (size_t)-2)
+	{
+	  i_state = i_state_bak;
+	  wc = L'\0';
+	}
+
+      if (wc == L' ' && convert && column < TAB_STOP_SENTINEL)
+	{
+	  ++pending;
+	  ++column;
+	}
+      else if (wc == L'\t' && convert)
+	{
+	  if (tab_size == 0)
+	    {
+	      /* Do not let tab_index == first_free_tab;
+		 stop when it is 1 less. */
+	      while (tab_index < first_free_tab - 1
+		  && column >= tab_list[tab_index])
+		tab_index++;
+	      next_tab_column = tab_list[tab_index];
+	      if (tab_index < first_free_tab - 1)
+		tab_index++;
+	      if (column >= next_tab_column)
+		{
+		  convert = 0;	/* Ran out of tab stops. */
+		  goto flush_pend_mb;
+		}
+	    }
+	  else
+	    {
+	      next_tab_column = column + tab_size - column % tab_size;
+	    }
+	  pending += next_tab_column - column;
+	  column = next_tab_column;
+	}
+      else
+	{
+flush_pend_mb:
+	  /* Flush pending spaces.  Print as many tabs as possible,
+	     then print the rest as spaces. */
+	  if (pending == 1)
+	    {
+	      putchar (' ');
+	      pending = 0;
+	    }
+	  column -= pending;
+	  while (pending > 0)
+	    {
+	      if (tab_size == 0)
+		{
+		  /* Do not let print_tab_index == first_free_tab;
+		     stop when it is 1 less. */
+		  while (print_tab_index < first_free_tab - 1
+		      && column >= tab_list[print_tab_index])
+		    print_tab_index++;
+		  next_tab_column = tab_list[print_tab_index];
+		  if (print_tab_index < first_free_tab - 1)
+		    print_tab_index++;
+		}
+	      else
+		{
+		  next_tab_column =
+		    column + tab_size - column % tab_size;
+		}
+	      if (next_tab_column - column <= pending)
+		{
+		  putchar ('\t');
+		  pending -= next_tab_column - column;
+		  column = next_tab_column;
+		}
+	      else
+		{
+		  --print_tab_index;
+		  column += pending;
+		  while (pending != 0)
+		    {
+		      putchar (' ');
+		      pending--;
+		    }
+		}
+	    }
+
+	  if (wc == WEOF)
+	    {
+	      fp = next_file (fp);
+	      if (fp == NULL)
+		break;          /* No more files. */
+	      else
+		{
+		  memset (&i_state, '\0', sizeof(mbstate_t));
+		  SET_BINARY2 (fileno (fp), STDOUT_FILENO);
+		  continue;
+		}
+	    }
+
+	  if (mblength == (size_t)-1 || mblength == (size_t)-2)
+	    {
+	      if (convert)
+		{
+		  ++column;
+		  if (convert_entire_line == 0)
+		    convert = 0;
+		}
+	      mblength = 1;
+	      putchar (buf[0]);
+	    }
+	  else if (mblength == 0)
+	    {
+	      if (convert && convert_entire_line == 0)
+		convert = 0;
+	      mblength = 1;
+	      putchar ('\0');
+	    }
+	  else
+	    {
+	      if (convert)
+		{
+		  if (wc == L'\b')
+		    {
+		      if (column > 0)
+			--column;
+		    }
+		  else
+		    {
+		      int width;            /* The width of WC. */
+
+		      width = wcwidth (wc);
+		      column += (width > 0) ? width : 0;
+		      if (convert_entire_line == 0)
+			convert = 0;
+		    }
+		}
+
+	      if (wc == L'\n')
+		{
+		  tab_index = print_tab_index = 0;
+		  column = pending = 0;
+		  convert = 1;
+		}
+	      fwrite (bufpos, sizeof(char), mblength, stdout);
+	    }
+	}
+      buflen -= mblength;
+      bufpos += mblength;
+    }
+}
+#endif
+
 void
 usage (int status)
 {
@@ -488,7 +708,12 @@ main (int argc, char **argv)
   else
     file_list = &argv[optind];
 
-  unexpand ();
+#if HAVE_MBRTOWC
+  if (MB_CUR_MAX > 1)
+    unexpand_multibyte ();
+  else
+#endif
+    unexpand ();
 
   if (have_read_stdin && fclose (stdin) == EOF)
     error (EXIT_FAILURE, errno, "-");
diff -uprN coreutils-4.5.9.orig/src/uniq.c coreutils-4.5.9/src/uniq.c
--- coreutils-4.5.9.orig/src/uniq.c	2003-03-11 00:31:54.000000000 +0900
+++ coreutils-4.5.9/src/uniq.c	2003-03-11 00:32:56.000000000 +0900
@@ -23,6 +23,16 @@
 #include <getopt.h>
 #include <sys/types.h>
 
+/* Get mbstate_t, mbrtowc(), wcrtomb() */
+#if HAVE_WCHAR_H
+# include <wchar.h>
+#endif
+
+/* Get iswctype(), wctype(), towupper)(. */
+#if HAVE_WCTYPE_H
+# include <wctype.h>
+#endif
+
 #include "system.h"
 #include "closeout.h"
 #include "argmatch.h"
@@ -34,6 +44,13 @@
 #include "xstrtol.h"
 #include "memcasecmp.h"
 
+/* MB_LEN_MAX is incorrectly defined to be 1 in at least one GCC
+   installation; work around this configuration error. */
+#if !defined MB_LEN_MAX || MB_LEN_MAX < 2
+# undef MB_LEN_MAX
+# define MB_LEN_MAX 16
+#endif
+
 /* The official name of this program (e.g., no `g' prefix).  */
 #define PROGRAM_NAME "uniq"
 
@@ -113,6 +130,12 @@ static enum delimit_method const delimit
 /* Select whether/how to delimit groups of duplicate lines.  */
 static enum delimit_method delimit_groups;
 
+/* Function pointers. */
+static char * (*find_field) (struct linebuffer *line);
+
+/* Show the blank character class. */
+wctype_t blank_type;
+
 static struct option const longopts[] =
 {
   {"count", no_argument, NULL, 'c'},
@@ -193,7 +216,7 @@ size_opt (char const *opt, char const *m
    return a pointer to the beginning of the line's field to be compared. */
 
 static char *
-find_field (const struct linebuffer *line)
+find_field_uni (struct linebuffer *line)
 {
   register size_t count;
   register char *lp = line->buffer;
@@ -214,6 +237,83 @@ find_field (const struct linebuffer *lin
   return lp + i;
 }
 
+#if HAVE_MBRTOWC
+
+# define MBCHAR_TO_WCHAR(WC, MBLENGTH, LP, POS, SIZE, STATEP, CONVFAIL)  \
+  do									\
+    {									\
+      mbstate_t state_bak;						\
+									\
+      CONVFAIL = 0;							\
+      state_bak = *STATEP;						\
+									\
+      MBLENGTH = mbrtowc (&WC, LP + POS, SIZE - POS, STATEP);		\
+									\
+      switch (MBLENGTH)							\
+	{								\
+	case (size_t)-2:						\
+	case (size_t)-1:						\
+	  *STATEP = state_bak;						\
+	  CONVFAIL++;							\
+	  /* Fall through */						\
+	case 0:								\
+	  MBLENGTH = 1;							\
+	}								\
+    }									\
+  while (0)
+
+static char *
+find_field_multi (struct linebuffer *line)
+{
+  size_t count;
+  char *lp = line->buffer;
+  size_t size = line->length - 1;
+  size_t pos;
+  size_t mblength;
+  wchar_t wc;
+  mbstate_t *statep;
+  int convfail;
+
+  pos = 0;
+  statep = &(line->state);
+
+  /* skip fields. */
+  for (count = 0; count < skip_fields && pos < size; count++)
+    {
+      while (pos < size)
+	{
+	  MBCHAR_TO_WCHAR (wc, mblength, lp, pos, size, statep, convfail);
+ 
+	  if (convfail || !iswctype (wc, blank_type))
+	    {
+	      pos += mblength;
+	      break;
+	    }
+	  pos += mblength;
+	}
+
+      while (pos < size)
+	{
+	  MBCHAR_TO_WCHAR (wc, mblength, lp, pos, size, statep, convfail);
+
+	  if (!convfail && iswctype (wc, blank_type))
+	    break;
+
+	  pos += mblength;
+	}
+    }
+
+  /* skip fields. */
+  for (count = 0; count < skip_chars && pos < size; count++)
+    {
+      MBCHAR_TO_WCHAR (wc, mblength, lp, pos, size, statep, convfail);
+      pos += mblength;
+    }
+
+  return lp + pos;
+}
+#endif
+
 /* Return zero if two strings OLD and NEW match, nonzero if not.
    OLD and NEW point not to the beginnings of the lines
    but rather to the beginnings of the fields to compare.
@@ -222,6 +322,8 @@ find_field (const struct linebuffer *lin
 static int
 different (char *old, char *new, size_t oldlen, size_t newlen)
 {
+  char *copy_old, *copy_new;
+
   if (check_chars < oldlen)
     oldlen = check_chars;
   if (check_chars < newlen)
@@ -229,15 +331,97 @@ different (char *old, char *new, size_t 
 
   if (ignore_case)
     {
-      /* FIXME: This should invoke strcoll somehow.  */
-      return oldlen != newlen || memcasecmp (old, new, oldlen);
+      size_t i;
+
+      copy_old = alloca (oldlen + 1);
+      copy_new = alloca (oldlen + 1);
+
+      for (i = 0; i < oldlen; i++)
+	{
+	  copy_old[i] = toupper (old[i]);
+	  copy_new[i] = toupper (new[i]);
+	}
+    }
+  else
+    {
+      copy_old = (char *)old;
+      copy_new = (char *)new;
     }
-  else if (HAVE_SETLOCALE && hard_LC_COLLATE)
-    return xmemcoll (old, oldlen, new, newlen);
+
+  if (HAVE_SETLOCALE && hard_LC_COLLATE)
+    return xmemcoll (copy_old, oldlen, copy_new, newlen);
   else
-    return oldlen != newlen || memcmp (old, new, oldlen);
+    return oldlen != newlen || memcmp (copy_old, copy_new, oldlen);
 }
 
+#if HAVE_MBRTOWC
+static int
+different_multi (const char *old, const char *new, size_t oldlen, size_t newlen, mbstate_t oldstate, mbstate_t newstate)
+{
+  size_t i, j, chars;
+  const char *str[2];
+  char *copy[2];
+  size_t len[2];
+  mbstate_t state[2];
+  size_t mblength;
+  wchar_t wc, uwc;
+  mbstate_t state_bak;
+
+  str[0] = old;
+  str[1] = new;
+  len[0] = oldlen;
+  len[1] = newlen;
+  state[0] = oldstate;
+  state[1] = newstate;
+
+  for (i = 0; i < 2; i++)
+    {
+      copy[i] = alloca (len[i] + 1);
+
+      for (j = 0, chars = 0; j < len[i] && chars < check_chars; chars++)
+	{
+	  state_bak = state[i];
+	  mblength = mbrtowc (&wc, str[i] + j, len[i] - j, &(state[i]));
+
+	  switch (mblength)
+	    {
+	    case (size_t)-1:
+	    case (size_t)-2:
+	      state[i] = state_bak;
+		/* Fall through */
+	    case 0:
+	      mblength = 1;
+	      break;
+
+	    default:
+	      if (ignore_case)
+		{
+		  uwc = towupper (wc);
+
+		  if (uwc != wc)
+		    {
+		      mbstate_t state_wc;
+
+		      memset (&state_wc, '\0', sizeof(mbstate_t));
+		      wcrtomb (copy[i] + j, uwc, &state_wc);
+		    }
+		  else
+		    memcpy (copy[i] + j, str[i] + j, mblength);
+		}
+	      else
+		memcpy (copy[i] + j, str[i] + j, mblength);
+	    }
+	  j += mblength;
+	}
+      copy[i][j] = '\0';
+      len[i] = j;
+    }
+
+  return xmemcoll (copy[0], len[0], copy[1], len[1]);
+}
+#endif
+
+
 /* Output the line in linebuffer LINE to stream STREAM
    provided that the switches say it should be output.
    If requested, print the number of times it occurred, as well;
@@ -299,24 +483,55 @@ check_file (const char *infile, const ch
     {
       char *prevfield IF_LINT (= NULL);
       size_t prevlen IF_LINT (= 0);
+#if HAVE_MBRTOWC
+      mbstate_t prevstate;
+
+      memset (&prevstate, '\0', sizeof (mbstate_t));
+#endif
+
 
       while (!feof (istream))
 	{
 	  char *thisfield;
 	  size_t thislen;
+#if HAVE_MBRTOWC
+	  mbstate_t thisstate;
+#endif 
+
 	  if (readline (thisline, istream) == 0)
 	    break;
 	  thisfield = find_field (thisline);
 	  thislen = thisline->length - 1 - (thisfield - thisline->buffer);
-	  if (prevline->length == 0
-	      || different (thisfield, prevfield, thislen, prevlen))
+#if HAVE_MBRTOWC
+	  if (MB_CUR_MAX > 1)
 	    {
-	      fwrite (thisline->buffer, sizeof (char),
+	      thisstate = thisline->state;
+
+	      if (prevline->length == 0 || different_multi
+		  (thisfield, prevfield, thislen, prevlen, thisstate, prevstate))
+		{
+		  fwrite (thisline->buffer, sizeof (char),
 		      thisline->length, ostream);
 
-	      SWAP_LINES (prevline, thisline);
-	      prevfield = thisfield;
-	      prevlen = thislen;
+		  SWAP_LINES (prevline, thisline);
+		  prevfield = thisfield;
+		  prevlen = thislen;
+		  prevstate = thisstate;
+		}
+	    }
+	  else
+#endif
+	    {
+	      if (prevline->length == 0
+		  || different (thisfield, prevfield, thislen, prevlen))
+		{
+		  fwrite (thisline->buffer, sizeof (char),
+		      thisline->length, ostream);
+
+		  SWAP_LINES (prevline, thisline);
+		  prevfield = thisfield;
+		  prevlen = thislen;
+		}
 	    }
 	}
     }
@@ -326,22 +541,41 @@ check_file (const char *infile, const ch
       size_t prevlen;
       int match_count = 0;
       int first_delimiter = 1;
+#if HAVE_MBRTOWC
+      mbstate_t prevstate;
+#endif
 
       if (readline (prevline, istream) == 0)
 	goto closefiles;
       prevfield = find_field (prevline);
       prevlen = prevline->length - 1 - (prevfield - prevline->buffer);
+#if HAVE_MBRTOWC
+      prevstate = prevline->state;
+#endif
 
       while (!feof (istream))
 	{
 	  int match;
 	  char *thisfield;
 	  size_t thislen;
+#if HAVE_MBRTOWC
+	  mbstate_t thisstate;
+#endif
+
 	  if (readline (thisline, istream) == 0)
 	    break;
 	  thisfield = find_field (thisline);
 	  thislen = thisline->length - 1 - (thisfield - thisline->buffer);
-	  match = !different (thisfield, prevfield, thislen, prevlen);
+#if HAVE_MBRTOWC
+	  if (MB_CUR_MAX > 1)
+	    {
+	      thisstate = thisline->state;
+	      match = !different_multi (thisfield, prevfield,
+		  thislen, prevlen, thisstate, prevstate);
+	    }
+	  else
+#endif
+	    match = !different (thisfield, prevfield, thislen, prevlen);
 
 	  if (match)
 	    ++match_count;
@@ -368,6 +602,9 @@ check_file (const char *infile, const ch
 	      SWAP_LINES (prevline, thisline);
 	      prevfield = thisfield;
 	      prevlen = thislen;
+#if HAVE_MBRTOWC
+	      prevstate = thisstate;
+#endif
 	      if (!match)
 		match_count = 0;
 	    }
@@ -407,6 +644,18 @@ main (int argc, char **argv)
 
   atexit (close_stdout);
 
+#if HAVE_MBRTOWC
+  if (MB_CUR_MAX > 1)
+    {
+      find_field = find_field_multi;
+      blank_type = wctype ("blank");
+    }
+  else
+#endif
+    {
+      find_field = find_field_uni;
+    }
+
   skip_chars = 0;
   skip_fields = 0;
   check_chars = SIZE_MAX;
