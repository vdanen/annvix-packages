2003-06-06  Jakub Jelinek  <jakub@redhat.com>

	* mklibgcc.in: Propagate .note.GNU-stack section if needed into
	the .hidden assembly stubs.

2003-06-04  Jakub Jelinek  <jakub@redhat.com>

	* function.c (trampolines_created): New variable.
	(expand_function_end): Set it when doing INITIALIZE_TRAMPOLINE.
	* function.h (trampolines_created): Add.
	* config/s390/linux.h (ASM_FILE_END): Define.
	* config/alpha/linux-elf.h (ASM_FILE_END): Define.
	* config/m68k/linux.h (ASM_FILE_END): Define.
	* config/rs6000/linux.h (ASM_FILE_END): Define.
	* config/rs6000/linux64.h (ASM_FILE_END): Define.
	* config/rs6000/ppc-asm.h: Add .note.GNU-stack on powerpc-linux.
	* config/sparc/linux.h (ASM_FILE_END): Define.
	* config/sparc/linux64.h (ASM_FILE_END): Define.
	* config/i386/i386.c (ix86_asm_file_end): Use SUBTARGET_FILE_END.
	* config/i386/linux.h (SUBTARGET_FILE_END): Define.
	* config/i386/linux64.h (SUBTARGET_FILE_END): Define.

--- gcc-3.3.1/gcc/config/alpha/linux-elf.h.note.GNU-stack	2002-12-14 23:06:09.000000000 +0100
+++ gcc-3.3.1/gcc/config/alpha/linux-elf.h	2003-07-16 15:58:57.000000000 +0200
@@ -47,3 +47,10 @@ Boston, MA 02111-1307, USA.  */
 #define LIB_SPEC \
 "%{pthread:-lpthread }%{shared:-lc}%{!shared:%{profile:-lc_p}%{!profile:-lc}} "
 #endif
+
+#define ASM_FILE_END(FILE) \
+  do {									\
+    named_section_flags (".note.GNU-stack",				\
+			 SECTION_DEBUG					\
+			 | (trampolines_created ? SECTION_CODE : 0));	\
+  } while (0)
--- gcc-3.3.1/gcc/config/i386/linux.h.note.GNU-stack	2003-07-16 14:08:23.000000000 +0200
+++ gcc-3.3.1/gcc/config/i386/linux.h	2003-07-16 15:58:57.000000000 +0200
@@ -224,6 +224,13 @@ Boston, MA 02111-1307, USA.  */
 	   : "=d"(BASE))
 #endif
 
+#define SUBTARGET_FILE_END(FILE) \
+  do {									\
+    named_section_flags (".note.GNU-stack",				\
+			 SECTION_DEBUG					\
+			 | (trampolines_created ? SECTION_CODE : 0));	\
+  } while (0)
+
 /* Do code reading to identify a signal frame, and set the frame
    state data appropriately.  See unwind-dw2.c for the structs.  */
 
--- gcc-3.3.1/gcc/config/i386/linux64.h.note.GNU-stack	2003-07-16 15:36:22.000000000 +0200
+++ gcc-3.3.1/gcc/config/i386/linux64.h	2003-07-16 15:58:57.000000000 +0200
@@ -77,6 +77,13 @@ Boston, MA 02111-1307, USA.  */
 
 #define MULTILIB_DEFAULTS { "m64" }
 
+#define SUBTARGET_FILE_END(FILE) \
+  do {									\
+    named_section_flags (".note.GNU-stack",				\
+			 SECTION_DEBUG					\
+			 | (trampolines_created ? SECTION_CODE : 0));	\
+  } while (0)
+
 /* Do code reading to identify a signal frame, and set the frame
    state data appropriately.  See unwind-dw2.c for the structs.  
    Don't use this at all if inhibit_libc is used.  */
--- gcc-3.3.1/gcc/config/i386/i386.c.note.GNU-stack	2003-07-16 14:08:23.000000000 +0200
+++ gcc-3.3.1/gcc/config/i386/i386.c	2003-07-16 16:08:08.000000000 +0200
@@ -4562,6 +4562,10 @@ ix86_asm_file_end (file)
       output_asm_insn ("mov{l}\t{%1, %0|%0, %1}", xops);
       output_asm_insn ("ret", xops);
     }
+
+#ifdef SUBTARGET_FILE_END
+  SUBTARGET_FILE_END (file);
+#endif
 }
 
 /* Emit code for the SET_GOT patterns.  */
--- gcc-3.3.1/gcc/config/m68k/linux.h.note.GNU-stack	2003-07-16 15:35:24.000000000 +0200
+++ gcc-3.3.1/gcc/config/m68k/linux.h	2003-07-16 15:58:57.000000000 +0200
@@ -359,3 +359,10 @@ do {									\
      : "d" (_beg), "d" (_len)						\
      : "%d0", "%d2", "%d3");						\
 }
+
+#define ASM_FILE_END(FILE) \
+  do {									\
+    named_section_flags (".note.GNU-stack",				\
+			 SECTION_DEBUG					\
+			 | (trampolines_created ? SECTION_CODE : 0));	\
+  } while (0)
--- gcc-3.3.1/gcc/config/rs6000/linux.h.note.GNU-stack	2003-07-16 11:36:33.000000000 +0200
+++ gcc-3.3.1/gcc/config/rs6000/linux.h	2003-07-16 15:58:57.000000000 +0200
@@ -79,6 +79,13 @@ Boston, MA 02111-1307, USA.  */
 #undef DRAFT_V4_STRUCT_RET
 #define DRAFT_V4_STRUCT_RET 1
 
+#define ASM_FILE_END(FILE) \
+  do {									\
+    named_section_flags (".note.GNU-stack",				\
+			 SECTION_DEBUG					\
+			 | (trampolines_created ? SECTION_CODE : 0));	\
+  } while (0)
+
 /* Do code reading to identify a signal frame, and set the frame
    state data appropriately.  See unwind-dw2.c for the structs.  */
 
--- gcc-3.3.1/gcc/config/s390/linux.h.note.GNU-stack	2003-07-07 07:20:07.000000000 +0200
+++ gcc-3.3.1/gcc/config/s390/linux.h	2003-07-16 15:58:57.000000000 +0200
@@ -133,6 +133,12 @@ Boston, MA 02111-1307, USA.  */
 #define LINK_SPEC "%{m64:%(link_arch64)} %{!m64:%(link_arch31)}"
 #endif
 
+#define ASM_FILE_END(FILE) \
+  do {									\
+    named_section_flags (".note.GNU-stack",				\
+			 SECTION_DEBUG					\
+			 | (trampolines_created ? SECTION_CODE : 0));	\
+  } while (0)
 
 /* This macro defines names of additional specifications to put in the specs
    that can be used in various specifications like CC1_SPEC.  Its definition
--- gcc-3.3.1/gcc/config/sparc/linux.h.note.GNU-stack	2003-07-16 15:35:24.000000000 +0200
+++ gcc-3.3.1/gcc/config/sparc/linux.h	2003-07-16 15:58:57.000000000 +0200
@@ -264,6 +264,13 @@ do {									\
 #undef CTORS_SECTION_ASM_OP
 #undef DTORS_SECTION_ASM_OP
 
+#define ASM_FILE_END(FILE) \
+  do {									\
+    named_section_flags (".note.GNU-stack",				\
+			 SECTION_DEBUG					\
+			 | (trampolines_created ? SECTION_CODE : 0));	\
+  } while (0)
+
 /* Do code reading to identify a signal frame, and set the frame
    state data appropriately.  See unwind-dw2.c for the structs.  */
 
--- gcc-3.3.1/gcc/config/sparc/linux64.h.note.GNU-stack	2003-07-16 15:35:24.000000000 +0200
+++ gcc-3.3.1/gcc/config/sparc/linux64.h	2003-07-16 15:58:57.000000000 +0200
@@ -325,6 +325,13 @@ do {									\
 #undef CTORS_SECTION_ASM_OP
 #undef DTORS_SECTION_ASM_OP
 
+#define ASM_FILE_END(FILE) \
+  do {									\
+    named_section_flags (".note.GNU-stack",				\
+			 SECTION_DEBUG					\
+			 | (trampolines_created ? SECTION_CODE : 0));	\
+  } while (0)
+
 /* Do code reading to identify a signal frame, and set the frame
    state data appropriately.  See unwind-dw2.c for the structs.  */
 
--- gcc-3.3.1/gcc/function.c.note.GNU-stack	2003-07-07 07:18:58.000000000 +0200
+++ gcc-3.3.1/gcc/function.c	2003-07-16 15:58:57.000000000 +0200
@@ -122,6 +122,9 @@ int current_function_uses_only_leaf_regs
    post-instantiation libcalls.  */
 int virtuals_instantiated;
 
+/* Nonzero if at least one trampoline has been created.  */
+int trampolines_created;
+
 /* Assign unique numbers to labels generated for profiling, debugging, etc.  */
 static int funcdef_no;
 
@@ -6888,6 +6891,7 @@ expand_function_end (filename, line, end
       emit_block_move (blktramp, initial_trampoline,
 		       GEN_INT (TRAMPOLINE_SIZE), BLOCK_OP_NORMAL);
 #endif
+      trampolines_created = 1;
       INITIALIZE_TRAMPOLINE (tramp, XEXP (DECL_RTL (function), 0), context);
       seq = get_insns ();
       end_sequence ();
--- gcc-3.3.1/gcc/function.h.note.GNU-stack	2003-03-28 12:42:52.000000000 +0100
+++ gcc-3.3.1/gcc/function.h	2003-07-16 15:58:57.000000000 +0200
@@ -516,6 +516,9 @@ extern GTY(()) struct function *cfun;
 /* Nonzero if we've already converted virtual regs to hard regs.  */
 extern int virtuals_instantiated;
 
+/* Nonzero if at least one trampoline has been created.  */
+extern int trampolines_created;
+
 /* For backward compatibility... eventually these should all go away.  */
 #define current_function_name (cfun->name)
 #define current_function_pops_args (cfun->pops_args)
--- gcc-3.3.1/gcc/mklibgcc.in.note.GNU-stack	2003-07-16 11:36:33.000000000 +0200
+++ gcc-3.3.1/gcc/mklibgcc.in	2003-07-16 15:58:57.000000000 +0200
@@ -299,11 +299,15 @@ for ml in $MULTILIBS; do
   if [ "@libgcc_visibility@" = yes -a "$SHLIB_LINK" ]; then
     libgcc_a_objs=
     echo ""
+    echo "libgcc/${dir}/stacknote.s: stmp-dirs"
+    echo '	@( echo | $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) '${flags}' -S -o - -xc - | grep .note.GNU-stack || : ) > $@.tmp'
+    echo '	@mv -f $@.tmp $@'
+    echo ""
     for o in $libgcc_objs $libgcc_st_objs; do
       # .oS objects will have all non-local symbol definitions .hidden
       oS=`echo ${o} | sed s~${objext}'$~.oS~g'`
-      echo "${oS}: stmp-dirs ${o}"
-      echo '	@$(NM_FOR_TARGET) '${SHLIB_NM_FLAGS} ${o}' | $(AWK) '\''NF == 3 { print "\t.hidden", $$3 }'\'' | $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) '${flags}' -r -nostdinc -nostdlib -o $@ '${o}' -xassembler -'
+      echo "${oS}: stmp-dirs libgcc/${dir}/stacknote.s ${o}"
+      echo '	@( $(NM_FOR_TARGET) '${SHLIB_NM_FLAGS} ${o}' | $(AWK) '\''NF == 3 { print "\t.hidden", $$3 }'\''; cat libgcc/${dir}/stacknote.s ) | $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) '${flags}' -r -nostdinc -nostdlib -o $@ '${o}' -xassembler -'
       libgcc_a_objs="${libgcc_a_objs} ${oS}"
     done
   fi
@@ -388,6 +392,7 @@ echo '	  if [ -d $(stage)/$$dir ]; then 
 echo '	done'
 echo '	-for dir in '"${dirs}"'; do \'
 echo '	  mv $$dir/*'"${objext}"' $(stage)/$$dir; \'
+echo '	  test ! -f $$dir/stacknote.s || mv $$dir/stacknote.s $(stage)/$$dir; \'
 echo '	done'
 
 echo ""
