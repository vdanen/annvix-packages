2005-03-09  Gwenole Beauchesne  <gbeauchesne@mandrakesoft.com>

	* generic/tclGet.c (Tcl_GetInt): Try to detect overflow conditions
	better on 64-bit platforms where "int" are smaller than "long"s.

2005-03-08  Gwenole Beauchesne  <gbeauchesne@mandrakesoft.com>

	* generic/tclObj.c: backport various fixes from 8.4-branch:
	- backport fixes for 868489 and 1026125
	- Corrected flaw in returning the int value of a wideInteger.  [Bug 1027690]
	- Minor mods to latest commit to correct bugs and compiler warnings on
	  TCL_WIDE_INT_IS_LONG platforms.
	- One less crazy long/wide aunt in the attic... [Bug 868489]

--- tcl8.4.5/generic/tclObj.c.64bit-fixes	2003-05-24 15:53:49.000000000 -0400
+++ tcl8.4.5/generic/tclObj.c	2005-03-09 05:40:45.590898838 -0500
@@ -60,11 +60,14 @@ static int		SetDoubleFromAny _ANSI_ARGS_
 			    Tcl_Obj *objPtr));
 static int		SetIntFromAny _ANSI_ARGS_((Tcl_Interp *interp,
 			    Tcl_Obj *objPtr));
+static int		SetIntOrWideFromAny _ANSI_ARGS_((Tcl_Interp* interp,
+							 Tcl_Obj *objPtr));
 static void		UpdateStringOfBoolean _ANSI_ARGS_((Tcl_Obj *objPtr));
 static void		UpdateStringOfDouble _ANSI_ARGS_((Tcl_Obj *objPtr));
 static void		UpdateStringOfInt _ANSI_ARGS_((Tcl_Obj *objPtr));
 static int		SetWideIntFromAny _ANSI_ARGS_((Tcl_Interp *interp,
 			    Tcl_Obj *objPtr));
+
 #ifndef TCL_WIDE_INT_IS_LONG
 static void		UpdateStringOfWideInt _ANSI_ARGS_((Tcl_Obj *objPtr));
 #endif
@@ -1115,11 +1118,7 @@ SetBooleanFromAny(interp, objPtr)
     } else if (objPtr->typePtr == &tclDoubleType) {
 	newBool = (objPtr->internalRep.doubleValue != 0.0);
     } else if (objPtr->typePtr == &tclWideIntType) {
-#ifdef TCL_WIDE_INT_IS_LONG
-	newBool = (objPtr->internalRep.longValue != 0);
-#else /* !TCL_WIDE_INT_IS_LONG */
-	newBool = (objPtr->internalRep.wideValue != Tcl_LongAsWide(0));
-#endif /* TCL_WIDE_INT_IS_LONG */
+	newBool = (objPtr->internalRep.wideValue != 0);
     } else {
 	/*
 	 * Copy the string converting its characters to lower case.
@@ -1746,20 +1745,58 @@ Tcl_GetIntFromObj(interp, objPtr, intPtr
     register Tcl_Obj *objPtr;	/* The object from which to get a int. */
     register int *intPtr;	/* Place to store resulting int. */
 {
-    register long l;
+    register long l = 0;
     int result;
-    
-    if (objPtr->typePtr != &tclIntType) {
-	result = SetIntFromAny(interp, objPtr);
+
+    /*
+     * If the object isn't already an integer of any width, try to
+     * convert it to one.
+     */
+
+    if (objPtr->typePtr != &tclIntType && objPtr->typePtr != &tclWideIntType) {
+	result = SetIntOrWideFromAny(interp, objPtr);
 	if (result != TCL_OK) {
 	    return result;
 	}
     }
-    l = objPtr->internalRep.longValue;
+
+    /*
+     * Object should now be either int or wide. Get its value.
+     */
+
+    if (objPtr->typePtr == &tclIntType) {
+	l = objPtr->internalRep.longValue;
+    } else if (objPtr->typePtr == &tclWideIntType) {
+#ifndef TCL_WIDE_INT_IS_LONG
+	/*
+	 * If the object is already a wide integer, don't convert it.
+	 * This code allows for any integer in the range -ULONG_MAX to
+	 * ULONG_MAX to be converted to a long, ignoring overflow.
+	 * The rule preserves existing semantics for conversion of
+	 * integers on input, but avoids inadvertent demotion of
+	 * wide integers to 32-bit ones in the internal rep.
+	 */
+
+	Tcl_WideInt w = objPtr->internalRep.wideValue;
+	if (w >= -(Tcl_WideInt)(ULONG_MAX) && w <= (Tcl_WideInt)(ULONG_MAX)) {
+	    l = Tcl_WideAsLong(w);
+	} else {
+	    goto tooBig;
+	}
+#else
+	l = objPtr->internalRep.longValue;
+#endif
+    } else {
+	Tcl_Panic( "string->integer conversion failed to convert the obj." );
+    }
+
     if (((long)((int)l)) == l) {
-	*intPtr = (int)objPtr->internalRep.longValue;
+	*intPtr = (int)l;
 	return TCL_OK;
     }
+#ifndef TCL_WIDE_INT_IS_LONG
+  tooBig:
+#endif
     if (interp != NULL) {
 	Tcl_ResetResult(interp);
 	Tcl_AppendToObj(Tcl_GetObjResult(interp),
@@ -1773,6 +1810,46 @@ Tcl_GetIntFromObj(interp, objPtr, intPtr
  *
  * SetIntFromAny --
  *
+ *	Attempts to force the internal representation for a Tcl object
+ *	to tclIntType, specifically.
+ *
+ * Results:
+ *	The return value is a standard object Tcl result.  If an
+ *	error occurs during conversion, an error message is left in
+ *	the interpreter's result unless "interp" is NULL.
+ *
+ *----------------------------------------------------------------------
+ */
+
+static int
+SetIntFromAny( Tcl_Interp* interp, 
+				/* Tcl interpreter */
+	       Tcl_Obj* objPtr )
+				/* Pointer to the object to convert */
+{
+    int result;
+
+    result = SetIntOrWideFromAny( interp, objPtr );
+    if ( result != TCL_OK ) {
+	return result;
+    }
+    if ( objPtr->typePtr != &tclIntType ) {
+	if ( interp != NULL ) {
+	    char *s = "integer value too large to represent";
+	    Tcl_ResetResult(interp);
+	    Tcl_AppendToObj(Tcl_GetObjResult(interp), s, -1);
+	    Tcl_SetErrorCode(interp, "ARITH", "IOVERFLOW", s, (char *) NULL);
+	}
+	return TCL_ERROR;
+    }
+    return TCL_OK;
+}
+
+/*
+ *----------------------------------------------------------------------
+ *
+ * SetIntOrWideFromAny --
+ *
  *	Attempt to generate an integer internal form for the Tcl object
  *	"objPtr".
  *
@@ -1789,7 +1866,7 @@ Tcl_GetIntFromObj(interp, objPtr, intPtr
  */
 
 static int
-SetIntFromAny(interp, objPtr)
+SetIntOrWideFromAny(interp, objPtr)
     Tcl_Interp *interp;		/* Used for error reporting if not NULL. */
     register Tcl_Obj *objPtr;	/* The object to convert. */
 {
@@ -1797,7 +1874,9 @@ SetIntFromAny(interp, objPtr)
     char *string, *end;
     int length;
     register char *p;
-    long newLong;
+    unsigned long newLong;
+    int isNegative = 0;
+    int isWide = 0;
 
     /*
      * Get the string representation. Make it up-to-date if necessary.
@@ -1814,21 +1893,16 @@ SetIntFromAny(interp, objPtr)
      */
 
     errno = 0;
-#ifdef TCL_STRTOUL_SIGN_CHECK
     for ( ;  isspace(UCHAR(*p));  p++) { /* INTL: ISO space. */
 	/* Empty loop body. */
     }
     if (*p == '-') {
 	p++;
-	newLong = -((long)strtoul(p, &end, 0));
+	isNegative = 1;
     } else if (*p == '+') {
 	p++;
-	newLong = strtoul(p, &end, 0);
-    } else
-#else
-	newLong = strtoul(p, &end, 0);
-#endif
-    if (end == p) {
+    }
+    if (!isdigit(UCHAR(*p))) {
 	badInteger:
 	if (interp != NULL) {
 	    /*
@@ -1844,6 +1918,10 @@ SetIntFromAny(interp, objPtr)
 	}
 	return TCL_ERROR;
     }
+    newLong = strtoul(p, &end, 0);
+    if (end == p) {
+	goto badInteger;
+    }
     if (errno == ERANGE) {
 	if (interp != NULL) {
 	    char *s = "integer value too large to represent";
@@ -1867,6 +1945,18 @@ SetIntFromAny(interp, objPtr)
     }
 
     /*
+     * If the resulting integer will exceed the range of a long,
+     * put it into a wide instead.  (Tcl Bug #868489)
+     */
+
+#ifndef TCL_WIDE_INT_IS_LONG
+    if ((isNegative && newLong > (unsigned long) (LONG_MAX) + 1)
+	    || (!isNegative && newLong > LONG_MAX)) {
+	isWide = 1;
+    }
+#endif
+
+    /*
      * The conversion to int succeeded. Free the old internalRep before
      * setting the new one. We do this as late as possible to allow the
      * conversion code, in particular Tcl_GetStringFromObj, to use that old
@@ -1877,8 +1967,15 @@ SetIntFromAny(interp, objPtr)
 	oldTypePtr->freeIntRepProc(objPtr);
     }
 
-    objPtr->internalRep.longValue = newLong;
-    objPtr->typePtr = &tclIntType;
+    if (isWide) {
+	objPtr->internalRep.wideValue =
+		(isNegative ? -(Tcl_WideInt)newLong : (Tcl_WideInt)newLong);
+	objPtr->typePtr = &tclWideIntType;
+    } else {
+	objPtr->internalRep.longValue =
+		(isNegative ? -(long)newLong : (long)newLong);
+	objPtr->typePtr = &tclIntType;
+    }
     return TCL_OK;
 }
 
@@ -2111,15 +2208,41 @@ Tcl_GetLongFromObj(interp, objPtr, longP
 {
     register int result;
     
-    if (objPtr->typePtr == &tclIntType) {
-	*longPtr = objPtr->internalRep.longValue;
-	return TCL_OK;
+    if (objPtr->typePtr != &tclIntType && objPtr->typePtr != &tclWideIntType) {
+	result = SetIntOrWideFromAny(interp, objPtr);
+	if (result != TCL_OK) {
+	    return result;
+	}
     }
-    result = SetIntFromAny(interp, objPtr);
-    if (result == TCL_OK) {
-	*longPtr = objPtr->internalRep.longValue;
+
+#ifndef TCL_WIDE_INT_IS_LONG
+    if (objPtr->typePtr == &tclWideIntType) {
+	/*
+	 * If the object is already a wide integer, don't convert it.
+	 * This code allows for any integer in the range -ULONG_MAX to
+	 * ULONG_MAX to be converted to a long, ignoring overflow.
+	 * The rule preserves existing semantics for conversion of
+	 * integers on input, but avoids inadvertent demotion of
+	 * wide integers to 32-bit ones in the internal rep.
+	 */
+
+	Tcl_WideInt w = objPtr->internalRep.wideValue;
+	if (w >= -(Tcl_WideInt)(ULONG_MAX) && w <= (Tcl_WideInt)(ULONG_MAX)) {
+	    *longPtr = Tcl_WideAsLong(w);
+	    return TCL_OK;
+	} else {
+	    if (interp != NULL) {
+		Tcl_ResetResult(interp);
+		Tcl_AppendToObj(Tcl_GetObjResult(interp),
+			"integer value too large to represent", -1);
+	    }
+	    return TCL_ERROR;
+	}
     }
-    return result;
+#endif
+
+    *longPtr = objPtr->internalRep.longValue;
+    return TCL_OK;
 }
 
 /*
--- tcl8.4.5/generic/tclGet.c.64bit-fixes	2002-11-18 21:34:49.000000000 -0500
+++ tcl8.4.5/generic/tclGet.c	2005-03-09 10:24:19.587987975 -0500
@@ -48,6 +48,7 @@ Tcl_GetInt(interp, string, intPtr)
     char *end;
     CONST char *p = string;
     long i;
+    int overflow;
 
     /*
      * Note: use strtoul instead of strtol for integer conversions
@@ -86,13 +87,26 @@ Tcl_GetInt(interp, string, intPtr)
 	return TCL_ERROR;
     }
 
+    overflow = 0;
+    if (sizeof(long) > sizeof(int)) {
+
+	/* Skip white spaces and check for minus sign. */
+	int negative, j = 0;
+	while (isspace(UCHAR(string[j])))
+	    j++;
+	negative = (string[j] == '-');
+
+	/* Check for overflow condition. */
+	overflow = negative ? (i < INT_MIN) : (((unsigned long) i) > UINT_MAX);
+    }
+
     /*
      * The second test below is needed on platforms where "long" is
      * larger than "int" to detect values that fit in a long but not in
      * an int.
      */
 
-    if ((errno == ERANGE) || (((long)(int) i) != i)) {
+    if ((errno == ERANGE) || overflow) {
         if (interp != (Tcl_Interp *) NULL) {
 	    Tcl_SetResult(interp, "integer value too large to represent",
 		    TCL_STATIC);
