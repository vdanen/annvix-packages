--- xorg-x11-6.8.2/xc/include/extensions/XI.h.calib	2004-04-23 14:43:06.000000000 -0400
+++ xorg-x11-6.8.2/xc/include/extensions/XI.h	2005-01-07 17:23:35.619330864 -0500
@@ -201,6 +201,10 @@
 
 #define DvInteger               (1L << 0)
 
+#define DvCalibrationButton       (1L << 0)
+#define DvCalibrationThreshold    (1L << 1)
+#define DvCalibrationBounds       (1L << 2)
+
 #define DeviceMode              (1L << 0)
 #define Relative                0
 #define Absolute                1
@@ -232,6 +236,7 @@
 #define IntegerFeedbackClass  	3
 #define LedFeedbackClass  	4
 #define BellFeedbackClass  	5
+#define CalibrationFeedbackClass 6
 
 #define _devicePointerMotionHint 0
 #define _deviceButton1Motion	 1
--- xorg-x11-6.8.2/xc/include/extensions/XInput.h.calib	2004-04-23 14:43:06.000000000 -0400
+++ xorg-x11-6.8.2/xc/include/extensions/XInput.h	2005-01-07 17:23:35.620330712 -0500
@@ -517,6 +517,22 @@
 
 typedef struct {
 #if defined(__cplusplus) || defined(c_plusplus)
+	XID c_class;
+#else
+	XID class;
+#endif
+	int length;
+	XID id;
+	int button;
+	int button_threshold;
+	int min_x;
+	int max_x;
+	int min_y;
+	int max_y;
+} XCalibrationFeedbackState;
+
+typedef struct {
+#if defined(__cplusplus) || defined(c_plusplus)
      XID            c_class;
 #else
      XID            class;
@@ -604,6 +620,22 @@
     int     led_values;
 } XLedFeedbackControl;
 
+typedef struct {
+#if defined(__cplusplus) || defined(c_plusplus)
+	XID c_class;
+#else
+	XID class;
+#endif
+	int length;
+	XID id;
+	int button;
+	int button_threshold;
+	int min_x;
+	int max_x;
+	int min_y;
+	int max_y;
+} XCalibrationFeedbackControl;
+
 /*******************************************************************
  *
  * Device control structures.
--- xorg-x11-6.8.2/xc/include/extensions/XIproto.h.calib	2004-04-23 14:43:06.000000000 -0400
+++ xorg-x11-6.8.2/xc/include/extensions/XIproto.h	2005-01-07 17:23:35.620330712 -0500
@@ -849,6 +849,18 @@
     CARD32	led_values B32;
 } xLedFeedbackState;
 
+typedef struct {
+	CARD8   class;
+	CARD8   id;
+	CARD16  length B16;
+	CARD16  button B16;
+	CARD16  button_threshold B16;
+	CARD32  min_x;
+	CARD32  max_x;
+	CARD32  min_y;
+	CARD32  max_y;
+} xCalibrationFeedbackState;
+
 /*********************************************************
  *
  * ChangeFeedbackControl.
@@ -956,6 +968,18 @@
     CARD32	led_values B32;
 } xLedFeedbackCtl;
 
+typedef struct {
+	CARD8   class;          /* feedback class id            */
+	CARD8   id;             /* feedback id                  */
+	CARD16  length B16;     /* feedback length              */
+	CARD16  button;
+	CARD16  button_threshold;
+	CARD32  min_x;
+	CARD32  max_x;
+	CARD32  min_y;
+	CARD32  max_y;
+} xCalibrationFeedbackCtl;
+
 /*********************************************************
  *
  * GetDeviceKeyMapping.
--- xorg-x11-6.8.2/xc/include/Xproto.h.calib	2003-11-14 11:48:42.000000000 -0500
+++ xorg-x11-6.8.2/xc/include/Xproto.h	2005-01-07 17:23:35.622330408 -0500
@@ -132,6 +132,7 @@
 #define sz_xSetMappingReply 32
 #define sz_xGetKeyboardControlReply 52
 #define sz_xGetPointerControlReply 32
+#define sz_xGetCalibrationControlReply 32
 #define sz_xGetScreenSaverReply 32
 #define sz_xListHostsReply 32
 #define sz_xSetModifierMappingReply 32
@@ -203,6 +204,7 @@
 #define sz_xChangeKeyboardControlReq 8
 #define sz_xBellReq 4
 #define sz_xChangePointerControlReq 12
+#define sz_xChangeCalibrationControlReq 28
 #define sz_xSetScreenSaverReq 12
 #define sz_xChangeHostsReq 8
 #define sz_xListHostsReq 4
@@ -936,6 +938,20 @@
     } xGetPointerControlReply;
 
 typedef struct {
+	BYTE type;
+	BYTE pad1;
+	CARD16 sequenceNumber B16;
+	CARD32 length B32;
+	CARD16 buttonNumber;
+	CARD16 buttonThreshold;
+	CARD32 minX;
+	CARD32 maxX;
+	CARD32 minY;
+	CARD32 maxY;
+	CARD32 pad2;
+} xGetCalibrationControlReply;
+
+typedef struct {
     BYTE type;  /* X_Reply */
     BYTE pad1;
     CARD16 sequenceNumber B16;
@@ -1263,6 +1279,7 @@
     xGetKeyboardMappingReply getKeyboardMapping;
     xGetPointerMappingReply getPointerMapping;
     xGetPointerControlReply pointerControl;
+    xGetCalibrationControlReply calibrationControl;
     xGetScreenSaverReply screenSaver;
     xListHostsReply hosts;
     xError error;
@@ -1940,6 +1957,19 @@
 } xChangePointerControlReq;    
 
 typedef struct {
+	CARD8 reqType;
+	BYTE pad;
+	CARD16 length B16;
+	INT32 minX;
+	INT32 maxX;
+	INT32 minY;
+	INT32 maxY;
+	INT16 button;
+	INT16 buttonThreshold;
+	BOOL doXBounds, doYBounds, doButton, doThreshold;
+} xChangeCalibrationControlReq;
+
+typedef struct {
     CARD8 reqType;
     BYTE pad;
     CARD16 length B16;
@@ -2110,6 +2140,8 @@
 #define X_GetPointerMapping            117
 #define X_SetModifierMapping	       118
 #define X_GetModifierMapping	       119
+#define X_GetCalibrationControl        120
+#define X_ChangeCalibrationControl     121
 #define X_NoOperation                  127
 
 /* restore these definitions back to the typedefs in X.h */
--- xorg-x11-6.8.2/xc/lib/Xi/XChgFCtl.c.calib	2004-04-23 14:43:44.000000000 -0400
+++ xorg-x11-6.8.2/xc/lib/Xi/XChgFCtl.c	2005-01-07 17:23:35.622330408 -0500
@@ -187,6 +187,26 @@
 	length <<= 2;
 	Data (dpy, (char *) &l, length);
 	}
+    else if (f->class == CalibrationFeedbackClass)
+    {
+	    XCalibrationFeedbackControl *C;
+	    xCalibrationFeedbackCtl     c;
+
+	    C = (XCalibrationFeedbackControl *)f;
+	    c.class = CalibrationFeedbackClass;
+	    c.length = sizeof(xCalibrationFeedbackCtl);
+	    c.id = C->id;
+	    c.button = C->button;
+	    c.button_threshold = C->button_threshold;
+	    c.min_x = C->min_x;
+	    c.max_x = C->max_x;
+	    c.min_y = C->min_y;
+	    c.max_y = C->max_y;
+	    length = ((unsigned)(c.length + 3) >> 2);
+	    req->length += length;
+	    length <<= 2;
+	    Data(dpy, (char *)&c, length);
+    }
     else
 	{
 	xFeedbackCtl		u;
--- xorg-x11-6.8.2/xc/lib/Xi/XGetFCtl.c.calib	2004-04-23 14:43:44.000000000 -0400
+++ xorg-x11-6.8.2/xc/lib/Xi/XGetFCtl.c	2005-01-07 17:23:35.623330256 -0500
@@ -134,6 +134,9 @@
 		case BellFeedbackClass:
 		    size += sizeof (XBellFeedbackState);
 		    break;
+		case CalibrationFeedbackClass:
+			size += sizeof(XCalibrationFeedbackState);
+			break;
 		default:
 		    size += f->length;
 		    break;
@@ -252,6 +255,25 @@
 		    B->duration = b->duration;
 		    break;
 		    }
+		case CalibrationFeedbackClass:
+		{
+			xCalibrationFeedbackState *c;
+			XCalibrationFeedbackState *C;
+			
+			c = (xCalibrationFeedbackState *) f;
+			C = (XCalibrationFeedbackState *) Feedback;
+
+			C->class = c->class;
+			C->length = sizeof(XCalibrationFeedbackState);
+			C->id = c->id;
+			C->button = c->button;
+			C->button_threshold = c->button_threshold;
+			C->min_x = c->min_x;
+			C->max_x = c->max_x;
+			C->min_y = c->min_y;
+			C->max_y = c->max_y;
+			break;
+		}
 		default:
 		    break;
 		}
--- xorg-x11-6.8.2/xc/programs/Xserver/Xi/chgfctl.c.calib	2004-04-23 14:45:06.000000000 -0400
+++ xorg-x11-6.8.2/xc/programs/Xserver/Xi/chgfctl.c	2005-01-07 17:23:35.623330256 -0500
@@ -107,6 +107,7 @@
     StringFeedbackPtr s;
     BellFeedbackPtr b;
     LedFeedbackPtr l;
+    CalibrationFeedbackPtr c;
 
     REQUEST(xChangeFeedbackControlReq);
     REQUEST_AT_LEAST_SIZE(xChangeFeedbackControlReq);
@@ -214,6 +215,24 @@
 		    return Success;
 		    }
 	    break;
+	case CalibrationFeedbackClass:
+		if (len != (sizeof(xCalibrationFeedbackCtl) >> 2))
+		{
+			SendErrorToClient(client, IReqCode, 
+					  X_ChangeFeedbackControl, 0,
+					  BadLength);
+			return Success;
+		}
+		for (c = dev->calibratefeed; c; c = c->next)
+			if (c->ctrl.id ==
+			    ((xCalibrationFeedbackCtl *)&stuff[1])->id)
+			{
+				ChangeCalibrationFeedback(client,dev,
+							  stuff->mask, c,
+							  (xCalibrationFeedbackCtl*)&stuff[1]);
+				return Success;
+			}
+		break;
 	default:
 	    break;
 	}
@@ -657,3 +676,65 @@
 
     return Success;
     }
+
+int
+ChangeCalibrationFeedback (client, dev, mask, c, f)
+    ClientPtr client;
+    DeviceIntPtr dev;
+    unsigned long mask;
+    CalibrationFeedbackPtr c;
+    xCalibrationFeedbackCtl *f;
+{
+	register char n;
+	CalibrationCtrl ctrl;
+
+	if (client->swapped)
+	{
+		swaps(&f->length,n);
+		swaps(&f->button,n);
+		swaps(&f->button_threshold,n);
+		swapl(&f->min_x,n);
+		swapl(&f->max_x,n);
+		swapl(&f->min_y,n);
+		swapl(&f->max_y,n);
+	}
+
+	ctrl = c->ctrl;
+
+	if (mask & DvCalibrationButton)
+	{
+		int button = f->button;
+		if (button < 0)
+		{
+			client->errorValue = button;
+			SendErrorToClient(client, IReqCode, 
+					  X_ChangeFeedbackControl, 0, BadValue);
+			return Success;
+		}
+		ctrl.button = button;
+	} 
+	if (mask & DvCalibrationThreshold)
+	{
+		int threshold = f->button_threshold;
+		if (threshold < 0) 
+		{
+			client->errorValue = threshold;
+			SendErrorToClient(client, IReqCode,
+					  X_ChangeFeedbackControl, 0, BadValue);
+			return Success;
+		}
+		ctrl.button_threshold = threshold;
+	}
+
+	if (mask & DvCalibrationBounds)
+	{
+		ctrl.min_x = (f->min_x < 0) ? 0 : f->min_x;
+		ctrl.max_x = (f->max_x < 0) ? 0 : f->max_x;
+		ctrl.min_y = (f->min_y < 0) ? 0 : f->min_y;
+		ctrl.max_y = (f->max_y < 0) ? 0 : f->max_y;
+	}
+	c->ctrl = ctrl;
+	(*c->CtrlProc)(dev, &ctrl);
+	return Success;
+}
+
--- xorg-x11-6.8.2/xc/programs/Xserver/Xi/chgfctl.h.calib	2004-04-23 14:45:06.000000000 -0400
+++ xorg-x11-6.8.2/xc/programs/Xserver/Xi/chgfctl.h	2005-01-07 17:23:35.623330256 -0500
@@ -91,4 +91,15 @@
 	xLedFeedbackCtl *      /* f */
 	);
 
+int
+ChangeCalibrationFeedback (
+#if NeedFunctionPrototypes
+	ClientPtr                 /* client */,
+	DeviceIntPtr              /* dev */,
+	unsigned long             /* mask */,
+	CalibrationFeedbackPtr    /* c */,
+	xCalibrationFeedbackCtl * /* f */
+#endif
+	);
+
 #endif /* CHGFCTL_H */
--- xorg-x11-6.8.2/xc/programs/Xserver/Xi/getfctl.c.calib	2004-04-23 14:45:06.000000000 -0400
+++ xorg-x11-6.8.2/xc/programs/Xserver/Xi/getfctl.c	2005-01-07 17:23:35.624330104 -0500
@@ -103,6 +103,7 @@
     StringFeedbackPtr s;
     BellFeedbackPtr b;
     LedFeedbackPtr l;
+    CalibrationFeedbackPtr c;
     xGetFeedbackControlReply rep;
 
     REQUEST(xGetFeedbackControlReq);
@@ -153,6 +154,11 @@
 	rep.num_feedbacks++;
 	total_length += sizeof(xBellFeedbackState);
 	}
+    for (c = dev->calibratefeed; c; c = c->next)
+    {
+	    rep.num_feedbacks++;
+	    total_length += sizeof(xCalibrationFeedbackState);
+    }
 
     if (total_length == 0)
 	{
@@ -182,6 +188,8 @@
 	CopySwapLedFeedback (client, l, &buf);
     for (b=dev->bell; b; b=b->next)
 	CopySwapBellFeedback (client, b, &buf);
+    for (c = dev->calibratefeed; c; c = c->next)
+	    CopySwapCalibrationFeedback(client, c, &buf);
 
     rep.length = (total_length+3) >> 2;
     WriteReplyToClient(client, sizeof(xGetFeedbackControlReply), &rep);
@@ -398,6 +406,44 @@
 
 /***********************************************************************
  *
+ * This procedure copies CalibrationFeedbackClass data, swapping if necessary.
+ *
+ */
+
+void
+CopySwapCalibrationFeedback (client, c, buf)
+    ClientPtr              client;
+    CalibrationFeedbackPtr c;
+    char                   **buf;
+{
+	register char n;
+	xCalibrationFeedbackState *c2;
+
+	c2 = (xCalibrationFeedbackState*)*buf;
+	c2->class = CalibrationFeedbackClass;
+	c2->length = sizeof(xCalibrationFeedbackState);
+	c2->id = c->ctrl.id;
+	c2->button = c->ctrl.button;
+	c2->button_threshold = c->ctrl.button_threshold;
+	c2->min_x = c->ctrl.min_x;
+	c2->max_x = c->ctrl.max_x;
+	c2->min_y = c->ctrl.min_y;
+	c2->max_y = c->ctrl.max_y;
+	if (client->swapped)
+	{
+		swaps(&c2->length,n);
+		swaps(&c2->button,n);
+		swaps(&c2->button_threshold,n);
+		swapl(&c2->min_x,n);
+		swapl(&c2->max_x,n);
+		swapl(&c2->min_y,n);
+		swapl(&c2->max_y,n);
+	}
+	*buf += sizeof(xCalibrationFeedbackState);
+}
+
+/***********************************************************************
+ *
  * This procedure writes the reply for the xGetFeedbackControl function,
  * if the client and server have a different byte ordering.
  *
--- xorg-x11-6.8.2/xc/programs/Xserver/Xi/getfctl.h.calib	2004-04-23 14:45:06.000000000 -0400
+++ xorg-x11-6.8.2/xc/programs/Xserver/Xi/getfctl.h	2005-01-07 17:23:35.625329952 -0500
@@ -80,6 +80,15 @@
 	);
 
 void
+CopySwapCalibrationFeedback (
+#if NeedFunctionPrototypes
+	ClientPtr              /* client */,
+	CalibrationFeedbackPtr /* c */,
+	char **                /* buf */
+#endif
+	);
+
+void
 SRepXGetFeedbackControl (
 	ClientPtr              /* client */,
 	int                    /* size */,
--- xorg-x11-6.8.2/xc/programs/Xserver/dix/devices.c.calib	2004-04-23 15:04:43.000000000 -0400
+++ xorg-x11-6.8.2/xc/programs/Xserver/dix/devices.c	2005-01-07 17:23:35.626329800 -0500
@@ -112,10 +112,12 @@
     dev->button = (ButtonClassPtr)NULL;
     dev->focus = (FocusClassPtr)NULL;
     dev->proximity = (ProximityClassPtr)NULL;
+    dev->calibration = (CalibrationClassPtr)NULL;
     dev->kbdfeed = (KbdFeedbackPtr)NULL;
     dev->ptrfeed = (PtrFeedbackPtr)NULL;
     dev->intfeed = (IntegerFeedbackPtr)NULL;
     dev->stringfeed = (StringFeedbackPtr)NULL;
+    dev->calibratefeed = (CalibrationFeedbackPtr)NULL;
     dev->bell = (BellFeedbackPtr)NULL;
     dev->leds = (LedFeedbackPtr)NULL;
     dev->next = inputInfo.off_devices;
@@ -271,6 +273,10 @@
 #endif
 	xfree(l);
     }
+
+    if (dev->calibratefeed)
+	    xfree(dev->calibratefeed);
+	    
 #ifdef XKB
     while (dev->xkb_interest) {
 	XkbRemoveResourceClient((DevicePtr)dev,dev->xkb_interest->resource);
@@ -653,6 +659,25 @@
 }
 
 Bool
+InitCalibrationClassDeviceStruct(dev, button)
+    DeviceIntPtr dev;
+    CARD16 button;
+{
+	register CalibrationClassPtr calc;
+
+	calc = (CalibrationClassPtr)xalloc(sizeof(CalibrationClassRec));
+
+	if(!calc)
+		return FALSE;
+	calc->button = button;
+	calc->buttonDown = FALSE;
+	calc->x = calc->y = 0;
+	dev->calibration = calc;
+
+	return TRUE;
+}
+
+Bool
 InitKbdFeedbackClassDeviceStruct(dev, bellProc, controlProc)
     DeviceIntPtr dev;
     BellProcPtr bellProc;
@@ -725,6 +750,15 @@
 	DEFAULT_INT_DISPLAYED,
 	0};
 
+CalibrationCtrl defaultCalibrationControl = {
+	1,
+	DEFAULT_INT_MIN_VALUE,
+	DEFAULT_INT_MIN_VALUE,
+	DEFAULT_INT_MAX_VALUE,
+	DEFAULT_INT_MIN_VALUE,
+	DEFAULT_INT_MAX_VALUE
+};
+
 Bool
 InitStringFeedbackClassDeviceStruct (dev, controlProc, max_symbols,
 				     num_symbols_supported, symbols)
@@ -835,6 +869,41 @@
 }
 
 Bool
+InitCalibrationFeedbackClassDeviceStruct(dev, controlProc, control)
+    DeviceIntPtr dev;
+    CalibrationCtrlProcPtr controlProc;
+    CalibrationCtrl *control;
+{
+	register CalibrationFeedbackPtr calfeed;
+
+	calfeed = (CalibrationFeedbackPtr) xalloc(sizeof(CalibrationFeedbackClassRec));
+	if (!calfeed)
+		return FALSE;
+
+	calfeed->CtrlProc = controlProc;
+	calfeed->next = dev->calibratefeed;
+
+	calfeed->ctrl = control ? *control : defaultCalibrationControl;
+
+	dev->calibratefeed = calfeed;
+
+	return TRUE;
+}
+
+Bool
+InitCalibrationDeviceStruct(device, button, controlProc, control)
+    DevicePtr device;
+    int button;
+    CalibrationCtrlProcPtr controlProc;
+    CalibrationCtrl *control;
+{
+	DeviceIntPtr dev = (DeviceIntPtr)device;
+
+	return (InitCalibrationClassDeviceStruct(dev,button) &&
+		InitCalibrationFeedbackClassDeviceStruct(dev,controlProc,control));
+}
+
+Bool
 InitPointerDeviceStruct(device, map, numButtons, motionProc, controlProc,
 			numMotionEvents)
     DevicePtr device;
@@ -1511,6 +1580,95 @@
 } 
 
 int
+ProcChangeCalibrationControl(client)
+    ClientPtr client;
+{
+	DeviceIntPtr dev = inputInfo.pointer;
+	CalibrationCtrl ctrl;
+	REQUEST(xChangeCalibrationControlReq);
+
+	REQUEST_SIZE_MATCH(xChangeCalibrationControlReq);
+	ctrl = dev->calibratefeed->ctrl;
+
+	if ((stuff->doXBounds != xTrue) && (stuff->doXBounds != xFalse)) 
+	{
+		client->errorValue = stuff->doXBounds;
+		return (BadValue);
+	}
+	if ((stuff->doYBounds != xTrue) && (stuff->doYBounds != xFalse)) 
+	{
+		client->errorValue = stuff->doYBounds;
+		return (BadValue);
+	}
+	if ((stuff->doButton != xTrue) && (stuff->doButton != xFalse)) 
+	{
+		client->errorValue = stuff->doButton;
+		return (BadValue);
+	}
+	if ((stuff->doThreshold != xTrue) && (stuff->doThreshold != xFalse))
+	{
+		client->errorValue = stuff->doThreshold;
+		return (BadValue);
+	}
+
+	if (stuff->doXBounds)
+	{
+		if (stuff->minX > stuff->maxX) 
+		{
+			client->errorValue = stuff->minX;
+			return (BadValue);
+		}
+		if ((stuff->minX < 0) || (stuff->maxX < 0))
+		{
+			client->errorValue = -1;
+			return (BadValue);
+		}
+		ctrl.min_x = stuff->minX;
+		ctrl.max_x = stuff->maxX;
+	}
+
+	if (stuff->doYBounds)
+	{
+		if (stuff->minY > stuff->maxY)
+		{
+			client->errorValue = stuff->minY;
+			return (BadValue);
+		}
+		if ((stuff->minY < 0)|| (stuff->maxY < 0)) 
+		{
+			client->errorValue = -1;
+			return (BadValue);
+		}
+		ctrl.min_y = stuff->minY;
+		ctrl.max_y = stuff->maxY;
+	}
+	
+	if (stuff->doButton)
+	{
+		if (stuff->button <= 0)
+		{
+			client->errorValue = stuff->button;
+			return (BadValue);
+		}
+		ctrl.button = stuff->button;
+	}
+
+	if (stuff->doThreshold)
+	{
+		if (stuff->buttonThreshold < 0)
+		{
+			client->errorValue = stuff->buttonThreshold;
+			return (BadValue);
+		}
+		ctrl.button_threshold = stuff->buttonThreshold;
+	}
+
+	dev->calibratefeed->ctrl = ctrl;
+	(*dev->calibratefeed->CtrlProc)(dev, &dev->calibratefeed->ctrl);
+	return (Success);
+}
+
+int
 ProcChangePointerControl(client)
     ClientPtr client;
 {
@@ -1583,6 +1741,28 @@
     return Success;
 }
 
+int
+ProcGetCalibrationControl(client)
+    ClientPtr client;
+{
+	register CalibrationCtrl *ctrl = &inputInfo.pointer->calibratefeed->ctrl;
+	xGetCalibrationControlReply rep;
+
+	REQUEST_SIZE_MATCH(xReq);
+	rep.type = X_Reply;
+	rep.length = 0;
+	rep.sequenceNumber = client->sequence;
+	rep.buttonNumber = ctrl->button;
+	rep.buttonThreshold = ctrl->button_threshold;
+	rep.minX = ctrl->min_x;
+	rep.maxX = ctrl->max_x;
+	rep.minY = ctrl->min_y;
+	rep.maxY = ctrl->max_y;
+
+	WriteReplyToClient(client,sizeof(xGenericReply), &rep);
+	return Success;
+}
+
 void
 MaybeStopHint(dev, client)
     register DeviceIntPtr dev;
--- xorg-x11-6.8.2/xc/programs/Xserver/dix/dispatch.h.calib	2004-04-23 15:04:44.000000000 -0400
+++ xorg-x11-6.8.2/xc/programs/Xserver/dix/dispatch.h	2005-01-07 17:23:35.626329800 -0500
@@ -46,6 +46,7 @@
 DISPATCH_PROC(ProcChangeKeyboardControl);
 DISPATCH_PROC(ProcChangeKeyboardMapping);
 DISPATCH_PROC(ProcChangePointerControl);
+DISPATCH_PROC(ProcChangeCalibrationControl);
 DISPATCH_PROC(ProcChangeProperty);
 DISPATCH_PROC(ProcChangeSaveSet);
 DISPATCH_PROC(ProcChangeWindowAttributes);
@@ -84,6 +85,7 @@
 DISPATCH_PROC(ProcGetModifierMapping);
 DISPATCH_PROC(ProcGetMotionEvents);
 DISPATCH_PROC(ProcGetPointerControl);
+DISPATCH_PROC(ProcGetCalibrationControl);
 DISPATCH_PROC(ProcGetPointerMapping);
 DISPATCH_PROC(ProcGetProperty);
 DISPATCH_PROC(ProcGetScreenSaver);
--- xorg-x11-6.8.2/xc/programs/Xserver/dix/swaprep.c.calib	2004-04-23 15:04:44.000000000 -0400
+++ xorg-x11-6.8.2/xc/programs/Xserver/dix/swaprep.c	2005-01-07 17:23:35.627329648 -0500
@@ -830,6 +830,24 @@
 }
 
 void
+SGetCalibrationControlReply(pClient, size, pRep)
+    ClientPtr                    pClient;
+    int                          size;
+    xGetCalibrationControlReply  *pRep;
+{
+	register char n;
+
+	swaps(&pRep->sequenceNumber, n);
+	swaps(&pRep->buttonNumber,n);
+	swaps(&pRep->buttonThreshold,n);
+	swapl(&pRep->minX,n);
+	swapl(&pRep->maxX,n);
+	swapl(&pRep->minY,n);
+	swapl(&pRep->maxY,n);
+	(void)WriteToClient(pClient, size, (char *)pRep);
+}
+
+void
 SGetScreenSaverReply(pClient, size, pRep)
     ClientPtr			pClient;
     int				size;
--- xorg-x11-6.8.2/xc/programs/Xserver/dix/swapreq.c.calib	2004-04-23 15:04:44.000000000 -0400
+++ xorg-x11-6.8.2/xc/programs/Xserver/dix/swapreq.c	2005-01-07 17:23:35.644327064 -0500
@@ -1107,6 +1107,22 @@
     return((* ProcVector[X_ChangePointerControl])(client));
 }
 
+int 
+SProcChangeCalibrationControl (client)
+    register ClientPtr client;
+{
+	register char n;
+	REQUEST(xChangeCalibrationControlReq);
+	swaps(&stuff->length, n);
+	REQUEST_SIZE_MATCH(xChangeCalibrationControlReq);
+	swaps(&stuff->minX,n);
+	swaps(&stuff->maxX,n);
+	swaps(&stuff->minY,n);
+	swaps(&stuff->maxY,n);
+	swaps(&stuff->button,n);
+	swaps(&stuff->buttonThreshold,n);
+	return ((* ProcVector[X_ChangeCalibrationControl])(client));
+}
 
 int
 SProcSetScreenSaver            (client)
--- xorg-x11-6.8.2/xc/programs/Xserver/dix/tables.c.calib	2004-04-23 15:04:44.000000000 -0400
+++ xorg-x11-6.8.2/xc/programs/Xserver/dix/tables.c	2005-01-07 17:23:35.645326912 -0500
@@ -197,8 +197,8 @@
     ProcGetPointerMapping,
     ProcSetModifierMapping,
     ProcGetModifierMapping,
-    0,					/* 120 */
-    0,
+    ProcGetCalibrationControl,		/* 120 */
+    ProcChangeCalibrationControl,
     0,
     0,
     0,
@@ -331,8 +331,8 @@
     SProcSimpleReq,			/* GetPointerMapping, */
     SProcSimpleReq,			/* SetModifierMapping, */
     SProcSimpleReq,			/* GetModifierMapping, */
-    0,					/* 120 */
-    0,
+    SProcSimpleReq,		/* 120 GetCalibrationControl*/
+    SProcChangeCalibrationControl,      /* ChangeCalibrationControl */
     0,
     0,
     0,
@@ -503,8 +503,8 @@
     (ReplySwapPtr)SGetPointerMappingReply,
     (ReplySwapPtr)SGenericReply,		/* SetModifierMapping */
     (ReplySwapPtr)SGetModifierMappingReply,	/* 119 */
-    ReplyNotSwappd,				/* 120 */
-    ReplyNotSwappd,				/* 121 */
+    (ReplySwapPtr)SGetCalibrationControlReply, 	/* 120 */
+    ReplyNotSwappd,/* 121 */
     ReplyNotSwappd,				/* 122 */
     ReplyNotSwappd,				/* 123 */
     ReplyNotSwappd,				/* 124 */
--- xorg-x11-6.8.2/xc/programs/Xserver/hw/xfree86/loader/dixsym.c.calib	2004-12-19 10:21:16.000000000 -0500
+++ xorg-x11-6.8.2/xc/programs/Xserver/hw/xfree86/loader/dixsym.c	2005-01-07 18:13:42.467220504 -0500
@@ -125,6 +125,7 @@
     SYMFUNC(InitKeyClassDeviceStruct)
     SYMFUNC(InitKeyboardDeviceStruct)
     SYMFUNC(SendMappingNotify)
+    SYMFUNC(InitCalibrationDeviceStruct)
     /* dispatch.c */
     SYMFUNC(SetInputCheck)
     SYMFUNC(SendErrorToClient)
--- xorg-x11-6.8.2/xc/programs/Xserver/include/input.h.calib	2004-07-29 21:21:57.000000000 -0400
+++ xorg-x11-6.8.2/xc/programs/Xserver/include/input.h	2005-01-07 17:23:35.647326608 -0500
@@ -160,6 +160,16 @@
 extern Bool AllocateDevicePrivate(DeviceIntPtr device, int index);
 extern void ResetDevicePrivateIndex(void);
 
+typedef struct {
+	int button;
+	int button_threshold;
+	int min_x;
+	int max_x;
+	int min_y;
+	int max_y;
+	unsigned char id;
+} CalibrationCtrl;
+
 extern KeybdCtrl	defaultKeyboardControl;
 extern PtrCtrl		defaultPointerControl;
 
@@ -252,6 +262,13 @@
 extern Bool InitFocusClassDeviceStruct(
     DeviceIntPtr /*device*/);
 
+extern Bool InitCalibrationClassDeviceStruct(
+#if NeedFunctionPrototypes
+	DeviceIntPtr /* device */,
+	int /* button no. */
+#endif
+);
+
 typedef void (*BellProcPtr)(
     int /*percent*/,
     DeviceIntPtr /*device*/,
@@ -312,6 +329,21 @@
     DeviceIntPtr /*device*/,
     IntegerCtrlProcPtr /*controlProc*/);
 
+typedef Bool (*CalibrationCtrlProcPtr)(
+#if NeedFunctionPrototypes
+	DeviceIntPtr /* device */,
+	CalibrationCtrl *
+#endif
+);
+
+extern Bool InitCalibrationFeedbackClassDeviceStruct(
+#if NeedFunctionPrototypes
+	DeviceIntPtr /* device */,
+	CalibrationCtrlProcPtr /* controlProc */,
+	CalibrationCtrl* /* ctrl */
+#endif
+);
+
 extern Bool InitPointerDeviceStruct(
     DevicePtr /*device*/,
     CARD8* /*map*/,
@@ -327,6 +359,15 @@
     BellProcPtr /*bellProc*/,
     KbdCtrlProcPtr /*controlProc*/);
 
+extern Bool InitCalibrationDeviceStruct(
+#if NeedFunctionPrototypes
+	DevicePtr /* device */,
+	int  /* button */,
+	CalibrationCtrlProcPtr /* controlProc */,
+	CalibrationCtrl* /* ctrl */
+#endif
+);
+
 extern void SendMappingNotify(
     unsigned int /*request*/,
     unsigned int /*firstKeyCode*/,
--- xorg-x11-6.8.2/xc/programs/Xserver/include/inputstr.h.calib	2004-07-29 21:21:57.000000000 -0400
+++ xorg-x11-6.8.2/xc/programs/Xserver/include/inputstr.h	2005-01-07 17:23:35.648326456 -0500
@@ -177,12 +177,19 @@
     char	pad;
 } ProximityClassRec, *ProximityClassPtr;
 
+typedef struct _CalibrationClassRec {
+	int button;
+	Bool buttonDown;
+	int x,y;
+} CalibrationClassRec, *CalibrationClassPtr;
+
 typedef struct _KbdFeedbackClassRec *KbdFeedbackPtr;
 typedef struct _PtrFeedbackClassRec *PtrFeedbackPtr;
 typedef struct _IntegerFeedbackClassRec *IntegerFeedbackPtr;
 typedef struct _StringFeedbackClassRec *StringFeedbackPtr;
 typedef struct _BellFeedbackClassRec *BellFeedbackPtr;
 typedef struct _LedFeedbackClassRec *LedFeedbackPtr;
+typedef struct _CalibrationFeedbackClassRec *CalibrationFeedbackPtr;
 
 typedef struct _KbdFeedbackClassRec {
     BellProcPtr		BellProc;
@@ -228,6 +235,12 @@
 #endif
 } LedFeedbackClassRec;
 
+typedef struct _CalibrationFeedbackClassRec {
+	CalibrationCtrlProcPtr  CtrlProc;
+	CalibrationCtrl         ctrl;
+	CalibrationFeedbackPtr  next;
+} CalibrationFeedbackClassRec;
+
 /* states for devices */
 
 #define NOT_GRABBED		0
@@ -276,12 +289,14 @@
     ButtonClassPtr	button;
     FocusClassPtr	focus;
     ProximityClassPtr	proximity;
+    CalibrationClassPtr calibration;
     KbdFeedbackPtr	kbdfeed;
     PtrFeedbackPtr	ptrfeed;
     IntegerFeedbackPtr	intfeed;
     StringFeedbackPtr	stringfeed;
     BellFeedbackPtr	bell;
     LedFeedbackPtr	leds;
+    CalibrationFeedbackPtr calibratefeed;
 #ifdef XKB
     struct _XkbInterest *	xkb_interest;
 #endif
--- xorg-x11-6.8.2/xc/programs/Xserver/include/swaprep.h.calib	2004-04-23 15:54:23.000000000 -0400
+++ xorg-x11-6.8.2/xc/programs/Xserver/include/swaprep.h	2005-01-07 18:12:24.798028016 -0500
@@ -239,6 +239,11 @@
     int /* size */,
     xGetPointerControlReply * /* pRep */);
 
+extern void SGetCalibrationControlReply(
+    ClientPtr /* client */,
+    int /* size */,
+    xGetCalibrationControlReply * /* pRep */);
+  
 extern void SGetScreenSaverReply(
     ClientPtr /* pClient */,
     int /* size */,
--- xorg-x11-6.8.2/xc/programs/Xserver/include/swapreq.h.calib	2004-04-23 15:54:23.000000000 -0400
+++ xorg-x11-6.8.2/xc/programs/Xserver/include/swapreq.h	2005-01-07 17:23:35.648326456 -0500
@@ -58,6 +58,7 @@
 SWAPREQ_PROC(SProcChangeKeyboardControl);
 SWAPREQ_PROC(SProcChangeKeyboardMapping);
 SWAPREQ_PROC(SProcChangePointerControl);
+SWAPREQ_PROC(SProcChangeCalibrationControl);
 SWAPREQ_PROC(SProcChangeProperty);
 SWAPREQ_PROC(SProcChangeWindowAttributes);
 SWAPREQ_PROC(SProcClearToBackground);
