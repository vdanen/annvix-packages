--- tcsh-6.12.00/sh.set.c.pix	2002-07-01 22:50:22.000000000 +0200
+++ tcsh-6.12.00/sh.set.c	2003-07-29 15:29:17.000000000 +0200
@@ -1240,7 +1240,7 @@
 	return;
 
     for (i = 0; dspmt[i].n; i++) {
-	if (eq(pcp, dspmt[i].n)) {
+	if (Strncasecmp(pcp, dspmt[i].n, Strlen(pcp)) == 0) {
 	    set(CHECK_MBYTEVAR, Strsave(dspmt[i].v), VAR_READWRITE);
 	    update_dspmbyte_vars();
 	    break;
--- tcsh-6.12.00/sh.h.pix	2003-07-29 15:29:05.000000000 +0200
+++ tcsh-6.12.00/sh.h	2003-07-29 15:29:05.000000000 +0200
@@ -1118,6 +1118,7 @@
 #define Strlen(a)		strlen(a)
 #define Strcmp(a, b)		strcmp(a, b)
 #define Strncmp(a, b, c)	strncmp(a, b, c)
+#define Strncasecmp(a, b, c)	strncasecmp(a, b, c)
 
 #define Strspl(a, b)		strspl(a, b)
 #define Strsave(a)		strsave(a)
@@ -1138,6 +1139,7 @@
 #define Strlen(a)		s_strlen(a)
 #define Strcmp(a, b)		s_strcmp(a, b)
 #define Strncmp(a, b, c)	s_strncmp(a, b, c)
+#define Strncasecmp(a, b, c)	s_strncasecmp(a, b, c)
 
 #define Strspl(a, b)		s_strspl(a, b)
 #define Strsave(a)		s_strsave(a)
--- tcsh-6.12.00/tc.str.c.pix	2002-03-08 18:36:47.000000000 +0100
+++ tcsh-6.12.00/tc.str.c	2003-07-29 15:29:05.000000000 +0200
@@ -309,6 +309,35 @@
     return(0);
 }
 
+int
+s_strncasecmp(str1, str2, n)
+    register const Char *str1, *str2;
+    register size_t n;
+{
+    if (n == 0)
+	return (0);
+    do {
+	if (*str1 != *str2 && 
+	    ! (*str1 < 256 && *str2 < 256 && tolower(*str1) == tolower(*str2))) {
+	    /*
+	     * The following case analysis is necessary so that characters 
+	     * which look negative collate low against normal characters
+	     * but high against the end-of-string NUL.
+	     */
+	    if (*str1 == '\0')
+		return (-1);
+	    else if (*str2 == '\0')
+		return (1);
+	    else
+		return (*str1 - *str2);
+	}
+        if (*str1 == '\0')
+	    return(0);
+	str1++, str2++;
+    } while (--n != 0);
+    return(0);
+}
+
 Char   *
 s_strsave(s)
     register const Char *s;
