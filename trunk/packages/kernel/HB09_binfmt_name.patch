diff -X ../../KDIFX -burpN -X ../../KDIFX linux-vanilla/fs/binfmt_aout.c linux/fs/binfmt_aout.c
--- linux-vanilla/fs/binfmt_aout.c	2002-09-25 01:49:40.000000000 +0200
+++ linux/fs/binfmt_aout.c	2002-11-25 19:00:20.000000000 +0100
@@ -36,7 +36,7 @@ static int aout_core_dump(long signr, st
 extern void dump_thread(struct pt_regs *, struct user *);
 
 static struct linux_binfmt aout_format = {
-	NULL, THIS_MODULE, load_aout_binary, load_aout_library, aout_core_dump, PAGE_SIZE
+	NULL, THIS_MODULE, load_aout_binary, load_aout_library, aout_core_dump, PAGE_SIZE, "a.out"
 };
 
 static void set_brk(unsigned long start, unsigned long end)
diff -X ../../KDIFX -burpN -X ../../KDIFX linux-vanilla/fs/binfmt_elf.c linux/fs/binfmt_elf.c
--- linux-vanilla/fs/binfmt_elf.c	2002-09-25 01:49:40.000000000 +0200
+++ linux/fs/binfmt_elf.c	2002-11-25 19:00:20.000000000 +0100
@@ -73,8 +73,12 @@ static int elf_core_dump(long signr, str
 #define ELF_PAGEOFFSET(_v) ((_v) & (ELF_MIN_ALIGN-1))
 #define ELF_PAGEALIGN(_v) (((_v) + ELF_MIN_ALIGN - 1) & ~(ELF_MIN_ALIGN - 1))
 
+#ifndef ELF_NAME
+#define ELF_NAME "elf"
+#endif
+
 static struct linux_binfmt elf_format = {
-	NULL, THIS_MODULE, load_elf_binary, load_elf_library, elf_core_dump, ELF_EXEC_PAGESIZE
+	NULL, THIS_MODULE, load_elf_binary, load_elf_library, elf_core_dump, ELF_EXEC_PAGESIZE, ELF_NAME
 };
 
 #define BAD_ADDR(x)	((unsigned long)(x) > TASK_SIZE)
diff -X ../../KDIFX -burpN -X ../../KDIFX linux-vanilla/fs/binfmt_em86.c linux/fs/binfmt_em86.c
--- linux-vanilla/fs/binfmt_em86.c	2002-09-25 01:49:40.000000000 +0200
+++ linux/fs/binfmt_em86.c	2002-11-25 19:00:20.000000000 +0100
@@ -95,7 +95,7 @@ static int load_em86(struct linux_binprm
 }
 
 struct linux_binfmt em86_format = {
-	NULL, THIS_MODULE, load_em86, NULL, NULL, 0
+	NULL, THIS_MODULE, load_em86, NULL, NULL, 0, "em86"
 };
 
 static int __init init_em86_binfmt(void)
diff -X ../../KDIFX -burpN -X ../../KDIFX linux-vanilla/fs/binfmt_misc.c linux/fs/binfmt_misc.c
--- linux-vanilla/fs/binfmt_misc.c	2002-09-25 01:49:40.000000000 +0200
+++ linux/fs/binfmt_misc.c	2002-11-25 19:00:20.000000000 +0100
@@ -677,7 +677,7 @@ out1:
 }
 
 static struct linux_binfmt misc_format = {
-	NULL, THIS_MODULE, load_misc_binary, NULL, NULL, 0
+	NULL, THIS_MODULE, load_misc_binary, NULL, NULL, 0, "misc"
 };
 
 static DECLARE_FSTYPE(bm_fs_type, "binfmt_misc", bm_read_super, FS_SINGLE|FS_LITTER);
diff -X ../../KDIFX -burpN -X ../../KDIFX linux-vanilla/fs/binfmt_script.c linux/fs/binfmt_script.c
--- linux-vanilla/fs/binfmt_script.c	2002-09-25 01:49:40.000000000 +0200
+++ linux/fs/binfmt_script.c	2002-11-25 19:00:20.000000000 +0100
@@ -93,7 +93,7 @@ static int load_script(struct linux_binp
 }
 
 struct linux_binfmt script_format = {
-	NULL, THIS_MODULE, load_script, NULL, NULL, 0
+	NULL, THIS_MODULE, load_script, NULL, NULL, 0, "script"
 };
 
 static int __init init_script_binfmt(void)
diff -X ../../KDIFX -burpN -X ../../KDIFX linux-vanilla/include/linux/binfmts.h linux/include/linux/binfmts.h
--- linux-vanilla/include/linux/binfmts.h	2002-09-25 18:42:39.000000000 +0200
+++ linux/include/linux/binfmts.h	2002-11-25 19:00:21.000000000 +0100
@@ -43,6 +43,7 @@ struct linux_binfmt {
 	int (*load_shlib)(struct file *);
 	int (*core_dump)(long signr, struct pt_regs * regs, struct file * file);
 	unsigned long min_coredump;	/* minimal dump size */
+	char *name; 
 };
 
 extern int register_binfmt(struct linux_binfmt *);
diff -X ../../KDIFX -burpN -X ../../KDIFX linux-vanilla/fs/proc/base.c linux/fs/proc/base.c
--- linux-vanilla/fs/proc/base.c	2002-09-25 01:49:40.000000000 +0200
+++ linux/fs/proc/base.c	2002-11-25 19:00:21.000000000 +0100
@@ -25,6 +25,7 @@
 #include <linux/string.h>
 #include <linux/seq_file.h>
 #include <linux/namespace.h>
+#include <linux/module.h>
 
 /*
  * For hysterical raisins we keep the same inumbers as in the old procfs.
@@ -180,6 +181,16 @@ static int proc_pid_cmdline(struct task_
 	return res;
 }
 
+static int proc_pid_binfmt(struct task_struct *task, char *buffer)
+{
+	char *s;
+	if (task->binfmt && task->binfmt->name) 
+		s = task->binfmt->name;
+	else
+		s = "unknown"; 
+	return sprintf(buffer,"%s\n",s); 	
+}
+
 /************************************************************************/
 /*                       Here the fs part begins                        */
 /************************************************************************/
@@ -540,6 +552,7 @@ enum pid_directory_inos {
 	PROC_PID_MAPS,
 	PROC_PID_CPU,
 	PROC_PID_MOUNTS,
+	PROC_PID_BINFMT, 
 	PROC_PID_FD_DIR = 0x8000,	/* 0x8000-0xffff */
 };
 
@@ -560,6 +573,7 @@ static struct pid_entry base_stuff[] = {
   E(PROC_PID_ROOT,	"root",		S_IFLNK|S_IRWXUGO),
   E(PROC_PID_EXE,	"exe",		S_IFLNK|S_IRWXUGO),
   E(PROC_PID_MOUNTS,	"mounts",	S_IFREG|S_IRUGO),
+  E(PROC_PID_BINFMT, "binfmt", S_IFREG|S_IRUGO), 
   {0,0,NULL,0}
 };
 #undef E
@@ -928,6 +942,10 @@ static struct dentry *proc_base_lookup(s
 		case PROC_PID_MOUNTS:
 			inode->i_fop = &proc_mounts_operations;
 			break;
+		case PROC_PID_BINFMT:
+			inode->i_fop = &proc_info_file_operations;
+			inode->u.proc_i.op.proc_read = proc_pid_binfmt;
+			break;
 		default:
 			printk("procfs: impossible type (%d)",p->type);
 			iput(inode);
