--- ./nash/nash.c.gege	2003-02-11 18:03:27.000000000 +0100
+++ ./nash/nash.c	2003-09-13 20:50:40.000000000 +0200
@@ -51,7 +51,9 @@
 
 /* Need to tell loop.h what the actual dev_t type is. */
 #undef dev_t
-#if defined(__alpha) || (defined(__sparc__) && defined(__arch64__))
+#if defined(__x86_64__)
+#define dev_t unsigned long
+#elif defined(__alpha) || (defined(__sparc__) && defined(__arch64__))
 #define dev_t unsigned int
 #else
 #define dev_t unsigned short
@@ -151,6 +153,7 @@
     char * mntPoint;
     char * deviceDir;
     char * options = NULL;
+    char * options_mount = NULL;
     int mustRemove = 0;
     int mustRemoveDir = 0;
     int rc;
@@ -260,45 +263,7 @@
 	    start = end;
 	}
 
-	options = newOpts;
-    }
-
-    if (!strncmp("LABEL=", device, 6)) {
-	int major, minor;
-	char * devName;
-	char * ptr;
-	int i;
-
-	devName = get_spec_by_volume_label(device + 6, &major, &minor);
-
-	if (devName) {
-	    device = devName;
-	    if (access(device, F_OK)) {
-	        ptr = device;
-		i = 0;
-		while (*ptr)
-		    if (*ptr++ == '/')
-			i++;
-		if (i > 2) {
-		    deviceDir = alloca(strlen(device) + 1);
-		    strcpy(deviceDir, device);
-		    ptr = deviceDir + (strlen(device) - 1);
-		    while (*ptr != '/')
-			*ptr-- = '\0';
-		    if (mkdir(deviceDir, 0644)) {
-		      printf("mkdir: cannot create directory %s\n", deviceDir);
-		    } else {
-		      mustRemoveDir = 1;
-		    }
-		}
-		if (smartmknod(device, S_IFBLK | 0600, makedev(major, minor))) {
-		    printf("mount: cannot create device %s (%d,%d)\n",
-			   device, major, minor);
-		    return 1;
-		}
-		mustRemove = 1;
-	    }
-	}
+	options_mount = newOpts;
     }
 
     if (testing) {
@@ -316,12 +281,23 @@
 		(flags & MS_NOATIME) ? "noatime " : ""
 	    );
     } else {
-	if (mount(device, mntPoint, fsType, flags, options)) {
-	    printf("mount: error %d mounting %s\n", errno, fsType);
-	    rc = 1;
-	}
+	    if (mount(device, mntPoint, fsType, flags, options_mount)) {
+		    printf("mount: error %d mounting %s flags %s\n", errno, fsType, options);
+		    if (flags != MS_MGC_VAL) {
+			    printf("well, retrying without the option flags\n");
+			    if (!mount(device, mntPoint, fsType, flags, NULL))
+				    goto mount_ok;
+			    printf("mount: error %d mounting %s\n", errno, fsType);
+		    }
+		    printf("well, retrying read-only without any flag\n");
+		    if (mount(device, mntPoint, fsType, MS_MGC_VAL|MS_RDONLY, NULL)) {
+			    printf("mount: error %d mounting %s\n", errno, fsType);
+			    rc = 1;
+		    }
+	    }
     }
 
+mount_ok:
     if (mustRemove) unlink(device);
     if (mustRemoveDir) rmdir(deviceDir);
 
@@ -567,6 +543,7 @@
 	num -= 2;
     }
 
+    if (!quiet || outFd != 1) {
     for (i = 0; i < num;i ++) {
 	if (i)
 	    write(outFd, " ", 1);
@@ -574,6 +551,7 @@
     }
 
     write(outFd, "\n", 1);
+    }
 
     if (outFd != 1) close(outFd);
 
@@ -648,22 +626,6 @@
     while (*chptr && !isspace(*chptr)) chptr++;
     *chptr = '\0';
 
-    if (!strncmp(start, "LABEL=", 6)) {
-	if (get_spec_by_volume_label(start + 6, &major, &minor)) {
-	    if (smartmknod(path, S_IFBLK | 0600, makedev(major, minor))) {
-		printf("mount: cannot create device %s (%d,%d)\n",
-		       path, major, minor);
-		return 1;
-	    }
-
-	    return 0;
-	}
-
-	printf("mkrootdev: label %s not found\n", start + 6);
-
-	return 1;
-    }
-
     fd = open("/proc/sys/kernel/real-root-dev", O_RDONLY, 0);
     if (fd < 0) {
 	printf("mkrootdev: failed to open /proc/sys/kernel/real-root-dev: %d\n", errno);
@@ -686,6 +648,8 @@
 	return 1;
     }
 
+    unlink(path);
+
     if (smartmknod(path, S_IFBLK | 0700, devNum)) {
 	printf("mkrootdev: mknod failed: %d\n", errno);
 	return 1;
@@ -1074,6 +1038,17 @@
     return 0;
 }
 
+void handledevfsCommand()
+{
+    // I need to close my IO's in order to release the lock on initial /dev
+    close(0); close(1); close(2);
+
+    if (umount("/initrd/dev"))
+	    return;
+
+    mount("none", "/dev", "devfs", MS_MGC_VAL, NULL);
+}
+
 int runStartup(int fd) {
     char contents[32768];
     int i;
@@ -1144,8 +1119,6 @@
 	    rc = findCommand(chptr, end);
 	else if (!strncmp(start, "findlodev", MAX(7, chptr - start)))
 	    rc = findlodevCommand(chptr, end);
-	else if (!strncmp(start, "showlabels", MAX(10, chptr-start)))
-	    rc = display_uuid_cache();
 	else if (!strncmp(start, "mkdevices", MAX(9, chptr-start)))
 	    rc = mkdevicesCommand(chptr, end);
 	else if (!strncmp(start, "sleep", MAX(5, chptr-start)))
@@ -1154,6 +1127,8 @@
 	    rc = mknodCommand(chptr, end);
         else if (!strncmp(start, "readlink", MAX(8, chptr-start)))
             rc = readlinkCommand(chptr, end);
+	else if (!strncmp(start, "handledevfs", MAX(11, chptr - start)))
+	    handledevfsCommand();
 	else {
 	    *chptr = '\0';
 	    rc = otherCommand(start, chptr + 1, end, 1);
@@ -1167,18 +1142,11 @@
 
 int main(int argc, char **argv) {
     int fd = 0;
-    char * name;
     int rc;
     int force = 0;
 
-    name = strrchr(argv[0], '/');
-    if (!name) 
-	name = argv[0];
-    else
-	name++;
-
-    if (!strcmp(name, "modprobe"))
-	exit(0);
+    if (strstr(argv[0], "modprobe"))
+	    exit(0);
 
     testing = (getppid() != 0) && (getppid() != 1);
     argv++, argc--;
@@ -1197,6 +1165,27 @@
 	}
     }
 
+    if (mount("/proc", "/proc", "proc", 0, NULL))
+	    printf("Couldn't mount proc filesystem\n");
+    else {
+	    int fd_cmdline = open("/proc/cmdline", O_RDONLY, 0);
+	    if (fd_cmdline > 0) {
+		    char buf[5000];
+		    int i = read(fd_cmdline, buf, sizeof(buf));
+		    if (i == -1)
+			    printf("Couldn't read cmdline\n");
+		    else {
+			    buf[i] = '\0';
+			    if (strstr(buf, "quiet"))
+				    quiet = 1;
+		    }
+		    if (close(fd_cmdline))
+			    printf("can't close, %d\n", errno);
+	    }
+	    if (umount("/proc"))
+		    printf("Umount of proc failed: %d\n", errno);
+    }
+
     if (force && !quiet)
 	printf("(forcing normal run)\n");
 
--- ./nash/Makefile.gege	2002-01-14 02:40:09.000000000 +0100
+++ ./nash/Makefile	2003-09-13 20:50:40.000000000 +0200
@@ -1,19 +1,23 @@
+top_dir = ../mkinitrd_helper-subdir
+
+include $(top_dir)/Makefile.common
+
+
 CFLAGS=-Wall -DVERSION=\"$(VERSION)\" -g
 VERSION=$(shell awk -F= '/^VERSION=/ { print $$2 }' ../mkinitrd)
 
 ARCH := $(patsubst i%86,i386,$(shell uname -m))
 ARCH := $(patsubst sparc%,sparc,$(ARCH))
 
-ifeq (i386, $(ARCH))
-CC:=diet $(CC)
-else
-STATIC=-static
-endif
+STATIC=$(LDFLAGS_STAGE1)
 
 mandir=usr/share/man
 
-nash: nash.o mount_by_label.o
-	$(CC) $(STATIC) -g $(LDFLAGS) -o $@ nash.o mount_by_label.o
+nash: nash.o
+	$(DIET) $(CC) $(STATIC) -g $(LDFLAGS) -o $@ $^ $(OBJ_ADD)
+
+%.o: %.c
+	$(DIET) $(CC) $(CFLAGS) -c $< -o $@
 
 clean:
 	rm -f nash $(MINILIBC) nash.o mount_by_label.o
--- ./nash/nash.8.gege	2003-01-14 21:44:00.000000000 +0100
+++ ./nash/nash.8	2003-09-13 20:50:40.000000000 +0200
@@ -106,6 +106,13 @@
 \fBumount \fIpath\fR
 Unmounts the filesystem mounted at \fIpath\fR.
 
+.TP
+\fBhandledevfs\fR
+Useful after a pivot_root, because the devfs filesystem, if already
+mounted by the kernel (with the use of kernel parameter
+\fIdevfs=mount\fR), is at the wrong location (\fI/initrd/dev\fR instead of
+\fI/dev\fR) and needs to be remounted at the correct location.
+
 .SH RETURN VALUE
 Returns 0 is the last command succeeded or 1 if it failed.
 
@@ -123,4 +130,5 @@
 .SH AUTHOR
 .nf
 Erik Troan <ewt@redhat.com>
+Patches for MandrakeSoft by Guillaume Cottenceau <gc at mandrakesoft.com>
 .fi
--- ./mkinitrd.gege	2003-03-05 00:13:47.000000000 +0100
+++ ./mkinitrd	2003-09-13 20:50:55.000000000 +0200
@@ -18,12 +18,14 @@
 #       Trond Eivind Glomsrød <teg@redhat.com>
 #       Jeremy Katz <katzj@redhat.com>
 #       Preston Brown <pbrown@redhat.com>
-
+#
+# Patched for Mandrake by Guillaume Cottenceau <gc at mandrakesoft.com>
+#
 
 PATH=/sbin:/usr/sbin:$PATH
 export PATH
 
-VERSION=3.4.43
+VERSION=3.4.43-mdk
 
 compress=1
 target=""
@@ -35,26 +37,56 @@
 builtins=""
 pivot=1
 modulefile=/etc/modules.conf
+tmpdir=
 rc=0
 
-if [ `uname -m` = "ia64" ]; then
-  IMAGESIZE=4000
-else
-  IMAGESIZE=3000
-fi
-PRESCSIMODS="scsi_mod sd_mod unknown"
+splash_dir=/usr/share/bootsplash/
+splash=auto
+theme=Mandrake
+
+DEFAULT_DSDT_FILE="/boot/dsdt.aml"
+dsdt_file=""
+
+IMAGESIZE=100
+POSTSCSIMODS="sd_mod"
 fstab="/etc/fstab"
+IGNOREMODS="$IGNOREMODS ppa imm ide-scsi ext2 usb-storage"
+
+[[ -f /etc/sysconfig/bootsplash ]] && source /etc/sysconfig/bootsplash
+[[ -n $SPLASH ]] && splash=$SPLASH
+[[ -n $THEME ]] && theme=$THEME
+[[ $splash == no ]] && splash=
 
 usage () {
     echo "usage: `basename $0` [--version] [-v] [-f] [--preload <module>]" >&2
     echo "       [--omit-scsi-modules] [--omit-raid-modules] [--omit-lvm-modules]" >&2
     echo "       [--with=<module>] [--image-version] [--fstab=<fstab>] [--nocompress]" >&2
-    echo "       [--builtin=<module>] [--nopivot] <initrd-image> <kernel-version>" >&2
+    echo "       [--builtin=<module>] [--nopivot] [--tmpdir=<tmpdir>]" >&2
+    echo "       [--splash={auto,resolution}] [--dsdt[=<dsdt.aml>]]" >&2
+    echo "       <initrd-image> <kernel-version>" >&2
     echo "" >&2
-    echo "       (ex: `basename $0` /boot/initrd-2.2.5-15.img 2.2.5-15)" >&2
+    echo "       (ex: `basename $0` /boot/initrd-$(uname -r).img $(uname -r))" >&2
     exit 1
 }
 
+moduledep() {
+    if [ ! -f "/lib/modules/$kernel/modules.dep" ]; then
+	echo "No dep file found for kernel $kernel" >&2
+	exit 1
+    fi
+
+    [ -n "$verbose" ] && echo "Looking for deps of module $1.o"
+    deps=$(awk 'BEGIN { searched=ARGV[2]; ARGV[2]=""; rc=1 } \
+                function modname(filename) { match(filename, /\/([^\/]+)\.o/, ret); return ret[1] } \
+                function show() { if (orig == searched) { print dep; orig=""; rc=0; exit } } \
+                /^\/lib/ { show(); \
+                           orig=modname($1); \
+                           if ($2) { dep=modname($2) } else { dep="" } } \
+                /^	/ { dep=sprintf("%s %s", dep, modname($1));  } \
+                END      { show(); exit(rc) }' /lib/modules/$kernel/modules.dep $1)
+    [ -n "$verbose" -a -n "$deps" ] && echo -e "\t$deps"
+}
+
 findmodule() {
     skiperrors=""
 
@@ -63,7 +95,7 @@
 	shift
     fi
 
-    modName=$1
+    local modName=$1
 
     if [ "$modName" = "off" -o "$modName" = "null" ]; then
 	return
@@ -80,82 +112,62 @@
 	return
     fi
 
-    if [ "$modName" = "i2o_block" ]; then
-	findmodule i2o_core
-	findmodule i2o_pci
-	modName="i2o_block"
-    fi
-
-    if [ "$modName" = "mptscsih" ]; then
-        findmodule mptbase
-	modName="mptscsih"
-    fi
-
-    if [ "$modName" = "pluto" ]; then
-	findmodule fc4
-	findmodule soc
-	modName="pluto"
-    fi
-
-    if [ "$modName" = "fcal" ]; then
-	findmodule fc4
-	findmodule socal
-	modName="fcal"
-    fi
-
-    if [ "$modName" = "ext3" ]; then
-	findmodule $skiperrors mbcache
-	findmodule $skiperrors jbd
-	modName="ext3"
-    fi
+    for i in $IGNOREMODS; do
+ 	[ "$i" = "$modName" ] && return
+    done
 
-    if [ "$modName" = "xfs" ]; then
-	findmodule $skiperrors pagebuf
-	findmodule $skiperrors xfs_support
-	findmodule $skiperrors xfs_dmapi
-	modName="xfs"
-    fi
+    moduledep $modName
+    for i in $deps; do
+	findmodule $i
+    done
 
-    if [ "$modName" = "ppa" ]; then
-	findmodule parport
-	findmodule parport_pc
-	modName="ppa"
+    # support generation of initrd suitable for a raid system on a non raid system
+    if echo $modName | egrep '^raid[0-5]$|^linear$' >/dev/null 2>&1; then
+	startraid=1
     fi
 
-    if [ "$modName" = "sbp2" ]; then
-	findmodule ieee1394
-	findmodule ohci1394
-	modName="sbp2"
-    fi
-    
-    fmPath=`(cd /lib/modules/$kernel; echo find . -name $modName.o.gz -type f | /sbin/nash --quiet)`
+    fmPath=`(cd /lib/modules/$kernel; find -type f -name $modName.o.gz | grep -v build)`
 
-    if [ ! -f /lib/modules/$kernel/$fmPath ]; then
-        fmPath=`(cd /lib/modules/$kernel; echo find . -name $modName.o -type f | /sbin/nash --quiet)`
+    if [ -z "$fmPath" ]; then
+        fmPath=`(cd /lib/modules/$kernel; find -type f -name $modName.o | grep -v build)`
     fi
 
-    if [ ! -f /lib/modules/$kernel/$fmPath ]; then
+    if [ -z "$fmPath" ]; then
 	if [ -n "$skiperrors" ]; then
 	    return
 	fi
 
-        # ignore the absence of the scsi modules
-	for n in $PRESCSIMODS; do
-	    if [ "$n" = "$modName" ]; then
-		return;
-	    fi
-	done;
-    
 	echo "No module $modName found for kernel $kernel" >&2
 	exit 1
     fi
 
     # only need to add each module once
-    if ! echo $MODULES | grep -q "$fmPath" 2>/dev/null ; then
-	MODULES="$MODULES $fmPath"
+    zfmPath=`echo $fmPath | sed s/\.gz//`
+    if ! echo $MODULES | grep -q "$zfmPath" 2>/dev/null ; then
+	MODULES="$MODULES $zfmPath"
     fi
 }
 
+is_good_fs() {
+    local parttype= tmpname=
+    local dir=$1
+    [[ -d $dir ]] || return 1
+    [[ -w $dir ]] || return 1
+    [[ $dir == */ ]] && dir=${dir%/}
+    parttype=$(awk "{if (\$2 == \""$dir"\") print \$3 }" /proc/mounts)
+
+    while tmpname=${dir%/*} && [[ -z $parttype ]];do
+	[[ -z $tmpname ]] && tmpname=/
+	parttype=$(awk "{if (\$2 == \""$tmpname"\") print \$3 }" /proc/mounts)
+	dir=$tmpname
+    done
+
+    case $parttype in
+	nfs|tmpfs) return 1;;
+	*) return 0;
+    esac
+}
+
 inst() {
     if [ "$#" != "2" ];then
         echo "usage: inst <file> <destination>"
@@ -165,6 +177,11 @@
     cp $1 $2
 }
 
+is_dietlibc_arch() {
+    if [ -n "`uname -m | grep '\(i.86\|x86_64\)'`" ]; then return 0; fi
+    return 1
+}
+
 while [ $# -gt 0 ]; do
     case $1 in
 	--fstab*)
@@ -176,6 +193,15 @@
 	    fi		    
 	    ;;
 
+	--tmpdir*)
+	    if echo $1 | grep '=' >/dev/null ; then
+	    	tmpdir=`echo $1 | sed 's/^--tmpdir=//'`
+	    else
+		tmpdir=$2
+		shift
+	    fi		    
+	    ;;
+
 	--with*)
 	    if echo $1 | grep -q '=' ; then
 	    	modname=`echo $1 | sed 's/^--with=//'`
@@ -231,7 +257,7 @@
 	    PREMODS="$PREMODS $modname"
 	    ;;
 	--omit-scsi-modules)
-	    PRESCSIMODS=""
+	    POSTSCSIMODS=""
 	    noscsi=1;
 	    ;;
 	--omit-raid-modules)
@@ -246,6 +272,22 @@
 	--with-usb)
 	    withusb=yes
 	    ;;
+	--splash)
+	    if echo $1 | grep '=' >/dev/null ; then
+	    	splash=`echo $1 | sed 's/^--splash=//'`
+	    else
+		splash=$2
+		shift
+	    fi		    
+	    [[ $splash == no ]] && splash=
+	    ;;
+	--dsdt)
+	    if echo $1 | grep '=' >/dev/null ; then
+	    	dsdt_file=`echo $1 | sed 's/^--dsdt=//'`
+	    else
+		dsdt_file=$DEFAULT_DSDT_FILE
+	    fi		    
+	    ;;
 	*)
 	    if [ -z "$target" ]; then
 		target=$1
@@ -260,6 +302,10 @@
     shift
 done
 
+if [[ $splash == auto && -f $splash_dir/scripts/detect-resolution ]];then
+    splash=$( $splash_dir/scripts/detect-resolution )
+fi
+
 if [ -z "$target" -o -z "$kernel" ]; then
     usage
 fi
@@ -283,26 +329,12 @@
     exit 1
 fi
 
-# find a temporary directory which doesn't use tmpfs
-TMPDIR=""
-for t in /tmp /var/tmp /root ${PWD}; do
-    if [ ! -d $t ]; then continue; fi
-    if ! echo access -w $t | /sbin/nash --quiet; then continue; fi
-
-    fs=$(df -T $t 2>/dev/null | tail -1 | awk '{printf $2}')
-    if [ "$fs" != "tmpfs" ]; then 
-	TMPDIR=$t
-	break
+if [ ! -f /proc/version ]; then
+    mount -t proc /proc /proc
+    if [ ! -f /proc/version ]; then
+	echo "/proc filesystem must be available"
+	exit 1
     fi
-done
-
-if [ -z "$TMPDIR" ]; then
-    echo "no temporary directory could be found" >&2
-    exit 1
-fi
-
-if [ $TMPDIR = "/root" -o $TMPDIR = "${PWD}" ]; then 
-    echo "WARNING: using $TMPDIR for temporary files" >&2
 fi
 
 for n in $PREMODS; do
@@ -311,6 +343,8 @@
 
 needusb=""
 if [ -n "$withusb" ]; then
+    echo "Root on USB is not yet available"
+    exit 1
     # If / or /boot is on a USB device include the driver. With root by
     # label we could still get some odd behaviors
     for fs in / /boot ; do
@@ -331,11 +365,9 @@
 if [ -n "$needusb" ]; then
     drivers=$(awk '/^alias usb-controller[0-9]* / { print $3}' < /etc/modules.conf)
     if [ -n "$drivers" ]; then
-	findmodule usbcore
 	for driver in $drivers; do
 	    findmodule $driver
 	done
-	findmodule scsi_mod
 	findmodule sd_mod
 	findmodule usb-storage
     fi
@@ -347,18 +379,28 @@
     fi
 
     if [ -f $modulefile ]; then
-	scsimodules=`grep scsi_hostadapter $modulefile | grep -v '^[ 	]*#' | LC_ALL=C sort -u | awk '{ print $3 }'`
+	scsimodules=`grep -E "alias[ 	]+scsi_hostadapter" $modulefile | grep -v '^[ 	]*#' | LC_ALL=C sort -u | awk '{ print $3 }'`
+	# support probeall form as found with Mandrake 8.1 and superior
+	scsimodules="$scsimodules `sed -n 's/^ *probeall  *scsi_hostadapter//p' $modulefile`"
 
 	if [ -n "$scsimodules" ]; then
-	    for n in $PRESCSIMODS; do
-		findmodule $n
-	    done
+	    SAVEMODULES=$MODULES
+
+	    SAVEMODULESCMP=$MODULES
 
-	    for n in $scsimodules; do
+	    for n in $(for m in $scsimodules; do echo $m; done | awk 'a[$1]=="" {print;a[$1]=1}'); do
     # for now allow scsi modules to come from anywhere.  There are some
     # RAID controllers with drivers in block/
 		findmodule $n
 	    done
+
+	    if [ "$SAVEMODULESCMP" = "$MODULES" ]; then
+		MODULES=$SAVEMODULES
+	    else
+		for n in $POSTSCSIMODS; do
+		    findmodule $n
+		done
+	    fi
 	fi
     fi
 fi
@@ -366,8 +408,6 @@
 # If we have ide devices and module ide, do the right thing
 ide=/proc/ide/ide*
 if [ -n "$ide" ]; then
-    findmodule -ide-mod
-    findmodule -ide-probe-mod
     findmodule -ide-disk
 fi
 
@@ -380,14 +420,6 @@
     fi
 fi
 
-# If we have dasd devices, include the necessary modules (S/390)
-dasd=/proc/dasd/dev*
-if [ -n "$dasd" ]; then
-    findmodule -dasd_mod
-    findmodule -dasd_eckd_mod
-    findmodule -dasd_fba_mod
-fi
-
 if [ -z "$noraid" -a -f /proc/mdstat ]; then
     # load appropriate raid devices if necessary -- we'll load whatever
     # /proc/mdstat suggests
@@ -397,15 +429,10 @@
 		    /proc/mdstat | sort -u); do
 	case $level in
 	linear)
-	    findmodule -md
 	    findmodule linear
 	    startraid=1
 	    ;;
 	raid[0145])
-	    findmodule -md
-	    if [ $level == raid5 ]; then
-		findmodule -xor
-	    fi
 	    findmodule $level
 	    startraid=1
 	    ;;
@@ -423,18 +450,28 @@
 
 # check to see if we need to set up a loopback filesystem
 rootdev=$(awk '/^[ \t]*[^#]/ { if ($2 == "/") { print $1; }}' $fstab)
-if echo $rootdev | cut -d/ -f3 | grep -q loop ; then
-    key="^# $(echo $rootdev | cut -d/ -f3 | tr '[a-z]' '[A-Z]'):"
-    if ! grep "$key" $fstab > /dev/null; then
-	echo "The root filesystem is on a $rootdev, but there is no magic entry in $fstab" 1>&2
-	echo "for this device. Consult the mkinitrd man page for more information" 2>&2
+if [ ${rootdev:0:6} = "LABEL=" ]; then
+    rootdev=${rootdev/LABEL=/}
+    if [ $(e2label /dev/root) = ${rootdev} ]; then
+	rootdev=/dev/root
+    fi
+    echo "rootdev=${rootdev}"
+fi
+fullloopfile=$(awk '$2 == "/" && $4 ~ "loop" { print $1 }' /etc/fstab)
+if [ -n "$fullloopfile" ]; then
+    dir=$fullloopfile
+    while [ -n "$dir" -a -z "$line" ]; do
+        dir=$(dirname $dir)
+	line=$(awk -v dir=$dir '$2 == dir { print $0 }' /etc/fstab)	
+    done
+    if [ -z "$line" -o "$dir" = "/" ]; then
+	echo "bad fstab, loopback file doesn't belong to any device"
 	exit 1
     fi
 
-    line=$(grep "$key" $fstab)
-    loopDev=$(echo $line | awk '{print $3}')
-    loopFs=$(echo $line | awk '{print $4}')
-    loopFile=$(echo $line | awk '{print $5}')
+    loopDev=$(echo $line | awk '{ print $1 }')
+    loopFs=$(echo $line | awk '{print $3 }')
+    loopFile=$(echo $fullloopfile | sed "s|$dir||")
 
     basicmodules="$basicmodules -loop"
     if [ "$loopFs" = "vfat" -o "$loopFs" = "msdos" ]; then
@@ -442,10 +479,13 @@
     fi
     basicmodules="$basicmodules -${loopFs}"
 # check if the root fs is on a logical volume
-elif ! echo $rootdev | cut -c1-6 |grep -q "LABEL=" ; then
-    rootdev=$(echo "readlink $rootdev" | /sbin/nash --quiet)
-    major=`ls -l $rootdev | sed -e "s/.* \\([0-9]\+\\), *[0-9]\+.*/\\1/"`
-    [ "$major" != "58" ] || root_lvm=1
+fi
+
+root_major=$(/bin/ls -l $rootdev | awk '{ print $5 }')
+if [ $root_major = 58, -a -z "$nolvm" ]; then
+    # root is on an LVM LV
+    root_lvm=1
+    findmodule -lvm-mod
 fi
 
 rootfs=$(awk '{ if ($1 !~ /^[ \t]*#/ && $2 == "/") { print $3; }}' $fstab)
@@ -463,43 +503,34 @@
 fi
 
 
-MNTIMAGE=`mktemp -d ${TMPDIR}/initrd.XXXXXX`
-IMAGE=`mktemp ${TMPDIR}/initrd.img.XXXXXX`
-MNTPOINT=`mktemp -d ${TMPDIR}/initrd.mnt.XXXXXX`
+[[ -n $tmpdir ]] && { is_good_fs $tmpdir || tmpdir= ;} #command-line
+[[ -z $tmpdir && -n $TMPDIR ]] && { is_good_fs $TMPDIR || tmpdir= && tmpdir=$TMPDIR ;} #environement
+if [[ -z $tmpdir ]];then
+    if is_good_fs /tmp;then
+	tmpdir=/tmp
+    elif is_good_fs /var/tmp;then
+	tmpdir=/var/tmp
+    elif is_good_fs /root/tmp;then
+	tmpdir=/root/tmp
+    else
+	echo "Cannot find a suitable tmp directory" >&2
+	exit 1
+    fi
+fi
+[[ -n $verbose ]] && echo "Using $tmpdir as temporary directory."
+
+MNTIMAGE=`mktemp -d ${tmpdir}/initrd.XXXXXX`
+IMAGE=`mktemp ${tmpdir}/initrd.img.XXXXXX`
+MNTPOINT=`mktemp -d ${tmpdir}/initrd.mnt.XXXXXX`
 RCFILE=$MNTIMAGE/linuxrc
+# cleanup on exit, hangup, interrupt, quit, termination
+trap 'rm -rf $MNTIMAGE $MNTPOINT $IMAGE' 0 1 2 3 15
 
 if [ -z "$MNTIMAGE" -o -z "$IMAGE" -o -z "$MNTPOINT" ]; then
     echo "Error creating temporaries.  Try again" >&2
     exit 1
 fi
 
-dd if=/dev/zero of=$IMAGE bs=1k count=$IMAGESIZE 2> /dev/null || exit 1
-
-LODEV=$(echo findlodev $modName.o | /sbin/nash --quiet)
-
-if [ -z "$LODEV" ]; then
-    rm -rf $MNTPOINT $IMAGE
-    echo "All of your loopback devices are in use." >&2
-    exit 1
-fi
-
-losetup ${LODEV} $IMAGE || exit 1
-
-# We have to "echo y |" so that it doesn't complain about $IMAGE not
-# being a block device
-echo y | mke2fs $LODEV $IMAGESIZE >/dev/null 2>/dev/null
-tune2fs -i0 $LODEV >/dev/null
-
-if [ -n "$verbose" ]; then
-    echo "Using loopback device $LODEV"
-fi
-
-mkdir -p $MNTPOINT
-mount -t ext2 $LODEV $MNTPOINT || {
-	echo "Can't get a loopback device"
-	exit 1
-}
-
 mkdir -p $MNTIMAGE
 mkdir -p $MNTIMAGE/lib
 mkdir -p $MNTIMAGE/bin
@@ -509,16 +540,27 @@
 mkdir -p $MNTIMAGE/proc
 mkdir -p $MNTIMAGE/sysroot
 ln -s bin $MNTIMAGE/sbin
+# devfs will shadow some of my dev entries, I'll put them here
+mkdir -p $MNTIMAGE/safedev   
 
 # We don't need this directory, so let's save space
 rm -rf $MNTPOINT/lost+found
 
 inst /sbin/nash "$MNTIMAGE/bin/nash"
-inst /sbin/insmod.static "$MNTIMAGE/bin/insmod"
-ln -s /sbin/nash $MNTIMAGE/sbin/modprobe
+if is_dietlibc_arch; then
+    inst /sbin/insmod-DIET "$MNTIMAGE/bin/insmod"
+else
+    inst /sbin/insmod.static "$MNTIMAGE/bin/insmod"
+fi
+ln -s ../bin/nash $MNTIMAGE/sbin/modprobe
 
 for MODULE in $MODULES; do
-    cp $verbose -a /lib/modules/$kernel/$MODULE $MNTIMAGE/lib
+    f="/lib/modules/$kernel/$MODULE"
+    if [ -e $f ]; then
+	cp $verbose -a $f $MNTIMAGE/lib
+    else
+	gunzip -c $f.gz > $MNTIMAGE/lib/`basename $MODULE`
+    fi
 done
 
 # mknod'ing the devices instead of copying them works both with and
@@ -531,16 +573,19 @@
     mknod $MNTIMAGE/dev/tty$i c 4 $i
 done
 
-# FIXME -- this won't work if you're using devfs
 if [ -n "$root_lvm" ]; then
+    if ! grep -q devfs /proc/mounts; then 
     pvs=$(/sbin/lvmdiskscan |grep "0x8E" | /bin/awk {'print $3;'})
     for pv in $pvs; do
 	cp -a $pv $MNTIMAGE/$pv
     done
+    fi
 
-    inst /sbin/vgwrapper "$MNTIMAGE/bin/vgwrapper"
-    ln "$MNTIMAGE/bin/vgwrapper" "$MNTIMAGE/bin/vgscan"
-    ln "$MNTIMAGE/bin/vgwrapper" "$MNTIMAGE/bin/vgchange"
+    cp -aL /sbin/vgchange $MNTIMAGE/sbin
+    cp -aL /sbin/vgscan $MNTIMAGE/sbin
+    cp -aL /lib/libc.so.6 $MNTIMAGE/lib
+    cp -aL /lib/ld-linux.so.2 $MNTIMAGE/lib
+    IMAGESIZE=$[IMAGESIZE + 5000]
 
     mknod $MNTIMAGE/dev/lvm b 109 0
 fi
@@ -575,22 +619,25 @@
 
 if [ -n "$startraid" ]; then
     for dev in $raiddevices; do
-	cp -a /dev/${dev} $MNTIMAGE/dev
-	echo "raidautorun /dev/${dev}" >> $RCFILE
+	cp -aL /dev/${dev} $MNTIMAGE/safedev
+	echo "raidautorun /safedev/${dev}" >> $RCFILE
     done
 fi
 
-echo "echo Creating block devices" >> $RCFILE
-echo "mkdevices /dev" >> $RCFILE
-
 if [ -n "$loopDev" ]; then
-    mkdir /initrd
-    cp -a $loopDev $MNTIMAGE/dev
-    cp -a $rootdev $MNTIMAGE/dev
+    [ -d /initrd ] || mkdir /initrd
+
+    # our dear friend devfsd will create links for us if devfs in use
+    cp -aL $loopDev $MNTIMAGE/safedev
+    cp -aL /dev/loop7 $MNTIMAGE/safedev
+
+    loopDev=`echo $loopDev | sed "s|/dev/|/safedev/|"`
+
     echo "echo Mounting device containing loopback root filesystem" >> $RCFILE
     echo "mount -t $loopFs $loopDev /loopfs" >> $RCFILE
-    echo "echo Setting up loopback device $rootdev" >> $RCFILE
-    echo "losetup $rootdev /loopfs$loopFile" >> $RCFILE
+    echo "echo Setting up loopback device on $loopFile" >> $RCFILE
+    echo "losetup /safedev/loop7 /loopfs$loopFile" >> $RCFILE
+    rootdev=/safedev/loop7
 elif [ -n "$root_lvm" ]; then
     echo "echo Scanning logical volumes" >> $RCFILE
     echo "vgscan" >> $RCFILE
@@ -605,10 +652,13 @@
 if [ -n "$pivot" ]; then
     echo "echo 0x0100 > /proc/sys/kernel/real-root-dev" >> $RCFILE
 
-    echo "echo Mounting root filesystem" >> $RCFILE
+    [ "$rootopts" != "defaults" ] && rootopts_msg="with flags $rootopts"
+    echo "echo Mounting root filesystem $rootopts_msg" >> $RCFILE
     echo "mount -o $rootopts --ro -t $rootfs $rootdev /sysroot" >> $RCFILE
 
     echo "pivot_root /sysroot /sysroot/initrd" >> $RCFILE
+    echo "echo Remounting devfs at correct place if necessary" >> $RCFILE
+    echo "handledevfs" >> $RCFILE
     echo "umount /initrd/proc" >> $RCFILE
 else
     echo "umount /proc" >> $RCFILE
@@ -616,16 +666,48 @@
 
 chmod +x $RCFILE
 
+for i in `/bin/ls -sk $MNTIMAGE/*/* | sed 's/ [^ ]*$//'`; do
+    IMAGESIZE=$[IMAGESIZE + $i]
+done
+NB_INODES=20
+for i in `find $MNTIMAGE`; do NB_INODES=$[NB_INODES + 1]; done
+IMAGESIZE=$[IMAGESIZE + NBFILES / 10]  # 10 inodes needs 1k
+
+dd if=/dev/zero of=$IMAGE bs=1k count=$IMAGESIZE 2> /dev/null
+
+if [ -n "$verbose" ]; then
+    echo "Contents of RCFILE:"
+    cat $RCFILE 2> /dev/null
+    echo "Creating filesystem with size ${IMAGESIZE}KB and $NB_INODES inodes"
+fi
+mke2fs -q -m 0 -F -N $NB_INODES -s 1 $IMAGE
+
+mkdir -p $MNTPOINT
+mount -t ext2 $IMAGE $MNTPOINT -o loop || {
+    echo "Can't get a loopback device" >&2
+    exit 1
+}
+
+# We don't need this directory, so let's save space
+rm -rf $MNTPOINT/lost+found
+
 (cd $MNTIMAGE; tar cf - .) | (cd $MNTPOINT; tar xf -)
 
 umount $MNTPOINT
-losetup -d $LODEV
 
 if [ -n "$compress" ]; then
     gzip -9 < $IMAGE > $target || rc=1
 else
     cp -a $IMAGE $target || rc=1
 fi
-rm -rf $MNTIMAGE $MNTPOINT $IMAGE
+
+if [[ -n "$splash" && -f $splash_dir/scripts/make-boot-splash ]]; then
+    $splash_dir/scripts/make-boot-splash $target $splash
+fi
+
+if [[ -n "$dsdt_file" && -f "$dsdt_file" ]]; then
+    echo -n "INITRDDSDT123DSDT123" >> $target
+    cat "$dsdt_file" >> $target
+fi
 
 exit $rc
--- ./mkinitrd.8.gege	2003-03-05 00:12:22.000000000 +0100
+++ ./mkinitrd.8	2003-09-13 20:50:40.000000000 +0200
@@ -8,7 +8,7 @@
          [--omit-raid-modules] [--omit-lvm-modules] 
          [--with=\fImodule\fR] [--image-version]
          [--fstab=\fIfstab\fR] [--nocompress]
-         [--builtin=\fImodule\fR] [--nopivot]
+         [--builtin=\fImodule\fR] [--nopivot] [--tmpdir=\fItmpdir\fR]
          \fIimage\fR \fIkernel-version\fR
 
 .SH DESCRIPTION
@@ -17,31 +17,18 @@
 used for preloading the block device modules (such as IDE, SCSI or RAID)
 which are needed to access the root filesystem. \fBmkinitrd\fR
 automatically loads filesystem modules (such as ext3 and jbd), IDE modules, all
-\fIscsi_hostadapter\fR entries in \fI/etc/modules.conf\fR, and raid
+\fIscsi_hostadapter\fR entries
+and all modules in a \fIprobeall scsi_hostadapter ..\fR line
+in \fI/etc/modules.conf\fR, and raid
 modules if the system's root partition is on raid, which makes it simple
 to build and use kernels using modular device drivers.
 
 Any module options specified in \fI/etc/modules.conf\fR are passed
 to the modules as they are loaded by the initial ramdisk.
 
-If the root device is on a loop device (such as /dev/loop0), \fBmkinitrd\fR
-will build an initrd which sets up the loopback file properly.
-To do this, the fstab must contain a comment of the form:
-
-    # LOOP0: /dev/hda1 vfat /linux/rootfs
-
-LOOP0 must be the name of the loop device which needs to be configured, in
-all capital lettes. The parameters after the colon are the device which 
-contains the filesystem with the loopback image on it, the filesystem which
-is on the device, and the full path to the loopback image. If the filesystem
-is modular, initrd will automatically add the filesystem's modules to the
-initrd image.
-
 The root filesystem used by the kernel is specified in the boot configuration
 file, as always. The traditional \fBroot=/dev/hda1\fR style device 
-specification is allowed. If a label is used, as in \fBroot=LABEL=rootPart\fR
-the initrd will search all available devices for an ext2 or ext3 filesystem
-with the appropriate label, and mount that device as the root filesystem.
+specification is allowed.
 
 .SH OPTIONS
 .TP
@@ -112,6 +99,12 @@
 \fI/etc/modules.conf\fR. This option may be used as many times as 
 necessary.
 
+.TP
+\fB-\-tmpdir=\fR\fItmpdir\fR
+Use \fItmpdir\fR as temporary directory for mkinitrd operations. The
+underlying filesystem must be capable of doing loopback-mounts, so
+\fBtmpfs\fR and \fBnfs\fR are not (currently) possible.
+
 .SH FILES
 .PD 0
 .TP 20
@@ -132,4 +125,6 @@
 .SH AUTHOR
 .nf
 Erik Troan <ewt@redhat.com>
+Patches for MandrakeSoft by Guillaume Cottenceau <gc at mandrakesoft.com>
+and Pixel <pixel at mandrakesoft.com>.
 .fi
