--- xc/programs/Xserver/hw/xfree86/drivers/ati/radeon_driver.c.3_lcd	Sun Mar  9 23:25:58 2003
+++ xc/programs/Xserver/hw/xfree86/drivers/ati/radeon_driver.c	Mon Mar 10 11:48:11 2003
@@ -1032,6 +1032,7 @@
     info->VOverPlus  = 0;
     info->VSyncWidth = 0;
     info->DotClock   = 0;
+    info->UseBiosDividers = FALSE;
 
     if (info->DisplayType == MT_LCD) {
 	tmp = RADEON_BIOS16(info->FPBIOSstart + 0x40);
@@ -1052,12 +1053,25 @@
 
 	    info->PanelXRes = RADEON_BIOS16(tmp+25);
 	    info->PanelYRes = RADEON_BIOS16(tmp+27);
-	    xf86DrvMsg(0, X_INFO, "Panel Size from BIOS: %dx%d\n",
+	    xf86DrvMsg(pScrn->scrnIndex, X_INFO, "Panel Size from BIOS: %dx%d\n",
 		       info->PanelXRes, info->PanelYRes);
 
 	    info->PanelPwrDly = RADEON_BIOS16(tmp+44);
 	    if (info->PanelPwrDly > 2000 || info->PanelPwrDly < 0)
-		info->PanelPwrDly = 2000;
+	        info->PanelPwrDly = 2000;
+
+	    /* some panels only work well with certain divider combinations.
+	    */
+	    info->RefDivider = RADEON_BIOS16(tmp+46);
+	    info->PostDivider = RADEON_BIOS8(tmp+48);
+	    info->FeedbackDivider = RADEON_BIOS16(tmp+49);
+	    if ((info->RefDivider != 0) && 
+		(info->FeedbackDivider > 3)) {
+		info->UseBiosDividers = TRUE;
+		xf86DrvMsg(pScrn->scrnIndex, X_INFO, 
+			   "BIOS provided dividers will be used.");
+	    }
+
 	    for (i = 0; i < 20; i++) {
 		tmp0 = RADEON_BIOS16(tmp+64+i*2);
 		if (tmp0 == 0) break;
@@ -2150,7 +2164,7 @@
     pScrn->virtualX = pScrn->display->virtualX;
     pScrn->virtualY = pScrn->display->virtualY;
 
-    if (pScrn->monitor->DDC) {
+    if (pScrn->monitor->DDC && !info->UseBiosDividers) {
 	int  maxVirtX = pScrn->virtualX;
 	int  maxVirtY = pScrn->virtualY;
 
@@ -4292,6 +4306,9 @@
     OUTREG(RADEON_FP_GEN_CNTL,          restore->fp_gen_cntl);
 
     if (info->DisplayType == MT_LCD) {
+
+        OUTREG(RADEON_BIOS_5_SCRATCH, restore->bios_5_scratch);
+
 	tmp = INREG(RADEON_LVDS_GEN_CNTL);
 	if ((tmp & (RADEON_LVDS_ON | RADEON_LVDS_BLON)) ==
 	    (restore->lvds_gen_cntl & (RADEON_LVDS_ON | RADEON_LVDS_BLON))) {
@@ -4369,6 +4386,18 @@
     RADEONInfoPtr  info       = RADEONPTR(pScrn);
     unsigned char *RADEONMMIO = info->MMIO;
 
+    if (info->ChipFamily < CHIP_FAMILY_R300) {
+        /* A temporal workaround for the occational blanking on certain laptop panels. 
+           This appears to related to the PLL divider registers (fail to lock?).  
+	   It occurs even when all dividers are the same with their old settings.  
+           In this case we really don't need to fiddle with PLL registers. 
+           By doing this we can avoid the blanking problem with some panels.
+        */
+        if ((restore->ppll_ref_div == (INPLL(pScrn, RADEON_PPLL_REF_DIV) & RADEON_PPLL_REF_DIV_MASK)) &&
+	    (restore->ppll_div_3 == (INPLL(pScrn, RADEON_PPLL_DIV_3) & (RADEON_PPLL_POST3_DIV_MASK | RADEON_PPLL_FB3_DIV_MASK))))
+            return;
+    }
+
     OUTPLLP(pScrn, RADEON_VCLK_ECP_CNTL,
 	    RADEON_VCLK_SRC_SEL_CPUCLK,
 	    ~(RADEON_VCLK_SRC_SEL_MASK));
@@ -4694,6 +4723,7 @@
     save->lvds_gen_cntl        = INREG(RADEON_LVDS_GEN_CNTL);
     save->lvds_pll_cntl        = INREG(RADEON_LVDS_PLL_CNTL);
     save->tmds_pll_cntl        = INREG(RADEON_TMDS_PLL_CNTL);
+    save->bios_5_scratch       = INREG(RADEON_BIOS_5_SCRATCH);
 }
 
 /* Read CRTC2 registers */
@@ -5358,8 +5388,22 @@
 	    save->fp_gen_cntl &= ~(RADEON_FP_FPON | RADEON_FP_TMDS_EN);
     } else {
 	if (info->DisplayType == MT_LCD) {
+	    DevUnion     *pPriv;
+	    RADEONEntPtr  pRADEONEnt;
+	    pPriv = xf86GetEntityPrivate(pScrn->entityList[0],
+					 gRADEONEntityIndex);
+	    pRADEONEnt = pPriv->ptr;
+	    /* BIOS will use this setting to reset displays upon lid close/open.
+	     * Here we let BIOS controls LCD, but the driver will control the external CRT.
+	     */
+	    if (info->Clone || pRADEONEnt->HasSecondary)
+		save->bios_5_scratch = 0x01020201;
+	    else
+		save->bios_5_scratch = orig->bios_5_scratch;
+
 	    save->lvds_gen_cntl |= (RADEON_LVDS_ON | RADEON_LVDS_BLON);
 	    save->fp_gen_cntl   &= ~(RADEON_FP_FPON | RADEON_FP_TMDS_EN);
+
 	} else if (info->DisplayType == MT_DFP)
 	    save->fp_gen_cntl   |= (RADEON_FP_FPON | RADEON_FP_TMDS_EN);
     }
@@ -5552,7 +5596,13 @@
 	    return FALSE;
 	dot_clock = mode->Clock/1000.0;
 	if (dot_clock) {
-	    RADEONInitPLLRegisters(save, &info->pll, dot_clock);
+            if (info->UseBiosDividers) {
+                save->ppll_ref_div = info->RefDivider;
+                save->ppll_div_3   = info->FeedbackDivider | (info->PostDivider << 16);
+                save->htotal_cntl  = 0;
+            }
+            else
+		RADEONInitPLLRegisters(save, &info->pll, dot_clock);
 	} else {
 	    save->ppll_ref_div = info->SavedReg.ppll_ref_div;
 	    save->ppll_div_3   = info->SavedReg.ppll_div_3;
--- xc/programs/Xserver/hw/xfree86/drivers/ati/radeon.h.3_lcd	Sun Mar  9 23:26:16 2003
+++ xc/programs/Xserver/hw/xfree86/drivers/ati/radeon.h	Mon Mar 10 05:11:07 2003
@@ -123,7 +123,7 @@
     CARD32            cap1_trig_cntl;
     CARD32            bus_cntl;
     CARD32            surface_cntl;
-
+    CARD32            bios_5_scratch;
 				/* Other registers to save for VT switches */
     CARD32            dp_datatype;
     CARD32            rbbm_soft_reset;
@@ -319,6 +319,10 @@
     int               VBlank;
     int               PanelPwrDly;
     int               DotClock;
+    int               RefDivider;
+    int               FeedbackDivider;
+    int               PostDivider;
+    Bool              UseBiosDividers;
 
 				/* EDID data using DDC interface */
     Bool              ddc_bios;
