--- zcip-4/zcip.c.alias	2002-09-11 00:58:11.000000000 +0200
+++ zcip-4/zcip.c	2002-10-08 16:12:58.000000000 +0200
@@ -55,11 +55,15 @@
 
 #define RELEASE "4"
 
+#ifndef STORAGE_DIR
+#define STORAGE_DIR "/var/lib/zcip"
+#endif
 
 int output_to_syslog = 0;
 
 struct zc_if {
-    char *if_name;                // string name of the interface (eg eth0, or eth1:0)
+    char *if_name;                // string name of the interface (eg eth0, or eth1)
+    char *if_aname;                // string name of the alias interface (eg eth0:9, or eth1:0)
     struct libnet_link_int *lin;  // our libnet link to the interface we are using
     pcap_t *pcap;                 // the packet capture device
     int pcap_fd;                  // the file descriptor to listen for packets on
@@ -180,7 +184,11 @@
 static void kernel_socketfilter()
 {
 #ifdef SO_ATTACH_FILTER
+#ifdef PF_PACKET
+    int sock = socket(PF_PACKET, SOCK_DGRAM, 0);
+#else
     int	sock = socket (PF_INET, SOCK_DGRAM, 0);
+#endif
     int err;
     struct sock_filter code = BPF_STMT (BPF_RET|BPF_K, 0);
     struct sock_fprog filt = { 1, &code };
@@ -217,7 +225,11 @@
     struct ifreq ifr;
 
 
+#ifdef PF_PACKET
+    sock_fd = socket(PF_PACKET, SOCK_DGRAM, IPPROTO_IP);
+#else
     sock_fd = socket(PF_INET, SOCK_DGRAM, IPPROTO_IP);
+#endif
     if (sock_fd < 0) die("cannot create socket: %s\n", strerror(errno));
 
     strncpy(ifr.ifr_name, this_if->if_name, IFNAMSIZ - 1);
@@ -262,14 +274,44 @@
     int sock_fd;
     struct ifreq ifr;
 
+    // FL [Sun Oct  6 21:57:35 2002]
+    // if the interface is an alias bring up the normal interface first
+    if (this_if->if_name != this_if->if_aname) {
+#ifdef PF_PACKET
+        sock_fd = socket(PF_PACKET, SOCK_DGRAM, IPPROTO_IP);
+#else
+	sock_fd = socket(PF_INET, SOCK_DGRAM, IPPROTO_IP);
+#endif
+	if (sock_fd < 0) die("cannot create main socket: %s\n", strerror(errno));
+
+	strncpy(ifr.ifr_name, this_if->if_name, IFNAMSIZ - 1);
+	ifr.ifr_name[IFNAMSIZ - 1] = (char)NULL;
+
+	// get flags
+	r = ioctl(sock_fd, SIOCGIFFLAGS, &ifr);
+	if (r < 0) die("SIOCGIFFLAGS error in main ifup: %s\n", strerror(errno));
+
+	// set flags to bring interface up
+	ifr.ifr_flags |= IFF_UP;
+	r = ioctl(sock_fd, SIOCSIFFLAGS, &ifr);
+	if (r < 0) die("SIOCSIFFLAGS error in main ifup: %s(%i)\n", strerror(errno),errno);
+	
+	close(sock_fd);
 
+	// special case because an alias device doesn't like to be configured with 0.0.0.0
+	if (this_if->ip.s_addr == htonl(0)) return;
+    }
+
+#ifdef PF_PACKET
+    sock_fd = socket(PF_PACKET, SOCK_DGRAM, IPPROTO_IP);
+#else
     sock_fd = socket(PF_INET, SOCK_DGRAM, IPPROTO_IP);
+#endif
     if (sock_fd < 0) die("cannot create socket: %s\n", strerror(errno));
 
-    strncpy(ifr.ifr_name, this_if->if_name, IFNAMSIZ - 1);
+    strncpy(ifr.ifr_name, this_if->if_aname, IFNAMSIZ - 1);
     ifr.ifr_name[IFNAMSIZ - 1] = (char)NULL;
 
-
     // set address
     ifr.ifr_addr.sa_family = AF_INET;
     ((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr = this_if->ip;
@@ -292,7 +334,7 @@
     r = ioctl(sock_fd, SIOCSIFFLAGS, &ifr);
     if (r < 0) die("SIOCSIFFLAGS error in ifup: %s(%i)\n", strerror(errno),errno);
 
-
+    
     close(sock_fd);
 }
 
@@ -590,7 +632,11 @@
     struct rtentry rte;
 
 
+#ifdef PF_PACKET
+    sock_fd = socket(PF_PACKET, SOCK_DGRAM, IPPROTO_IP);
+#else
     sock_fd = socket(PF_INET, SOCK_DGRAM, IPPROTO_IP);
+#endif
     if (sock_fd < 0) die("cannot create socket: %s\n", strerror(errno));
 
     tmp_ip.s_addr = htonl(0);
@@ -688,7 +734,7 @@
         r = gettimeofday(&start, NULL);
         if (r < 0) die("gettimeofday(): %s\n", strerror(errno));
 
-        // print("sending probe %d for %s\n", (num_probes_done + 1), inet_ntoa(probe_ip));
+        // print("sending probe %d for %s on %s\n", (num_arps_done + 1), inet_ntoa(this_if->ip), this_if->if_name);
 
         r = libnet_write_link_layer(
             this_if->lin,
@@ -696,7 +742,7 @@
             arp_packet,
             LIBNET_ARP_H + LIBNET_ETH_H
         );
-        if (r == -1) die("libnet_write_link_layer(): error in claim_address()\n");
+        if (r == -1) die("libnet_write_link_layer(): error in claim_address() [%s]\n", ll_strerror(errno));
 
         while (1) {
             fd_set readers;
@@ -891,14 +937,14 @@
         if (r < 0) die("gettimeofday(): %s\n", strerror(errno));
 
         // print("sending probe %d for %s\n", (num_probes_done + 1), inet_ntoa(probe_ip));
-
+	 print("sending probe %d for %s\n", (num_probes_done + 1), inet_ntoa(this_if->ip));
         r = libnet_write_link_layer(
             this_if->lin,
             this_if->if_name,
             arp_probe_packet,
             LIBNET_ARP_H + LIBNET_ETH_H
         );
-        if (r == -1) die("libnet_write_link_layer(): error in probe_for_address()\n");
+        if (r == -1) die("libnet_write_link_layer(): error in probe_for_address()[%s]\n", ll_strerror(errno));
 
         while (1) {
             fd_set readers;
@@ -969,15 +1015,26 @@
 //    RETURNS:  0 if an address was found, and -1 if no address was found.
 //              If there's a problem, the function writes an error message
 //              to the syslog and exits with an exit code of 1.
-//
-//      FIXME:  This should probably shell out to an external script,
-//              something like:
-//
-//                  /usr/lib/zcip/zcip-mem (store A.B.C.D|recall)
-//
-int look_for_remembered_address(struct zc_if *this_if) {
+int look_for_remembered_address(struct zc_if *this_if, char * path) {
     // FIXME: temporary hack to "remember" IP address provided on the command line
-    if (this_if->ip.s_addr == htonl(0)) return -1;
+    if (this_if->ip.s_addr == htonl(0)) {
+	if (chdir(path) == 0) {
+	    FILE *fp = fopen(this_if->if_aname, "r");
+
+	    if (fp != NULL) {
+		long l;
+		
+		if (fscanf(fp, "%li", &l) == 1) {
+		    this_if->ip.s_addr = htonl(l);
+		    fclose(fp);
+		    print("Retrieved address %s for %s\n", inet_ntoa(this_if->ip), this_if->if_aname);
+		    return 0;
+		}
+		fclose(fp);
+	    }
+	}
+	return -1;
+    }
     return 0;
 }
 
@@ -997,14 +1054,19 @@
 //    RETURNS:  0 if all went well and the address was committed to
 //              non-volatile storage, -1 if there was a problem and the
 //              address was not saved.
-//
-//      FIXME:  This should probably shell out to an external script,
-//              something like:
-//
-//                  /usr/lib/zcip/zcip-mem (store A.B.C.D|recall)
-//
-int remember_address(struct zc_if *this_if) {
-    print("not storing IP for %s (not implemented yet!)\n", this_if->if_name);
+int remember_address(struct zc_if *this_if, char *path) {
+    if (this_if->ip.s_addr != htonl(0)) {
+	if (chdir(path) == 0) {
+	    FILE *fp = fopen(this_if->if_aname, "w");
+
+	    if (fp != NULL) {
+		fprintf(fp, "%li", ntohl(this_if->ip.s_addr));
+		fclose(fp);
+		print("Stored address %s for %s\n", inet_ntoa(this_if->ip), this_if->if_aname);
+		return 0;
+	    }
+	}
+    }
     return -1;
 }
 
@@ -1244,7 +1306,8 @@
     int r, rand_seed = 0;
     char c;
     char ebuf[LIBNET_ERRBUF_SIZE];
-
+    char *p;
+    
     struct option longopts[] = {
         {"help", no_argument, NULL, 'h' },
 	{"version", no_argument, NULL, 'v' },
@@ -1257,7 +1320,7 @@
     // static allocation of the device, just for now
     struct zc_if interface0;
 
-    interface0.if_name = "eth0";
+    interface0.if_name = "eth0:9";
 
 
     while ((c = getopt_long(argc, argv, "rshi:v",longopts, NULL)) != EOF) {
@@ -1286,6 +1349,21 @@
         }
     }
 
+    // FL [Sun Oct  6 21:43:39 2002]
+    // alias management
+    interface0.if_aname = interface0.if_name;
+
+    if (strchr(interface0.if_name, ':')) {
+	interface0.if_name = strdup(interface0.if_name);
+	
+	if (!interface0.if_name) {
+	    die("strdup");
+	}
+
+	p = strchr(interface0.if_name, ':');
+	*p = '\0';
+    }
+
 #ifdef CHECK_KERNEL_SOCKETFILTERS
     // insist on kernel support for socket filters
     kernel_socketfilter();
@@ -1296,13 +1374,13 @@
     ifup(&interface0);
 
     // initialize libnet link-level access to the network interface
-    interface0.lin = libnet_open_link_interface(interface0.if_name, ebuf);
+    interface0.lin = libnet_open_link_interface(interface0.if_aname, ebuf);
     if (!(interface0.lin)) die("libnet_open_link_interface(\"%s\"): %s\n", interface0.if_name, ebuf);
 
 
     // get the Ethernet address of this interface
     // this will be used to seed the PRNG, and as the source MAC in the ARP probes
-    interface0.my_ea = libnet_get_hwaddr(interface0.lin, interface0.if_name, ebuf);
+    interface0.my_ea = libnet_get_hwaddr(interface0.lin, interface0.if_aname, ebuf);
     if (!(interface0.my_ea)) die("libnet_get_hwaddr(\"%s\"): %s\n", interface0.if_name, ebuf);
 
 
@@ -1320,15 +1398,13 @@
 
     seed_rng(rand_seed ? NULL : interface0.my_ea);
 
-
     // FIXME: temporary hack to "remember" an IP address provided on the command line
     if (optind < argc) {
         r = inet_aton(argv[optind], &(interface0.ip));
         if (r == 0) die("error parsing address: %s\n", argv[optind]);
     }
 
-
-    if (look_for_remembered_address(&interface0) == 0) goto PROBE;
+    if (look_for_remembered_address(&interface0, STORAGE_DIR) == 0) goto PROBE;
 
 PICK:
     pick_random_address(&(interface0.ip));
@@ -1347,7 +1423,7 @@
     start_listening_for_collisions(&interface0);
 
     // use if_name as the default route
-    set_default_route(&interface0);
+    //set_default_route(&interface0);
 
     if (claim_address(&interface0) != 0) {
         ifdown(&interface0);
@@ -1356,7 +1432,7 @@
     }
 
 
-    remember_address(&interface0);
+    remember_address(&interface0, STORAGE_DIR);
 
 
     // fork and exit, to send the application to the background 
