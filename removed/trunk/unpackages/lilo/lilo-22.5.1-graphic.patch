--- lilo-22.5.1/README.graphic.pix	2003-04-02 12:41:36.000000000 +0200
+++ lilo-22.5.1/README.graphic	2003-04-02 12:41:36.000000000 +0200
@@ -0,0 +1,73 @@
+Managing graphic mode with LILO.
+
+This patch is an extension of existing patch to syslinux that have been done
+before. But currently some escape sequence used by syslinux are not compatible
+with LILO and vice-versa.
+
+To build imagen, bmp2mdk script can be used but the input image is restricted
+to BMP not compressed with 126 colors maximun.
+
+SYSLINUX is Copyright 1994-1999 H. Peter Anvin.
+LILO is Copyright 1992-1998 Werner Almesberger.
+LILO is Copyright 1999-2001 John Coffman.
+
+******************************************************************************
+Support of graphic mode is made through escape code for changing video
+mode, inserting image and defining progression bar environment.
+
+graphic extension of LILO are available with ^N escape char (0x0E)
+followed by a byte containing a bit field for using specific extension.
+Just OR as many as you want of this value and include appropriate extension
+code:
+   0x80: VESA mode follow, first low byte followed by high byte. For
+         example 0x01 0x01 for 0x0101 (VESA 640x480x256 colors).
+         Only bankswitched 256 colors are supported for image.
+   0x40: ignored (was in SYSLINUX-GRAPHIC: gotoxy, first Row coordinate
+                  followed by Col coordinate.)
+   0x20: ignored (was in SYSLINUX-GRAPHIC: progress bar indication: lo byte
+                  of Y, hi byte of Y, lo byte of X,
+                  hi byte of X, Height (one byte only),
+                  Width (one byte only) and finally color of pixel.)
+   0x10: seek Y and X: lo byte of Y, hi byte of Y, lo byte of X, hi byte of X.
+   0x08: menu configuration for LILO: lo byte of timerY, hi byte of timerY,
+         lo byte of timerX, hi byte of timerX, background color, foreground
+         color, lo byte of entryY, hi byte of entryY, lo byte of entryX, hi
+         byte of entryX, background color, foreground color, number of Row,
+         line length in chars displayable. NO MORE COMPATIBLE with
+         SYSLINUX-GRAPHIC were it was: seek auto for drawing rect in Y and
+         X direction: hi 4 bits for Y incr, lo 4 bits for X incr,
+         default is 1 and 1. This mode in SYSLINUX-GRAPHIC was not really used
+         so it should be a problem.
+   0x04: putimage, builded by bmp2mdk (escape 0x0E and 0x04 are already in the
+         beginning of the file produced)
+   0x02: putrect: lo byte of Width, hi byte of Width, lo byte of Height, hi
+         byte of Height, color of pixel to draw.
+   0x01: putpixel: color of pixel.
+
+Image, rect and pixel are drawn from current Y and X, so seek to right position
+before. Image has 126 colors maximun reindexed from 0x40 to 0xBF and use a
+palette by default. Other colors are not modified.
+
+When VESA mode has been accepted, only graphic extension are drawn. If VESA
+mode has not been accepted on modified, only characters (and color extension,
+CR/LF) are printed. This means if VESA mode failed, it is still possible to
+print something on the screen, it can be done by concatening a graphic msg
+file with a text version and the right one will be printed.
+
+Since color palette is modifed whenever an image is drawn (unless there are no
+palette in it but the script at the end of this file only manage this such
+image), it is preferable to draw only one image for a screen.
+
+If LILO encounters an error when loading initrd or kernel, text mode 80x25
+is activated before printing the error message. This is the same if the ESC
+key is pressed, command line LILO in text mode is reactivated.
+
+New in LILO 22.1, the graphic patch allow a simple scroll to take place
+if the number of entries is greater than the maximun visible entries, the
+background color chosen is the background of the timer, this means the timer
+must be on an uniform background color identical to where entries are printed.
+
+If you have any questions/enhancements, please send mail
+to <fpons@mandrakesoft.com>.
+
+François Pons.
--- lilo-22.5.1/bmp2mdk.pix	2003-04-02 12:41:36.000000000 +0200
+++ lilo-22.5.1/bmp2mdk	2003-04-02 12:41:36.000000000 +0200
@@ -0,0 +1,172 @@
+#!/usr/bin/perl
+
+#- Build a message file for syslinux-graphic from a BMP file.
+#- Copyright (C) 1999,200,2001 MandrakeSoft (pixel@mandrakesoft.com)
+#-
+#- This program is free software; you can redistribute it and/or modify
+#- it under the terms of the GNU General Public License as published by
+#- the Free Software Foundation; either version 2, or (at your option)
+#- any later version.
+#-
+#- This program is distributed in the hope that it will be useful,
+#- but WITHOUT ANY WARRANTY; without even the implied warranty of
+#- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#- GNU General Public License for more details.
+#-
+#- You should have received a copy of the GNU General Public License
+#- along with this program; if not, write to the Free Software
+#- Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+
+#- usage:
+#-   bmp2mdk <picture.bmp >picture.msg
+#- NB: the input image (colormap indexed) should not have more than 128 colors
+#- and should not be compressed.
+
+#- additional modification, to include some escape sequence for the picture
+#- commented as follow:
+#-   mode:value                   - VESA mode to use, assume graphic if > 0x100,
+#-				    default is 0x101 (ie 640x480 in 256 colors).
+#-   timer:y,x,bg,fg              - timer position and colors (for LILO only).
+#-   entry:y,x,bg,fg,h_chr,w_chr  - entry position, colors and size in chars
+#-				    (for LILO only).
+#-   progress:y,x,h,w,c           - progress bar position, size (h and w in byte
+#-				    only) and color (for SYSLINUX only).
+#-   clear:h,w,c                  - clear before with color c, default is clear
+#-				    640x480 in color 0 (black).
+#- no options assume no addition initcode given.
+#- colors given in the range 0x40 and 0xBF are from picture palette used (shifted).
+
+use strict;
+
+my $initcode_str;
+my %initcode = ( #- this default are running quite nicely with first english LILO image.
+		mode        => 0x101,
+		timer_y     => 0,
+		timer_x     => 0,
+		timer_bg    => 0x00,
+		timer_fg    => 0x0f,
+		entry_y     => 0,
+		entry_x     => 0,
+		entry_bg    => 0x00,
+		entry_fg    => 0x0f,
+		entry_h_chr => 24,
+		entry_w_chr => 22,
+	        progress_y  => 0,
+                progress_x  => 0,
+	        progress_h  => 8,
+		progress_w  => 32,
+		progress_c  => 0x01,
+		clear_w     => 640,
+		clear_h     => 480,
+		clear_color => 0,
+		pos_y       => 0,
+		pos_x       => 0,
+	       );
+foreach (@ARGV) {
+    /^mode:(.*)/  and do { @initcode{qw(mode)} = map { eval "$_" } split /,/, $1; next };
+    /^timer:(.*)/ and do { @initcode{qw(timer_y timer_x timer_bg timer_fg)} = map { eval "$_" } split /,/, $1; next };
+    /^entry:(.*)/ and do { @initcode{qw(entry_y entry_x entry_bg entry_fg entry_h_chr entry_w_chr)} = map { eval "$_" } split /,/, $1; next };
+    /^progress:(.*)/ and do { @initcode{qw(progress_y progress_x progress_h progress_w progress_c)} = map { eval "$_" } split /,/, $1; next };
+    /^clear:(.*)/ and do { @initcode{qw(clear_h clear_w clear_color)} = map { eval "$_" } split /,/, $1; next };
+    /^pos:(.*)/   and do { @initcode{qw(pos_y pos_x)} = map { eval "$_" } split /,/, $1; next };
+    /^initcode$/  and next;
+    die "usage: bmp2mdk [options]
+where [options] are taken from the following list:
+   mode:value                   - VESA mode to use, assume graphic if > 0x100,
+                                  default is 0x101 (ie 640x480 in 256 colors).
+   timer:y,x,bg,fg              - timer position and colors (for LILO only).
+   entry:y,x,bg,fg,h_chr,w_chr  - entry position, colors and size in chars
+                                  (for LILO only).
+   progress:y,x,h,w,c           - progress bar position, size (h and w in byte
+                                  only) and color (for SYSLINUX only).
+   clear:h,w,c                  - clear before with color c, default is clear
+                                  640x480 in color 0 (black).
+   pos:y,x                      - set x,y for next pixmap, default is to (0,0).
+no options assume no addition initcode given.
+colors given in the range 0x40 and 0xBF are from picture palette used (shifted).
+input image should be a 128 colors uncompressed BMP file.
+
+unknown option [$_]\n";
+}
+if (@ARGV) {
+    my ($ext_code, $ext_data) = (0x00, '');
+
+    if ($initcode{mode}) {
+	$ext_code |= 0x80;
+	$ext_data .= pack "v", $initcode{mode};
+    }
+    if ($initcode{timer_y} || $initcode{timer_x} || $initcode{entry_y} || $initcode{entry_x}) {
+	$ext_code |= 0x08;
+	$ext_data .= pack "v2C2 v2C4", @initcode{qw(timer_y timer_x timer_bg timer_fg
+						    entry_y entry_x entry_bg entry_fg entry_h_chr entry_w_chr)};
+    }
+    if ($initcode{progress_y} || $initcode{progress_x}) {
+	$ext_code |= 0x20;
+	$ext_data .= pack "v2C3", @initcode{qw(progress_y progress_x progress_h progress_w progress_c)};
+    }
+    #- always set up clear.
+    $ext_code |= 0x02;
+    $ext_data .= pack "v2C", @initcode{qw(clear_w clear_h clear_color)};
+
+    print "\x0e";
+    print pack "C", $ext_code;
+    print $ext_data;
+
+    #- always set up pos too but in separate coded.
+    print "\x0e\x10";
+    print pack "v2", @initcode{qw(pos_y pos_x)};
+}
+
+undef $/;
+my $f = <STDIN>;
+
+my ($width, $height, $nbcolors) = unpack "x18 V V x20 V", $f;
+
+my $s = $nbcolors * 4;
+my ($palette, $image) = unpack "x54 a$s a*", $f;
+my @palette = unpack("C3x" x $nbcolors, $palette);
+
+for (my $i = 0; $i < 3 * $nbcolors; $i += 3) {
+    ($palette[$i], $palette[$i + 2]) = ($palette[$i + 2], $palette[$i]);
+}
+
+print "\x0e\x04";
+print pack "v v C C" . "C3" x $nbcolors, $width, $height, $nbcolors, 0, @palette;
+
+my $width_ = 4 * int (($width + 3) / 4);
+my ($oldv, $nb) = (-1024, 0);
+
+for (my $i = 0; $i < $height; $i++) {
+    for (my $j = 0; $j < $width; $j++) {
+	my $v = vec $image, ($height - $i - 1) * $width_+ $j, 8;
+	$v >= 128 and die "cannot use more than 128 colors in input file\n";
+
+	if ($v == $oldv) {
+	    $nb++;
+	} else {
+	    while ($nb > 129) {
+		print pack "C", 0xFF;
+		$nb -= 129;
+	    }
+	    if ($nb > 1) { #- necessary <= 129 here
+		print pack "C", (0x80 | ($nb - 2));
+	    } elsif ($nb == 1) {
+		print pack "C", $oldv;
+	    }
+	    print pack "C", $v;
+	    $oldv = $v;
+	    $nb = 0;
+	}
+    }
+}
+while ($nb > 129) {
+    print pack "C", 0xFF;
+    $nb -= 129;
+}
+if ($nb > 1) { #- necessary <= 129 here
+    print pack "C", (0x80 | ($nb - 2));
+} elsif ($nb == 1) {
+    print pack "C", $oldv;
+}
+
+1;
--- lilo-22.5.1/lilo.h.pix	2003-03-16 18:53:24.000000000 +0100
+++ lilo-22.5.1/lilo.h	2003-04-02 12:41:36.000000000 +0200
@@ -269,7 +269,7 @@
 #define DC_MAGIC	0xf4f2	/* magic number of default cmd. line sector */
 #define DC_MGOFF	0x6b6d	/* magic number for disabled line */
 
-#define MAX_MESSAGE	65535	/* maximum message length */
+#define MAX_MESSAGE	8*64*1024-1	/* maximum message length */
 #define MAX_MENU_TITLE	37	/* maximum MENU title length */
 
 #define NEW_HDR_SIG	"HdrS"	/* setup header signature */
--- lilo-22.5.1/mdk_graphic.S.pix	2003-04-02 12:41:36.000000000 +0200
+++ lilo-22.5.1/mdk_graphic.S	2003-04-02 12:41:36.000000000 +0200
@@ -0,0 +1,791 @@
+#if 0
+;Copyright 2000 MandrakeSoft <fpons@mandrakesoft.com>
+;
+;This is free software and may be redistributed under the terms of LILO itself
+;which is available in file COPYRIGHT distributed with LILO.
+#endif
+;
+
+; tempory data that only need to be stored in a non used space
+#define VESA_modeattr_reloc	0x500
+#define VESA_winattrA_reloc	0x502
+#define VESA_winattrB_reloc	0x503
+#define VESA_wingran_reloc	0x504
+#define VESA_winsz_reloc	0x506
+#define VESA_winsegA_reloc	0x508
+#define VESA_winsegB_reloc	0x50a
+#define VESA_farwinpos_reloc	0x50c
+#define VESA_byteline_reloc	0x510
+
+#define ExtImagePal		0x520
+
+; copied from crt.S and modified for graphical adaptation
+; arrow
+;
+;   Code that handles the arrow keys:  left, up, down, right
+;
+;
+arrow:	cbw				; signed delta vector in AL
+	mov	dx,[dimage]		;
+	add	dx,ax			; new position
+	or	dx,dx
+	jns	arr1
+arr0:	xor	dx,dx			; set to zero if neg.
+arr1:	mov	ax,[nimage]
+	cmp	dx,ax			; compare to max.
+	jb	arr2
+	mov	dx,ax
+	dec	dx
+arr2:					; we know the one to hi-lite is in range
+	mov	ax,[dimage]
+	cmp	ax,dx
+	je	arr_vector
+
+	call	lowlite			; un-hilite the old
+	xchg	ax,dx
+	call	hilite_and_scroll	; hilite the selection and scroll if needed
+
+null:	mov	al,#1
+	cmp	ah,#0x50		; down arrow
+	je	arrow
+
+	neg	al
+	cmp	ah,#0x48		; up arrow
+	je	arrow
+
+	mov	dx,[nimage]
+	cmp	ah,#0x4f		; end
+	je	arr1
+
+	cmp	ah,#0x47		; home
+	je	arr0
+
+arr_vector:
+	br	input		; ignore the rest
+
+; copied from crt.S and modified for graphical adaptation
+; timer_display:
+;	check the timer 'cntdown' and display changes
+;
+timer_display:
+	pusha
+
+	mov	dx,#0x2d2d	; get "--" means disabled
+	mov	[tim_min],dx
+	mov	[tim_sec],dx
+	mov	ax,[cntdown]	; get timer countdown location
+	cmp	ax,[tim_tick]
+	je	timer99
+	mov	[tim_tick],ax	; save last tick count	
+	inc	ax
+	jz	timer8
+
+	mul	c55		; get time remaining in ms.
+	div	c1000		; convert to seconds
+	xor	dx,dx
+	div	c60		; minutes in AX, seconds in DX	
+	aam
+	add	ax,#0x3030
+	xchg	ah,al
+	mov	[tim_min],ax	; put characters in buffer
+	xchg	ax,dx
+	aam
+	add	ax,#0x3030
+	xchg	ah,al
+	mov	[tim_sec],ax	; put characters in buffer
+
+timer8:
+	mov	dx,[TimerY]
+	mov	cx,[TimerX]
+	mov	bh,#1
+	mov	si,#tim_min
+	mov	di,#tim_old
+	mov	ah,#5
+timer91:
+	mov	al,(si)
+	cmp	al,(di)
+	je	timer92
+	mov	bl,[TimerBgColor]
+	xchg	si,di
+	call	putstring
+	mov	bl,[TimerFgColor]
+	xchg	si,di
+	call	putstring
+	mov	(di),al
+timer92:
+	inc	si
+	inc	di
+	add	cx,#8
+	dec	ah
+	jnz	timer91
+timer99:
+	popa
+	ret
+
+tim_min: db	0,0
+	.ascii	":"
+tim_sec: db	0,0
+
+tim_old: .ascii	"*****"
+tim_tick: dw	0		; last timer tick value examined
+
+c55:	.word	55
+c1000:	.word	1000
+c60:	.word	60
+
+menu_setup:
+		push	ax
+		push	bx
+		push	ds
+		push	cs
+		pop	ds
+		xor	ax,ax
+		mov	bx,#DESCR0
+menu_setup_1:	cmp	ah,(bx)
+		je	menu_setup_2
+		add	bx,#id_size
+		inc	al
+		cmp	ax,#IMAGES
+		jb	menu_setup_1
+menu_setup_2:	mov	[nimage],ax		; computed number of image to boot
+		mov	bl,[EntryBgColor]
+		mov	bh,#8			; ghost color
+		call	menu_redraw
+		mov	ax,[dimage]
+		call	hilite_and_scroll
+		pop	ds
+		pop	bx
+		pop	ax
+		ret
+
+; menu_redraw
+;	redraw entire menu with a given color in BL and ghost color in BH.
+;	make sure DS==CS for this function.
+menu_redraw:
+		push	ax
+		push	cx
+		push	dx
+		push	si
+		mov	si,#DESCR0
+		mov	cx,[vimage]
+		test	cx,cx
+		jz	menu_redraw_2
+menu_redraw_1:	add	si,#id_size
+		dec	cx
+		jnz	menu_redraw_1
+menu_redraw_2:	mov	ax,[EntryCount]
+		mov	cx,[EntryX]
+		mov	dx,[EntryY]
+menu_redraw_3:	call	putstring_menu_ghost
+		add	dx,#16
+		add	si,#id_size
+		cmp	ah,(si)
+		je	menu_redraw_4
+		dec	al
+		jne	menu_redraw_3
+menu_redraw_4:	pop	si
+		pop	dx
+		pop	cx
+		pop	ax
+		ret
+
+; 
+; copied from crt.S and modified for graphical adaptation
+; hilite_and_scroll/lowlite
+;	enter with:
+;		AX = number [0..(nimage-1)] of entry to hilite
+;
+hilite_and_scroll:
+		pusha
+		mov	[dimage],ax		; remember the latest
+		sub	ax,[vimage]		; convert to visible image index
+		jb	hilite_and_scroll_down
+		cmp	ax,[EntryCount]
+		jb	hilite
+hilite_and_scroll_up:
+		sub	ax,[EntryCount]
+		inc	ax
+hilite_and_scroll_down:
+		mov	bx,[nimage]
+		add	ax,[vimage]
+		sub	bx,[EntryCount]
+		cmp	ax,bx
+		jb	hilite_set_vimage
+		mov	ax,bx
+hilite_set_vimage:
+		mov	bl,[TimerBgColor]
+		mov	bh,bl
+		call	menu_redraw
+		mov	[vimage],ax
+		sub	ax,[dimage]
+		neg	ax
+		mov	bl,[EntryBgColor]
+		mov	bh,#8			; ghost color
+		call	menu_redraw
+hilite:		mov	bl,[EntryFgColor]
+		jmp	nextlite
+
+; lowlite en entry already visible on screen (so only if previously hilite'ed)
+lowlite:
+		pusha
+		sub	ax,[vimage]
+		mov	bl,[EntryBgColor]
+nextlite:	mov	si,#DESCR0
+		mov	cx,[vimage]
+		test	cx,cx
+		jz	nextlite_2
+nextlite_1:	add	si,#id_size
+		dec	cx
+		jnz	nextlite_1
+nextlite_2:	mov	dx,[EntryY]
+		mov	cx,[EntryX]
+		mov	bh,#8			; ghost color
+		or	ax,ax
+		jz	nextlite_4
+nextlite_3:	add	dx,#16
+		add	si,#id_size
+		dec	ax
+		jnz	nextlite_3
+nextlite_4:	call	putstring_menu_ghost
+		popa
+		ret
+
+; putstring_menu_ghost
+;	enter with same as putstring below but write a gray ghost before.
+putstring_menu_ghost:
+	push	bx
+	mov	bl,bh
+	mov	bh,[EntryMaxLength]
+	inc	cx
+	inc	dx
+	call	putstring
+	dec	dx
+	dec	cx
+	pop	bx
+	push	bx
+	mov	bh,[EntryMaxLength]
+	call	putstring
+	pop	bx
+	ret
+
+; putstring
+;	enter with:
+;		BL=color
+;		BH=max char to print up to <null char>, 0 is no limit
+;		CX=X
+;		DX=Y
+;		DS:SI=string
+;
+putstring:
+	pusha
+	push	es
+	push	bx
+	push	cx
+	push	dx
+	mov	bh,#6
+	mov	ax,#0x1130
+	int	0x10		; es:bp is pointer to table of (<font_data> x 16)
+	pop	dx
+	pop	cx
+	pop	bx
+putstring_next_char:
+	lodsb
+	test	al,al
+	jz	putstring_ret
+	push	bp
+	mov	di,#16
+	xor	ah,ah
+	shl	ax,#4
+	add	bp,ax
+putstring_draw_char:
+	mov	ah,#8
+	seg	es
+	mov	al,(bp)
+	inc	bp
+putstring_draw_char_1:
+	shl	al,#1
+	jnc	putstring_draw_char_2
+	push	ax
+	push	cx
+	push	dx
+	push	di
+	push	es
+	seg	cs
+	mov	es,[VESA_winsegA]
+	call	putpixel
+	pop	es
+	pop	di
+	pop	dx
+	pop	cx
+	pop	ax
+putstring_draw_char_2:
+	inc	cx
+	dec	ah
+	jnz	putstring_draw_char_1
+	inc	dx
+	sub	cx,#8
+	dec	di
+	jnz	putstring_draw_char
+	pop	bp			; restore original BP where is char table 8x16
+	add	cx,#8
+	sub	dx,#16
+	dec	bh
+	jnz	putstring_next_char
+putstring_ret:
+	pop	es
+	popa
+	ret
+
+set_text_mode:
+		pusha
+		mov	ax,#3
+		int	0x10			; reset display
+		seg	cs
+		mov	byte [UseVESA],#0
+		seg	cs
+		mov	word [NextCharJump],#msg_normal
+		popa
+		ret
+
+; below this point are procedure that are only called with ES=DS=CS and all regs saved.
+
+set_mode:	test bh,bh
+		jnz set_mode_vesa
+		mov ax,bx
+		cmp al,#0x13			; take care of 320x200 in 256 colors
+		jnz set_mode_text		; assume a standard BIOS mode (assume text)
+		int 0x10
+		mov byte [UseVESA],#1
+		mov word [VESA_winsegA],#0xA000
+		mov word [VESA_byteline],#320
+		mov word [VESA_wingran_reloc],#0
+		mov word [ExtPage],#0
+		ret
+set_mode_text:	int 0x10
+set_mode_ret:	mov byte [UseVESA],#0
+		ret
+set_mode_vesa:	mov cx,bx
+		mov di,#VESA_modeattr_reloc
+		xor ax,ax
+		mov es,ax
+		mov ax,#0x4F01			; get video mode information in 500h
+		int 0x10
+		seg es
+		mov ax,[VESA_modeattr_reloc]
+		and ax,#0x51			; check for mode supported, graphics, bank switched supported
+		cmp ax,#0x11
+		jnz set_mode_ret		; hope it is enough
+		mov ax,#0x4F02			; initialize vesa mode, bx=mode
+		int 0x10
+		sub ax,#0x004F			; al=4f if implemented, ah=0 if Ok
+		jnz set_mode_ret
+		inc al
+		mov [UseVESA],al		; 1 if ok (0 is not ok as default)
+		seg es
+		mov ax,[VESA_winsegA_reloc]
+		mov [VESA_winsegA],ax
+		seg es
+		mov ax,[VESA_byteline_reloc]
+		mov [VESA_byteline],ax
+		seg es
+		mov ax,[VESA_wingran_reloc]
+		mov [VESA_wingran],ax
+		ret
+
+; specific entry point for inside setup function.
+msg_ext_set_mode_lo:
+		mov [ModeLo],al
+		mov word [NextCharJump],#msg_ext_set_mode_hi
+		ret
+msg_ext_timer_y_lo:
+		mov byte [TimerY],al
+		mov word [NextCharJump],#msg_ext_timer_y_hi
+		ret
+msg_ext_timer_y_hi:
+		mov byte [TimerY+1],al
+		mov word [NextCharJump],#msg_ext_timer_x_lo
+		ret
+msg_ext_timer_x_lo:
+		mov byte [TimerX],al
+		mov word [NextCharJump],#msg_ext_timer_x_hi
+		ret
+msg_ext_timer_x_hi:
+		mov byte [TimerX+1],al
+		mov word [NextCharJump],#msg_ext_timer_bg
+		ret
+msg_ext_timer_bg:
+		mov byte [TimerBgColor],al
+		mov word [NextCharJump],#msg_ext_timer_fg
+		ret
+msg_ext_timer_fg:
+		mov byte [TimerFgColor],al
+		mov word [NextCharJump],#msg_ext_entry_y_lo
+		ret
+msg_ext_entry_y_lo:
+		mov byte [EntryY],al
+		mov word [NextCharJump],#msg_ext_entry_y_hi
+		ret
+msg_ext_entry_y_hi:
+		mov byte [EntryY+1],al
+		mov word [NextCharJump],#msg_ext_entry_x_lo
+		ret
+msg_ext_entry_x_lo:
+		mov byte [EntryX],al
+		mov word [NextCharJump],#msg_ext_entry_x_hi
+		ret
+msg_ext_entry_x_hi:
+		mov byte [EntryX+1],al
+		mov word [NextCharJump],#msg_ext_entry_bg
+		ret
+msg_ext_entry_bg:
+		mov byte [EntryBgColor],al
+		mov word [NextCharJump],#msg_ext_entry_fg
+		ret
+msg_ext_entry_fg:
+		mov byte [EntryFgColor],al
+		mov word [NextCharJump],#msg_ext_entry_count
+		ret
+msg_ext_entry_count:
+		mov byte [EntryCount],al
+		mov word [NextCharJump],#msg_ext_entry_max_length
+		ret
+msg_ext_seek_y_lo:
+		mov byte [ExtY],al
+		mov word [NextCharJump],#msg_ext_seek_y_hi
+		ret
+msg_ext_seek_y_hi:
+		mov byte [ExtY+1],al
+		mov word [NextCharJump],#msg_ext_seek_x_lo
+		ret
+msg_ext_seek_x_lo:
+		mov byte [ExtX],al
+		mov word [NextCharJump],#msg_ext_seek_x_hi
+		ret
+msg_ext_putrect_w_lo:
+		mov [ExtPutRectW],al
+		mov word [NextCharJump],#msg_ext_putrect_w_hi
+		ret
+msg_ext_putrect_w_hi:
+		mov [ExtPutRectW+1],al
+		mov word [NextCharJump],#msg_ext_putrect_h_lo
+		ret
+msg_ext_putrect_h_lo:
+		mov [ExtPutRectH],al
+		mov word [NextCharJump],#msg_ext_putrect_h_hi
+		ret
+msg_ext_putrect_h_hi:
+		mov [ExtPutRectH+1],al
+		mov word [NextCharJump],#msg_ext_putrect_raw
+		ret
+
+; global entry point for extended code dispatcher,
+; compatible with syslinux graphic patch.
+msg_ext:
+		mov	byte [ExtByte],al
+msg_ext_multiplex:
+		mov	ah,#0x80
+		mov	al,[ExtByte]
+msg_ext_mul_1:
+		test	ah,al
+		jnz	msg_ext_mul_2
+		shr	ah,#1
+		jnz	msg_ext_mul_1
+		mov	bx,#msg_normal
+msg_ext_ret:
+		mov	[NextCharJump],bx
+		ret
+msg_ext_mul_2:
+		xor [ExtByte],ah		; Clear bit
+		mov bx,#msg_ext_set_mode_lo	; set VESA mode
+		cmp ah,#0x80
+		jz msg_ext_ret
+		mov bx,#msg_ext_ignore
+		mov byte [IgnoreCount],#2
+		cmp ah,#0x40
+		jz msg_ext_ret
+		mov bx,#msg_ext_ignore
+		mov byte [IgnoreCount],#7
+		cmp ah,#0x20
+		jz msg_ext_ret
+		mov bx,#msg_ext_seek_y_lo
+		cmp ah,#0x10
+		jz msg_ext_ret
+		mov bx,#msg_ext_timer_y_lo
+		cmp ah,#0x08
+		jz msg_ext_ret
+		mov bx,#msg_ext_putimage
+		cmp ah,#0x04
+		jz msg_ext_ret
+		mov bx,#msg_ext_putrect_w_lo
+		cmp ah,#0x02
+		jz msg_ext_ret
+		mov bx,#msg_ext_putrect_raw
+		cmp ah,#0x01
+		jz msg_ext_ret
+		mov bx,#msg_normal
+		jmp msg_ext_ret
+
+msg_ext_ignore:
+		dec byte [IgnoreCount]
+		jz msg_ext_multiplex
+		ret
+msg_ext_set_mode_hi:
+		mov bh,al
+		mov bl,[ModeLo]
+		call set_mode
+msg_ext_follow_multiplex:
+		jmp msg_ext_multiplex
+msg_ext_entry_max_length:
+		mov byte [EntryMaxLength],al
+		jmp msg_ext_follow_multiplex
+msg_ext_seek_x_hi:
+		mov byte [ExtX+1],al
+		jmp msg_ext_follow_multiplex
+msg_ext_putrect_raw:
+		test byte [UseVESA],#1
+		jz msg_ext_putrect_raw_ret
+		mov es,[VESA_winsegA]
+		mov bx,ax
+msg_ext_putrect_raw_loop_y:
+		mov si,[ExtPutRectW]
+		mov cx,[ExtX]
+msg_ext_putrect_raw_loop_x:
+		mov dx,[ExtY]
+		push cx
+		call putpixel
+		pop cx
+		inc cx
+		dec si
+		jnz msg_ext_putrect_raw_loop_x
+
+		inc word [ExtY]
+		dec word [ExtPutRectH]
+		jnz msg_ext_putrect_raw_loop_y
+
+		mov ax,#1			; Restore default value
+		mov [ExtPutRectW],ax
+		mov [ExtPutRectH],ax
+		mov word [NextCharJump],#msg_normal
+msg_ext_putrect_raw_ret:
+		ret
+
+getpixel_addr:					; putpixel is DS usage clean (as putstring call it)
+		seg cs
+		mov ax,[VESA_byteline]
+		mul dx				; DX=rows, CX=cols, BL=color, only BX saved
+		add ax,cx
+		adc dx,#0
+		seg cs
+		mov cx,[VESA_wingran]
+		shl cx,#10
+		jz getpixel_64k_page		; in case of 64Kb of granularity => cx=0
+		div cx
+		xchg ax,dx
+getpixel_64k_page:
+		seg cs
+		cmp dx,[ExtPage]
+		jz getpixel_ret
+		push bx
+		push ax
+		seg cs
+		mov [ExtPage],dx
+		xor bx,bx
+		mov ax,#0x4F05
+		int 0x10
+		pop ax
+		pop bx
+getpixel_ret:
+		mov di,ax
+		ret
+putpixel:	call getpixel_addr
+		mov ax,bx
+		stosb
+		ret
+
+msg_ext_putimage:
+		mov word [ExtImagePixel],#0
+msg_ext_putimage_w_lo:
+		mov [ExtImageW],al
+		mov word [NextCharJump],#msg_ext_putimage_w_hi
+		ret
+msg_ext_putimage_w_hi:
+		mov [ExtImageW+1],al
+		mov word [NextCharJump],#msg_ext_putimage_h_lo
+		ret
+msg_ext_putimage_h_lo:
+		mov [ExtImageH],al
+		mov word [NextCharJump],#msg_ext_putimage_h_hi
+		ret
+msg_ext_putimage_h_hi:
+		mov [ExtImageH+1],al
+		mov word [NextCharJump],#msg_ext_putimage_c
+		ret
+msg_ext_putimage_c:
+		xor ah,ah
+		mov [ExtImageC],ax
+		mov word [NextCharJump],#msg_ext_putimage_cy
+		ret
+msg_ext_putimage_cy:
+		xor ah,ah
+		mov [ExtImageCY],ax
+		mov word [NextCharJump],#msg_ext_putimage_pal_r
+		ret
+msg_ext_putimage_pal_index:
+		mov bx,[ExtImagePixel]
+		mov cx,bx
+		shl bx,#1
+		add bx,cx
+		shr al,#2
+		ret
+msg_ext_putimage_pal_r:
+		call msg_ext_putimage_pal_index
+		xor cx,cx
+		mov es,cx
+		seg es
+		mov [ExtImagePal](bx),al
+		mov word [NextCharJump],#msg_ext_putimage_pal_g
+		ret
+msg_ext_putimage_pal_g:
+		call msg_ext_putimage_pal_index
+		xor cx,cx
+		mov es,cx
+		seg es
+		mov [ExtImagePal+1](bx),al
+		mov word [NextCharJump],#msg_ext_putimage_pal_b
+		ret
+msg_ext_putimage_pal_b:
+		call msg_ext_putimage_pal_index
+		xor cx,cx
+		mov es,cx
+		seg es
+		mov [ExtImagePal+2](bx),al
+		mov bx,[ExtImagePixel]
+		inc bx
+		mov [ExtImagePixel],bx
+		cmp bx,[ExtImageC]
+		jb msg_ext_putimage_pal_loop
+		call msg_ext_putimage_set_colormap
+		xor ax,ax
+		mov [ExtImageX],ax
+		mov [ExtImageY],ax
+		or ax,[ExtImageCY]
+		jnz msg_ext_putimage_pal_cy
+msg_ext_putimage_cy_raw:
+		mov word [NextCharJump],#msg_ext_putimage_raw
+msg_ext_putimage_ret:
+		ret
+msg_ext_putimage_pal_loop:
+		mov word [NextCharJump],#msg_ext_putimage_pal_r
+		ret
+msg_ext_putimage_pal_cy:
+		mov word [NextCharJump],#msg_ext_putimage_cy_loop
+		ret
+
+msg_ext_putimage_cy_loop:
+		mov bx,[ExtImagePixel]
+		inc bx
+		mov [ExtImagePixel],bx
+		cmp bx,[ExtImageCY]
+		jae msg_ext_putimage_cy_raw
+		ret
+
+msg_ext_putimage_set_colormap:			; not called directly, no need to save regs and DS=CS
+		test byte [UseVESA],#1		; Silence if not VESA
+		jz msg_ext_putimage_set_colormap_ret
+		xor ax,ax			; set tempory data register at 00000
+		mov es,ax
+		mov ax,#0x1012
+		mov bx,#0x0040
+		mov cx,[ExtImageC]
+		mov dx,#ExtImagePal
+		int 0x10
+msg_ext_putimage_set_colormap_ret:
+		ret
+
+msg_ext_putimage_raw:
+		test byte [UseVESA],#1		; Silence if not VESA
+		jz msg_ext_putimage_set_colormap_ret
+		mov es,[VESA_winsegA]
+		test al,#0x80
+		jnz msg_ext_putimage_raw_dup
+		mov [ExtImagePixel],al		; Save current pixel for looping
+		;; fall through
+msg_ext_putimage_raw_pixel:
+		mov cx,[ExtImageX]
+		mov dx,[ExtImageY]
+		add cx,[ExtX]
+		add dx,[ExtY]
+		mov bl,[ExtImagePixel]
+		add bl,#0x40
+		call putpixel
+		mov ax,[ExtImageX]
+		inc ax
+		cmp ax,[ExtImageW]
+		jb msg_ext_putimage_raw_pixel_cont
+		mov ax,[ExtImageY]
+		inc ax
+		mov [ExtImageY],ax
+		cmp ax,[ExtImageH]
+		jb msg_ext_putimage_raw_pixel_newline
+		mov word [NextCharJump],#msg_normal
+		ret
+msg_ext_putimage_raw_pixel_newline:
+		xor ax,ax
+msg_ext_putimage_raw_pixel_cont:
+		mov [ExtImageX],ax
+		ret
+
+msg_ext_putimage_raw_dup:
+		xor ah,ah
+		add al,#0x82
+msg_ext_putimage_raw_dup_loop:
+		push ax
+		call msg_ext_putimage_raw_pixel
+		pop ax
+		cmp word [NextCharJump],#msg_normal
+		jnz msg_ext_putimage_raw_dup_doloop
+		mov ax,#0x0001			; Avoid writing more than available image zone
+msg_ext_putimage_raw_dup_doloop:
+		dec ax
+		jnz msg_ext_putimage_raw_dup_loop
+		ret
+
+dimage:		dw	0	; default image
+vimage:		dw	0	; first visible image
+nimage:		dw	0	; number of images
+
+NextCharJump:		dw msg_normal
+UseVESA:		db 0			; Use of VESA mode (0=no,1=yes) because of bitop
+ModeLo:			db 0			; For setting VESA mode from message file
+ExtByte:		db 0			; Extended code
+IgnoreCount:		db 0			; byte to ignore, to keep compability with syslinux-graphic
+ExtY:			dw 0			; Extended Y
+ExtX:			dw 0			; Extended X
+ExtPutRectW:		dw 1			; Extended putrect Width
+ExtPutRectH:		dw 1			; Extended putrect Height
+ExtPage:		dw -1			; Extended page for high resolution
+
+TimerY:			dw 456
+TimerX:			dw 592
+TimerBgColor:		db 0
+TimerFgColor:		db 0x0f
+EntryY:			dw 8
+EntryX:			dw 504
+EntryBgColor:		db 12
+EntryMaxLength:		db 16
+EntryFgColor:		db 15
+EntryCount:		db 27
+			dw 0
+ExtImageW:		dw 0
+ExtImageH:		dw 0
+ExtImageC:		dw 0
+ExtImageCY:		dw 0
+ExtImageX:		dw 0
+ExtImageY:		dw 0
+ExtImagePixel:		dw 0
+
+VESA_wingran:		dw 0
+VESA_winsegA:		dw 0
+VESA_byteline:		dw 0
+
+; end of mdk_graphic.S
--- lilo-22.5.1/second.S.pix	2003-03-14 23:17:02.000000000 +0100
+++ lilo-22.5.1/second.S	2003-04-02 12:44:08.000000000 +0200
@@ -450,9 +450,11 @@
 
 virtual_done:
 #endif
-#if defined(MENU) || defined(BITMAP)
+#if defined(MENU) || defined(BITMAP) || defined(MDK_GRAPHIC)
 	xor	bx,bx		! defaults are all zero
 	mov	[dimage],bx	! set default image to boot
+#endif
+#if defined(MENU) || defined(BITMAP)
 	mov	[abs_cx],bx	! upper left of scroll area
 				! means screen is not cleared
 #endif
@@ -586,7 +588,8 @@
 	seg	es
 	cmp	byte ptr (si),#0 ! empty ?
 	je	iloop		! yes -> enter interactive mode
-	jmp	niloop		! enter non-interactive mode
+niloop_go:
+	br	niloop		! enter non-interactive mode
 
 ! No external parameters after timeout -> boot first image
 
@@ -594,7 +597,7 @@
 	pop	es
 	mov	si,#DFLCMD+2	! default command line ?
 	cmp	byte ptr (si),#0
-	jne	niloop		! yes -> use it
+	jne	niloop_go	! yes -> use it
 	mov	ax,nodfl	! no idea how to tell as86 to do jmp (addr) :-(
 	jmp	ax		! fall through
 
@@ -631,9 +634,42 @@
 
 	push	#SYSSEG
 	pop	ds
+
+#ifdef MDK_GRAPHIC
+	xor	eax,eax				; es:bx is first byte after reading file
+	mov	ax,es
+	sub	ax,#SYSSEG
+	shl	eax,4
+	movzx	ebx,bx
+	add	eax,ebx
+	;; now eax contains the message length.
+	xor	si,si
+saybin:	push	eax				; i810 BIOS typically modify high 16 bits of register.
+	lodsb
+	call	display
+	pop	eax
+	dec	eax
+	jz	saybin_eof
+	test	si,si
+	jnz	saybin
+	mov	si,ds
+	add	si,#0x1000
+	mov	ds,si
+	xor	si,si
+	jmp	saybin
+saybin_eof:
+	seg	cs
+	test	byte [UseVESA],#1
+	jz	restore_segs
+	call	menu_setup	! setup menu for graphic engine once parameters have been defined
+restore_segs:
+	seg	cs
+	mov	word [NextCharJump],#msg_normal
+#else
 	mov	byte ptr (bx),#0
 	xor	bx,bx		! display the message
 	call	say
+#endif
 
 	push	cs		! restore segment registers
 	pop	ds
@@ -668,6 +704,14 @@
 	inc	si
 	jmp	gotinp		! go on
 	
+#ifdef MDK_GRAPHIC
+switch_text:
+	seg	cs
+	test	byte [UseVESA],#1
+	jz	input
+	call	set_text_mode
+#endif
+
 tolist:
 #ifdef BITMAP
 	call	menu_exit
@@ -680,7 +724,7 @@
 	cmp	byte [abs_cx+1],#0
 	je	noNull		! skip cursor keys after Tab
 #endif
-#if defined(MENU) || defined(BITMAP)
+#if defined(MENU) || defined(BITMAP) || defined(MDK_GRAPHIC)
 	cmp	al,#0xE0	! extended keyboard
 	je	toNull
 	or	al,al		!
@@ -695,6 +739,10 @@
 	je	tolist		! yes -> list images
 	cmp	al,#63		! "?" ?
 	je	tolist		! yes -> list images
+#ifdef MDK_GRAPHIC
+	cmp	al,#27		! ESC ?
+	je	switch_text	! yes -> switch to text mode if necessary
+#endif
 	or	al,al		! NUL ?
 	je	nul		! yes -> go on
 	cmp	al,#8		! BS ?
@@ -715,6 +763,11 @@
 	je	input		! yes -> ignore it
 noblnk:	cmp	bx,#cmdline+CL_LENGTH ! at end of buffer ?
 	je	input		! yes -> ignore
+#ifdef MDK_GRAPHIC
+	seg	cs
+	test	byte [UseVESA],#1
+	jnz	input		! no input allowed while in graphic mode
+#endif
 	xor	ah,ah		! cmdline is always NUL terminated
 	mov	(bx),ax		! store in the buffer
 	inc	bx		! increment pointer
@@ -778,6 +831,13 @@
 #ifndef LCF_NOSERIAL
 	mov	byte ptr break,#0 ! clear the break flag
 #endif
+#ifdef MDK_GRAPHIC
+	seg	cs
+	test	byte [UseVESA],#1
+	jz	no_need_to_change_to_text
+	call	set_text_mode
+no_need_to_change_to_text:
+#endif
 	push	cs		! set ES to CS
 	pop	es
 	xor	al,al		! mark end
@@ -953,7 +1013,7 @@
 	cmp	byte ptr cmdline,#0 ! is there a default ?
 	jne	bcmd		! yes -> boot that image
 brfrst:	
-#if defined(MENU) || defined(BITMAP)
+#if defined(MENU) || defined(BITMAP) || defined(MDK_GRAPHIC)
 	mov	bx,[dimage]
 	imul	bx,#id_size
 	add	bx,#DESCR0	! boot the selected image
@@ -986,6 +1046,12 @@
 
 boot:
 	mov	si,#cmdline	! locate start of options
+#ifdef MDK_GRAPHIC
+	seg	cs
+	test	byte [UseVESA],#1
+	jz	locopt
+	call	set_text_mode
+#endif
 locopt:	lodsb
 	or	al,al		! NUL ?
 	je	optfnd		! yes -> no options
@@ -2014,12 +2080,12 @@
 ! actual entry point is below at 'say:'
 
 say_loop:
-	cmp	al,#10		! \n ?
-	jne	nonl		! no -> go on
-	mov	al,#13		! display a CRLF
-	call	display
-	mov	al,#10
-nonl:
+;	cmp	al,#10		! \n ?
+;	jne	nonl		! no -> go on
+;	mov	al,#13		! display a CRLF
+;	call	display
+;	mov	al,#10
+;nonl:
 	cmp	al,#12		! ^L ?
 	jne	nocls		! no -> go on
 #ifdef MENU
@@ -2029,6 +2095,11 @@
 	cmp	BYTE [abs_cx+1],#0	; graphic screen on?
 	jne	tosnext
 #endif
+#ifdef MDK_GRAPHIC
+	seg	cs
+	test	byte [UseVESA],#1	! not allowed to clear screen if VESA mode activated
+	jnz	snext
+#endif
 	push	bx
 	mov	ah,#0xf		! clear the local screen
 	int	0x10
@@ -2052,17 +2123,44 @@
 
 ! Display CR/LF
 
-crlf:	mov	al,#13		! CR
-	call	display
-	mov	al,#10		! LF
+crlf:	mov	al,#10		! CR and LF are now interpreted by display directly
 ;;;	jmp	display
 ; fall into  display
 
 ! Display one character on the console
 
 display:
+#ifdef MDK_GRAPHIC
+	pusha
+	push	ds
+	push	es
+	push	cs
+	pop	ds
+	push	cs
+	pop	es
+	mov	bx,[NextCharJump]		; make sure environment is right when calling method here
+	call	(bx)
+	pop	es
+	pop	ds
+	popa
+	ret					; if someone know how to jmp indirect by memory ?
+#endif
+msg_normal:
 	push	bx		! save BX
 
+#ifdef MDK_GRAPHIC
+	cmp	al,#0x0e			; ^N = extented code follows
+	jne	msg_normal_cont
+	mov	word [NextCharJump],#msg_ext
+	jmp	dispret
+msg_normal_cont:
+#endif
+	cmp	al,#10
+	jne	nonl
+	mov	al,#13
+	call	msg_normal
+	mov	al,#10
+nonl:	
 #ifndef LCF_NOSERIAL
 	call	serdisp
 #endif
@@ -2121,6 +2219,11 @@
 	pop	ds
 #endif
 #endif
+#ifdef MDK_GRAPHIC
+	seg	cs
+	test	byte [UseVESA],#1	! allow to write if VESA mode is not activated
+	jnz	dispret
+#endif
 	xor	bh,bh		! display on screen
 	mov	ah,#14
 	int	0x10
@@ -2174,12 +2277,16 @@
 	and	al,#0x7f	! strip 8th bit
 	jnz	gotch		! ignore NULs
 #endif
-gnokey:	
-#if defined(MENU) || defined(BITMAP)
+gnokey:
+#if defined(MENU) || defined(BITMAP) || defined(MDK_GRAPHIC)
 #ifdef BITMAP
 	cmp	byte [abs_cx+1],#0
 	je	no_timer_display
 #endif
+#if defined(MDK_GRAPHIC)
+       test    byte [UseVESA],#1
+       jz      no_timer_display
+#endif
 	call	timer_display
 no_timer_display:
 #endif
@@ -2958,6 +3065,10 @@
 #include "strlen.S"
 #include "crt.S"
 #endif
+
+#ifdef MDK_GRAPHIC
+#include "mdk_graphic.S"
+#endif
 #ifdef BITMAP
 #include "bitmap.S"
 #include "strlen.S"
