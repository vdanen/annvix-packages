Hi!

While working on i386 lowlevellock* updates (to match the x86_64/ppc
changes I posted as RFC), I found a couple of bugs in i?86 rwlock code and I
think it is better to post them separately outside of a huge patch, for
backporting etc. purposes:

1) if after futex returns -ETIMEDOUT or gettimeofday comparison jumps
   with -ETIMEDOUT stright to label 17 the internal lock isn't acquired
   immediately by lock cmpxchgl (== we jump to label 12), %ecx (which
   holds the saved futex return value) is first overwritten by
12:
#if MUTEX == 0
	movl    %ebp, %ecx
#else
	leal    MUTEX(%ebp), %ecx
#endif
   and afterwards inside of __lll_mutex_lock_wait (it will be
   FUTEX_WAIT).  This means the comparison with -ETIMEDOUT
   later on will be always false even if futex returned that
   error code and we'll loop again.  The effect of this will be that
   pthread_rwlock_timed*lock will be looping in this case until
   it manages to grab the internal lock immediately without having
   to wait.  I believe %esi isn't used for anything at this point
   (earlier it is used to hold some value from before unlock of
   the internal lock until the futex FUTEX_WAIT syscall), then
   to pass one of the arguments to that syscall, but then nothing
   until it is poped before ret.
2) only documentation issue in rwlock_unlock - the MUTEX != 0
   case uses wrong base register, fortunately MUTEX = 0 branch
   gets it right and we know MUTEX is 0.

 2007-07-30  Jakub Jelinek  <jakub@redhat.com>

	* sysdeps/unix/sysv/linux/i386/i486/pthread_rwlock_timedrdlock.S
	(pthread_rwlock_timedrdlock): Copy futex retval to %esi rather than
	%ecx.
	* sysdeps/unix/sysv/linux/i386/i486/pthread_rwlock_timedwrlock.S
	(pthread_rwlock_timedwrlock): Likewise.
	* sysdeps/unix/sysv/linux/i386/i486/pthread_rwlock_unlock.S
	(__pthread_rwlock_unlock): Fix MUTEX != 0 args to __lll_*.

===================================================================
RCS file: /cvs/glibc/libc/nptl/sysdeps/unix/sysv/linux/i386/i486/pthread_rwlock_timedwrlock.S,v
retrieving revision 1.13
retrieving revision 1.14
diff -u -r1.13 -r1.14
--- libc/nptl/sysdeps/unix/sysv/linux/i386/i486/pthread_rwlock_timedwrlock.S	2007/05/27 19:19:42	1.13
+++ libc/nptl/sysdeps/unix/sysv/linux/i386/i486/pthread_rwlock_timedwrlock.S	2007/08/01 03:39:45	1.14
@@ -122,7 +122,7 @@
 	leal	WRITERS_WAKEUP(%ebp), %ebx
 	movl	$SYS_futex, %eax
 	ENTER_KERNEL
-	movl	%eax, %ecx
+	movl	%eax, %esi
 17:
 
 	/* Reget the lock.  */
@@ -137,7 +137,7 @@
 	jnz	12f
 
 13:	subl	$1, WRITERS_QUEUED(%ebp)
-	cmpl	$-ETIMEDOUT, %ecx
+	cmpl	$-ETIMEDOUT, %esi
 	jne	2b
 
 18:	movl	$ETIMEDOUT, %ecx
@@ -210,7 +210,7 @@
 	call	__lll_mutex_lock_wait
 	jmp	13b
 
-16:	movl	$-ETIMEDOUT, %ecx
+16:	movl	$-ETIMEDOUT, %esi
 	jmp	17b
 
 19:	movl	$EINVAL, %ecx
===================================================================
RCS file: /cvs/glibc/libc/nptl/sysdeps/unix/sysv/linux/i386/i486/pthread_rwlock_timedrdlock.S,v
retrieving revision 1.12
retrieving revision 1.13
diff -u -r1.12 -r1.13
--- libc/nptl/sysdeps/unix/sysv/linux/i386/i486/pthread_rwlock_timedrdlock.S	2007/05/27 19:19:42	1.12
+++ libc/nptl/sysdeps/unix/sysv/linux/i386/i486/pthread_rwlock_timedrdlock.S	2007/08/01 03:39:45	1.13
@@ -124,7 +124,7 @@
 	leal	READERS_WAKEUP(%ebp), %ebx
 	movl	$SYS_futex, %eax
 	ENTER_KERNEL
-	movl	%eax, %ecx
+	movl	%eax, %esi
 17:
 
 	/* Reget the lock.  */
@@ -139,7 +139,7 @@
 	jnz	12f
 
 13:	subl	$1, READERS_QUEUED(%ebp)
-	cmpl	$-ETIMEDOUT, %ecx
+	cmpl	$-ETIMEDOUT, %esi
 	jne	2b
 
 18:	movl	$ETIMEDOUT, %ecx
@@ -217,7 +217,7 @@
 	call	__lll_mutex_lock_wait
 	jmp	13b
 
-16:	movl	$-ETIMEDOUT, %ecx
+16:	movl	$-ETIMEDOUT, %esi
 	jmp	17b
 
 19:	movl	$EINVAL, %ecx
===================================================================
RCS file: /cvs/glibc/libc/nptl/sysdeps/unix/sysv/linux/i386/i486/pthread_rwlock_unlock.S,v
retrieving revision 1.9
retrieving revision 1.10
diff -u -r1.9 -r1.10
--- libc/nptl/sysdeps/unix/sysv/linux/i386/i486/pthread_rwlock_unlock.S	2007/05/27 19:19:42	1.9
+++ libc/nptl/sysdeps/unix/sysv/linux/i386/i486/pthread_rwlock_unlock.S	2007/08/01 03:39:57	1.10
@@ -117,7 +117,7 @@
 #if MUTEX == 0
 	movl	%edi, %ecx
 #else
-	leal	MUTEX(%edx), %ecx
+	leal	MUTEX(%edi), %ecx
 #endif
 	call	__lll_mutex_lock_wait
 	jmp	2b
@@ -126,7 +126,7 @@
 #if MUTEX == 0
 	movl	%edi, %eax
 #else
-	leal	MUTEX(%edx), %eax
+	leal	MUTEX(%edi), %eax
 #endif
 	call	__lll_mutex_unlock_wake
 	jmp	4b
@@ -135,7 +135,7 @@
 #if MUTEX == 0
 	movl	%edi, %eax
 #else
-	leal	MUTEX(%edx), %eax
+	leal	MUTEX(%edi), %eax
 #endif
 	call	__lll_mutex_unlock_wake
 	jmp	8b
