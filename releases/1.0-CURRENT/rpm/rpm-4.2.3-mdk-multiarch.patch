--- rpm-4.2.3/autodeps/linux.req.multiarch	2005-01-24 17:07:19.616092173 -0500
+++ rpm-4.2.3/autodeps/linux.req	2005-01-24 17:07:19.618092576 -0500
@@ -180,6 +180,10 @@ done | egrep -v 'devel\(linux-gate|lib(c
 echo $filelist |  tr '[:blank:]' '\n' | egrep -q '/usr/lib(64)?/pkgconfig/.*\.pc' && echo pkgconfig
 
 #
+# --- multiarch-utils
+echo $filelist |  tr '[:blank:]' '\n' | grep -q '/multiarch-.*-linux/' && echo multiarch-utils
+
+#
 # --- mono requires
 if [ -x /usr/bin/mono-find-requires ]; then
 echo $filelist | tr [:blank:] \\n | /usr/bin/mono-find-requires
--- rpm-4.2.3/build/files.c.multiarch	2005-01-24 17:07:19.591087129 -0500
+++ rpm-4.2.3/build/files.c	2005-01-24 17:58:26.407730004 -0500
@@ -2388,6 +2388,52 @@ exit:
     return rc;
 }
 
+/**
+ * Check packaged file list for unmarked %multiarch files
+ * @param fileList	packaged file list
+ * @return		-1 if skipped, 0 on OK, 1 on error
+ */
+static int checkMultiarchFiles(StringBuf fileList)
+	/*@globals rpmGlobalMacroContext, h_errno, fileSystem, internalState @*/
+	/*@modifies rpmGlobalMacroContext, fileSystem, internalState @*/
+{
+/*@-readonlytrans@*/
+    static const char * av_ckmultiarch[] = { "%{?__check_multiarch_files}", NULL };
+/*@=readonlytrans@*/
+    StringBuf sb_stdout = NULL;
+    const char * s;
+    int rc;
+    
+    s = rpmExpand(av_ckmultiarch[0], NULL);
+    if (!(s && *s)) {
+	rc = -1;
+	goto exit;
+    }
+    rc = 0;
+
+    rpmMessage(RPMMESS_NORMAL, _("Checking for multiarch file(s): %s\n"), s);
+
+/*@-boundswrite@*/
+    rc = rpmfcExec(av_ckmultiarch, fileList, &sb_stdout, 0);
+/*@=boundswrite@*/
+    if (rc < 0)
+	goto exit;
+    
+    if (sb_stdout) {
+	const char * t = getStringBuf(sb_stdout);
+	if ((*t != '\0') && (*t != '\n')) {
+	    rc = 1;
+	    rpmMessage(RPMMESS_ERROR,
+		       _("The following files ought to be marked as %%multiarch:\n%s"), t);
+	}
+    }
+    
+exit:
+    sb_stdout = freeStringBuf(sb_stdout);
+    s = _free(s);
+    return rc;
+}
+
 /*@-incondefs@*/
 int processBinaryFiles(Spec spec, int installSpecialDoc, int test)
 	/*@globals check_fileList @*/
@@ -2423,6 +2469,16 @@ int processBinaryFiles(Spec spec, int in
     if (res == 0)  {
 	if (checkFiles(check_fileList) > 0)
 	    res = 1;
+
+	{ /* Check for multiarch files not marked as such.  */
+	    int vcur, vreq;
+	    vcur = rpmExpandNumeric("%{?mdkversion}");
+	    vreq = rpmExpandNumeric("%{?multiarch_distro}");
+	    if (vcur && vreq && vcur >= vreq) {
+		if (checkMultiarchFiles(check_fileList) > 0)
+		    res = 1;
+	    }
+	}
     }
     
     check_fileList = freeStringBuf(check_fileList);
--- rpm-4.2.3/rpmrc.in.multiarch	2005-01-24 17:07:19.508070383 -0500
+++ rpm-4.2.3/rpmrc.in	2005-01-24 17:07:19.620092980 -0500
@@ -374,7 +374,7 @@ buildarch_compat: x86_64: noarch
 buildarch_compat: amd64: x86_64
 buildarch_compat: ia32e: x86_64
 
-macrofiles:	@RPMCONFIGDIR@/macros:@RPMCONFIGDIR@/%{_target}/macros:@SYSCONFIGDIR@/macros.specspo:@SYSCONFIGDIR@/macros.prelink:@SYSCONFIGDIR@/macros.solve:@SYSCONFIGDIR@/macros.up2date:@SYSCONFIGDIR@/macros:@SYSCONFIGDIR@/%{_target}/macros:~/.rpmmacros
+macrofiles:	@RPMCONFIGDIR@/macros:@RPMCONFIGDIR@/%{_target}/macros:@SYSCONFIGDIR@/macros.specspo:@SYSCONFIGDIR@/macros.prelink:@SYSCONFIGDIR@/macros.solve:@SYSCONFIGDIR@/macros.up2date:@SYSCONFIGDIR@/macros.multiarch:@SYSCONFIGDIR@/macros:@SYSCONFIGDIR@/%{_target}/macros:~/.rpmmacros
 
 # \endverbatim
 #*/
--- rpm-4.2.3/macros.in.multiarch	2005-01-24 17:07:19.576084102 -0500
+++ rpm-4.2.3/macros.in	2005-01-24 17:57:22.006738939 -0500
@@ -310,6 +310,14 @@ package or when debugging this package.\
 %_package_version	30005
 
 #
+# Script gets packaged file list on input.
+# Returns list of multiarch files that are not marked as such,
+# i.e. files in $RPM_BUILD_ROOT that have arch-dependent values
+#
+# Note: Disable (by commenting out) for legacy compatibility.
+%__check_multiarch_files @RPMCONFIGDIR@/check-multiarch-files
+
+#
 # Script gets packaged file list on input and buildroot as first parameter.
 # Returns list of unpackaged files, i.e. files in $RPM_BUILD_ROOT not packaged.
 #
