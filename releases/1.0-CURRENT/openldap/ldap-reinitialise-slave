#!/bin/bash

# This script is intended to do recovery of the hot backup of the LDAP 
# database files on a slave, and roll forward any transactions
#
# See:
# - http://www.openldap.org/faq/data/cache/738.html
# - http://www.sleepycat.com/docs/ref/transapp/archival.html
# - http://www.sleepycat.com/docs/ref/transapp/recovery.html
# - http://www.sleepycat.com/docs/ref/transapp/logfile.html 
# - http://www.sleepycat.com/docs/ref/transapp/hotfail.html
#
# Specifically, the steps implemented below are the 3 steps documented in
# http://www.sleepycat.com/docs/ref/transapp/hotfail.html
#
# Buchan Milne <bgmilne@obsidian.co.za>
#

MASTER=/var/lib/ldap/master

DEBUG=0
VERBOSE=0
COLORS=1
TOTALERRORS=0
HELP=0

while getopts h,t,v:,c,l: option
do
	case "$option" in
		h) HELP=1;DEBUG=1;VERBOSE=4 ;;
		t) DEBUG=1;;
		v) VERBOSE="$OPTARG";;
		c) COLORS=0;;
		l) LOGFILE="$OPTARG"; COLORS=0;VERBOSE=4 ;;
	esac
done

if [  "$COLORS" == 1 ]
then
#        BLUE="\033[34;01m"
	BLUE="\e[0;34m"
        GREEN="\033[32;01m"
        YELLOW="\033[33;01m"
	ORANGE="\e[33m"
        RED="\033[31;01m"
        OFF="\033[0m"
        CYAN="\033[36;01m"
fi

function run() {
	if [ $DEBUG == 1 ]
	then
		echo -e "${BLUE}Would run: ${OFF}$@"
	elif [ $VERBOSE -gt 3 ]
	then
		if [ -z "$LOGFILE" ]
		then
			echo -e "${BLUE}Running: ${OFF}$@${RED}"
			$@
			echo -en "${OFF}"
		else
			echo -e "${BLUE}Running: ${OFF}$@${RED}" >> $LOGFILE
			$@ >> $LOGFILE 2>&1
			echo -en "${OFF}"
		fi
		ERROR=$?
		ERRORS=$[ERRORS+ERROR]
	else
		$@ 2>/dev/null >/dev/null
		ERROR=$?
		ERRORS=$[ERRORS+ERROR]
	fi
	[ $ERROR -eq 0 ] || debug 3 "Running '$@' returned $ERROR"
}

function debug() {
# We have the following debug levels:
# 1 - normal messages - green
# 2 - warnings - yellow
# 3 - errors - orange
# 4 - fatal - red
# First variable passed is the error level, all others are printed
# A normal run shows only 3, verbose shows 3 and 2, debug shows all
TYPES=(Info Warning Error Fatal)
COLOURS=($GREEN $YELLOW $ORANGE $RED)
type=$1
colour=${COLOURS[$type-1]}
shift
#case $TYPE in
#	1) [ "$DEBUG" == 1 ] && print=1 && colour=$GREEN ;;
#	2) [ "$DEBUG" == 1 -o "$VERBOSE" == 1 ]  && print=1 && colour=$YELLOW ;;
#	[34]) print=1 && colour=$RED
#esac
print=$[4-type]
if [ "$print" -lt "$VERBOSE" ]
then
	if [ -z "$LOGFILE" ]
	then
		echo -e "${colour}${TYPES[$type-1]}: $@${OFF}"
	else
		echo -e "${colour}${TYPES[$type-1]}: $@${OFF}" >> $LOGFILE
	fi
fi
}

function fatal() {
debug 4 "$@"
exit 2
}

if [ "$HELP" == 1 ]
then
cat << EOF
$0 usage:
This script is intended to do recovery of the hot backup of the LDAP
database files on a slave, and roll forward any transactions since the 
last hot backup

The following options are avaiable:
-h		This help message
-t		Test (don't really do anything, just show what would be done)
-v		Run verbosely (warnings, errors and show what is being done)
-c		Don't use colours in output
-l <logfile>	Log (append) operations to log file

Without any options, only error messages are shown.

When using coloured output, there are:
EOF
debug 1 "Informational messages"
debug 2 "Warnings"
debug 3 "Errors"
debug 4 "Fatal errors"
exit 0
fi

# Find the preferred tools (slapd_db_* preferred over db_*)

unset DB_RECOVER
if [ -x /usr/bin/slapd_db_recover ]
then
	DB_RECOVER=/usr/bin/slapd_db_recover
elif [ -x /usr/bin/db_recover ]
then
	DB_RECOVER=/usr/bin/db_recover
else
	DB_RECOVER=""
fi

[ -z "$DB_RECOVER" ] && fatal "no db_recover found, exiting"

# Check that we can access the backup:
if [ ! -d $MASTER/backup ]
then
	run mount $MASTER
	[ -d $MASTER/backup ] || fatal "$MASTER/backup not available, exiting"
fi

# We must ensure slapd is not running:
run /etc/rc.d/init.d/ldap stop

# We need to do this for each database, assuming they are all 
# listed in /etc/openldap/slapd.conf

for dbdir in `awk '/^[:space:]*directory[:space:]*\w*/ {print $2}' /etc/openldap/slapd.conf`
do
	dbname="`basename $dbdir`"
	dbbackupdir="`dirname ${dbdir}`/backup/${dbname}"
	dbsnapshotdir="`dirname ${dbdir}`/master/backup/${dbname}"
	if [ ! -e ${dbsnapshotdir}/db_tools.lock ]
# [ -n "`find ${dbdir}/*.bdb 2>&-`" ]
	then
		ERRORS=0
		debug 1 "$0 entering ${dbdir}"

		# Ensure backupdir exists
		run mkdir -p ${dbbackupdir}

		# Move old db files to dbbackupdir
		for file in  ${dbdir}/{*.bdb,log.*,__db*}
		do [ -e $file ] && run mv -f ${file} ${dbbackupdir} || :
		done
		
		# 1) Copy the database files from the active environment
		# to the backup directory.
		# Well, in fact the database files we have available are
		# in the backup directory (on the master) and we want to 
		# copy them to the real environment (not active)
		debug 1 "Restoring database and transaction log files from ${dbsnapshotdir} to ${dbdir}"
		run cp -af ${dbsnapshotdir}/{*.bdb,log.*} ${dbdir}
		
		# 2) Archive all existing log files - this is done by step 1 of
		#    ldap-hot-db-backup

		# 3) Move active log files to backup directory - this is done
		#    by step 3 of ldap-hot-db-backup

		# 3a) (not explicitly in hotfail.htm)
		#     Update any log files in the live environment that are
		#     newer than the ones in the snapshot

		#debug 1 "Updating database log files for ${dbdir}"
		#for logfile in `dirname ${dbdir}`/master/${dbname}/log.*
		#do
		#	logfilesnapshot=${dbdir}/`basename $logfile`
		#	if [ $logfile -nt $logfilesnapshot ]
		#	then
		#		run cp -af ${logfile} ${dbdir}
		#	fi
		#done

		# 4) Run db_recover -c in the backup^H^H^H^H^H^Hlive
		#   database directory to catastrophically recover the
		#   copied environment

		debug 1 "Running database recovery for ${dbdir}"
		run $DB_RECOVER -c -h ${dbdir}

		if [ "$ERRORS" == 0 ]
		then
			debug 1 "No errors encountered for ${dbdir}" >&2
		else
			debug 3 "Error count for ${dbdir} was $ERRORS" >&2
			TOTALERRORS=$[TOTALERRORS+ERRORS]
		fi
		
		run chown -R ldap:ldap ${dbdir}
	else
		debug 2 "Hot backup in progress for ${dbdir}, exiting"
	fi
done

run /etc/rc.d/init.d/ldap start

debug 2 "Total errors encountered: $TOTALERRORS"
exit $TOTALERRORS

