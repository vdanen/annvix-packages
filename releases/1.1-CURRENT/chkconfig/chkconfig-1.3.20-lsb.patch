--- chkconfig-1.3.20/chkconfig.c.lsb	2005-06-23 16:30:37.000000000 -0400
+++ chkconfig-1.3.20/chkconfig.c	2005-07-01 07:45:17.000000000 -0400
@@ -43,7 +43,102 @@
     exit(1);
 }
 
-static int delService(char * name) {
+/* (sb) verify this script isn't a dependency for some other service */
+
+static void checkDependencies(struct service *s) {
+	DIR * dir;
+	struct dirent * ent;
+	struct stat sb;
+	struct service *servs = NULL;
+	int numservs = 0;
+	char fn[1024];
+	int i, j, k;
+	char deps[2048];
+	int isdep = 0;
+	glob_t globres;
+	int depunset;
+	
+	if (!(dir = opendir(RUNLEVELS "/init.d"))) {
+		fprintf(stderr, _("failed to open %s/init.d: %s\n"), RUNLEVELS,
+			strerror(errno));
+		return;
+	}
+
+	while ((ent = readdir(dir))) {
+
+		/* Skip files with known bad extensions */
+		if (strchr(ent->d_name, '~') || strchr(ent->d_name, ',') ||
+		    strchr(ent->d_name, '.')) continue;
+	
+		sprintf(fn, RUNLEVELS "/init.d/%s", ent->d_name);
+		if (stat(fn, &sb)) {
+			continue;
+		}
+		if (!S_ISREG(sb.st_mode)) continue;
+		if (!strcmp(ent->d_name, s->name)) continue;
+		servs = realloc(servs, (numservs+1) * sizeof(struct service));
+		if (!readServiceInfo(ent->d_name, servs + numservs, 0))
+			numservs++;
+	}
+	
+	for (i = 0; i < numservs ; i++) {
+	    /* present but not setup */
+	    findServiceEntries(servs[i].name, 0, &globres);
+	    if (servs[i].sPriority < 0 && !globres.gl_pathc) {
+		depunset = 1;
+	    } else {
+		depunset = 0;
+	    }
+	    if (servs[i].startDeps) {
+		for (j = 0; servs[i].startDeps[j]; j++) {
+		    if (!strcmp(s->name, servs[i].startDeps[j]) && !depunset) {
+			strcat(deps, " ");			
+			strcat(deps, servs[i].name);
+			strcat(deps, "(start)");
+			isdep = 1;
+		    }
+		    if (s->provides) {
+			for (k = 0; s->provides[k]; k++) {
+			    if (!strcmp(s->provides[k], servs[i].startDeps[j]) && !depunset) {
+				strcat(deps, " ");			
+				strcat(deps, servs[i].name);
+				strcat(deps, "(start)");
+				isdep = 1;
+			    }
+			}
+		    }
+				
+		}
+								     
+	    }
+	    if (servs[i].stopDeps) {
+		for (j = 0; servs[i].stopDeps[j]; j++) {
+		    if (!strcmp(s->name, servs[i].stopDeps[j]) && !depunset) {
+			strcat(deps, " ");			
+			strcat(deps, servs[i].name);
+			strcat(deps, "(stop)");
+			isdep = 1;
+		    }
+		    if (s->provides) {
+			for (k = 0; s->provides[k]; k++) {
+			    if (!strcmp(s->provides[k], servs[i].stopDeps[j]) && !depunset) {
+				strcat(deps, " ");			
+				strcat(deps, servs[i].name);
+				strcat(deps, "(stop)");
+				isdep = 1;
+			    }
+			}
+		    }
+		}
+	   }
+	}
+	if (isdep) {
+	    fprintf(stderr, "Needed by script(s):%s\n", deps);
+		exit(1);
+	}
+}
+
+static int delService(char * name, int chkdep) {
     int level, i, rc;
     glob_t globres;
     struct service s;
@@ -57,6 +152,9 @@
             system("/sbin/service xinetd reload >/dev/null 2>&1");
             return 0;
     }
+    /* (sb) for LSB init scripts we need to check dependencies */
+    if (s.isLSB && chkdep)
+		checkDependencies(&s);
 
     for (level = 0; level < 7; level++) {
 	    if (!findServiceEntries(name, level, &globres)) {
@@ -68,6 +166,11 @@
     return 0;
 }
 
+static void depsNotmet(char *name) {
+    fprintf(stderr, "Dependency script %s not setup.\n", name);
+    exit(1);
+}
+
 static inline int laterThan(int i, int j) {
 	if (i <= j) {
 		i = j+1;
@@ -85,10 +188,24 @@
 	}
 	return i;
 }
-
+	
 /* LSB-style dependency frobber. Calculates a usable start priority
  * and stop priority.
  * This algorithm will almost certainly break horribly at some point. */
+
+/* (sb) not handling the dependencies correctly, illustrate with the
+ * new lsb initd tests, in trying to install lsb-initA, lsb-initB isn't 
+ * present and it's priority isn't defined, so laterThan/earlierThan
+ * doesn't work. Increment/decrement from 50 instead (could be an issue
+ * for very complex dependencies > 50).
+ * Ignore scripts present in /etc/init.d but not setup. */
+
+/* to make things more interesting, some packages are combining LSB style
+ * comments and a chkconfig line, I'll call these hybrids. For these we'll
+ * try to use the suggested priority, but bump/lower it if it's too low
+ * (restore laterThan/earlierThan). They also vary as to whether they
+ * have the chkconfig line before or after the LSB comments! */
+
 static void frobDependencies(struct service *s) {
 	DIR * dir;
 	struct dirent * ent;
@@ -97,7 +214,10 @@
 	int numservs = 0;
 	char fn[1024];
 	int i, j, k;
-    
+	char deps[2048];
+	glob_t globres;
+	int depunset;
+
 	if (!(dir = opendir(RUNLEVELS "/init.d"))) {
 		fprintf(stderr, _("failed to open %s/init.d: %s\n"), RUNLEVELS,
 			strerror(errno));
@@ -121,33 +241,86 @@
 		if (!readServiceInfo(ent->d_name, servs + numservs, 0))
 			numservs++;
 	}
-	
-	/* Sane defaults */
-	s->sPriority = 50;
-	s->kPriority = 50;
+
+	/* Sane defaults - only do this to pure LSB scripts */
+	if (s->sPriority < 0)
+	    s->sPriority = 50;
+	if (s->kPriority < 0)
+	    s->kPriority = 50;
 	
 	for (i = 0; i < numservs ; i++) {
+		/* present but not setup */
+		findServiceEntries(servs[i].name, 0, &globres);
+		if (servs[i].sPriority < 0 && !globres.gl_pathc) {
+		    depunset = 1;
+		} else {
+		    depunset = 0;
+		}
 		if (s->startDeps) {
 			for (j = 0; s->startDeps[j] ; j++) {
-				if (!strcmp(s->startDeps[j], servs[i].name))
-					s->sPriority = laterThan(s->sPriority, servs[i].sPriority);
-				if (servs[i].provides) {
-					for (k = 0; servs[i].provides[k]; k++) {
-						if (!strcmp(s->startDeps[j], servs[i].provides[k]))
-							s->sPriority = laterThan(s->sPriority, servs[i].sPriority);
+				if (!strcmp(s->startDeps[j], servs[i].name)) {
+				    if (depunset) {
+					depsNotmet(servs[i].name);
+				    } else {
+					if (s->isHybrid) {
+					    s->sPriority = laterThan(s->sPriority, servs[i].sPriority);
+					} else {
+				    	    s->sPriority++;
+					}
+				    }
+				}
+				else if (servs[i].provides) {
+				    for (k = 0; servs[i].provides[k]; k++) {
+					if (!strcmp(s->startDeps[j], servs[i].provides[k])) {
+					    if (depunset) {
+						depsNotmet(servs[i].name);
+				    	    } else {
+						if (s->isHybrid) {
+						    s->sPriority = laterThan(s->sPriority, servs[i].sPriority);
+						} else {
+				    		    s->sPriority++;
+						}
+				    	    }
 					}
+				    }
+				}
+				if (s->sPriority > 99) {
+				    fprintf(stderr, "Priority for %s can't be greater than 99.\n", s->name);
+				    exit(1);
 				}
 			}
 		}
 		if (s->stopDeps) {
 			for (j = 0; s->stopDeps[j] ; j++) {
-				if (!strcmp(s->stopDeps[j], servs[i].name))
-					s->kPriority = earlierThan(s->kPriority, servs[i].kPriority);
-				if (servs[i].provides) {
-					for (k = 0; servs[i].provides[k]; k++) {
-						if (!strcmp(s->stopDeps[j], servs[i].provides[k]))
-							s->kPriority = earlierThan(s->kPriority, servs[i].kPriority);
+				if (!strcmp(s->stopDeps[j], servs[i].name)) {
+				    if (depunset) {
+					depsNotmet(servs[i].name);
+				    } else {
+					if (s->isHybrid) {
+					    s->kPriority = earlierThan(s->kPriority, servs[i].kPriority);
+					} else {
+				    	    s->kPriority--;
+					}
+				    }
+				}
+				else if (servs[i].provides) {
+				    for (k = 0; servs[i].provides[k]; k++) {
+					if (!strcmp(s->stopDeps[j], servs[i].provides[k])) {
+				    	    if (depunset) {
+						depsNotmet(servs[i].name);
+				    	    } else {
+						if (s->isHybrid) {
+						    s->kPriority = earlierThan(s->kPriority, servs[i].kPriority);
+						} else {
+				    		    s->kPriority--;
+						}
+				    	    }
 					}
+				    }
+				}
+				if (s->kPriority < 0) {
+				    fprintf(stderr, "Priority for %s can't be less than 0.\n", s->name);
+				    exit(1);
 				}
 			}
 		}
@@ -162,15 +335,15 @@
 	readServiceError(rc, name);
 	return 1;
     }
-	
+
     if (s.type == TYPE_XINETD) {
 	setXinetdService(s, 1);
 	system("/sbin/service xinetd reload >/dev/null 2>&1");
 	return 0;
     }
-    if (s.isLSB && (s.sPriority <= -1) && (s.kPriority <= -1))
-		frobDependencies(&s);
-    
+    if (s.isLSB)
+	frobDependencies(&s);
+
     for (i = 0; i < 7; i++) {
 	if (!isConfigured(name, i)) {
 	    if ((1 << i) & s.levels)
@@ -368,8 +541,8 @@
     }
 
     if (s.type == TYPE_INIT_D) {
-	    if (s.isLSB && (s.sPriority <= -1) && (s.kPriority <= -1))
-		    frobDependencies(&s);
+	    if (s.isLSB)
+	    	frobDependencies(&s);
 	    for (i = 0; i < 7; i++) {
 		    if (!((1 << i) & where)) continue;
 
@@ -393,6 +566,7 @@
     int listItem = 0, addItem = 0, delItem = 0;
     int rc, i, x;
     int LSB = 0;
+    int chkdep = 0;
     char * levels = NULL;
     int help=0, version=0;
     struct service s;
@@ -452,7 +626,7 @@
 	char * name = (char *)poptGetArg(optCon);
 
 	if (!(!name || !*name || poptGetArg(optCon)))
-		delService(name);
+		delService(name, chkdep);
 
 	if (!name || !*name || poptGetArg(optCon)) 
 	    usage();
@@ -462,12 +636,13 @@
 	return addService(name);
     } else if (delItem) {
 	char * name = (char *)poptGetArg(optCon);
+	chkdep = 1;
 
 	if (!name || !*name || poptGetArg(optCon)) usage();
 
 	if (LSB)
 		    name = basename(name);
-	return delService(name);
+	return delService(name, chkdep);
     } else if (listItem) {
 	char * item = (char *)poptGetArg(optCon);
 
--- chkconfig-1.3.20/leveldb.c.lsb	2005-06-30 07:46:34.000000000 -0400
+++ chkconfig-1.3.20/leveldb.c	2005-07-01 07:42:46.000000000 -0400
@@ -244,7 +244,8 @@
 		    stopDeps: NULL,
 		    provides: NULL,
 		    type: TYPE_INIT_D, 
-		    isLSB: 0, 
+		    isLSB: 0,
+		    isHybrid: 0,
 		    enabled: 0
     };
     char overflow;
@@ -295,9 +296,13 @@
 	if (*start != '#') continue;
 
 	start++;
-	if (!strncmp(start, "## BEGIN INIT INFO", 18))
-		    serv.isLSB = 1;
-		
+	if (!strncmp(start, "## BEGIN INIT INFO", 18)) {
+	    serv.isLSB = 1;
+	    /* (sb) chkconfig entry already defined priorities ? */
+	    if (serv.sPriority >= 0 || serv.kPriority >= 0)
+		serv.isHybrid = 1;
+	}
+
 	while (isspace(*start) && start < end) start++;
 	if (start == end) continue;
 	if (honorHide && !strncmp(start, "hide:", 5)) {
@@ -312,7 +317,7 @@
 
 	if (!strncmp(start, "chkconfig:", 10)) {
 	    int spri, kpri;
-	     
+
 	    start += 10;
 	    while (isspace(*start) && start < end) start++;
 	    if (start == end) {
@@ -339,7 +344,14 @@
 		    if (serv.kPriority == -2)
 			    serv.kPriority = kpri;
 	    }
-
+	    /* (sb) hybrid chkconfig/LSB script */
+	    if (serv.sPriority == -1 || serv.kPriority == -1)
+		serv.isHybrid = 1;
+	    if (serv.sPriority == -1)
+		serv.sPriority = spri;
+	    if (serv.kPriority == -1)
+		serv.kPriority = kpri;
+	    
 	    if (serv.levels == -1) {
 		    if (!strcmp(levelbuf, "-"))
 			    serv.levels = 0;
@@ -392,9 +404,9 @@
 	} else if (!strncmp(start, "Required-Start:", 15)) {
 		char *t;
 		int numdeps = 0;
-		
 
-		serv.sPriority = -1;
+		if (!serv.isHybrid)
+		    serv.sPriority = -1;
 		start+=15;
 		while (1) {
 			while (*start && isspace(*start) && start < end) start++;
@@ -420,7 +432,8 @@
 		char *t;
 		int numdeps = 0;
 		
-		serv.kPriority = -1;
+		if (!serv.isHybrid)
+		    serv.kPriority = -1;
 		start+=14;
 		while (1) {
 			while (*start && isspace(*start) && start < end) start++;
--- chkconfig-1.3.20/leveldb.h.lsb	2005-06-30 18:32:27.000000000 -0400
+++ chkconfig-1.3.20/leveldb.h	2005-06-30 18:32:45.000000000 -0400
@@ -18,6 +18,7 @@
     char **provides;
     int type;
     int isLSB;
+    int isHybrid;
     int enabled;
 };
 
