diff -Nrup dietlibc-0.26.orig/i386/start.S dietlibc-0.26/i386/start.S
--- dietlibc-0.26.orig/i386/start.S	2003-04-17 09:55:39.000000000 -0400
+++ dietlibc-0.26/i386/start.S	2004-08-07 18:50:52.000000000 -0400
@@ -50,7 +50,9 @@ _start:
 	PUT_VAR %edi, __vsyscall, %edx
 1:
 #endif
-
+#ifdef __dietlibc__
+	call	__guard_setup
+#endif
 #ifdef WANT_DYNAMIC
 	call	_dyn_start
 #else
diff -Nrup dietlibc-0.26.orig/sparc/start.S dietlibc-0.26/sparc/start.S
--- dietlibc-0.26.orig/sparc/start.S	2003-08-22 08:16:23.000000000 -0400
+++ dietlibc-0.26/sparc/start.S	2004-08-07 18:55:26.000000000 -0400
@@ -29,6 +29,9 @@ _start:
    be NULL.  */
 
 /* Let libc do the rest of the initialization, and call main.  */
+#if 0 /* FIXME: __dietlibc__ */
+	call    __guard_setup
+#endif
 #ifdef WANT_DYNAMIC
 	call	dyn_start
 #else
diff -Nrup dietlibc-0.26.orig/sparc64/start.S dietlibc-0.26/sparc64/start.S
--- dietlibc-0.26.orig/sparc64/start.S	2003-08-22 08:16:23.000000000 -0400
+++ dietlibc-0.26/sparc64/start.S	2004-08-07 18:55:36.000000000 -0400
@@ -29,6 +29,9 @@ _start:
    be NULL.  */
 
 /* Let libc do the rest of the initialization, and call main.  */
+#if 0 /* FIXME: __dietlibc__ */
+	call    __guard_setup
+#endif
 #ifdef WANT_DYNAMIC
 	call	dyn_start
 #else
diff -Nrup dietlibc-0.26.orig/x86_64/start.S dietlibc-0.26/x86_64/start.S
--- dietlibc-0.26.orig/x86_64/start.S	2003-02-05 09:29:19.000000000 -0500
+++ dietlibc-0.26/x86_64/start.S	2004-08-07 18:52:39.000000000 -0400
@@ -35,6 +35,10 @@ _start:
 	popq	%rdi
 #endif
 
+#if 0 /* FIXME: __dietlibc__ */
+	call	__guard_setup
+#endif
+
 #ifdef WANT_DYNAMIC
 	call	_dyn_start
 #else
--- /dev/null	2005-11-25 20:54:23.000000000 -0700
+++ dietlibc-0.29/lib/ssp.c	2005-12-29 11:56:53.000000000 -0700
@@ -0,0 +1,129 @@
+/*
+ * Distributed under the terms of the GNU General Public License v2
+ * $Header: /var/www/www.gentoo.org/raw_cvs/gentoo-x86/dev-libs/dietlibc/files/ssp.c,v 1.1.1.1 2005/11/30 09:41:25 chriswhite Exp $
+ *
+ * This is a modified version of Hiroaki Etoh's stack smashing routines
+ * implemented for glibc.
+ *
+ * The following people have contributed input to this code.
+ * Ned Ludd - <solar[@]gentoo.org>
+ * Alexander Gabert - <pappy[@]gentoo.org>
+ * The PaX Team - <pageexec[@]freemail.hu>
+ * Peter S. Mazinger - <ps.m[@]gmx.net>
+ * Yoann Vandoorselaere - <yoann[@]prelude-ids.org>
+ * Robert Connolly - <robert[@]linuxfromscratch.org>
+ * Cory Visi <cory@visi.name>
+ *
+ */
+
+#ifdef HAVE_CONFIG_H
+# include <config.h>
+#endif
+
+#include <stdio.h>
+#include <string.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <signal.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+#include <sys/time.h>
+
+#ifdef __PROPOLICE_BLOCK_SEGV__
+#define SSP_SIGTYPE SIGSEGV
+#elif __PROPOLICE_BLOCK_KILL__
+#define SSP_SIGTYPE SIGKILL
+#else
+#define SSP_SIGTYPE SIGABRT
+#endif
+
+unsigned long __guard = 0UL;
+
+void
+__guard_setup (void)
+{
+  size_t size;
+  if (__guard != 0UL)
+    return;
+
+#ifndef __SSP_QUICK_CANARY__
+  /* 
+   * Attempt to open kernel pseudo random device if one exists before 
+   * opening urandom to avoid system entropy depletion.
+   */
+  {
+    int fd;
+#ifdef HAVE_DEV_ERANDOM
+    if ((fd = open ("/dev/erandom", O_RDONLY)) == (-1))
+#endif
+      fd = open ("/dev/urandom", O_RDONLY);
+    if (fd != (-1))
+      {
+	size = read (fd, (char *) &__guard, sizeof (__guard));
+	close (fd);
+	if (size == sizeof (__guard))
+	  return;
+      }
+  }
+#endif
+
+  /* If sysctl was unsuccessful, use the "terminator canary". */
+  __guard = 0xFF0A0D00UL;
+
+  {
+    /* Everything failed? Or we are using a weakened model of the 
+     * terminator canary */
+    struct timeval tv;
+
+    gettimeofday (&tv, NULL);
+    __guard ^= tv.tv_usec ^ tv.tv_sec;
+  }
+}
+
+void
+__stack_smash_handler (char func[], int damaged)
+{
+  struct sigaction sa;
+  const char message[] = ": stack smashing attack in function ";
+  int bufsz, len;
+  char buf[512];
+  static char *__progname = "dietapp";
+
+  sigset_t mask;
+  sigfillset (&mask);
+
+  sigdelset (&mask, SSP_SIGTYPE);	/* Block all signal handlers */
+  sigprocmask (SIG_BLOCK, &mask, NULL);	/* except SIGABRT */
+
+  bufsz = sizeof (buf);
+  strcpy (buf, "<2>");
+  len = 3;
+
+  strncat (buf, __progname, sizeof (buf) - 4);
+  len = strlen (buf);
+
+  if (bufsz > len)
+    {
+      strncat (buf, message, bufsz - len - 1);
+      len = strlen (buf);
+    }
+  if (bufsz > len)
+    {
+      strncat (buf, func, bufsz - len - 1);
+      len = strlen (buf);
+    }
+
+  /* print error message */
+  write (STDERR_FILENO, buf + 3, len - 3);
+  write (STDERR_FILENO, "()\n", 3);
+
+  /* Make sure the default handler is associated with the our signal handler */
+  memset (&sa, 0, sizeof (struct sigaction));
+  sigfillset (&sa.sa_mask);	/* Block all signals */
+  sa.sa_flags = 0;
+  sa.sa_handler = SIG_DFL;
+  sigaction (SSP_SIGTYPE, &sa, NULL);
+  (void) kill (getpid (), SSP_SIGTYPE);
+  _exit (127);
+}
