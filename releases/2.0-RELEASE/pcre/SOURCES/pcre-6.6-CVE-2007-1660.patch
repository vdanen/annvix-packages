Patch to fix CVE-2007-1660 issues by Florian Festi <ffesti@redhat.com> and Harald Hoyer <harald@redhat.com>.

diff -up pcre-6.6/pcre_compile.c.CVE-2007-1660 pcre-6.6/pcre_compile.c
--- pcre-6.6/pcre_compile.c.CVE-2007-1660	2006-02-06 13:17:16.000000000 +0100
+++ pcre-6.6/pcre_compile.c	2007-10-10 11:50:17.000000000 +0200
@@ -3935,6 +3935,7 @@ const uschar *ptr;
 compile_data compile_block;
 int brastack[BRASTACK_SIZE];
 uschar bralenstack[BRASTACK_SIZE];
+int newoptions = options;
 
 /* We can't pass back an error message if errorptr is NULL; I guess the best we
 can do is just return NULL, but we can set a code value if there is a code
@@ -4745,6 +4746,7 @@ while ((c = *(++ptr)) != 0)
             character" code. */
 
             case ':':
+	    newoptions = (options | set) & (~unset);
             if (((set|unset) & PCRE_IMS) != 0)
               {
               length += 4;
@@ -4842,6 +4844,25 @@ while ((c = *(++ptr)) != 0)
     /* Leave ptr at the final char; for read_repeat_counts this happens
     automatically; for the others we need an increment. */
 
+    c = ptr[1];
+    if ((newoptions & PCRE_EXTENDED) != 0) 
+      {
+	while(c) {
+	  while(c && (compile_block.ctypes[c] & ctype_space) != 0) 
+	    {
+	      c = *(++ptr + 1);
+	    }
+	  if (c == '#')
+	    {
+	      /* The space before the ; is to avoid a warning on a silly compiler
+		 on the Macintosh. */	      
+	      while ((c = *(++ptr + 1)) != 0 && c != NEWLINE) ;
+	      continue;
+	    }
+	  break;
+	}
+      }
+
     if ((c = ptr[1]) == '{' && is_counted_repeat(ptr+2))
       {
       ptr = read_repeat_counts(ptr+2, &min, &max, &errorcode);
@@ -4860,7 +4881,7 @@ while ((c = *(++ptr)) != 0)
     if (min == 0)
       {
       length++;
-      if (max > 0) length += (max - 1) * (duplength + 3 + 2*LINK_SIZE);
+      if (max > 0) length += (max - 1) * (duplength + 6 + 2*LINK_SIZE);
       }
 
     /* When the minimum is greater than zero, we have to replicate up to
@@ -4871,10 +4892,10 @@ while ((c = *(++ptr)) != 0)
 
     else
       {
-      length += (min - 1) * duplength;
-      if (max > min)   /* Need this test as max=-1 means no limit */
-        length += (max - min) * (duplength + 3 + 2*LINK_SIZE)
-          - (2 + 2*LINK_SIZE);
+	length += (min - 1) * (duplength + 3);
+	if (max > min)   /* Need this test as max=-1 means no limit */
+	  length += (max - min) * (duplength + 6 + 2*LINK_SIZE)
+	    - (2 + 2*LINK_SIZE);
       }
 
     /* Allow space for once brackets for "possessive quantifier" */
