--- mysql-4.1.12/sql/sql_lex.cc.cve-2006-2753	2006-06-06 15:23:03.887206096 -0600
+++ mysql-4.1.12/sql/sql_lex.cc	2006-06-06 15:32:36.238530586 -0600
@@ -295,18 +295,7 @@ static char *get_text(LEX *lex)
       found_escape=1;
       if (lex->ptr == lex->end_of_query)
 	return 0;
-#ifdef USE_MB
-      int l;
-      if (use_mb(cs) &&
-          (l = my_ismbchar(cs,
-                           (const char *)lex->ptr,
-                           (const char *)lex->end_of_query))) {
-          lex->ptr += l;
-          continue;
-      }
-      else
-#endif
-        yySkip();
+      yySkip();
     }
     else if (c == sep)
     {
@@ -335,9 +324,6 @@ static char *get_text(LEX *lex)
       {
 	uchar *to;
 
-        /* Re-use found_escape for tracking state of escapes */
-        found_escape= 0;
-
 	for (to=start ; str != end ; str++)
 	{
 #ifdef USE_MB
@@ -351,7 +337,7 @@ static char *get_text(LEX *lex)
 	      continue;
 	  }
 #endif
-	  if (!found_escape && *str == '\\' && str+1 != end)
+	  if (*str == '\\' && str+1 != end)
 	  {
 	    switch(*++str) {
 	    case 'n':
@@ -377,20 +363,14 @@ static char *get_text(LEX *lex)
 	      *to++= '\\';		// remember prefix for wildcard
 	      /* Fall through */
 	    default:
-              found_escape= 1;
-              str--;
+              *to++= *str;
 	      break;
 	    }
 	  }
-	  else if (!found_escape && *str == sep)
-          {
-            found_escape= 1;
-          }
+	  else if (*str == sep)
+	    *to++= *str++;		// Two ' or "
 	  else
-          {
 	    *to++ = *str;
-            found_escape= 0;
-          }
 	}
 	*to=0;
 	lex->yytoklen=(uint) (to-start);
--- mysql-4.1.12/libmysqld/sql_lex.cc.cve-2006-2753	2005-05-13 05:32:46.000000000 -0600
+++ mysql-4.1.12/libmysqld/sql_lex.cc	2006-06-06 15:32:36.235531129 -0600
@@ -295,18 +295,7 @@ static char *get_text(LEX *lex)
       found_escape=1;
       if (lex->ptr == lex->end_of_query)
 	return 0;
-#ifdef USE_MB
-      int l;
-      if (use_mb(cs) &&
-          (l = my_ismbchar(cs,
-                           (const char *)lex->ptr,
-                           (const char *)lex->end_of_query))) {
-          lex->ptr += l;
-          continue;
-      }
-      else
-#endif
-        yySkip();
+      yySkip();
     }
     else if (c == sep)
     {
@@ -335,9 +324,6 @@ static char *get_text(LEX *lex)
       {
 	uchar *to;
 
-        /* Re-use found_escape for tracking state of escapes */
-        found_escape= 0;
-
 	for (to=start ; str != end ; str++)
 	{
 #ifdef USE_MB
@@ -351,7 +337,7 @@ static char *get_text(LEX *lex)
 	      continue;
 	  }
 #endif
-	  if (!found_escape && *str == '\\' && str+1 != end)
+	  if (*str == '\\' && str+1 != end)
 	  {
 	    switch(*++str) {
 	    case 'n':
@@ -377,20 +363,14 @@ static char *get_text(LEX *lex)
 	      *to++= '\\';		// remember prefix for wildcard
 	      /* Fall through */
 	    default:
-              found_escape= 1;
-              str--;
+              *to++= *str;
 	      break;
 	    }
 	  }
-	  else if (!found_escape && *str == sep)
-          {
-            found_escape= 1;
-          }
+	  else if (*str == sep)
+	    *to++= *str++;		// Two ' or "
 	  else
-          {
 	    *to++ = *str;
-            found_escape= 0;
-          }
 	}
 	*to=0;
 	lex->yytoklen=(uint) (to-start);
--- mysql-4.1.12/libmysqld/examples/mysql_client_test.c.cve-2006-2753	2005-05-13 05:32:48.000000000 -0600
+++ mysql-4.1.12/libmysqld/examples/mysql_client_test.c	2006-06-06 15:32:36.234531310 -0600
@@ -11633,25 +11633,26 @@ static void test_bug7990()
 static void test_bug8378()
 {
 #if defined(HAVE_CHARSET_gbk) && !defined(EMBEDDED_LIBRARY)
-  MYSQL *lmysql;
+  MYSQL *old_mysql=mysql;
   char out[9]; /* strlen(TEST_BUG8378)*2+1 */
-  int len;
+  char buf[256];
+  int len, rc;
 
   myheader("test_bug8378");
 
   if (!opt_silent)
     fprintf(stdout, "\n Establishing a test connection ...");
-  if (!(lmysql= mysql_init(NULL)))
+  if (!(mysql= mysql_init(NULL)))
   {
     myerror("mysql_init() failed");
     exit(1);
   }
-  if (mysql_options(lmysql, MYSQL_SET_CHARSET_NAME, "gbk"))
+  if (mysql_options(mysql, MYSQL_SET_CHARSET_NAME, "gbk"))
   {
     myerror("mysql_options() failed");
     exit(1);
   }
-  if (!(mysql_real_connect(lmysql, opt_host, opt_user,
+  if (!(mysql_real_connect(mysql, opt_host, opt_user,
                            opt_password, current_db, opt_port,
                            opt_unix_socket, 0)))
   {
@@ -11661,12 +11662,18 @@ static void test_bug8378()
   if (!opt_silent)
     fprintf(stdout, " OK");
 
-  len= mysql_real_escape_string(lmysql, out, TEST_BUG8378_IN, 4);
+  len= mysql_real_escape_string(mysql, out, TEST_BUG8378_IN, 4);
 
   /* No escaping should have actually happened. */
   DIE_UNLESS(memcmp(out, TEST_BUG8378_OUT, len) == 0);
 
-  mysql_close(lmysql);
+  sprintf(buf, "SELECT '%s'", out);
+  rc=mysql_real_query(mysql, buf, strlen(buf));
+  myquery(rc);
+
+  mysql_close(mysql);
+
+  mysql=old_mysql;
 #endif
 }
 
--- mysql-4.1.12/tests/mysql_client_test.c.cve-2006-2753	2006-06-06 15:23:03.891205371 -0600
+++ mysql-4.1.12/tests/mysql_client_test.c	2006-06-06 15:32:36.242529862 -0600
@@ -11634,25 +11634,26 @@ static void test_bug7990()
 static void test_bug8378()
 {
 #if defined(HAVE_CHARSET_gbk) && !defined(EMBEDDED_LIBRARY)
-  MYSQL *lmysql;
+  MYSQL *old_mysql=mysql;
   char out[9]; /* strlen(TEST_BUG8378)*2+1 */
-  int len;
+  char buf[256];
+  int len, rc;
 
   myheader("test_bug8378");
 
   if (!opt_silent)
     fprintf(stdout, "\n Establishing a test connection ...");
-  if (!(lmysql= mysql_init(NULL)))
+  if (!(mysql= mysql_init(NULL)))
   {
     myerror("mysql_init() failed");
     exit(1);
   }
-  if (mysql_options(lmysql, MYSQL_SET_CHARSET_NAME, "gbk"))
+  if (mysql_options(mysql, MYSQL_SET_CHARSET_NAME, "gbk"))
   {
     myerror("mysql_options() failed");
     exit(1);
   }
-  if (!(mysql_real_connect(lmysql, opt_host, opt_user,
+  if (!(mysql_real_connect(mysql, opt_host, opt_user,
                            opt_password, current_db, opt_port,
                            opt_unix_socket, 0)))
   {
@@ -11662,12 +11663,18 @@ static void test_bug8378()
   if (!opt_silent)
     fprintf(stdout, " OK");
 
-  len= mysql_real_escape_string(lmysql, out, TEST_BUG8378_IN, 4);
+  len= mysql_real_escape_string(mysql, out, TEST_BUG8378_IN, 4);
 
   /* No escaping should have actually happened. */
   DIE_UNLESS(memcmp(out, TEST_BUG8378_OUT, len) == 0);
 
-  mysql_close(lmysql);
+  sprintf(buf, "SELECT '%s'", out);
+  rc=mysql_real_query(mysql, buf, strlen(buf));
+  myquery(rc);
+
+  mysql_close(mysql);
+
+  mysql=old_mysql;
 #endif
 }
 
--- mysql-4.1.12/mysql-test/r/ctype_sjis.result.cve-2006-2753	2005-05-13 06:04:01.000000000 -0600
+++ mysql-4.1.12/mysql-test/r/ctype_sjis.result	2006-06-06 15:32:36.236530948 -0600
@@ -92,6 +92,6 @@ sjis_bin	61
 sjis_bin	6120
 drop table t1;
 SET NAMES sjis;
-SELECT HEX('ç≤ìëÅ@\å\') FROM DUAL;
-HEX('ç≤ìëÅ@Å_å\')
+SELECT HEX('ç≤ìëÅ@å\') FROM DUAL;
+HEX('ç≤ìëÅ@å\')
 8DB2939181408C5C
--- mysql-4.1.14/mysql-test/t/ctype_sjis.test.cve-2006-2753	2005-05-13 06:03:55.000000000 -0600
+++ mysql-4.1.14/mysql-test/t/ctype_sjis.test	2006-06-06 15:37:06.941468961 -0600
@@ -76,6 +76,6 @@
 
 --character_set sjis
 SET NAMES sjis;
-SELECT HEX('ç≤ìëÅ@\å\') FROM DUAL;
+SELECT HEX('ç≤ìëÅ@å\') FROM DUAL;

