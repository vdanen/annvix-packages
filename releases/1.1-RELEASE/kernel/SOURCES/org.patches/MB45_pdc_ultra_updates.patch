--- linux-2.4.22/3rdparty/pdc-ultra/pdc618_mod.c.pdc-ultra-updates	2003-09-16 17:11:28.000000000 +0200
+++ linux-2.4.22/3rdparty/pdc-ultra/pdc618_mod.c	2003-09-16 17:37:44.000000000 +0200
@@ -55,6 +55,14 @@
  * 9. 05/22/2003 v1.00.0.9 - use CAM v1.00.0.41. Fix nForce and WD issues.
  * 9. 06/09/2003 v1.00.0.10 - register char device and support some ioctl
  *                            functions (flash memory).
+ * 
+ * (AK) Some minor changes, September 2003 
+ * Copyright 2003 SuSE Labs
+ * - Check pci_map_sg return value
+ * - Free request in related error path
+ * - Add MODULE_DEVICE_TABLE
+ * - Fix scanning for multiple cards. 
+ * - Fix gapping security holes in ioctl handler
  */
 #include <stdarg.h>
 #include <asm/io.h>
@@ -507,6 +515,7 @@ int pdc618_findcards(void) 
 			}
 		}
 		class++;
+		pdc618_pci_dev = NULL;
 	}
 	/* >> find nForce chipset for fix */
 	if ( adapter ) {
@@ -1640,6 +1649,10 @@ static inline int pdc618_ata_rw(Scsi_Cmn
 
 		sglist = (struct scatterlist *)SCpnt->request_buffer;
 		sgcnt = map_scsi_sg_data(pada, SCpnt);
+		if (sgcnt == 0) {
+			pdc618_request_finish(queue); 
+			return 1;
+		}
 		for (i = 0; i < sgcnt; i++) {
 			unsigned int len = scsi_sg_dma_len(sglist+i);
 			queue->cam_sg[i].StartAddr = cpu_to_le32(scsi_sg_dma_address(sglist+i));
@@ -1682,6 +1695,7 @@ static inline int pdc618_ata_rw(Scsi_Cmn
 	}
 
 	if (CAM_SubmitATA(&queue->cam_task) != camACCEPTED) {
+		pdc618_request_finish(queue); 
 	       	printk(KERN_WARNING "%s:[warning] submit cam busy\n",PDCNAME);
 		return(1);
 	}
@@ -2161,45 +2175,50 @@ static int pdc618dev_ioctl(struct inode 
 		return retval;
 	}
 
+	if (!capable(CAP_SYS_ADMIN))
+		return -EPERM;
+
 	args = (unsigned char *)arg;
 	switch (req) {
 		/* get total adapter count */
 		case STIO_GET_ADAPTERCOUNT: {
 		tag_adaptercount_t *buf = (tag_adaptercount_t *)args;
 
-		buf->adaptercount = pdc618_num_adapters;
-
 		retval = 0;
+		if (get_user(pdc618_num_adapters, &buf->adaptercount))
+			retval = -EFAULT;
 		break;
 		}
 
 		/* get adapter type */
 		case STIO_GET_ADAPTERTYPE: {
 		tag_adaptertype_t *buf = (tag_adaptertype_t *)args;
-		int ada = buf->adapter;
+		int ada;
+		if (get_user(ada, &buf->adapter))
+			return -EFAULT;
 
 		if (pdc618_adapter[ada].present) {
 			switch (pdc618_adapter[ada].deviceid) {
 				case DID618:
-					buf->adaptertype = ULTRA618;
+					put_user(ULTRA618, &buf->adaptertype);
 					break;
 				case DID375:
-					buf->adaptertype = SATA375;
+					put_user(SATA375, &buf->adaptertype);
 					break;
 				case DID376:
-					buf->adaptertype = SATA376;
+					put_user(SATA376, &buf->adaptertype);
 					break;
 				case DID318:
-					buf->adaptertype = SATA318;
+					put_user(SATA318, &buf->adaptertype);
 					break;
 				case DID319:
-					buf->adaptertype = SATA319;
+					put_user(SATA319, &buf->adaptertype);
 					break;
 				case DID378:
-					buf->adaptertype = SATA378;
+					put_user(SATA378, &buf->adaptertype);
 					break;
 				default:
-					buf->adaptertype = SATA150;
+					put_user(SATA150, &buf->adaptertype);
 					break;
 			}
 			retval = 0;
@@ -2211,7 +2230,8 @@ static int pdc618dev_ioctl(struct inode 
 		/* get adapter info */
 		case STIO_GET_ADAPTERINFO: {
 		tag_adapterinfo_t *buf = (tag_adapterinfo_t *)args;
-		int ada = buf->adapter;
+		int ada;
+		get_user(ada, &buf->adapter);
 
 		if (pdc618_adapter[ada].present) {
 			buf->deviceid = pdc618_adapter[ada].deviceid;
@@ -2226,8 +2246,12 @@ static int pdc618dev_ioctl(struct inode 
 		case STIO_FIND_FLASHMEM: {
 		tag_flash_t *buf = (tag_flash_t *)args;
 		int ret;
+		int ada;
+		void *buffer;
+		get_user(ada, &buf->adapter);
+		get_user(buffer, &buf->buffer);
 
-		ret = CAM_Find_FlashMemory(buf->adapter, buf->buffer);
+		ret = CAM_Find_FlashMemory(ada, buffer);
 
 		if (ret ==camFAIL) {
 			return -1;
@@ -2241,8 +2265,11 @@ static int pdc618dev_ioctl(struct inode 
 		case STIO_ERASE_FLASHMEM: {
 		int ret;
 		tag_flash_t *buf = (tag_flash_t *) args;
+		int ada;
+		
+		get_user(ada, &buf->adapter);
 
-		ret = CAM_Erase_FlashMemory(buf->adapter);
+		ret = CAM_Erase_FlashMemory(ada);
 		if (ret == camSUCCESS) {
 			retval = 0;
 		}
@@ -2254,8 +2281,15 @@ static int pdc618dev_ioctl(struct inode 
 		case STIO_READ_FLASHMEM: {
 		int ret;
 		tag_flash_t *buf = (tag_flash_t *) args;
-
-		ret = CAM_Read_FlashMemory(buf->adapter, buf->offset, buf->buffer_size, buf->buffer);
+		int ada;
+		unsigned long offset, buffer_size;
+		void *buffer;
+		get_user(ada, &buf->adapter);
+		get_user(offset, &buf->offset);
+		get_user(buffer_size, &buf->buffer_size);
+		get_user(buffer, &buf->buffer);
+		
+		ret = CAM_Read_FlashMemory(ada, offset, buffer_size, buffer);
 		if (ret == camSUCCESS) {
 			retval = 0;
 			if (debug & LOGATA) {
@@ -2271,8 +2305,15 @@ static int pdc618dev_ioctl(struct inode 
 		case STIO_WRITE_FLASHMEM: {
 		int ret;
 		tag_flash_t *buf = (tag_flash_t *) args;
+		int ada;
+		unsigned long offset, buffer_size;
+		void *buffer;
+		get_user(ada, &buf->adapter);
+		get_user(offset, &buf->offset);
+		get_user(buffer_size, &buf->buffer_size);
+		get_user(buffer, &buf->buffer);
 
-		ret = CAM_Write_FlashMemory(buf->adapter, buf->offset, buf->buffer_size, buf->buffer);
+		ret = CAM_Write_FlashMemory(ada, offset, buffer_size, buffer);
 		if (ret == camSUCCESS) {
 			retval = 0;
 			if (debug & LOGATA) {
@@ -2461,8 +2502,12 @@ U32 camTimer(U32 Delay, void *TimerServi
 		}
 	}
 	else {	/* remove timer */
-		int num;
-		num = (int) TimerService - 1;
+		unsigned long num;
+		num = (unsigned long)TimerService - 1;
+		if (num > MAXTIMER) {
+			printk("camTimer: bad timer to remove %lx\n", num); 
+			return 0;
+		}
 		if (pdc618_timer[num].status == camBUSY)
 			del_timer(&pdc618_timer[num].timer);
 		pdc618_timer[num].status = camFREE;
@@ -2547,3 +2592,14 @@ void cleanup_module(void) 
 }
 #endif
 #endif
+
+static struct pci_device_id pdc_ultra_pci_tbl[] __devinitdata = { 
+	{ PCI_VENDOR_ID_PROMISE, 0x3318, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0 }, 
+	{ PCI_VENDOR_ID_PROMISE, 0x3319, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0 }, 
+	{ PCI_VENDOR_ID_PROMISE, 0x3375, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0 }, 
+	{ PCI_VENDOR_ID_PROMISE, 0x3376, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0 }, 
+	{ PCI_VENDOR_ID_PROMISE, 0x3373, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0 }, 
+	{ PCI_VENDOR_ID_PROMISE, 0x6626, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0 }, 
+	{ 0, }
+};
+MODULE_DEVICE_TABLE(pci,pdc_ultra_pci_tbl);
