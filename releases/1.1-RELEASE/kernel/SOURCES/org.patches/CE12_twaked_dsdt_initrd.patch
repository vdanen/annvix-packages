diff -uNp t1/drivers/acpi/Config.in.ce12-1.orig t1/drivers/acpi/Config.in
--- t1/drivers/acpi/Config.in.ce12-1.orig	2003-10-03 13:27:41.000000000 +0200
+++ t1/drivers/acpi/Config.in	2003-10-07 16:37:06.000000000 +0200
@@ -37,6 +37,9 @@ if [ "$CONFIG_X86" = "y" ]; then
     fi
   fi
 
+  if [ "$CONFIG_BLK_DEV_INITRD" = "y" ]; then
+    bool         'Read DSDT from initrd' CONFIG_ACPI_INITRD
+  fi
   endmenu
 
 fi
diff -uNp q1/Documentation/Configure.help.ce12.orig q1/Documentation/Configure.help
--- q1/Documentation/Configure.help.ce12.orig	2003-10-27 20:20:58.000000000 +0100
+++ q1/Documentation/Configure.help	2003-10-27 20:25:41.000000000 +0100
@@ -19760,6 +19760,13 @@ CONFIG_ACPI_TOSHIBA
   If you have a legacy free Toshiba laptop (such as the Libretto L1
   series), say Y.
 
+ACPI DSDT in initrd
+CONFIG_ACPI_INITRD
+  The DSDT (Differentiated System Description Table) often needs to be 
+  overridden because of a broken BIOS implementation. If you want to put
+  the overriden DSDT into the initrd, see http://gaugusch.at/kernel.shtml
+  for more info. If unsure, say N here.
+
 Advanced Power Management BIOS support
 CONFIG_APM
   APM is a BIOS specification for saving power using several different
--- linux-2.4.21/drivers/acpi/osl.c.ce12.orig	2003-08-24 02:33:20.000000000 +0200
+++ linux-2.4.21/drivers/acpi/osl.c	2003-08-24 02:47:21.000000000 +0200
@@ -34,6 +34,9 @@
 #include <linux/kmod.h>
 #include <linux/delay.h>
 #include <linux/init.h>
+#ifdef CONFIG_ACPI_INITRD
+#include <linux/vmalloc.h>
+#endif
 #include <linux/nmi.h>
 #include <asm/io.h>
 #include <acpi/acpi_bus.h>
@@ -224,14 +227,52 @@
 	return AE_OK;
 }
 
+
+#ifdef CONFIG_ACPI_INITRD
+unsigned char signature_dsdt[] = "INITRDDSDT123DSDT123";
+
+unsigned char* get_dsdt_from_initrd(unsigned char *start, unsigned char *end)
+{
+	unsigned char *data;
+
+	if (start == NULL)
+		return NULL;
+	printk(KERN_INFO "Looking for DSDT in initrd ...");
+	for (data=start; data < end ; ++data) {
+		if (!memcmp(data, signature_dsdt, sizeof(signature_dsdt)-1)) {
+			printk(" found!\n");
+			return data+sizeof(signature_dsdt);
+		}
+	}
+	printk(" not found!\n");
+
+	return NULL;
+}
+#endif
+
 acpi_status
 acpi_os_table_override (struct acpi_table_header *existing_table,
 			struct acpi_table_header **new_table)
 {
+#ifdef CONFIG_ACPI_INITRD
+	extern unsigned long initrd_start, initrd_end;
+	unsigned char* new_dsdt=NULL;
+
+#endif
 	if (!existing_table || !new_table)
 		return AE_BAD_PARAMETER;
 
+#ifdef CONFIG_ACPI_INITRD
+	if (strncmp(existing_table->signature, DSDT_SIG, 4) == 0 &&
+		(new_dsdt=get_dsdt_from_initrd((unsigned char*)initrd_start, 
+			(unsigned char*)initrd_end)) != NULL)
+		*new_table = (struct acpi_table_header*)new_dsdt;
+	else
+		*new_table = NULL;
+#else
 	*new_table = NULL;
+#endif
+
 	return AE_OK;
 }
 
