Date: Wed, 24 May 2006 16:22:14 -0700
From: Tony Jones <tonyj@suse.de>
Subject: Profile access allows essentially execute permission when only read access is granted via usage of mmap system call
References: 175388

Add a new 'm' qualifier to indicate executable mapping [mmap(PROT_EXEC)].
This allows policy intent to be maintained across multiple policy revisions
(which would not be possible if 'ix' was used to specify this). The presence
of 'm' increases the resilience of the unsafe px as a rule with 'm' privileges
must exist in the transitive closure of policies that can be reached
through domain transitions from the starting profile.

Signed-off-by: Tony Jones <tonyj@suse.de>
Acked-by: Andreas Gruenbacher <agruen@suse.de>
---

--- linux-2.6.16.orig/security/apparmor/lsm.c
+++ linux-2.6.16/security/apparmor/lsm.c
@@ -13,6 +13,7 @@
 
 #include <linux/security.h>
 #include <linux/module.h>
+#include <linux/mm.h>
 
 /* superblock types */
 
@@ -498,79 +499,93 @@
 static int subdomain_file_permission(struct file *file, int mask)
 {
 	struct subdomain sdcopy, *sd;
-	struct sdprofile *f_profile;
+	struct sdfile *sdf;
 	int error = 0;
 
-	if (!current->security)
-		goto out;
-
-	f_profile = SD_PROFILE(file->f_security);
-	/* bail out early if this isn't a mediated file */
-	if (!(f_profile && VALID_FSTYPE(file->f_dentry->d_inode)))
-		goto out;
+	if (!current->security ||
+	    !(sdf = (struct sdfile *)file->f_security) ||
+	    !VALID_FSTYPE(file->f_dentry->d_inode))
+		return 0;
 
 	sd = get_sdcopy(&sdcopy);
-	if (__sd_is_confined(sd) && f_profile != sd->active)
+
+	if (__sd_is_confined(sd) && sdf->profile != sd->active)
 		error = sd_perm(sd, file->f_dentry, file->f_vfsmnt,
 				mask & (MAY_EXEC | MAY_WRITE | MAY_READ));
+
 	put_sdcopy(sd);
 
-out:
 	return error;
 }
 
 static int subdomain_file_alloc_security(struct file *file)
 {
 	struct subdomain sdcopy, *sd;
+	int error = 0;
 
 	if (!current->security)
 		return 0;
 
 	sd = get_sdcopy(&sdcopy);
 
-	if (__sd_is_confined(sd))
-		file->f_security = get_sdprofile(sd->active);
+	if (__sd_is_confined(sd)) {
+		struct sdfile *sdf;
+
+		sdf = kmalloc(sizeof(struct sdfile), GFP_KERNEL);
+
+		if (sdf) {
+			sdf->type = sd_file_default;
+			sdf->profile = get_sdprofile(sd->active);
+		} else {
+			error = -ENOMEM;
+		}
+
+		file->f_security = sdf;
+	}
 
 	put_sdcopy(sd);
 
-	return 0;
+	return error;
 }
 
 static void subdomain_file_free_security(struct file *file)
 {
-	struct sdprofile *p = SD_PROFILE(file->f_security);
-	put_sdprofile(p);
+	struct sdfile *sdf = (struct sdfile *)file->f_security;
+
+	if (sdf) {
+		put_sdprofile(sdf->profile);
+		kfree(sdf);
+	}
 }
 
-static int subdomain_file_mmap (struct file *file, unsigned long reqprot,
- 				unsigned long prot, unsigned long flags)
+static inline int sd_mmap(struct file *file, unsigned long prot,
+				 unsigned long flags)
 {
 	int error = 0, mask = 0;
 	struct subdomain sdcopy, *sd;
-	struct sdprofile *f_profile;
+	struct sdfile *sdf;
 
-	if (!current->security)
+	if (!current->security || !file ||
+	    !(sdf = (struct sdfile *)file->f_security) ||
+	    sdf->type == sd_file_shmem)
 		return 0;
 
 	sd = get_sdcopy(&sdcopy);
 
-	f_profile = file ? SD_PROFILE(file->f_security) : NULL;
-
 	if (prot & PROT_READ)
 		mask |= MAY_READ;
-	if (prot & PROT_WRITE)
+
+	/* Private mappings don't require write perms since they don't
+	 * write back to the files */
+	if (prot & PROT_WRITE && !(flags & MAP_PRIVATE))
 		mask |= MAY_WRITE;
+
 	if (prot & PROT_EXEC)
-		mask |= MAY_EXEC;
+		mask |= SD_EXEC_MMAP;
 
 	SD_DEBUG("%s: 0x%x\n", __FUNCTION__, mask);
 
-	/* Don't check if no subdomain's, profiles haven't changed, or
-	 * mapping in the executable
-	 */
-	if (file && __sd_sub_defined(sd) &&
-	    f_profile != sd->active &&
-	    !(flags & MAP_EXECUTABLE))
+	if (mask)
 		error = sd_perm(sd, file->f_dentry, file->f_vfsmnt, mask);
 
 	put_sdcopy(sd);
@@ -578,6 +593,19 @@
 	return error;
 }
 
+static int subdomain_file_mmap(struct file *file, unsigned long reqprot,
+			       unsigned long prot, unsigned long flags)
+{
+	return sd_mmap(file, prot, flags);
+}
+
+static int subdomain_file_mprotect(struct vm_area_struct* vma,
+				   unsigned long reqprot, unsigned long prot)
+{
+	return sd_mmap(vma->vm_file, prot,
+		!(vma->vm_flags & VM_SHARED) ? MAP_PRIVATE : 0);
+}
+
 static int subdomain_task_alloc_security(struct task_struct *p)
 {
 	return sd_fork(p);
@@ -601,6 +629,17 @@
 	return;
 }
 
+static int subdomain_shm_shmat(struct shmid_kernel* shp, char __user *shmaddr,
+			       int shmflg)
+{
+	struct sdfile *sdf = (struct sdfile *)shp->shm_file->f_security;
+
+	if (sdf)
+		sdf->type = sd_file_shmem;
+
+	return 0;
+}
+
 static int subdomain_getprocattr(struct task_struct *p, char *name, void *value,
 				 size_t size)
 {
@@ -789,12 +828,15 @@
 	.file_alloc_security =		subdomain_file_alloc_security,
 	.file_free_security =		subdomain_file_free_security,
 	.file_mmap =			subdomain_file_mmap,
+	.file_mprotect =		subdomain_file_mprotect,
 
 	.task_alloc_security =		subdomain_task_alloc_security,
 	.task_free_security =		subdomain_task_free_security,
 	.task_post_setuid =		subdomain_task_post_setuid,
 	.task_reparent_to_init =	subdomain_task_reparent_to_init,
 
+	.shm_shmat =			subdomain_shm_shmat,
+
 	.getprocattr =			subdomain_getprocattr,
 	.setprocattr =			subdomain_setprocattr,
 };
--- linux-2.6.16.orig/security/apparmor/main.c
+++ linux-2.6.16/security/apparmor/main.c
@@ -314,9 +314,10 @@
 
 	SD_DEBUG("%s: %s 0x%x\n", __FUNCTION__, name, mask);
 
-	/* should not enter with other than R/W/X/L */
+	/* should not enter with other than R/W/M/X/L */
 	BUG_ON(mask &
-	       ~(SD_MAY_READ | SD_MAY_WRITE | SD_MAY_EXEC | SD_MAY_LINK));
+	       ~(SD_MAY_READ | SD_MAY_WRITE | SD_MAY_EXEC |
+		 SD_EXEC_MMAP | SD_MAY_LINK));
 
 	/* not confined */
 	if (!__sd_is_confined(sd)) {
@@ -668,7 +669,8 @@
 	if (sa->type == SD_AUDITTYPE_FILE) {
 		int perm = sdaudit ? sa->ival : sa->errorcode;
 
-		audit_log_format(ab, "%s%s%s%s access to %s ",
+		audit_log_format(ab, "%s%s%s%s%s access to %s ",
+			perm & SD_EXEC_MMAP ? "m" : "",
 			perm & SD_MAY_READ  ? "r" : "",
 			perm & SD_MAY_WRITE ? "w" : "",
 			perm & SD_MAY_EXEC  ? "x" : "",
--- linux-2.6.16.orig/security/apparmor/shared.h
+++ linux-2.6.16/security/apparmor/shared.h
@@ -25,7 +25,8 @@
 #define POS_SD_EXEC_INHERIT		(POS_SD_MAY_LINK + 1)
 #define POS_SD_EXEC_UNCONSTRAINED	(POS_SD_EXEC_INHERIT + 1)
 #define POS_SD_EXEC_PROFILE		(POS_SD_EXEC_UNCONSTRAINED + 1)
-#define POS_SD_FILE_MAX			POS_SD_EXEC_PROFILE
+#define POS_SD_EXEC_MMAP		(POS_SD_EXEC_PROFILE + 1)
+#define POS_SD_FILE_MAX			POS_SD_EXEC_MMAP
 
 /* Modeled after MAY_READ, MAY_WRITE, MAY_EXEC def'ns */
 #define SD_MAY_EXEC			(0x01 << POS_SD_MAY_EXEC)
@@ -35,6 +36,7 @@
 #define SD_EXEC_INHERIT			(0x01 << POS_SD_EXEC_INHERIT)
 #define SD_EXEC_UNCONSTRAINED		(0x01 << POS_SD_EXEC_UNCONSTRAINED)
 #define SD_EXEC_PROFILE			(0x01 << POS_SD_EXEC_PROFILE)
+#define SD_EXEC_MMAP			(0x01 << POS_SD_EXEC_MMAP)
 #define SD_EXEC_MODIFIERS(X)		(X & (SD_EXEC_INHERIT | \
 					 SD_EXEC_UNCONSTRAINED | \
 					 SD_EXEC_PROFILE))
--- linux-2.6.16.orig/security/apparmor/apparmor.h
+++ linux-2.6.16/security/apparmor/apparmor.h
@@ -121,6 +121,21 @@
 	atomic_t count;			/* reference count */
 };
 
+enum sdfile_type {
+	sd_file_default,
+	sd_file_shmem
+};
+
+/**
+ * sdfile - file pointer confinement data
+ *
+ * Data structure assigned to each open file (by subdomain_file_alloc_security)
+ */
+struct sdfile {
+	enum sdfile_type type;
+	struct sdprofile *profile;
+};
+
 /**
  * subdomain - a task's subdomain
  *
--- linux-2.6.16.orig/security/apparmor/module_interface.c
+++ linux-2.6.16/security/apparmor/module_interface.c
@@ -463,6 +463,10 @@
 		goto out;
 	}
 
+	/* ix -> m (required so that target exec binary may map itself) */
+	if (mode & SD_EXEC_INHERIT)
+		file_entry->mode |= SD_EXEC_MMAP;
+
 	list_add(&file_entry->list, &profile->file_entry);
 	profile->num_file_entries++;
 
