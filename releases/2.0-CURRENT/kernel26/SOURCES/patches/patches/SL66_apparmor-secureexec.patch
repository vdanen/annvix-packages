Date: Wed, 24 May 2006 16:22:46 -0700
From: Tony Jones <tonyj@suse.de>
Subject: LD_PRELOAD can be exploited to change the execution path across exec transitions
References: 172061

Use the LSM secure_exec framework which flags the ELF loader such that libc
scrubs the environment. In addition, two new 'safe' qualifiers U and P are
introduced.

Secure exec is activated when going confined->confined or
confined->unconfined only IF a safe qualifier was present in the
profile.

This means that 'u' and 'p' continue to be unsafe and will not activate
a secure exec. U and P indicate that the exec should use secure_exec.
The need for 'p' to remain as-is is because many scripts exist which make
use of LD_LIBRARY_PATH/LD_PRELOAD etc. It makes more sense for 'u' to be the
safe form but for reasons of orthogonality with p we left it as-is but the
parser emits a warning when it sees 'u'.

Signed-off-by: Tony Jones <tonyj@suse.de>
Acked-by: Andreas Gruenbacher <agruen@suse.de>
---

--- linux-2.6.16.orig/security/apparmor/main.c
+++ linux-2.6.16/security/apparmor/main.c
@@ -134,22 +134,26 @@
  *         SD_MAY_EXEC is returned indicating a naked x
  *         if the has an exec qualifier then only the qualifier bit {pui}
  *         is returned (SD_MAY_EXEC) is not set.
+ * @unsafe: true if secure_exec should be overridden
  *
  * Returns 0 (false):
  *    if unable to find profile or there are conflicting pattern matches.
  *       *xmod - is not modified
+ *       *unsafe - is not modified
  *
  * Returns 1 (true):
  *    if not confined
  *       *xmod = SD_MAY_EXEC
+ *       *unsafe = 0
  *    if exec rule matched
  *       if the rule has an execution mode qualifier {pui} then
  *          *xmod = the execution qualifier of the rule {pui}
  *       else
  *          *xmod = SD_MAY_EXEC
+ *       unsafe = presence of unsafe flag
  */
 static inline int sd_get_execmode(struct subdomain *sd, const char *name,
-				  int *xmod)
+				  int *xmod, int *unsafe)
 {
 	struct sdprofile *profile;
 	struct sd_entry *entry;
@@ -182,8 +186,8 @@
 		    sdmatch_match(name, entry->filename,
 				  entry->entry_type, entry->extradata)) {
 			if (match &&
-			    SD_EXEC_MASK(entry->mode) !=
-			    SD_EXEC_MASK(match->mode))
+			    SD_EXEC_UNSAFE_MASK(entry->mode) !=
+			    SD_EXEC_UNSAFE_MASK(match->mode))
 				pattern_match_invalid = 1;
 			else
 				/* keep searching for an exact match */
@@ -203,8 +207,8 @@
 				break;
 			} else {
 				if (match &&
-				    SD_EXEC_MASK(entry->mode) !=
-				    SD_EXEC_MASK(match->mode))
+				    SD_EXEC_UNSAFE_MASK(entry->mode) !=
+				    SD_EXEC_UNSAFE_MASK(match->mode))
 					pattern_match_invalid = 1;
 				else
 					/* got a tailglob match, keep searching
@@ -228,6 +232,7 @@
 			mode = mode & ~SD_MAY_EXEC;
 
 		*xmod = mode;
+		*unsafe = (match->mode & SD_EXEC_UNSAFE);
 	} else if (!match) {
 		SD_DEBUG("%s: Unable to find execute entry in profile "
 			 "for image '%s'\n",
@@ -246,6 +251,7 @@
 
 not_confined:
 	*xmod = SD_MAY_EXEC;
+	*unsafe = 0;
 	return 1;
 }
 
@@ -1214,15 +1220,17 @@
  * This _used_ to be a really simple piece of code :-(
  *
  */
-int sd_register(struct file *filp)
+int sd_register(struct linux_binprm *bprm)
 {
 	char *filename;
+	struct file *filp = bprm->file;
 	struct subdomain *sd, sdcopy;
 	struct sdprofile *newprofile = NULL, unconstrained_flag;
 	int 	error = -ENOMEM,
 		exec_mode = 0,
 		findprofile = 0,
 		findprofile_mandatory = 0,
+		unsafe_exec = 0,
 		complain = 0;
 
 	SD_DEBUG("%s\n", __FUNCTION__);
@@ -1248,7 +1256,7 @@
 	/* Confined task, determine what mode inherit, unconstrained or
 	 * mandatory to load new profile
 	 */
-	if (sd_get_execmode(sd, filename, &exec_mode)) {
+	if (sd_get_execmode(sd, filename, &exec_mode, &unsafe_exec)) {
 		switch (exec_mode) {
 		case SD_EXEC_INHERIT:
 			/* do nothing - setting of profile
@@ -1308,9 +1316,10 @@
 	} else if (complain) {
 		/* There was no entry in calling profile
 		 * describing mode to execute image in.
-		 * Drop into null-profile
+		 * Drop into null-profile (disabling secure exec).
 		 */
 		newprofile = get_sdprofile(null_complain_profile);
+		unsafe_exec = 1;
 	} else {
 		SD_WARN("%s: Rejecting exec(2) of image '%s'. "
 			"Unable to determine exec qualifier "
@@ -1443,6 +1452,23 @@
 			}
 		}
 
+		/* Handle confined exec.
+		 * Can be at this point for the following reasons:
+		 * 1. unconfined switching to confined
+		 * 2. confined switching to different confinement
+		 * 3. confined switching to unconfined
+		 *
+		 * Cases 2 and 3 are marked as requiring secure exec
+		 * (unless policy specified "unsafe exec")
+		 */
+		if (__sd_is_confined(latest_sd) && !unsafe_exec) {
+			unsigned long bprm_flags;
+
+			bprm_flags = SD_SECURE_EXEC_NEEDED;
+			bprm->security = (void*)
+				((unsigned long)bprm->security | bprm_flags);
+		}
+
 		sd_switch(latest_sd, newprofile, newprofile);
 		put_sdprofile(newprofile);
 
--- linux-2.6.16.orig/security/apparmor/apparmor.h
+++ linux-2.6.16/security/apparmor/apparmor.h
@@ -15,6 +15,9 @@
 /* defn of iattr */
 #include <linux/fs.h>
 
+/* defn of linux_binprm */
+#include <linux/binfmts.h>
+
 #include "shared.h"
 
 /* Control parameters (0 or 1), settable thru module/boot flags or
@@ -86,14 +89,15 @@
 	struct list_head listp[POS_SD_FILE_MAX + 1];
 };
 
-#define SD_EXEC_MODIFIER_MASK(mask) ((mask) & (SD_EXEC_UNCONSTRAINED |\
-		      		    SD_EXEC_INHERIT |\
-		      		    SD_EXEC_PROFILE))
-
-#define SD_EXEC_MASK(mask) ((mask) & (SD_MAY_EXEC |\
-		      		    SD_EXEC_UNCONSTRAINED |\
-		      		    SD_EXEC_INHERIT |\
-		      		    SD_EXEC_PROFILE))
+#define SD_SECURE_EXEC_NEEDED 0x00000001
+
+#define SD_EXEC_MODIFIER_MASK(mask) ((mask) & SD_EXEC_MODIFIERS)
+
+#define SD_EXEC_MASK(mask) ((mask) & (SD_MAY_EXEC | SD_EXEC_MODIFIERS))
+
+#define SD_EXEC_UNSAFE_MASK(mask) ((mask) & (SD_MAY_EXEC |\
+					     SD_EXEC_MODIFIERS |\
+					     SD_EXEC_UNSAFE))
 
 /**
  * sdprofile - basic confinement data
@@ -255,7 +259,7 @@
 extern int sd_link(struct subdomain *sd,
 		   struct dentry *link, struct dentry *target);
 extern int sd_fork(struct task_struct *p);
-extern int sd_register(struct file *file);
+extern int sd_register(struct linux_binprm *bprm);
 extern void sd_release(struct task_struct *p);
 extern int sd_change_hat(const char *id, __u32 hat_magic);
 extern int sd_associate_filp(struct file *filp);
--- linux-2.6.16.orig/security/apparmor/lsm.c
+++ linux-2.6.16/security/apparmor/lsm.c
@@ -217,7 +217,20 @@
 	/* already set based on script name */
 	if (bprm->sh_bang)
 		return 0;
-	return sd_register(bprm->file);
+	return sd_register(bprm);
+}
+
+static int subdomain_bprm_secureexec(struct linux_binprm *bprm)
+{
+	int ret = cap_bprm_secureexec(bprm);
+
+	if (ret == 0 && (unsigned long)bprm->security & SD_SECURE_EXEC_NEEDED) {
+		SD_DEBUG("%s: secureexec required for %s\n",
+			__FUNCTION__, bprm->filename);
+		ret = 1;
+	}
+
+	return ret;
 }
 
 static int subdomain_sb_mount(char *dev_name, struct nameidata *nd, char *type,
@@ -807,6 +820,7 @@
 
 	.bprm_apply_creds =		subdomain_bprm_apply_creds,
 	.bprm_set_security =		subdomain_bprm_set_security,
+	.bprm_secureexec =		subdomain_bprm_secureexec,
 
 	.sb_mount =			subdomain_sb_mount,
 	.sb_umount =			subdomain_umount,
--- linux-2.6.16.orig/security/apparmor/shared.h
+++ linux-2.6.16/security/apparmor/shared.h
@@ -26,7 +26,8 @@
 #define POS_SD_EXEC_UNCONSTRAINED	(POS_SD_EXEC_INHERIT + 1)
 #define POS_SD_EXEC_PROFILE		(POS_SD_EXEC_UNCONSTRAINED + 1)
 #define POS_SD_EXEC_MMAP		(POS_SD_EXEC_PROFILE + 1)
-#define POS_SD_FILE_MAX			POS_SD_EXEC_MMAP
+#define POS_SD_EXEC_UNSAFE		(POS_SD_EXEC_MMAP + 1)
+#define POS_SD_FILE_MAX			POS_SD_EXEC_UNSAFE
 
 /* Modeled after MAY_READ, MAY_WRITE, MAY_EXEC def'ns */
 #define SD_MAY_EXEC			(0x01 << POS_SD_MAY_EXEC)
@@ -37,8 +38,10 @@
 #define SD_EXEC_UNCONSTRAINED		(0x01 << POS_SD_EXEC_UNCONSTRAINED)
 #define SD_EXEC_PROFILE			(0x01 << POS_SD_EXEC_PROFILE)
 #define SD_EXEC_MMAP			(0x01 << POS_SD_EXEC_MMAP)
-#define SD_EXEC_MODIFIERS(X)		(X & (SD_EXEC_INHERIT | \
+#define SD_EXEC_UNSAFE			(0x01 << POS_SD_EXEC_UNSAFE)
+
+#define SD_EXEC_MODIFIERS		(SD_EXEC_INHERIT | \
 					 SD_EXEC_UNCONSTRAINED | \
-					 SD_EXEC_PROFILE))
+					 SD_EXEC_PROFILE)
 
 #endif /* _SHARED_H */
