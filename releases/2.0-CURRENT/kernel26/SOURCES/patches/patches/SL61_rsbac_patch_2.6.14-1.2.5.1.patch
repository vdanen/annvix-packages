diff -urN trunk/arch/alpha/Kconfig 2.6.14-rsbac-1.2.5/arch/alpha/Kconfig
--- trunk/arch/alpha/Kconfig	2005-11-11 10:04:11.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/alpha/Kconfig	2005-11-10 16:17:05.000000000 +0000
@@ -599,6 +599,8 @@
 
 endmenu
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 source "drivers/Kconfig"
diff -urN trunk/arch/alpha/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/alpha/kernel/ptrace.c
--- trunk/arch/alpha/kernel/ptrace.c	2005-11-11 10:04:12.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/alpha/kernel/ptrace.c	2005-11-10 16:17:05.000000000 +0000
@@ -21,6 +21,11 @@
 #include <asm/system.h>
 #include <asm/fpu.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 #include "proto.h"
 
 #define DEBUG	DBG_MEM
@@ -262,6 +267,12 @@
 	size_t copied;
 	long ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	lock_kernel();
 	DBG(DBG_MEM, ("request=%ld pid=%ld addr=0x%lx data=0x%lx\n",
 		      request, pid, addr, data));
@@ -273,6 +284,26 @@
 		ret = security_ptrace(current->parent, current);
 		if (ret)
 			goto out_notsk;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                    ret = -EPERM;
+                    goto out_notsk;
+                  }
+                #endif
+
 		/* set the ptrace bit in the process ptrace flags. */
 		current->ptrace |= PT_PTRACED;
 		ret = 0;
@@ -281,6 +312,25 @@
 	if (pid == 1)		/* you may not mess with init */
 		goto out_notsk;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            ret = -EPERM;
+            goto out_notsk;
+          }
+        #endif
+
 	ret = -ESRCH;
 	read_lock(&tasklist_lock);
 	child = find_task_by_pid(pid);
diff -urN trunk/arch/arm/Kconfig 2.6.14-rsbac-1.2.5/arch/arm/Kconfig
--- trunk/arch/arm/Kconfig	2005-11-11 10:03:59.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/arm/Kconfig	2005-11-10 16:16:58.000000000 +0000
@@ -667,6 +667,8 @@
 
 endmenu
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 menu "Device Drivers"
diff -urN trunk/arch/arm/kernel/calls.S 2.6.14-rsbac-1.2.5/arch/arm/kernel/calls.S
--- trunk/arch/arm/kernel/calls.S	2005-11-11 10:03:59.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/arm/kernel/calls.S	2005-11-10 16:16:58.000000000 +0000
@@ -237,7 +237,11 @@
 /* 220 */	.long	sys_madvise
 		.long	sys_fcntl64
 		.long	sys_ni_syscall /* TUX */
-		.long	sys_ni_syscall
+#ifdef CONFIG_RSBAC
+		.long	sys_rsbac 	/*	reserved for sys_security */
+#else
+ 		.long	sys_ni_syscall 	/*	reserved for sys_security */
+#endif
 		.long	sys_gettid
 /* 225 */	.long	sys_readahead
 		.long	sys_setxattr
diff -urN trunk/arch/arm/kernel/process.c 2.6.14-rsbac-1.2.5/arch/arm/kernel/process.c
--- trunk/arch/arm/kernel/process.c	2005-11-11 10:03:59.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/arm/kernel/process.c	2005-11-10 16:16:58.000000000 +0000
@@ -34,6 +34,11 @@
 #include <asm/uaccess.h>
 #include <asm/mach/time.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 extern const char *processor_modes[];
 extern void setup_mm_for_reboot(char mode);
 
@@ -428,6 +433,11 @@
 {
 	struct pt_regs regs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        int rsbac_retval;
+        #endif
+
 	memset(&regs, 0, sizeof(regs));
 
 	regs.ARM_r1 = (unsigned long)arg;
@@ -436,7 +446,14 @@
 	regs.ARM_pc = (unsigned long)kernel_thread_helper;
 	regs.ARM_cpsr = SVC_MODE;
 
+        #ifdef CONFIG_RSBAC
+	rsbac_retval = do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+	if(rsbac_retval > 0)
+	  rsbac_kthread_notify(rsbac_retval);
+	return rsbac_retval;
+        #else
 	return do_fork(flags|CLONE_VM|CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+	#endif
 }
 EXPORT_SYMBOL(kernel_thread);
 
diff -urN trunk/arch/arm/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/arm/kernel/ptrace.c
--- trunk/arch/arm/kernel/ptrace.c	2005-11-11 10:03:59.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/arm/kernel/ptrace.c	2005-11-10 16:16:58.000000000 +0000
@@ -26,6 +26,11 @@
 #include <asm/system.h>
 #include <asm/traps.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 #include "ptrace.h"
 
 #define REG_PC	15
@@ -787,6 +792,12 @@
 	struct task_struct *child;
 	int ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	lock_kernel();
 	ret = -EPERM;
 	if (request == PTRACE_TRACEME) {
@@ -796,6 +807,26 @@
 		ret = security_ptrace(current->parent, current);
 		if (ret)
 			goto out;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                    ret = -EPERM;
+                    goto out;
+                  }
+                #endif
+
 		/* set the ptrace bit in the process flags. */
 		current->ptrace |= PT_PTRACED;
 		ret = 0;
@@ -814,6 +845,25 @@
 	if (pid == 1)		/* you may not mess with init */
 		goto out_tsk;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            ret = -EPERM;
+            goto out_tsk;
+          }
+        #endif
+
 	if (request == PTRACE_ATTACH) {
 		ret = ptrace_attach(child);
 		goto out_tsk;
diff -urN trunk/arch/arm26/Kconfig 2.6.14-rsbac-1.2.5/arch/arm26/Kconfig
--- trunk/arch/arm26/Kconfig	2005-11-11 10:04:13.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/arm26/Kconfig	2005-11-10 16:17:06.000000000 +0000
@@ -187,6 +187,8 @@
 
 endmenu
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 source "drivers/base/Kconfig"
diff -urN trunk/arch/arm26/kernel/process.c 2.6.14-rsbac-1.2.5/arch/arm26/kernel/process.c
--- trunk/arch/arm26/kernel/process.c	2005-11-11 10:04:13.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/arm26/kernel/process.c	2005-11-10 16:17:06.000000000 +0000
@@ -33,6 +33,11 @@
 #include <asm/processor.h>
 #include <asm/uaccess.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 extern const char *processor_modes[];
 extern void setup_mm_for_reboot(char mode);
 
@@ -362,6 +367,11 @@
 {
         struct pt_regs regs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        int rsbac_retval;
+        #endif
+
         memset(&regs, 0, sizeof(regs));
 
         regs.ARM_r1 = (unsigned long)arg;
@@ -369,7 +379,15 @@
         regs.ARM_r3 = (unsigned long)do_exit;
         regs.ARM_pc = (unsigned long)kernel_thread_helper | MODE_SVC26;
 
+	/* Ok, create the new process.. */
+        #ifdef CONFIG_RSBAC
+	rsbac_retval = do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+	if(rsbac_retval > 0)
+	  rsbac_kthread_notify(rsbac_retval);
+	return rsbac_retval;
+        #else
         return do_fork(flags|CLONE_VM|CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+        #endif
 }
 EXPORT_SYMBOL(kernel_thread);
 
diff -urN trunk/arch/arm26/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/arm26/kernel/ptrace.c
--- trunk/arch/arm26/kernel/ptrace.c	2005-11-11 10:04:13.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/arm26/kernel/ptrace.c	2005-11-10 16:17:06.000000000 +0000
@@ -25,6 +25,11 @@
 #include <asm/system.h>
 //#include <asm/processor.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 #include "ptrace.h"
 
 #define REG_PC	15
@@ -670,6 +675,12 @@
 	struct task_struct *child;
 	int ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	lock_kernel();
 	ret = -EPERM;
 	if (request == PTRACE_TRACEME) {
@@ -679,6 +690,26 @@
 		ret = security_ptrace(current->parent, current);
 		if (ret)
 			goto out;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                    ret = -EPERM;
+                    goto out;
+                  }
+                #endif
+
 		/* set the ptrace bit in the process flags. */
 		current->ptrace |= PT_PTRACED;
 		ret = 0;
@@ -697,6 +728,25 @@
 	if (pid == 1)		/* you may not mess with init */
 		goto out_tsk;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            ret = -EPERM;
+            goto out_tsk;
+          }
+        #endif
+
 	if (request == PTRACE_ATTACH) {
 		ret = ptrace_attach(child);
 		goto out_tsk;
diff -urN trunk/arch/cris/arch-v10/kernel/entry.S 2.6.14-rsbac-1.2.5/arch/cris/arch-v10/kernel/entry.S
--- trunk/arch/cris/arch-v10/kernel/entry.S	2005-11-11 10:04:16.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/cris/arch-v10/kernel/entry.S	2005-11-10 16:17:09.000000000 +0000
@@ -1070,7 +1070,11 @@
 	.long sys_getdents64	/* 220 */
 	.long sys_fcntl64
 	.long sys_ni_syscall	/* reserved for TUX */
-	.long sys_ni_syscall
+#ifdef CONFIG_RSBAC
+	.long sys_rsbac 	/*	reserved for sys_security */
+#else
+ 	.long sys_ni_syscall 	/*	reserved for sys_security */
+#endif
 	.long sys_gettid
 	.long sys_readahead	/* 225 */
 	.long sys_setxattr
diff -urN trunk/arch/cris/arch-v10/kernel/process.c 2.6.14-rsbac-1.2.5/arch/cris/arch-v10/kernel/process.c
--- trunk/arch/cris/arch-v10/kernel/process.c	2005-11-11 10:04:16.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/cris/arch-v10/kernel/process.c	2005-11-10 16:17:09.000000000 +0000
@@ -19,6 +19,11 @@
 #include <asm/arch/svinto.h>
 #include <linux/init.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 #ifdef CONFIG_ETRAX_GPIO
 void etrax_gpio_wake_up_check(void); /* drivers/gpio.c */
 #endif
@@ -95,6 +100,11 @@
 {
 	struct pt_regs regs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        int rsbac_retval;
+        #endif
+
 	memset(&regs, 0, sizeof(regs));
 
         /* Don't use r10 since that is set to 0 in copy_thread */
@@ -104,7 +114,14 @@
 	regs.dccr = 1 << I_DCCR_BITNR;
 
 	/* Ok, create the new process.. */
+        #ifdef CONFIG_RSBAC
+	rsbac_retval = do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+	if(rsbac_retval > 0)
+	  rsbac_kthread_notify(rsbac_retval);
+	return rsbac_retval;
+        #else
         return do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+        #endif
 }
 
 /* setup the child's kernel stack with a pt_regs and switch_stack on it.
diff -urN trunk/arch/cris/Kconfig 2.6.14-rsbac-1.2.5/arch/cris/Kconfig
--- trunk/arch/cris/Kconfig	2005-11-11 10:04:16.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/cris/Kconfig	2005-11-10 16:17:09.000000000 +0000
@@ -122,6 +122,8 @@
 
 endmenu
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 # bring in ETRAX built-in drivers
diff -urN trunk/arch/h8300/kernel/process.c 2.6.14-rsbac-1.2.5/arch/h8300/kernel/process.c
--- trunk/arch/h8300/kernel/process.c	2005-11-11 10:04:18.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/h8300/kernel/process.c	2005-11-10 16:17:09.000000000 +0000
@@ -45,6 +45,11 @@
 #include <asm/setup.h>
 #include <asm/pgtable.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 asmlinkage void ret_from_fork(void);
 
 /*
@@ -149,6 +154,12 @@
 		:"i"(__NR_clone),"g"(clone_arg),"g"(fn),"g"(arg),"i"(__NR_exit)
 		:"er0","er1","er2","er3");
 	set_fs (fs);
+
+        #ifdef CONFIG_RSBAC
+	if(retval > 0)
+	  rsbac_kthread_notify(retval);
+        #endif
+
 	return retval;
 }
 
diff -urN trunk/arch/h8300/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/h8300/kernel/ptrace.c
--- trunk/arch/h8300/kernel/ptrace.c	2005-11-11 10:04:18.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/h8300/kernel/ptrace.c	2005-11-10 16:17:09.000000000 +0000
@@ -33,6 +33,11 @@
 #include <asm/processor.h>
 #include <asm/signal.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /* cpu depend functions */
 extern long h8300_get_reg(struct task_struct *task, int regno);
 extern int  h8300_put_reg(struct task_struct *task, int regno, unsigned long data);
@@ -62,12 +67,38 @@
 	struct task_struct *child;
 	int ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	lock_kernel();
 	ret = -EPERM;
 	if (request == PTRACE_TRACEME) {
 		/* are we already being traced? */
 		if (current->ptrace & PT_PTRACED)
 			goto out;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                    ret = -EPERM;
+                    goto out;
+                  }
+                #endif
+
 		/* set the ptrace bit in the process flags. */
 		current->ptrace |= PT_PTRACED;
 		ret = 0;
@@ -86,6 +117,25 @@
 	if (pid == 1)		/* you may not mess with init */
 		goto out_tsk;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            ret = -EPERM;
+            goto out_tsk;
+          }
+        #endif
+
 	if (request == PTRACE_ATTACH) {
 		ret = ptrace_attach(child);
 		goto out_tsk;
diff -urN trunk/arch/i386/Kconfig 2.6.14-rsbac-1.2.5/arch/i386/Kconfig
--- trunk/arch/i386/Kconfig	2005-11-11 10:04:14.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/i386/Kconfig	2005-11-10 16:17:07.000000000 +0000
@@ -984,6 +984,7 @@
 	  Generate crash dump after being started by kexec.
 endmenu
 
+source "rsbac/Kconfig"
 
 menu "Power management options (ACPI, APM)"
 	depends on !X86_VOYAGER
diff -urN trunk/arch/i386/kernel/ioport.c 2.6.14-rsbac-1.2.5/arch/i386/kernel/ioport.c
--- trunk/arch/i386/kernel/ioport.c	2005-11-11 10:04:13.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/i386/kernel/ioport.c	2005-11-10 16:17:06.000000000 +0000
@@ -16,6 +16,11 @@
 #include <linux/slab.h>
 #include <linux/thread_info.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /* Set EXTENT bits starting at BASE in BITMAP to value TURN_ON. */
 static void set_bitmap(unsigned long *bitmap, unsigned int base, unsigned int extent, int new_value)
 {
@@ -61,11 +66,35 @@
 	struct tss_struct * tss;
 	unsigned long *bitmap;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+ 
 	if ((from + num <= from) || (from + num > IO_BITMAP_BITS))
 		return -EINVAL;
 	if (turn_on && !capable(CAP_SYS_RAWIO))
 		return -EPERM;
 
+         /* RSBAC */
+         #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ioperm(): calling ADF\n");
+#endif
+        rsbac_target_id.scd = ST_ioports;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_PERMISSIONS_DATA,
+                               current->pid,
+                               T_SCD,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	/*
 	 * If it's the first ioperm() call in this thread's lifetime, set the
 	 * IO bitmap up. ioperm() is much less timing critical than clone(),
@@ -134,12 +163,36 @@
 	unsigned int old = (regs->eflags >> 12) & 3;
 	struct thread_struct *t = &current->thread;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (level > 3)
 		return -EINVAL;
 	/* Trying to gain more privileges? */
 	if (level > old) {
 		if (!capable(CAP_SYS_RAWIO))
 			return -EPERM;
+
+	        /* RSBAC */
+	        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+	        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_iopl(): calling ADF\n");
+#endif
+	        rsbac_target_id.scd = ST_ioports;
+	        rsbac_attribute_value.dummy = 0;
+	        if (!rsbac_adf_request(R_MODIFY_PERMISSIONS_DATA,
+	                               current->pid,
+	                               T_SCD,
+	                               rsbac_target_id,
+	                               A_none,
+	                               rsbac_attribute_value))
+	          {
+	            return -EPERM;
+	          }
+	        #endif
 	}
 	t->iopl = level << 12;
 	regs->eflags = (regs->eflags & ~X86_EFLAGS_IOPL) | t->iopl;
diff -urN trunk/arch/i386/kernel/process.c 2.6.14-rsbac-1.2.5/arch/i386/kernel/process.c
--- trunk/arch/i386/kernel/process.c	2005-11-11 10:04:13.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/i386/kernel/process.c	2005-11-10 16:17:06.000000000 +0000
@@ -57,6 +57,11 @@
 #include <asm/tlbflush.h>
 #include <asm/cpu.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 asmlinkage void ret_from_fork(void) __asm__("ret_from_fork");
 
 static int hlt_counter;
@@ -344,6 +349,11 @@
 {
 	struct pt_regs regs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        int rsbac_retval;
+        #endif
+
 	memset(&regs, 0, sizeof(regs));
 
 	regs.ebx = (unsigned long) fn;
@@ -357,7 +367,14 @@
 	regs.eflags = X86_EFLAGS_IF | X86_EFLAGS_SF | X86_EFLAGS_PF | 0x2;
 
 	/* Ok, create the new process.. */
+        #ifdef CONFIG_RSBAC
+	rsbac_retval = do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+	if(rsbac_retval > 0)
+	  rsbac_kthread_notify(rsbac_retval);
+	return rsbac_retval;
+        #else
 	return do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+        #endif
 }
 EXPORT_SYMBOL(kernel_thread);
 
diff -urN trunk/arch/i386/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/i386/kernel/ptrace.c
--- trunk/arch/i386/kernel/ptrace.c	2005-11-11 10:04:13.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/i386/kernel/ptrace.c	2005-11-10 16:17:06.000000000 +0000
@@ -27,6 +27,11 @@
 #include <asm/ldt.h>
 #include <asm/desc.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /*
  * does not yet catch signals sent when the child dies.
  * in exit.c or in signal.c.
@@ -361,6 +366,12 @@
 	int i, ret;
 	unsigned long __user *datap = (unsigned long __user *)data;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	lock_kernel();
 	ret = -EPERM;
 	if (request == PTRACE_TRACEME) {
@@ -370,6 +381,26 @@
 		ret = security_ptrace(current->parent, current);
 		if (ret)
 			goto out;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                    ret = -EPERM;
+                    goto out;
+                  }
+                #endif
+
 		/* set the ptrace bit in the process flags. */
 		current->ptrace |= PT_PTRACED;
 		ret = 0;
@@ -388,6 +419,25 @@
 	if (pid == 1)		/* you may not mess with init */
 		goto out_tsk;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            ret = -EPERM;
+            goto out_tsk;
+          }
+        #endif
+
 	if (request == PTRACE_ATTACH) {
 		ret = ptrace_attach(child);
 		goto out_tsk;
diff -urN trunk/arch/i386/kernel/syscall_table.S 2.6.14-rsbac-1.2.5/arch/i386/kernel/syscall_table.S
--- trunk/arch/i386/kernel/syscall_table.S	2005-11-11 10:04:13.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/i386/kernel/syscall_table.S	2005-11-10 16:17:06.000000000 +0000
@@ -223,7 +223,11 @@
 	.long sys_getdents64	/* 220 */
 	.long sys_fcntl64
 	.long sys_ni_syscall	/* reserved for TUX */
-	.long sys_ni_syscall
+#ifdef CONFIG_RSBAC
+	.long sys_rsbac		/* Reserved for security */
+#else
+	.long sys_ni_syscall	/* Reserved for security */
+#endif
 	.long sys_gettid
 	.long sys_readahead	/* 225 */
 	.long sys_setxattr
diff -urN trunk/arch/ia64/Kconfig 2.6.14-rsbac-1.2.5/arch/ia64/Kconfig
--- trunk/arch/ia64/Kconfig	2005-11-11 10:04:19.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/ia64/Kconfig	2005-11-10 16:17:10.000000000 +0000
@@ -382,6 +382,8 @@
 
 source "drivers/Kconfig"
 
+source "rsbac/Kconfig"
+
 source "fs/Kconfig"
 
 source "lib/Kconfig"
diff -urN trunk/arch/ia64/kernel/entry.S 2.6.14-rsbac-1.2.5/arch/ia64/kernel/entry.S
--- trunk/arch/ia64/kernel/entry.S	2005-11-11 10:04:19.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/ia64/kernel/entry.S	2005-11-10 16:17:10.000000000 +0000
@@ -1600,5 +1600,11 @@
 	data8 sys_inotify_init
 	data8 sys_inotify_add_watch
 	data8 sys_inotify_rm_watch
+#ifdef CONFIG_RSBAC
+	/* we use 1280, until sys_security gets defined here */
+	data8 sys_rsbac				// 1280
+#else
+	data8 sys_ni_syscall			// 1280
+#endif
 
 	.org sys_call_table + 8*NR_syscalls	// guard against failures to increase NR_syscalls
diff -urN trunk/arch/ia64/kernel/process.c 2.6.14-rsbac-1.2.5/arch/ia64/kernel/process.c
--- trunk/arch/ia64/kernel/process.c	2005-11-11 10:04:19.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/ia64/kernel/process.c	2005-11-10 16:17:10.000000000 +0000
@@ -48,6 +48,11 @@
 # include <asm/perfmon.h>
 #endif
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 #include "sigframe.h"
 
 void (*ia64_mark_idle)(int);
@@ -672,6 +677,11 @@
 		struct pt_regs pt;
 	} regs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        int rsbac_retval;
+        #endif
+
 	memset(&regs, 0, sizeof(regs));
 	regs.pt.cr_iip = helper_fptr[0];	/* set entry point (IP) */
 	regs.pt.r1 = helper_fptr[1];		/* set GP */
@@ -683,7 +693,14 @@
 	regs.sw.ar_fpsr = regs.pt.ar_fpsr = ia64_getreg(_IA64_REG_AR_FPSR);
 	regs.sw.ar_bspstore = (unsigned long) current + IA64_RBS_OFFSET;
 	regs.sw.pr = (1 << PRED_KERNEL_STACK);
+        #ifdef CONFIG_RSBAC
+	rsbac_retval = do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs.pt, 0, NULL, NULL);
+	if(rsbac_retval > 0)
+	  rsbac_kthread_notify(rsbac_retval);
+	return rsbac_retval;
+        #else
 	return do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs.pt, 0, NULL, NULL);
+	#endif
 }
 EXPORT_SYMBOL(kernel_thread);
 
diff -urN trunk/arch/ia64/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/ia64/kernel/ptrace.c
--- trunk/arch/ia64/kernel/ptrace.c	2005-11-11 10:04:19.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/ia64/kernel/ptrace.c	2005-11-10 16:17:10.000000000 +0000
@@ -30,6 +30,11 @@
 #include <asm/perfmon.h>
 #endif
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 #include "entry.h"
 
 /*
@@ -1425,6 +1430,12 @@
 	struct switch_stack *sw;
 	long ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	lock_kernel();
 	ret = -EPERM;
 	if (request == PTRACE_TRACEME) {
@@ -1434,6 +1445,26 @@
 		ret = security_ptrace(current->parent, current);
 		if (ret)
 			goto out;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                    ret = -EPERM;
+                    goto out;
+                  }
+                #endif
+
 		current->ptrace |= PT_PTRACED;
 		ret = 0;
 		goto out;
@@ -1460,6 +1491,25 @@
 	if (pid == 1)		/* no messing around with init! */
 		goto out_tsk;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            ret = -EPERM;
+            goto out_tsk;
+          }
+        #endif
+
 	if (request == PTRACE_ATTACH) {
 		ret = ptrace_attach(child);
 		goto out_tsk;
diff -urN trunk/arch/m68k/Kconfig 2.6.14-rsbac-1.2.5/arch/m68k/Kconfig
--- trunk/arch/m68k/Kconfig	2005-11-11 10:04:09.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/m68k/Kconfig	2005-11-10 16:17:04.000000000 +0000
@@ -455,6 +455,8 @@
 
 endmenu
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 source "drivers/Kconfig"
diff -urN trunk/arch/m68k/kernel/entry.S 2.6.14-rsbac-1.2.5/arch/m68k/kernel/entry.S
--- trunk/arch/m68k/kernel/entry.S	2005-11-11 10:04:09.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/m68k/kernel/entry.S	2005-11-10 16:17:04.000000000 +0000
@@ -710,3 +710,10 @@
 	.long sys_request_key	/* 280 */
 	.long sys_keyctl
 
+#ifdef CONFIG_RSBAC
+	/* we use 300, until sys_security gets defined here */
+	.rept 299-281
+		.long sys_ni_syscall
+	.endr
+	.long sys_rsbac
+#endif
diff -urN trunk/arch/m68k/kernel/process.c 2.6.14-rsbac-1.2.5/arch/m68k/kernel/process.c
--- trunk/arch/m68k/kernel/process.c	2005-11-11 10:04:09.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/m68k/kernel/process.c	2005-11-10 16:17:04.000000000 +0000
@@ -35,6 +35,11 @@
 #include <asm/setup.h>
 #include <asm/pgtable.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 /*
  * Initial task/thread structure. Make this a per-architecture thing,
  * because different architectures tend to have different
@@ -181,6 +186,12 @@
 	}
 
 	set_fs (fs);
+
+        #ifdef CONFIG_RSBAC
+	if(pid > 0)
+	  rsbac_kthread_notify(pid);
+        #endif
+
 	return pid;
 }
 
diff -urN trunk/arch/m68k/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/m68k/kernel/ptrace.c
--- trunk/arch/m68k/kernel/ptrace.c	2005-11-11 10:04:09.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/m68k/kernel/ptrace.c	2005-11-10 16:17:04.000000000 +0000
@@ -27,6 +27,11 @@
 #include <asm/system.h>
 #include <asm/processor.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /*
  * does not yet catch signals sent when the child dies.
  * in exit.c or in signal.c.
@@ -127,6 +132,12 @@
 	unsigned long tmp;
 	int i, ret = 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
 		/* are we already being traced? */
@@ -134,6 +145,25 @@
 			ret = -EPERM;
 			goto out;
 		}
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                    ret = -EPERM;
+                    goto out;
+                  }
+                #endif
 		/* set the ptrace bit in the process flags. */
 		current->ptrace |= PT_PTRACED;
 		goto out;
@@ -154,6 +184,25 @@
 		goto out_tsk;
 	}
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            ret = -EPERM;
+            goto out_tsk;
+          }
+        #endif
+
 	if (request == PTRACE_ATTACH) {
 		ret = ptrace_attach(child);
 		goto out_tsk;
diff -urN trunk/arch/m68knommu/kernel/process.c 2.6.14-rsbac-1.2.5/arch/m68knommu/kernel/process.c
--- trunk/arch/m68knommu/kernel/process.c	2005-11-11 10:04:18.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/m68knommu/kernel/process.c	2005-11-10 16:17:09.000000000 +0000
@@ -37,6 +37,11 @@
 #include <asm/setup.h>
 #include <asm/pgtable.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 asmlinkage void ret_from_fork(void);
 
 
@@ -143,6 +148,12 @@
 		: "cc", "%d0", "%d1", "%d2");
 
 	set_fs(fs);
+
+        #ifdef CONFIG_RSBAC
+	if(retval > 0)
+	  rsbac_kthread_notify(retval);
+        #endif
+
 	return retval;
 }
 
diff -urN trunk/arch/m68knommu/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/m68knommu/kernel/ptrace.c
--- trunk/arch/m68knommu/kernel/ptrace.c	2005-11-11 10:04:18.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/m68knommu/kernel/ptrace.c	2005-11-10 16:17:09.000000000 +0000
@@ -27,6 +27,11 @@
 #include <asm/system.h>
 #include <asm/processor.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /*
  * does not yet catch signals sent when the child dies.
  * in exit.c or in signal.c.
@@ -106,12 +111,38 @@
 	struct task_struct *child;
 	int ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	lock_kernel();
 	ret = -EPERM;
 	if (request == PTRACE_TRACEME) {
 		/* are we already being traced? */
 		if (current->ptrace & PT_PTRACED)
 			goto out;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                    ret = -EPERM;
+                    goto out;
+                  }
+                #endif
+
 		/* set the ptrace bit in the process flags. */
 		current->ptrace |= PT_PTRACED;
 		ret = 0;
@@ -130,6 +161,25 @@
 	if (pid == 1)		/* you may not mess with init */
 		goto out_tsk;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            ret = -EPERM;
+            goto out_tsk;
+          }
+        #endif
+
 	if (request == PTRACE_ATTACH) {
 		ret = ptrace_attach(child);
 		goto out_tsk;
diff -urN trunk/arch/mips/kernel/process.c 2.6.14-rsbac-1.2.5/arch/mips/kernel/process.c
--- trunk/arch/mips/kernel/process.c	2005-11-11 10:04:20.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/mips/kernel/process.c	2005-11-10 16:17:11.000000000 +0000
@@ -38,6 +38,11 @@
 #include <asm/isadep.h>
 #include <asm/inst.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 /*
  * We use this if we don't have any better idle routine..
  * (This to kill: kernel/platform.c.
@@ -193,6 +198,7 @@
 long kernel_thread(int (*fn)(void *), void *arg, unsigned long flags)
 {
 	struct pt_regs regs;
+	int retval;
 
 	memset(&regs, 0, sizeof(regs));
 
@@ -208,7 +214,12 @@
 #endif
 
 	/* Ok, create the new process.. */
-	return do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+	retval = do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+        #ifdef CONFIG_RSBAC
+	if(retval > 0)
+	  rsbac_kthread_notify(retval);
+        #endif
+        return retval;
 }
 
 struct mips_frame_info {
diff -urN trunk/arch/mips/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/mips/kernel/ptrace.c
--- trunk/arch/mips/kernel/ptrace.c	2005-11-11 10:04:20.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/mips/kernel/ptrace.c	2005-11-10 16:17:12.000000000 +0000
@@ -37,6 +37,11 @@
 #include <asm/uaccess.h>
 #include <asm/bootinfo.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /*
  * Called by kernel/ptrace.c when detaching..
  *
@@ -52,6 +57,12 @@
 	struct task_struct *child;
 	int ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 #if 0
 	printk("ptrace(r=%d,pid=%d,addr=%08lx,data=%08lx)\n",
 	       (int) request, (int) pid, (unsigned long) addr,
@@ -65,6 +76,26 @@
 			goto out;
 		if ((ret = security_ptrace(current->parent, current)))
 			goto out;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                    ret = -EPERM;
+                    goto out;
+                  }
+                #endif
+
 		/* set the ptrace bit in the process flags. */
 		current->ptrace |= PT_PTRACED;
 		ret = 0;
@@ -83,6 +114,25 @@
 	if (pid == 1)		/* you may not mess with init */
 		goto out_tsk;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            ret = -EPERM;
+            goto out_tsk;
+          }
+        #endif
+
 	if (request == PTRACE_ATTACH) {
 		ret = ptrace_attach(child);
 		goto out_tsk;
diff -urN trunk/arch/mips/kernel/scall32-o32.S 2.6.14-rsbac-1.2.5/arch/mips/kernel/scall32-o32.S
--- trunk/arch/mips/kernel/scall32-o32.S	2005-11-11 10:04:20.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/mips/kernel/scall32-o32.S	2005-11-10 16:17:12.000000000 +0000
@@ -561,7 +561,11 @@
 	sys	sys_madvise		3
 	sys	sys_getdents64		3
 	sys	sys_fcntl64		3	/* 4220 */
+#ifdef CONFIG_RSBAC
+	sys	sys_rsbac		2	/* Security */
+#else
 	sys	sys_ni_syscall		0
+#endif
 	sys	sys_gettid		0
 	sys	sys_readahead		5
 	sys	sys_setxattr		5
diff -urN trunk/arch/mips/kernel/scall64-64.S 2.6.14-rsbac-1.2.5/arch/mips/kernel/scall64-64.S
--- trunk/arch/mips/kernel/scall64-64.S	2005-11-11 10:04:20.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/mips/kernel/scall64-64.S	2005-11-10 16:17:11.000000000 +0000
@@ -384,7 +384,11 @@
 	PTR	sys_ni_syscall			/* res. for getpmsg */
 	PTR	sys_ni_syscall			/* 5175  for putpmsg */
 	PTR	sys_ni_syscall			/* res. for afs_syscall */
+#ifdef CONFIG_RSBAC
+	PTR	sys_rsbac			/* Security */
+#else
 	PTR	sys_ni_syscall			/* res. for security */
+#endif
 	PTR	sys_gettid
 	PTR	sys_readahead
 	PTR	sys_setxattr			/* 5180 */
diff -urN trunk/arch/mips/kernel/scall64-o32.S 2.6.14-rsbac-1.2.5/arch/mips/kernel/scall64-o32.S
--- trunk/arch/mips/kernel/scall64-o32.S	2005-11-11 10:04:20.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/mips/kernel/scall64-o32.S	2005-11-10 16:17:12.000000000 +0000
@@ -423,7 +423,11 @@
 	PTR	sys_madvise
 	PTR	sys_getdents64
 	PTR	compat_sys_fcntl64		/* 4220 */
+#ifdef CONFIG_RSBAC
+	PTR	sys_rsbac			/* Security */
+#else
 	PTR	sys_ni_syscall
+#endif
 	PTR	sys_gettid
 	PTR	sys32_readahead
 	PTR	sys_setxattr
diff -urN trunk/arch/parisc/Kconfig 2.6.14-rsbac-1.2.5/arch/parisc/Kconfig
--- trunk/arch/parisc/Kconfig	2005-11-11 10:04:02.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/parisc/Kconfig	2005-11-10 16:17:00.000000000 +0000
@@ -185,6 +185,8 @@
 endmenu
 
 
+source "rsbac/Kconfig"
+
 source "drivers/parisc/Kconfig"
 
 
diff -urN trunk/arch/parisc/kernel/process.c 2.6.14-rsbac-1.2.5/arch/parisc/kernel/process.c
--- trunk/arch/parisc/kernel/process.c	2005-11-11 10:04:03.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/parisc/kernel/process.c	2005-11-10 16:17:00.000000000 +0000
@@ -54,6 +54,10 @@
 #include <asm/uaccess.h>
 #include <asm/unwind.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
 static int hlt_counter;
 
 /*
@@ -191,13 +195,25 @@
 extern pid_t __kernel_thread(int (*fn)(void *), void *arg, unsigned long flags);
 pid_t kernel_thread(int (*fn)(void *), void *arg, unsigned long flags)
 {
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        pid_t rsbac_retval;
+        #endif
 
 	/*
 	 * FIXME: Once we are sure we don't need any debug here,
 	 *	  kernel_thread can become a #define.
 	 */
 
+	/* Ok, create the new process.. */
+        #ifdef CONFIG_RSBAC
+	rsbac_retval = __kernel_thread(fn, arg, flags);
+	if(rsbac_retval > 0)
+	  rsbac_kthread_notify(rsbac_retval);
+	return rsbac_retval;
+        #else
 	return __kernel_thread(fn, arg, flags);
+	#endif
 }
 EXPORT_SYMBOL(kernel_thread);
 
diff -urN trunk/arch/parisc/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/parisc/kernel/ptrace.c
--- trunk/arch/parisc/kernel/ptrace.c	2005-11-11 10:04:03.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/parisc/kernel/ptrace.c	2005-11-10 16:17:00.000000000 +0000
@@ -25,6 +25,11 @@
 #include <asm/processor.h>
 #include <asm/asm-offsets.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /* PSW bits we allow the debugger to modify */
 #define USER_PSW_BITS	(PSW_N | PSW_V | PSW_CB)
 
@@ -86,6 +91,12 @@
 	long oaddr=addr, odata=data;
 #endif
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	lock_kernel();
 	ret = -EPERM;
 	if (request == PTRACE_TRACEME) {
@@ -97,6 +108,25 @@
 		if (ret) 
 			goto out;
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                    ret = -EPERM;
+                    goto out;
+                  }
+                #endif
+
 		/* set the ptrace bit in the process flags. */
 		current->ptrace |= PT_PTRACED;
 		ret = 0;
@@ -115,6 +145,25 @@
 	if (pid == 1)		/* no messing around with init! */
 		goto out_tsk;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            ret = -EPERM;
+            goto out_tsk;
+          }
+        #endif
+
 	if (request == PTRACE_ATTACH) {
 		ret = ptrace_attach(child);
 		goto out_tsk;
diff -urN trunk/arch/parisc/kernel/syscall_table.S 2.6.14-rsbac-1.2.5/arch/parisc/kernel/syscall_table.S
--- trunk/arch/parisc/kernel/syscall_table.S	2005-11-11 10:04:03.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/parisc/kernel/syscall_table.S	2005-11-10 16:17:00.000000000 +0000
@@ -368,5 +368,12 @@
 	ENTRY_COMP(mbind)		/* 260 */
 	ENTRY_COMP(get_mempolicy)
 	ENTRY_COMP(set_mempolicy)
+#ifdef CONFIG_RSBAC
+	/* we use 300, until sys_security gets defined here */
+	.rept 299-262
+		ENTRY_SAME(ni_syscall)
+	.endr
+	ENTRY_SAME(rsbac)
+#endif
 	/* Nothing yet */
 
diff -urN trunk/arch/ppc/Kconfig 2.6.14-rsbac-1.2.5/arch/ppc/Kconfig
--- trunk/arch/ppc/Kconfig	2005-11-11 10:04:05.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/ppc/Kconfig	2005-11-10 16:17:01.000000000 +0000
@@ -1336,6 +1336,8 @@
 	depends on ADVANCED_OPTIONS && 8xx
 endmenu
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 source "drivers/Kconfig"
diff -urN trunk/arch/ppc/kernel/misc.S 2.6.14-rsbac-1.2.5/arch/ppc/kernel/misc.S
--- trunk/arch/ppc/kernel/misc.S	2005-11-11 10:04:05.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/ppc/kernel/misc.S	2005-11-10 16:17:01.000000000 +0000
@@ -1401,7 +1401,11 @@
 	.long sys_futex
 	.long sys_sched_setaffinity
 	.long sys_sched_getaffinity
-	.long sys_ni_syscall
+#ifdef CONFIG_RSBAC
+	.long sys_rsbac 	/*	reserved for sys_security */
+#else
+ 	.long sys_ni_syscall 	/*	reserved for sys_security */
+#endif
 	.long sys_ni_syscall	/* 225 - reserved for Tux */
 	.long sys_sendfile64
 	.long sys_io_setup
diff -urN trunk/arch/ppc/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/ppc/kernel/ptrace.c
--- trunk/arch/ppc/kernel/ptrace.c	2005-11-11 10:04:05.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/ppc/kernel/ptrace.c	2005-11-10 16:17:01.000000000 +0000
@@ -36,6 +36,11 @@
 #include <asm/pgtable.h>
 #include <asm/system.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /*
  * Set of msr bits that gdb can change on behalf of a process.
  */
@@ -245,6 +250,12 @@
 	struct task_struct *child;
 	int ret = -EPERM;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
 		/* are we already being traced? */
@@ -253,6 +264,26 @@
 		ret = security_ptrace(current->parent, current);
 		if (ret)
 			goto out;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                    ret = -EPERM;
+                    goto out;
+                  }
+                #endif
+
 		/* set the ptrace bit in the process flags. */
 		current->ptrace |= PT_PTRACED;
 		ret = 0;
@@ -271,6 +302,25 @@
 	if (pid == 1)		/* you may not mess with init */
 		goto out_tsk;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            ret = -EPERM;
+            goto out_tsk;
+          }
+        #endif
+
 	if (request == PTRACE_ATTACH) {
 		ret = ptrace_attach(child);
 		goto out_tsk;
diff -urN trunk/arch/ppc64/Kconfig 2.6.14-rsbac-1.2.5/arch/ppc64/Kconfig
--- trunk/arch/ppc64/Kconfig	2005-11-11 10:04:14.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/ppc64/Kconfig	2005-11-10 16:17:07.000000000 +0000
@@ -424,6 +424,8 @@
 
 endmenu
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 source "drivers/Kconfig"
diff -urN trunk/arch/ppc64/kernel/misc.S 2.6.14-rsbac-1.2.5/arch/ppc64/kernel/misc.S
--- trunk/arch/ppc64/kernel/misc.S	2005-11-11 10:04:15.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/ppc64/kernel/misc.S	2005-11-10 16:17:07.000000000 +0000
@@ -1176,7 +1176,11 @@
 	.llong .compat_sys_futex
 	.llong .compat_sys_sched_setaffinity
 	.llong .compat_sys_sched_getaffinity
-	.llong .sys_ni_syscall
+#ifdef CONFIG_RSBAC
+	.llong .sys_rsbac 	/*	reserved for sys_security */
+#else
+ 	.llong .sys_ni_syscall 	/*	reserved for sys_security */
+#endif
 	.llong .sys_ni_syscall		/* 225 - reserved for tux */
 	.llong .sys32_sendfile64
 	.llong .compat_sys_io_setup
diff -urN trunk/arch/ppc64/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/ppc64/kernel/ptrace.c
--- trunk/arch/ppc64/kernel/ptrace.c	2005-11-11 10:04:15.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/ppc64/kernel/ptrace.c	2005-11-10 16:17:07.000000000 +0000
@@ -37,6 +37,11 @@
 #include <asm/system.h>
 #include <asm/ptrace-common.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /*
  * does not yet catch signals sent when the child dies.
  * in exit.c or in signal.c.
@@ -58,6 +63,12 @@
 	struct task_struct *child;
 	int ret = -EPERM;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
 		/* are we already being traced? */
@@ -66,6 +77,26 @@
 		ret = security_ptrace(current->parent, current);
 		if (ret)
 			goto out;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                    ret = -EPERM;
+                    goto out;
+                  }
+                #endif
+
 		/* set the ptrace bit in the process flags. */
 		current->ptrace |= PT_PTRACED;
 		ret = 0;
@@ -84,6 +115,25 @@
 	if (pid == 1)		/* you may not mess with init */
 		goto out_tsk;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            ret = -EPERM;
+            goto out_tsk;
+          }
+        #endif
+
 	if (request == PTRACE_ATTACH) {
 		ret = ptrace_attach(child);
 		goto out_tsk;
diff -urN trunk/arch/s390/Kconfig 2.6.14-rsbac-1.2.5/arch/s390/Kconfig
--- trunk/arch/s390/Kconfig	2005-11-11 10:04:15.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/s390/Kconfig	2005-11-10 16:17:08.000000000 +0000
@@ -465,6 +465,8 @@
 
 endmenu
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 config PCMCIA
diff -urN trunk/arch/s390/kernel/process.c 2.6.14-rsbac-1.2.5/arch/s390/kernel/process.c
--- trunk/arch/s390/kernel/process.c	2005-11-11 10:04:15.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/s390/kernel/process.c	2005-11-10 16:17:08.000000000 +0000
@@ -46,6 +46,11 @@
 #include <asm/irq.h>
 #include <asm/timer.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 asmlinkage void ret_from_fork(void) __asm__("ret_from_fork");
 
 /*
@@ -171,6 +176,11 @@
 {
 	struct pt_regs regs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        int rsbac_retval;
+        #endif
+
 	memset(&regs, 0, sizeof(regs));
 	regs.psw.mask = PSW_KERNEL_BITS | PSW_MASK_IO | PSW_MASK_EXT;
 	regs.psw.addr = (unsigned long) kernel_thread_starter | PSW_ADDR_AMODE;
@@ -180,8 +190,15 @@
 	regs.orig_gpr2 = -1;
 
 	/* Ok, create the new process.. */
+        #ifdef CONFIG_RSBAC
+	rsbac_retval = do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+	if(rsbac_retval > 0)
+	  rsbac_kthread_notify(rsbac_retval);
+	return rsbac_retval;
+        #else
 	return do_fork(flags | CLONE_VM | CLONE_UNTRACED,
 		       0, &regs, 0, NULL, NULL);
+	#endif
 }
 
 /*
diff -urN trunk/arch/s390/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/s390/kernel/ptrace.c
--- trunk/arch/s390/kernel/ptrace.c	2005-11-11 10:04:16.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/s390/kernel/ptrace.c	2005-11-10 16:17:08.000000000 +0000
@@ -46,6 +46,11 @@
 #include "compat_ptrace.h"
 #endif
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 static void
 FixPerRegisters(struct task_struct *task)
 {
@@ -711,6 +716,12 @@
 	struct task_struct *child;
 	int ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	lock_kernel();
 
 	if (request == PTRACE_TRACEME) {
@@ -721,6 +732,26 @@
 		ret = security_ptrace(current->parent, current);
 		if (ret)
 			goto out;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                    ret = -EPERM;
+                    goto out;
+                  }
+                #endif
+
 		/* set the ptrace bit in the process flags. */
 		current->ptrace |= PT_PTRACED;
 		goto out;
@@ -730,6 +761,25 @@
 	if (pid == 1)		/* you may not mess with init */
 		goto out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            ret = -EPERM;
+            goto out_tsk;
+          }
+        #endif
+
 	ret = -ESRCH;
 	read_lock(&tasklist_lock);
 	child = find_task_by_pid(pid);
diff -urN trunk/arch/sh/Kconfig 2.6.14-rsbac-1.2.5/arch/sh/Kconfig
--- trunk/arch/sh/Kconfig	2005-11-11 10:04:23.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/sh/Kconfig	2005-11-10 16:17:14.000000000 +0000
@@ -792,6 +792,8 @@
 
 source "drivers/Kconfig"
 
+source "rsbac/Kconfig"
+
 source "fs/Kconfig"
 
 source "arch/sh/oprofile/Kconfig"
diff -urN trunk/arch/sh/kernel/entry.S 2.6.14-rsbac-1.2.5/arch/sh/kernel/entry.S
--- trunk/arch/sh/kernel/entry.S	2005-11-11 10:04:23.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/sh/kernel/entry.S	2005-11-10 16:17:14.000000000 +0000
@@ -1080,7 +1080,11 @@
 	.long sys_getdents64	/* 220 */
 	.long sys_fcntl64
 	.long sys_ni_syscall	/* reserved for TUX */
+#ifdef CONFIG_RSBAC
+	.long sys_rsbac		/* Reserved for Security */
+#else
 	.long sys_ni_syscall	/* Reserved for Security */
+#endif
 	.long sys_gettid
 	.long sys_readahead	/* 225 */
 	.long sys_setxattr
diff -urN trunk/arch/sh/kernel/process.c 2.6.14-rsbac-1.2.5/arch/sh/kernel/process.c
--- trunk/arch/sh/kernel/process.c	2005-11-11 10:04:23.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/sh/kernel/process.c	2005-11-10 16:17:14.000000000 +0000
@@ -31,6 +31,11 @@
 #include <asm/rts7751r2d/rts7751r2d.h>
 #endif
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 static int hlt_counter=0;
 
 int ubc_usercnt = 0;
@@ -169,6 +174,11 @@
 {	/* Don't use this in BL=1(cli).  Or else, CPU resets! */
 	struct pt_regs regs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        int rsbac_retval;
+        #endif
+
 	memset(&regs, 0, sizeof(regs));
 	regs.regs[4] = (unsigned long) arg;
 	regs.regs[5] = (unsigned long) fn;
@@ -177,7 +187,14 @@
 	regs.sr = (1 << 30);
 
 	/* Ok, create the new process.. */
+        #ifdef CONFIG_RSBAC
+	rsbac_retval = do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+	if(rsbac_retval > 0)
+	  rsbac_kthread_notify(rsbac_retval);
+	return rsbac_retval;
+        #else
 	return do_fork(flags | CLONE_VM | CLONE_UNTRACED, 0, &regs, 0, NULL, NULL);
+	#endif
 }
 
 /*
diff -urN trunk/arch/sh/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/sh/kernel/ptrace.c
--- trunk/arch/sh/kernel/ptrace.c	2005-11-11 10:04:23.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/sh/kernel/ptrace.c	2005-11-10 16:17:14.000000000 +0000
@@ -29,6 +29,11 @@
 #include <asm/processor.h>
 #include <asm/mmu_context.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /*
  * does not yet catch signals sent when the child dies.
  * in exit.c or in signal.c.
@@ -86,6 +91,12 @@
 	struct user * dummy = NULL;
 	int ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	lock_kernel();
 	ret = -EPERM;
 	if (request == PTRACE_TRACEME) {
@@ -95,6 +106,26 @@
 		ret = security_ptrace(current->parent, current);
 		if (ret)
 			goto out;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                    ret = -EPERM;
+                    goto out;
+                  }
+                #endif
+
 		/* set the ptrace bit in the process flags. */
 		current->ptrace |= PT_PTRACED;
 		ret = 0;
@@ -113,6 +144,25 @@
 	if (pid == 1)		/* you may not mess with init */
 		goto out_tsk;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            ret = -EPERM;
+            goto out_tsk;
+          }
+        #endif
+
 	if (request == PTRACE_ATTACH) {
 		ret = ptrace_attach(child);
 		goto out_tsk;
diff -urN trunk/arch/sh64/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/sh64/kernel/ptrace.c
--- trunk/arch/sh64/kernel/ptrace.c	2005-11-11 10:04:08.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/sh64/kernel/ptrace.c	2005-11-10 16:17:04.000000000 +0000
@@ -36,6 +36,11 @@
 #include <asm/processor.h>
 #include <asm/mmu_context.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /* This mask defines the bits of the SR which the user is not allowed to
    change, which are everything except S, Q, M, PR, SZ, FR. */
 #define SR_MASK      (0xffff8cfd)
@@ -129,6 +134,12 @@
 	static int first_call = 1;
 	int ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	lock_kernel();
 
 	if (first_call) {
@@ -149,6 +160,26 @@
 		/* are we already being traced? */
 		if (current->ptrace & PT_PTRACED)
 			goto out;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                    ret = -EPERM;
+                    goto out;
+                  }
+                #endif
+
 		/* set the ptrace bit in the process flags. */
 		current->ptrace |= PT_PTRACED;
 		ret = 0;
@@ -167,6 +198,25 @@
 	if (pid == 1)		/* you may not mess with init */
 		goto out_tsk;
 
+	/* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            ret = -EPERM;
+            goto out_tsk;
+          }
+        #endif
+
 	if (request == PTRACE_ATTACH) {
 		ret = ptrace_attach(child);
 			goto out_tsk;
diff -urN trunk/arch/sparc/Kconfig 2.6.14-rsbac-1.2.5/arch/sparc/Kconfig
--- trunk/arch/sparc/Kconfig	2005-11-11 10:04:23.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/sparc/Kconfig	2005-11-10 16:17:13.000000000 +0000
@@ -216,6 +216,8 @@
 
 endmenu
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 source "drivers/Kconfig"
diff -urN trunk/arch/sparc/kernel/process.c 2.6.14-rsbac-1.2.5/arch/sparc/kernel/process.c
--- trunk/arch/sparc/kernel/process.c	2005-11-11 10:04:23.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/sparc/kernel/process.c	2005-11-10 16:17:13.000000000 +0000
@@ -43,6 +43,11 @@
 #include <asm/elf.h>
 #include <asm/unistd.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 /* 
  * Power management idle function 
  * Set in pm platform drivers (apc.c and pmc.c)
@@ -710,6 +715,12 @@
 			     "i" (__NR_clone), "r" (flags | CLONE_VM | CLONE_UNTRACED),
 			     "i" (__NR_exit),  "r" (fn), "r" (arg) :
 			     "g1", "g2", "g3", "o0", "o1", "memory", "cc");
+
+        #ifdef CONFIG_RSBAC
+	if(retval > 0)
+	  rsbac_kthread_notify(retval);
+        #endif
+
 	return retval;
 }
 
diff -urN trunk/arch/sparc/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/sparc/kernel/ptrace.c
--- trunk/arch/sparc/kernel/ptrace.c	2005-11-11 10:04:23.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/sparc/kernel/ptrace.c	2005-11-10 16:17:13.000000000 +0000
@@ -24,6 +24,11 @@
 #include <asm/system.h>
 #include <asm/uaccess.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 #define MAGIC_CONSTANT 0x80000000
 
 
@@ -268,6 +273,12 @@
 	struct task_struct *child;
 	int ret;
 
+	/* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	lock_kernel();
 #ifdef DEBUG_PTRACE
 	{
@@ -294,6 +305,26 @@
 			pt_error_return(regs, EPERM);
 			goto out;
 		}
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "do_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                	pt_error_return(regs, EPERM);
+			goto out;
+                  }
+                #endif
+
 		my_ret = security_ptrace(current->parent, current);
 		if (my_ret) {
 			pt_error_return(regs, -my_ret);
@@ -323,6 +354,25 @@
 		goto out;
 	}
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "do_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            pt_error_return(regs, EPERM);
+            goto out_tsk;
+          }
+        #endif
+
 	if ((current->personality == PER_SUNOS && request == PTRACE_SUNATTACH)
 	    || (current->personality != PER_SUNOS && request == PTRACE_ATTACH)) {
 		if (ptrace_attach(child)) {
diff -urN trunk/arch/sparc/kernel/systbls.S 2.6.14-rsbac-1.2.5/arch/sparc/kernel/systbls.S
--- trunk/arch/sparc/kernel/systbls.S	2005-11-11 10:04:23.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/sparc/kernel/systbls.S	2005-11-10 16:17:13.000000000 +0000
@@ -50,7 +50,13 @@
 /*145*/	.long sys_setrlimit, sys_pivot_root, sys_prctl, sys_pciconfig_read, sys_pciconfig_write
 /*150*/	.long sys_nis_syscall, sys_inotify_init, sys_inotify_add_watch, sys_poll, sys_getdents64
 /*155*/	.long sys_fcntl64, sys_inotify_rm_watch, sys_statfs, sys_fstatfs, sys_oldumount
+
+#ifdef CONFIG_RSBAC /* we use 164, which seems to be unused */
+/*160*/	.long sys_sched_setaffinity, sys_sched_getaffinity, sys_getdomainname, sys_setdomainname, sys_rsbac
+#else
 /*160*/	.long sys_sched_setaffinity, sys_sched_getaffinity, sys_getdomainname, sys_setdomainname, sys_nis_syscall
+#endif
+
 /*165*/	.long sys_quotactl, sys_set_tid_address, sys_mount, sys_ustat, sys_setxattr
 /*170*/	.long sys_lsetxattr, sys_fsetxattr, sys_getxattr, sys_lgetxattr, sys_getdents
 /*175*/	.long sys_setsid, sys_fchdir, sys_fgetxattr, sys_listxattr, sys_llistxattr
@@ -139,7 +145,11 @@
 	.long sunos_getdirentries, sys_statfs, sys_fstatfs
 	.long sys_oldumount, sunos_nosys, sunos_nosys
 	.long sys_getdomainname, sys_setdomainname
+#ifdef CONFIG_RSBAC
+	.long sys_rsbac, sys_quotactl, sunos_nosys
+#else
 	.long sunos_nosys, sys_quotactl, sunos_nosys
+#endif
 	.long sunos_mount, sys_ustat, sunos_semsys
 	.long sunos_msgsys, sunos_shmsys, sunos_audit
 	.long sunos_nosys, sunos_getdents, sys_setsid
diff -urN trunk/arch/sparc64/Kconfig 2.6.14-rsbac-1.2.5/arch/sparc64/Kconfig
--- trunk/arch/sparc64/Kconfig	2005-11-11 10:04:07.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/sparc64/Kconfig	2005-11-10 16:17:03.000000000 +0000
@@ -367,6 +367,8 @@
 
 	  NOTE: This option WILL override the PROM bootargs setting!
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 source "drivers/Kconfig"
diff -urN trunk/arch/sparc64/kernel/process.c 2.6.14-rsbac-1.2.5/arch/sparc64/kernel/process.c
--- trunk/arch/sparc64/kernel/process.c	2005-11-11 10:04:07.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/sparc64/kernel/process.c	2005-11-10 16:17:03.000000000 +0000
@@ -46,6 +46,11 @@
 #include <asm/cpudata.h>
 #include <asm/unistd.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 /* #define VERBOSE_SHOWREGS */
 
 /*
@@ -704,6 +709,12 @@
 			     "i" (__NR_clone), "r" (flags | CLONE_VM | CLONE_UNTRACED),
 			     "i" (__NR_exit),  "r" (fn), "r" (arg) :
 			     "g1", "g2", "g3", "o0", "o1", "memory", "cc");
+
+        #ifdef CONFIG_RSBAC
+	if(retval > 0)
+	  rsbac_kthread_notify(retval);
+        #endif
+
 	return retval;
 }
 
diff -urN trunk/arch/sparc64/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/sparc64/kernel/ptrace.c
--- trunk/arch/sparc64/kernel/ptrace.c	2005-11-11 10:04:07.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/sparc64/kernel/ptrace.c	2005-11-10 16:17:03.000000000 +0000
@@ -33,6 +33,11 @@
 #include <asm/page.h>
 #include <asm/cpudata.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /* Returning from ptrace is a bit tricky because the syscall return
  * low level code assumes any value returned which is negative and
  * is a valid errno will mean setting the condition codes to indicate
@@ -174,6 +179,12 @@
 	struct task_struct *child;
 	int ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (test_thread_flag(TIF_32BIT)) {
 		addr &= 0xffffffffUL;
 		data &= 0xffffffffUL;
@@ -205,6 +216,27 @@
 			pt_error_return(regs, EPERM);
 			goto out;
 		}
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  rsbac_printk(KERN_DEBUG "do_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+		rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                	pt_error_return(regs, -EPERM);
+			goto out;
+                  }
+                #endif
+
 		ret = security_ptrace(current->parent, current);
 		if (ret) {
 			pt_error_return(regs, -ret);
@@ -234,6 +266,26 @@
 		goto out;
 	}
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            pt_error_return(regs, EPERM);
+            goto out_tsk;
+          }
+        #endif
+
 	if ((current->personality == PER_SUNOS && request == PTRACE_SUNATTACH)
 	    || (current->personality != PER_SUNOS && request == PTRACE_ATTACH)) {
 		if (ptrace_attach(child)) {
diff -urN trunk/arch/sparc64/kernel/systbls.S 2.6.14-rsbac-1.2.5/arch/sparc64/kernel/systbls.S
--- trunk/arch/sparc64/kernel/systbls.S	2005-11-11 10:04:07.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/sparc64/kernel/systbls.S	2005-11-10 16:17:03.000000000 +0000
@@ -64,7 +64,11 @@
 	.word sys32_readahead, sys32_socketcall, sys32_syslog, sys32_lookup_dcookie, sys32_fadvise64
 /*210*/	.word sys32_fadvise64_64, sys32_tgkill, sys32_waitpid, sys_swapoff, sys32_sysinfo
 	.word sys32_ipc, sys32_sigreturn, sys_clone, sys32_ioprio_get, sys32_adjtimex
+#ifdef CONFIG_RSBAC
+/*220*/	.word sys32_sigprocmask, sys_rsbac, sys32_delete_module, sys_ni_syscall, sys32_getpgid
+#else
 /*220*/	.word sys32_sigprocmask, sys_ni_syscall, sys32_delete_module, sys_ni_syscall, sys32_getpgid
+#endif
 	.word sys32_bdflush, sys32_sysfs, sys_nis_syscall, sys32_setfsuid16, sys32_setfsgid16
 /*230*/	.word sys32_select, compat_sys_time, sys_nis_syscall, compat_sys_stime, compat_sys_statfs64
 	.word compat_sys_fstatfs64, sys_llseek, sys_mlock, sys_munlock, sys32_mlockall
@@ -130,7 +134,11 @@
 	.word sys_readahead, sys_socketcall, sys_syslog, sys_lookup_dcookie, sys_fadvise64
 /*210*/	.word sys_fadvise64_64, sys_tgkill, sys_waitpid, sys_swapoff, sys_sysinfo
 	.word sys_ipc, sys_nis_syscall, sys_clone, sys_ioprio_get, sys_adjtimex
+#ifdef CONFIG_RSBAC
+/*220*/	.word sys_nis_syscall, sys_rsbac, sys_delete_module, sys_ni_syscall, sys_getpgid
+#else
 /*220*/	.word sys_nis_syscall, sys_ni_syscall, sys_delete_module, sys_ni_syscall, sys_getpgid
+#endif
 	.word sys_bdflush, sys_sysfs, sys_nis_syscall, sys_setfsuid, sys_setfsgid
 /*230*/	.word sys_select, sys_nis_syscall, sys_nis_syscall, sys_stime, sys_statfs64
 	.word sys_fstatfs64, sys_llseek, sys_mlock, sys_munlock, sys_mlockall
@@ -223,7 +231,11 @@
 	.word sunos_nosys, sunos_nosys, sunos_nosys
 	.word sunos_nosys, sunos_nosys, sunos_nosys
 	.word sunos_nosys, sunos_nosys, sunos_nosys
+#ifdef CONFIG_RSBAC
+	.word sys_rsbac, sunos_nosys, sunos_nosys
+#else
 	.word sunos_nosys, sunos_nosys, sunos_nosys
+#endif
 	.word sunos_nosys, sunos_nosys, sunos_nosys
 	.word sunos_nosys, sunos_nosys, sunos_nosys
 	.word sunos_nosys, sunos_nosys, sunos_nosys
diff -urN trunk/arch/um/Kconfig 2.6.14-rsbac-1.2.5/arch/um/Kconfig
--- trunk/arch/um/Kconfig	2005-11-11 10:04:03.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/um/Kconfig	2005-11-10 16:17:00.000000000 +0000
@@ -275,6 +275,8 @@
 
 source "init/Kconfig"
 
+source "rsbac/Kconfig"
+
 source "net/Kconfig"
 
 source "drivers/base/Kconfig"
diff -urN trunk/arch/um/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/um/kernel/ptrace.c
--- trunk/arch/um/kernel/ptrace.c	2005-11-11 10:04:03.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/um/kernel/ptrace.c	2005-11-10 16:17:01.000000000 +0000
@@ -19,6 +19,11 @@
 #include "skas_ptrace.h"
 #include "sysdep/ptrace.h"
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 static inline void set_singlestepping(struct task_struct *child, int on)
 {
         if (on)
@@ -48,6 +53,12 @@
 	struct task_struct *child;
 	int i, ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	lock_kernel();
 	ret = -EPERM;
 	if (request == PTRACE_TRACEME) {
@@ -59,6 +70,25 @@
 		if (ret)
  			goto out;
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                    ret = -EPERM;
+                    goto out;
+                  }
+                #endif
+
 		/* set the ptrace bit in the process flags. */
 		current->ptrace |= PT_PTRACED;
 		ret = 0;
@@ -77,6 +107,25 @@
 	if (pid == 1)		/* you may not mess with init */
 		goto out_tsk;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            ret = -EPERM;
+            goto out_tsk;
+          }
+        #endif
+
 	if (request == PTRACE_ATTACH) {
 		ret = ptrace_attach(child);
 		goto out_tsk;
diff -urN trunk/arch/v850/Kconfig 2.6.14-rsbac-1.2.5/arch/v850/Kconfig
--- trunk/arch/v850/Kconfig	2005-11-11 10:04:18.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/v850/Kconfig	2005-11-10 16:17:10.000000000 +0000
@@ -254,6 +254,10 @@
 
 #############################################################################
 
+source "rsbac/Kconfig"
+
+#############################################################################
+
 source "drivers/base/Kconfig"
 
 source drivers/mtd/Kconfig
diff -urN trunk/arch/v850/kernel/entry.S 2.6.14-rsbac-1.2.5/arch/v850/kernel/entry.S
--- trunk/arch/v850/kernel/entry.S	2005-11-11 10:04:18.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/v850/kernel/entry.S	2005-11-10 16:17:10.000000000 +0000
@@ -1117,5 +1117,12 @@
 	.long CSYM(sys_pivot_root)	// 200
 	.long CSYM(sys_gettid)
 	.long CSYM(sys_tkill)
+#ifdef CONFIG_RSBAC
+	/* we use 230, until sys_security gets defined here */
+	.rept 229-202
+		.long CSYM(sys_ni_syscall)
+	.endr
+	.long CSYM(sys_rsbac)
+#endif
 sys_call_table_end:
 C_END(sys_call_table)
diff -urN trunk/arch/v850/kernel/process.c 2.6.14-rsbac-1.2.5/arch/v850/kernel/process.c
--- trunk/arch/v850/kernel/process.c	2005-11-11 10:04:18.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/v850/kernel/process.c	2005-11-10 16:17:10.000000000 +0000
@@ -30,6 +30,11 @@
 #include <asm/system.h>
 #include <asm/pgtable.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#endif
+
 extern void ret_from_fork (void);
 
 
@@ -97,6 +102,11 @@
 	/* In parent.  */
 	set_fs (fs);
 
+        #ifdef CONFIG_RSBAC
+	if(ret > 0)
+	  rsbac_kthread_notify(ret);
+        #endif
+
 	return ret;
 }
 
diff -urN trunk/arch/v850/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/v850/kernel/ptrace.c
--- trunk/arch/v850/kernel/ptrace.c	2005-11-11 10:04:18.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/v850/kernel/ptrace.c	2005-11-10 16:17:10.000000000 +0000
@@ -30,6 +30,11 @@
 #include <asm/processor.h>
 #include <asm/uaccess.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /* Returns the address where the register at REG_OFFS in P is stashed away.  */
 static v850_reg_t *reg_save_addr (unsigned reg_offs, struct task_struct *t)
 {
@@ -118,6 +123,12 @@
 	struct task_struct *child;
 	int rval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	lock_kernel();
 
 	if (request == PTRACE_TRACEME) {
@@ -126,6 +137,26 @@
 			rval = -EPERM;
 			goto out;
 		}
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                    ret = -EPERM;
+                    goto out;
+                  }
+                #endif
+
 		/* set the ptrace bit in the process flags. */
 		current->ptrace |= PT_PTRACED;
 		rval = 0;
@@ -144,6 +175,25 @@
 	if (pid == 1)		/* you may not mess with init */
 		goto out_tsk;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            ret = -EPERM;
+            goto out_tsk;
+          }
+        #endif
+
 	if (request == PTRACE_ATTACH) {
 		rval = ptrace_attach(child);
 		goto out_tsk;
diff -urN trunk/arch/x86_64/ia32/ia32entry.S 2.6.14-rsbac-1.2.5/arch/x86_64/ia32/ia32entry.S
--- trunk/arch/x86_64/ia32/ia32entry.S	2005-11-11 10:04:16.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/x86_64/ia32/ia32entry.S	2005-11-10 16:17:09.000000000 +0000
@@ -572,7 +572,11 @@
 	.quad compat_sys_getdents64	/* 220 getdents64 */
 	.quad compat_sys_fcntl64	
 	.quad quiet_ni_syscall		/* tux */
+#ifdef CONFIG_RSBAC
+	.quad sys_rsbac		/* security */
+#else
 	.quad quiet_ni_syscall    	/* security */
+#endif
 	.quad sys_gettid	
 	.quad sys_readahead	/* 225 */
 	.quad sys_setxattr
diff -urN trunk/arch/x86_64/Kconfig 2.6.14-rsbac-1.2.5/arch/x86_64/Kconfig
--- trunk/arch/x86_64/Kconfig	2005-11-11 10:04:16.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/x86_64/Kconfig	2005-11-10 16:17:08.000000000 +0000
@@ -489,6 +489,7 @@
 
 endmenu
 
+source "rsbac/Kconfig"
 
 menu "Executable file formats / Emulations"
 
diff -urN trunk/arch/x86_64/kernel/ioport.c 2.6.14-rsbac-1.2.5/arch/x86_64/kernel/ioport.c
--- trunk/arch/x86_64/kernel/ioport.c	2005-11-11 10:04:16.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/x86_64/kernel/ioport.c	2005-11-10 16:17:08.000000000 +0000
@@ -16,6 +16,11 @@
 #include <linux/slab.h>
 #include <linux/thread_info.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /* Set EXTENT bits starting at BASE in BITMAP to value TURN_ON. */
 static void set_bitmap(unsigned long *bitmap, unsigned int base, unsigned int extent, int new_value)
 {
@@ -38,11 +43,35 @@
 	struct tss_struct * tss;
 	unsigned long *bitmap;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if ((from + num <= from) || (from + num > IO_BITMAP_BITS))
 		return -EINVAL;
 	if (turn_on && !capable(CAP_SYS_RAWIO))
 		return -EPERM;
 
+         /* RSBAC */
+         #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) printk(KERN_DEBUG "sys_ioperm(): calling ADF\n");
+#endif
+        rsbac_target_id.scd = ST_ioports;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_PERMISSIONS_DATA,
+                               current->pid,
+                               T_SCD,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	/*
 	 * If it's the first ioperm() call in this thread's lifetime, set the
 	 * IO bitmap up. ioperm() is much less timing critical than clone(),
@@ -105,12 +134,36 @@
 {
 	unsigned int old = (regs->eflags >> 12) & 3;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (level > 3)
 		return -EINVAL;
 	/* Trying to gain more privileges? */
 	if (level > old) {
 		if (!capable(CAP_SYS_RAWIO))
 			return -EPERM;
+
+	        /* RSBAC */
+	        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+	        if (rsbac_debug_aef) printk(KERN_DEBUG "sys_iopl(): calling ADF\n");
+#endif
+	        rsbac_target_id.scd = ST_ioports;
+	        rsbac_attribute_value.dummy = 0;
+	        if (!rsbac_adf_request(R_MODIFY_PERMISSIONS_DATA,
+	                               current->pid,
+	                               T_SCD,
+	                               rsbac_target_id,
+	                               A_none,
+	                               rsbac_attribute_value))
+	          {
+	            return -EPERM;
+	          }
+	        #endif
 	}
 	regs->eflags = (regs->eflags &~ 0x3000UL) | (level << 12);
 	return 0;
diff -urN trunk/arch/x86_64/kernel/ptrace.c 2.6.14-rsbac-1.2.5/arch/x86_64/kernel/ptrace.c
--- trunk/arch/x86_64/kernel/ptrace.c	2005-11-11 10:04:16.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/x86_64/kernel/ptrace.c	2005-11-10 16:17:08.000000000 +0000
@@ -31,6 +31,11 @@
 #include <asm/proto.h>
 #include <asm/ia32.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /*
  * does not yet catch signals sent when the child dies.
  * in exit.c or in signal.c.
@@ -319,6 +324,12 @@
 	long i, ret;
 	unsigned ui;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	/* This lock_kernel fixes a subtle race with suid exec */
 	lock_kernel();
 	ret = -EPERM;
@@ -329,6 +340,26 @@
 		ret = security_ptrace(current->parent, current);
 		if (ret)
 			goto out;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.trace_request = request;
+                if (!rsbac_adf_request(R_TRACE,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_trace_request,
+                                       rsbac_attribute_value))
+                  {
+                    ret = -EPERM;
+                    goto out;
+                  }
+                #endif
+
 		/* set the ptrace bit in the process flags. */
 		current->ptrace |= PT_PTRACED;
 		ret = 0;
@@ -347,6 +378,25 @@
 	if (pid == 1)		/* you may not mess with init */
 		goto out_tsk;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_ptrace(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.trace_request = request;
+        if (!rsbac_adf_request(R_TRACE,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_trace_request,
+                               rsbac_attribute_value))
+          {
+            ret = -EPERM;
+            goto out_tsk;
+          }
+        #endif
+
 	if (request == PTRACE_ATTACH) {
 		ret = ptrace_attach(child);
 		goto out_tsk;
diff -urN trunk/arch/x86_64/kernel/smp.c 2.6.14-rsbac-1.2.5/arch/x86_64/kernel/smp.c
--- trunk/arch/x86_64/kernel/smp.c	2005-11-11 10:04:16.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/arch/x86_64/kernel/smp.c	2005-11-10 16:17:08.000000000 +0000
@@ -325,7 +325,7 @@
 }
 
 /*
- * this function sends a 'generic call function' IPI to one other CPU
+* this function sends a 'generic call function' IPI to one other CPU
  * in the system.
  *
  * cpu is a standard Linux logical CPU number.
diff -urN trunk/drivers/block/ioctl.c 2.6.14-rsbac-1.2.5/drivers/block/ioctl.c
--- trunk/drivers/block/ioctl.c	2005-11-11 10:04:51.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/drivers/block/ioctl.c	2005-11-10 16:17:33.000000000 +0000
@@ -6,6 +6,12 @@
 #include <linux/smp_lock.h>
 #include <asm/uaccess.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#include <linux/hdreg.h>
+#endif
+
 static int blkpg_ioctl(struct block_device *bdev, struct blkpg_ioctl_arg __user *arg)
 {
 	struct block_device *bdevp;
@@ -139,6 +145,73 @@
 	struct backing_dev_info *bdi;
 	int ret, n;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_adf_request_t     rsbac_request;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  rsbac_printk(KERN_DEBUG "blkdev_ioctl(): calling ADF\n");
+#endif
+        /* values taken from include/linux/fs.h and hdreg.h */
+	switch (cmd) {
+	 	case BLKGETSIZE:   /* Return device size */
+	 	case BLKGETSIZE64:
+		case BLKROGET:
+		case BLKRAGET:
+		case BLKFRAGET:
+		case BLKSECTGET:
+		case BLKSSZGET:
+		case BLKBSZGET:
+		case HDIO_GETGEO:
+		case HDIO_OBSOLETE_IDENTITY:
+                case HDIO_GET_UNMASKINTR:
+		case HDIO_GET_IDENTITY:
+		case HDIO_GET_NICE:
+		case HDIO_GET_BUSSTATE:
+		case HDIO_GET_QDMA:
+		case HDIO_GET_MULTCOUNT:
+		case HDIO_GET_KEEPSETTINGS:
+		case HDIO_GET_32BIT:
+		case HDIO_GET_NOWERR:
+		case HDIO_GET_DMA:
+		case HDIO_GET_WCACHE:
+		case HDIO_GET_ACOUSTIC:
+		case HDIO_GET_ADDRESS:
+		  rsbac_request = R_GET_STATUS_DATA;
+		  break;
+
+		default:
+		  rsbac_request = R_MODIFY_SYSTEM_DATA;
+	}
+        rsbac_target_id.dev.type = D_block;
+        if(file && file->f_dentry && file->f_dentry->d_inode)
+          {
+            rsbac_target_id.dev.major = RSBAC_MAJOR(file->f_dentry->d_inode->i_rdev);
+            rsbac_target_id.dev.minor = RSBAC_MINOR(file->f_dentry->d_inode->i_rdev);
+          }
+        else
+          {
+            return -EINVAL;
+          }
+        
+        rsbac_attribute_value.ioctl_cmd = cmd;
+        if (!rsbac_adf_request(rsbac_request,
+                               current->pid,
+                               T_DEV,
+                               rsbac_target_id,
+                               A_ioctl_cmd,
+                               rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	switch (cmd) {
 	case BLKRAGET:
 	case BLKFRAGET:
diff -urN trunk/drivers/block/loop.c 2.6.14-rsbac-1.2.5/drivers/block/loop.c
--- trunk/drivers/block/loop.c	2005-11-11 10:04:51.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/drivers/block/loop.c	2005-11-10 16:17:34.000000000 +0000
@@ -75,6 +75,11 @@
 #include <linux/highmem.h>
 #include <linux/gfp.h>
 
+/* RSBAC: including adf-calls*/
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 #include <asm/uaccess.h>
 
 static int max_loop = 8;
@@ -738,6 +743,13 @@
 	int		error;
 	loff_t		size;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	/* This is safe, since we have a reference from open(). */
 	__module_get(THIS_MODULE);
 
@@ -802,6 +814,63 @@
 	if (!(lo_file->f_mode & FMODE_WRITE))
 		lo_flags |= LO_FLAGS_READ_ONLY;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "loop_set_fd() [lo_ioctl()]: calling ADF for FILE/DEV\n");
+#endif
+        if(S_ISREG(inode->i_mode))
+          {
+            rsbac_target = T_FILE;
+            rsbac_target_id.dir.device = lo_file->f_dentry->d_sb->s_dev;
+            rsbac_target_id.dir.inode  = inode->i_ino;
+            rsbac_target_id.dir.dentry_p = file->f_dentry;
+          }
+        else
+          { /* must be block */
+            rsbac_target = T_DEV;
+            rsbac_target_id.dev.type = D_block;
+            rsbac_target_id.dev.major = RSBAC_MAJOR(inode->i_rdev);
+            rsbac_target_id.dev.minor = RSBAC_MINOR(inode->i_rdev);
+          }
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            if(rsbac_target == T_DEV)
+              goto out;
+            else
+              goto out_putf;
+          }
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "loop_set_fd() [lo_ioctl()]: calling ADF for DEV\n");
+#endif
+        rsbac_target_id.dev.type = D_block;
+        rsbac_target_id.dev.major = RSBAC_MAJOR(bdev->bd_dev);
+        rsbac_target_id.dev.minor = RSBAC_MINOR(bdev->bd_dev);
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               T_DEV,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            if(rsbac_target == T_DEV)
+              goto out;
+            else
+              goto out_putf;
+          }
+        #endif
+
 	set_device_ro(bdev, (lo_flags & LO_FLAGS_READ_ONLY) != 0);
 
 	lo->lo_blocksize = lo_blocksize;
@@ -883,6 +952,13 @@
 	struct file *filp = lo->lo_backing_file;
 	int gfp = lo->old_gfp_mask;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (lo->lo_state != Lo_bound)
 		return -ENXIO;
 
@@ -892,6 +968,55 @@
 	if (filp == NULL)
 		return -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "loop_clr_fd() [lo_ioctl()]: calling ADF for FILE/DEV\n");
+#endif
+        if(S_ISREG(filp->f_dentry->d_inode->i_mode))
+          {
+            rsbac_target = T_FILE;
+            rsbac_target_id.dir.device = filp->f_dentry->d_sb->s_dev;
+            rsbac_target_id.dir.inode  = filp->f_dentry->d_inode->i_ino;
+            rsbac_target_id.dir.dentry_p = filp->f_dentry;
+          }
+        else
+          { /* must be block dev */
+            rsbac_target = T_DEV;
+            rsbac_target_id.dev.type = D_block;
+            rsbac_target_id.dev.major = RSBAC_MAJOR(filp->f_dentry->d_inode->i_rdev);
+            rsbac_target_id.dev.minor = RSBAC_MINOR(filp->f_dentry->d_inode->i_rdev);
+          }
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_UMOUNT,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "loop_clr_fd() [lo_ioctl()]: calling ADF for DEV\n");
+#endif
+        rsbac_target_id.dev.type = D_block;
+        rsbac_target_id.dev.major = LOOP_MAJOR;
+        rsbac_target_id.dev.minor = lo->lo_number;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_UMOUNT,
+                               current->pid,
+                               T_DEV,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	spin_lock_irq(&lo->lo_lock);
 	lo->lo_state = Lo_rundown;
 	lo->lo_pending--;
diff -urN trunk/drivers/char/mem.c 2.6.14-rsbac-1.2.5/drivers/char/mem.c
--- trunk/drivers/char/mem.c	2005-11-11 10:04:38.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/drivers/char/mem.c	2005-11-10 16:17:23.000000000 +0000
@@ -35,6 +35,11 @@
 # include <linux/efi.h>
 #endif
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /*
  * Architectures vary in how they handle caching for addresses
  * outside of main memory.
@@ -749,7 +754,32 @@
 
 static int open_port(struct inode * inode, struct file * filp)
 {
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+
+	if(!capable(CAP_SYS_RAWIO))
+	  return -EPERM;
+
+        rsbac_target_id.scd = ST_kmem;
+        rsbac_attribute_value.dummy = 0;
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "open_port(): calling ADF\n");
+#endif
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_SCD,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          return -EPERM;
+        else
+          return 0;
+#else
 	return capable(CAP_SYS_RAWIO) ? 0 : -EPERM;
+#endif
 }
 
 #define zero_lseek	null_lseek
diff -urN trunk/drivers/char/sysrq.c 2.6.14-rsbac-1.2.5/drivers/char/sysrq.c
--- trunk/drivers/char/sysrq.c	2005-11-11 10:04:39.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/drivers/char/sysrq.c	2005-11-10 16:17:25.000000000 +0000
@@ -39,6 +39,11 @@
 
 #include <asm/ptrace.h>
 
+#ifdef CONFIG_RSBAC
+#include <rsbac/types.h>
+#include <rsbac/debug.h>
+#endif
+
 /* Whether we react on sysrq keys or just ignore them */
 int sysrq_enabled = 1;
 
@@ -151,6 +156,42 @@
 	.enable_mask	= SYSRQ_ENABLE_REMOUNT,
 };
 
+#if  (defined(CONFIG_RSBAC_AUTO_WRITE) && (CONFIG_RSBAC_AUTO_WRITE > 0)) \
+   || defined(CONFIG_RSBAC_INIT_THREAD)
+static void sysrq_handle_rsbac_wakeup(int key, struct pt_regs *pt_regs,
+		                      struct tty_struct *tty) {
+	#ifdef CONFIG_RSBAC_RMSG
+	rsbac_printk(KERN_WARNING "SysRq: Emergency rsbacd/init wake-up!\n");
+	#endif
+	wakeup_rsbacd(0);
+}
+static struct sysrq_key_op sysrq_rsbac_wakeup_op = {
+	handler:	sysrq_handle_rsbac_wakeup,
+	help_msg:	"rsbac_emergency_Wakeup",
+	action_msg:	"Emergency rsbacd/init wake-up!\n",
+};
+#endif
+#ifdef CONFIG_RSBAC_SOFTMODE_SYSRQ
+static void sysrq_handle_rsbac_softmode(int key, struct pt_regs *pt_regs,
+		                        struct tty_struct *tty) {
+	if(rsbac_softmode)
+	  {
+	    rsbac_printk(KERN_WARNING "Soft mode disabled via SysRq!\n");
+	    rsbac_softmode = 0;
+	  }
+	else
+	  {
+	    rsbac_printk(KERN_WARNING "Soft mode enabled via SysRq!\n");
+	    rsbac_softmode = 1;
+	  }
+}
+static struct sysrq_key_op sysrq_rsbac_softmode_op = {
+	handler:	sysrq_handle_rsbac_softmode,
+	help_msg:	"rsbac_toggle_softmode_X",
+	action_msg:	"RSBAC toggle softmode\n",
+};
+#endif
+
 /* END SYNC SYSRQ HANDLERS BLOCK */
 
 
@@ -322,8 +363,17 @@
 /* t */	&sysrq_showstate_op,
 /* u */	&sysrq_mountro_op,
 /* v */	NULL, /* May be assigned at init time by SMP VOYAGER */
+#if  (defined(CONFIG_RSBAC_AUTO_WRITE) && (CONFIG_RSBAC_AUTO_WRITE > 0)) \
+   || defined(CONFIG_RSBAC_INIT_THREAD)
+/* w */	&sysrq_rsbac_wakeup_op,
+#else
 /* w */	NULL,
+#endif
+#ifdef CONFIG_RSBAC_SOFTMODE_SYSRQ
+/* x */	&sysrq_rsbac_softmode_op,
+#else
 /* x */	NULL,
+#endif
 /* y */	NULL,
 /* z */	NULL
 };
diff -urN trunk/drivers/char/tty_io.c 2.6.14-rsbac-1.2.5/drivers/char/tty_io.c
--- trunk/drivers/char/tty_io.c	2005-11-11 10:04:38.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/drivers/char/tty_io.c	2005-11-10 16:17:23.000000000 +0000
@@ -104,6 +104,11 @@
 #include <linux/selection.h>
 #include <linux/devfs_fs_kernel.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 #include <linux/kmod.h>
 
 #undef TTY_DEBUG_HANGUP
@@ -2027,10 +2032,38 @@
 	char ch, mbz = 0;
 	struct tty_ldisc *ld;
 	
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+ 
 	if ((current->signal->tty != tty) && !capable(CAP_SYS_ADMIN))
 		return -EPERM;
 	if (get_user(ch, p))
 		return -EFAULT;
+ 
+ 	/* RSBAC */
+ 	#ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+ 	if (rsbac_debug_aef)
+ 	  rsbac_printk(KERN_DEBUG "tiocsti(): calling ADF\n");
+#endif
+        rsbac_target_id.dev.type = D_char;
+        rsbac_target_id.dev.major = tty->driver->major;
+        rsbac_target_id.dev.minor = tty->driver->minor_start + tty->index;
+ 	rsbac_attribute_value.dummy = 0;
+ 	if (!rsbac_adf_request(R_SEND,
+ 			       current->pid,
+ 			       T_DEV,
+ 			       rsbac_target_id,
+ 			       A_none,
+ 			       rsbac_attribute_value))
+ 	  {
+ 	    return -EPERM;
+ 	  }
+ 	#endif
+ 
 	ld = tty_ldisc_ref_wait(tty);
 	ld->receive_buf(tty, &ch, &mbz, 1);
 	tty_ldisc_deref(ld);
diff -urN trunk/drivers/char/tty_ioctl.c 2.6.14-rsbac-1.2.5/drivers/char/tty_ioctl.c
--- trunk/drivers/char/tty_ioctl.c	2005-11-11 10:04:39.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/drivers/char/tty_ioctl.c	2005-11-10 16:17:25.000000000 +0000
@@ -25,6 +25,11 @@
 #include <asm/uaccess.h>
 #include <asm/system.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 #undef TTY_DEBUG_WAIT_UNTIL_SENT
 
 #undef	DEBUG
@@ -395,12 +400,61 @@
 	int retval;
 	struct tty_ldisc *ld;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_adf_request_t     rsbac_request;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (tty->driver->type == TTY_DRIVER_TYPE_PTY &&
 	    tty->driver->subtype == PTY_TYPE_MASTER)
 		real_tty = tty->link;
 	else
 		real_tty = tty;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  rsbac_printk(KERN_DEBUG "n_tty_ioctl(): calling ADF\n");
+#endif
+	switch (cmd) {
+#ifdef TIOCGETP
+		case TIOCGETP:
+#endif
+#ifdef TIOCGETC
+		case TIOCGETC:
+#endif
+#ifdef TIOCGLTC
+		case TIOCGLTC:
+#endif
+		case TCGETS:
+		case TCGETA:
+		case TIOCOUTQ:
+		case TIOCINQ:
+		case TIOCGLCKTRMIOS:
+		case TIOCGSOFTCAR:
+		  rsbac_request = R_GET_PERMISSIONS_DATA;
+		  break;
+		default:
+		  rsbac_request = R_MODIFY_PERMISSIONS_DATA;
+	}
+        rsbac_target_id.dev.type = D_char;
+        rsbac_target_id.dev.major = tty->driver->major;
+        rsbac_target_id.dev.minor = tty->driver->minor_start + tty->index;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(rsbac_request,
+			       current->pid,
+			       T_DEV,
+			       rsbac_target_id,
+			       A_none,
+			       rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	switch (cmd) {
 #ifdef TIOCGETP
 		case TIOCGETP:
diff -urN trunk/drivers/ide/ide.c 2.6.14-rsbac-1.2.5/drivers/ide/ide.c
--- trunk/drivers/ide/ide.c	2005-11-11 10:04:53.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/drivers/ide/ide.c	2005-11-10 16:17:35.000000000 +0000
@@ -160,6 +160,10 @@
 #include <asm/uaccess.h>
 #include <asm/io.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
 
 /* default maximum number of failures */
 #define IDE_DEFAULT_MAX_FAILURES 	1
@@ -1261,6 +1265,65 @@
 	int err = 0;
 	void __user *p = (void __user *)arg;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_adf_request_t     rsbac_request;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  rsbac_printk(KERN_DEBUG "ide_ioctl(): calling ADF\n");
+#endif
+        /* values taken from include/linux/fs.h and hdreg.h */
+	switch (cmd) {
+	 	case BLKGETSIZE:   /* Return device size */
+	 	case BLKGETSIZE64:
+		case BLKROGET:
+		case BLKRAGET:
+		case BLKFRAGET:
+		case BLKSECTGET:
+		case BLKSSZGET:
+		case BLKBSZGET:
+		case HDIO_GETGEO:
+		case HDIO_OBSOLETE_IDENTITY:
+                case HDIO_GET_UNMASKINTR:
+		case HDIO_GET_IDENTITY:
+		case HDIO_GET_NICE:
+		case HDIO_GET_BUSSTATE:
+		case HDIO_GET_QDMA:
+		case HDIO_GET_MULTCOUNT:
+		case HDIO_GET_KEEPSETTINGS:
+		case HDIO_GET_32BIT:
+		case HDIO_GET_NOWERR:
+		case HDIO_GET_DMA:
+		case HDIO_GET_WCACHE:
+		case HDIO_GET_ACOUSTIC:
+		case HDIO_GET_ADDRESS:
+		  rsbac_request = R_GET_STATUS_DATA;
+		  break;
+
+		default:
+		  rsbac_request = R_MODIFY_SYSTEM_DATA;
+	}
+        rsbac_target_id.dev.type = D_block;
+        rsbac_target_id.dev.major = RSBAC_MAJOR(bdev->bd_dev);
+        rsbac_target_id.dev.minor = RSBAC_MINOR(bdev->bd_dev);
+        rsbac_attribute_value.ioctl_cmd = cmd;
+        if (!rsbac_adf_request(rsbac_request,
+                               current->pid,
+                               T_DEV,
+                               rsbac_target_id,
+                               A_ioctl_cmd,
+                               rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	down(&ide_setting_sem);
 	if ((setting = ide_find_setting_by_ioctl(drive, cmd)) != NULL) {
 		if (cmd == setting->read_ioctl) {
diff -urN trunk/fs/exec.c 2.6.14-rsbac-1.2.5/fs/exec.c
--- trunk/fs/exec.c	2005-11-11 10:03:49.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/exec.c	2005-11-10 16:16:50.000000000 +0000
@@ -49,6 +49,11 @@
 #include <linux/rmap.h>
 #include <linux/acct.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 #include <asm/uaccess.h>
 #include <asm/mmu_context.h>
 
@@ -126,6 +131,12 @@
 	struct nameidata nd;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	nd.intent.open.flags = FMODE_READ;
 	error = __user_walk(library, LOOKUP_FOLLOW|LOOKUP_OPEN, &nd);
 	if (error)
@@ -135,10 +146,42 @@
 	if (!S_ISREG(nd.dentry->d_inode->i_mode))
 		goto exit;
 
+#ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+	if(rsbac_dac_part_disabled(nd.dentry))
+	  error = 0;
+	else
+#endif
 	error = permission(nd.dentry->d_inode, MAY_READ | MAY_EXEC, &nd);
 	if (error)
 		goto exit;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sys_uselib(): calling ADF\n");
+#endif
+        rsbac_target_id.file.device = nd.dentry->d_inode->i_sb->s_dev;
+        rsbac_target_id.file.inode  = nd.dentry->d_inode->i_ino;
+        rsbac_target_id.file.dentry_p = nd.dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MAP_EXEC,
+                               current->pid,
+                               T_FILE,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "sys_uselib(): request not granted, my PID: %i\n",
+                     current->pid);
+#endif
+            error = -EPERM;
+            goto exit;
+          }
+        #endif
+
 	file = dentry_open(nd.dentry, nd.mnt, O_RDONLY);
 	error = PTR_ERR(file);
 	if (IS_ERR(file))
@@ -164,6 +207,33 @@
 		read_unlock(&binfmt_lock);
 	}
 	fput(file);
+
+        /* RSBAC: notify ADF of mapped segment */
+        #ifdef CONFIG_RSBAC
+        if(!error)
+          {
+            union rsbac_target_id_t rsbac_new_target_id;
+
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "sys_uselib(): calling ADF_set_attr\n");
+#endif
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(R_MAP_EXEC,
+                                   current->pid,
+                                   T_FILE,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sys_uselib(): rsbac_adf_set_attr() returned error\n");
+              }
+          }
+        #endif
+
 out:
   	return error;
 exit:
@@ -499,7 +569,14 @@
 		file = ERR_PTR(-EACCES);
 		if (!(nd.mnt->mnt_flags & MNT_NOEXEC) &&
 		    S_ISREG(inode->i_mode)) {
-			int err = permission(inode, MAY_EXEC, &nd);
+			int err;
+
+                        #ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+                        if(rsbac_dac_part_disabled(nd.dentry))
+                          err = 0;
+                        else
+                        #endif
+			err = permission(inode, MAY_EXEC, &nd);
 			if (!err && !(inode->i_mode & 0111))
 				err = -EACCES;
 			file = ERR_PTR(err);
@@ -1144,6 +1221,14 @@
 	int retval;
 	int i;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        int rsbac_has_file_ref = 0;
+        #endif
+
 	retval = -ENOMEM;
 	bprm = kmalloc(sizeof(*bprm), GFP_KERNEL);
 	if (!bprm)
@@ -1183,6 +1268,36 @@
 	if (retval)
 		goto out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_execve() [sys_execve()]: calling ADF\n");
+#endif
+        rsbac_target_id.file.device = file->f_dentry->d_sb->s_dev;
+        rsbac_target_id.file.inode  = file->f_dentry->d_inode->i_ino;
+        rsbac_target_id.file.dentry_p = file->f_dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_EXECUTE,
+                               current->pid,
+                               T_FILE,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "do_execve() [sys_execve()]: request not granted, my PID: %i\n",
+                     current->pid);
+#endif
+            retval = -EPERM;
+            goto out;
+          }
+
+        get_file(file);
+        rsbac_has_file_ref = 1;
+        #endif
+
 	retval = prepare_binprm(bprm);
 	if (retval < 0)
 		goto out;
@@ -1208,6 +1323,32 @@
 		security_bprm_free(bprm);
 		acct_update_integrals(current);
 		update_mem_hiwater(current);
+
+                /* RSBAC: notify ADF of changed program in this process */
+                /*        Most structures are already filled            */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  printk(KERN_DEBUG "do_execve() [sys_execve()]: calling ADF_set_attr\n");
+#endif
+                rsbac_new_target_id.dummy = 0;
+                if (rsbac_adf_set_attr(R_EXECUTE,
+                                       current->pid,
+                                       T_FILE,
+                                       rsbac_target_id,
+                                       T_NONE,
+                                       rsbac_new_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    rsbac_printk(KERN_WARNING
+                           "do_execve() [sys_execve]: rsbac_adf_set_attr() returned error\n");
+                  }
+
+                if (rsbac_has_file_ref)
+                        fput(file);
+                #endif
+
 		kfree(bprm);
 		return retval;
 	}
@@ -1237,6 +1378,11 @@
 	kfree(bprm);
 
 out_ret:
+        #ifdef CONFIG_RSBAC
+        if (rsbac_has_file_ref)
+                fput(file);
+        #endif
+
 	return retval;
 }
 
diff -urN trunk/fs/ext2/ioctl.c 2.6.14-rsbac-1.2.5/fs/ext2/ioctl.c
--- trunk/fs/ext2/ioctl.c	2005-11-11 10:03:53.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/ext2/ioctl.c	2005-11-10 16:16:53.000000000 +0000
@@ -13,6 +13,11 @@
 #include <asm/current.h>
 #include <asm/uaccess.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#include <net/sock.h>
+#endif
 
 int ext2_ioctl (struct inode * inode, struct file * filp, unsigned int cmd,
 		unsigned long arg)
@@ -20,6 +25,78 @@
 	struct ext2_inode_info *ei = EXT2_I(inode);
 	unsigned int flags;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_adf_request_t     rsbac_request;
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "ext2_ioctl(): calling ADF\n");
+#endif
+        switch (cmd)
+          {
+            case EXT2_IOC_GETFLAGS:
+            case EXT2_IOC_GETVERSION:
+              rsbac_request = R_GET_PERMISSIONS_DATA;
+              break;
+            case EXT2_IOC_SETFLAGS:
+            case EXT2_IOC_SETVERSION:
+              rsbac_request = R_MODIFY_PERMISSIONS_DATA;
+              break;
+            default:
+              rsbac_request = R_NONE;
+	  }
+        if(S_ISSOCK(inode->i_mode))
+          {
+            #ifdef CONFIG_RSBAC_NET_OBJ
+            #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+            if(   SOCKET_I(inode)->ops
+               && (SOCKET_I(inode)->ops->family != AF_UNIX)
+              )
+            #endif
+              {
+                rsbac_target = T_NETOBJ;
+                rsbac_target_id.netobj.sock_p
+                  = SOCKET_I(inode);
+                rsbac_target_id.netobj.local_addr = NULL;
+                rsbac_target_id.netobj.local_len = 0;
+                rsbac_target_id.netobj.remote_addr = NULL;
+                rsbac_target_id.netobj.remote_len = 0;
+              }
+            #endif
+          }
+        else
+          {
+            if (S_ISDIR(inode->i_mode))
+              rsbac_target = T_DIR;
+            else if (S_ISFIFO(inode->i_mode))
+              rsbac_target = T_FIFO;
+            else if (S_ISLNK(inode->i_mode))
+              rsbac_target = T_SYMLINK;
+            else
+              rsbac_target = T_FILE;
+            rsbac_target_id.file.device = filp->f_dentry->d_sb->s_dev;
+            rsbac_target_id.file.inode  = inode->i_ino;
+            rsbac_target_id.file.dentry_p = filp->f_dentry;
+	  }
+        rsbac_attribute_value.ioctl_cmd = cmd;
+        if(   (rsbac_request != R_NONE)
+           && !rsbac_adf_request(rsbac_request,
+                                 current->pid,
+                                 rsbac_target,
+                                 rsbac_target_id,
+                                 A_ioctl_cmd,
+                                 rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	ext2_debug ("cmd = %u, arg = %lu\n", cmd, arg);
 
 	switch (cmd) {
diff -urN trunk/fs/ext2/namei.c 2.6.14-rsbac-1.2.5/fs/ext2/namei.c
--- trunk/fs/ext2/namei.c	2005-11-11 10:03:53.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/ext2/namei.c	2005-11-10 16:16:54.000000000 +0000
@@ -36,6 +36,11 @@
 #include "acl.h"
 #include "xip.h"
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_SECDEL
+#include <rsbac/adf.h>
+#endif
+
 /*
  * Couple of helper functions - make the code slightly cleaner.
  */
@@ -284,6 +289,12 @@
 	if (err)
 		goto out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_SECDEL
+        if(inode->i_nlink == 1)
+          rsbac_sec_del(dentry);
+        #endif
+
 	inode->i_ctime = dir->i_ctime;
 	ext2_dec_count(inode);
 	err = 0;
@@ -341,6 +352,13 @@
 		new_de = ext2_find_entry (new_dir, new_dentry, &new_page);
 		if (!new_de)
 			goto out_dir;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC_SECDEL
+                if(new_inode->i_nlink == 1)
+                  rsbac_sec_del(new_dentry);
+                #endif
+
 		ext2_inc_count(old_inode);
 		ext2_set_link(new_dir, new_de, new_page, old_inode);
 		new_inode->i_ctime = CURRENT_TIME_SEC;
diff -urN trunk/fs/ext3/ioctl.c 2.6.14-rsbac-1.2.5/fs/ext3/ioctl.c
--- trunk/fs/ext3/ioctl.c	2005-11-11 10:03:53.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/ext3/ioctl.c	2005-11-10 16:16:54.000000000 +0000
@@ -14,6 +14,11 @@
 #include <linux/time.h>
 #include <asm/uaccess.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <net/sock.h>
+#include <rsbac/adf.h>
+#endif
 
 int ext3_ioctl (struct inode * inode, struct file * filp, unsigned int cmd,
 		unsigned long arg)
@@ -22,6 +27,87 @@
 	unsigned int flags;
 	unsigned short rsv_window_size;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_adf_request_t     rsbac_request;
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "ext3_ioctl(): calling ADF\n");
+#endif
+        switch (cmd)
+          {
+#ifdef CONFIG_JBD_DEBUG
+            case EXT3_IOC_WAIT_FOR_READONLY:
+#endif
+            case EXT3_IOC_GETFLAGS:
+            case EXT3_IOC_GETVERSION:
+            case EXT3_IOC_GETVERSION_OLD:
+            case EXT3_IOC_GETRSVSZ:
+              rsbac_request = R_GET_PERMISSIONS_DATA;
+              break;
+            case EXT3_IOC_SETFLAGS:
+            case EXT3_IOC_SETVERSION:
+            case EXT3_IOC_SETVERSION_OLD:
+            case EXT3_IOC_SETRSVSZ:
+            case EXT3_IOC_GROUP_EXTEND:
+            case EXT3_IOC_GROUP_ADD:
+              rsbac_request = R_MODIFY_PERMISSIONS_DATA;
+              break;
+            default:
+              rsbac_request = R_NONE;
+	  }
+        if(S_ISSOCK(inode->i_mode))
+          {
+            #ifdef CONFIG_RSBAC_NET_OBJ
+            #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+            if(   SOCKET_I(inode)->ops
+               && (SOCKET_I(inode)->ops->family != AF_UNIX)
+              )
+            #endif
+              {
+                rsbac_target = T_NETOBJ;
+                rsbac_target_id.netobj.sock_p
+                  = SOCKET_I(inode);
+                rsbac_target_id.netobj.local_addr = NULL;
+                rsbac_target_id.netobj.local_len = 0;
+                rsbac_target_id.netobj.remote_addr = NULL;
+                rsbac_target_id.netobj.remote_len = 0;
+              }
+            #endif
+          }
+        else
+          {
+            if (S_ISDIR(inode->i_mode))
+              rsbac_target = T_DIR;
+            else if (S_ISFIFO(inode->i_mode))
+              rsbac_target = T_FIFO;
+            else if (S_ISLNK(inode->i_mode))
+              rsbac_target = T_SYMLINK;
+            else
+              rsbac_target = T_FILE;
+            rsbac_target_id.file.device = filp->f_dentry->d_sb->s_dev;
+            rsbac_target_id.file.inode  = inode->i_ino;
+            rsbac_target_id.file.dentry_p = filp->f_dentry;
+	  }
+        rsbac_attribute_value.ioctl_cmd = cmd;
+        if(   (rsbac_request != R_NONE)
+           && !rsbac_adf_request(rsbac_request,
+                                 current->pid,
+                                 rsbac_target,
+                                 rsbac_target_id,
+                                 A_ioctl_cmd,
+                                 rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	ext3_debug ("cmd = %u, arg = %lu\n", cmd, arg);
 
 	switch (cmd) {
diff -urN trunk/fs/ext3/namei.c 2.6.14-rsbac-1.2.5/fs/ext3/namei.c
--- trunk/fs/ext3/namei.c	2005-11-11 10:03:53.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/ext3/namei.c	2005-11-10 16:16:54.000000000 +0000
@@ -39,6 +39,11 @@
 #include "xattr.h"
 #include "acl.h"
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_SECDEL
+#include <rsbac/adf.h>
+#endif
+
 /*
  * define how far ahead to read directories while searching them.
  */
@@ -2092,6 +2097,13 @@
 	retval = ext3_delete_entry(handle, dir, de, bh);
 	if (retval)
 		goto end_unlink;
+
+        /* RSBAC ext3_unlink */
+        #ifdef CONFIG_RSBAC_SECDEL
+        if(inode->i_nlink == 1)
+          rsbac_sec_del(dentry);
+        #endif
+
 	dir->i_ctime = dir->i_mtime = CURRENT_TIME_SEC;
 	ext3_update_dx_flag(dir);
 	ext3_mark_inode_dirty(handle, dir);
@@ -2244,6 +2256,13 @@
 			brelse (new_bh);
 			new_bh = NULL;
 		}
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC_SECDEL
+                else
+                  if(new_inode->i_nlink == 1)
+                    rsbac_sec_del(new_dentry);
+                #endif
 	}
 	if (S_ISDIR(old_inode->i_mode)) {
 		if (new_inode) {
diff -urN trunk/fs/fcntl.c 2.6.14-rsbac-1.2.5/fs/fcntl.c
--- trunk/fs/fcntl.c	2005-11-11 10:03:50.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/fcntl.c	2005-11-10 16:16:51.000000000 +0000
@@ -22,6 +22,11 @@
 #include <asm/siginfo.h>
 #include <asm/uaccess.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 void fastcall set_close_on_exec(unsigned int fd, int flag)
 {
 	struct files_struct *files = current->files;
@@ -283,6 +288,12 @@
 {
 	long err = -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	switch (cmd) {
 	case F_DUPFD:
 		get_file(filp);
@@ -320,6 +331,24 @@
 		force_successful_syscall_return();
 		break;
 	case F_SETOWN:
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  rsbac_printk(KERN_DEBUG "do_fcntl(): calling ADF\n");
+#endif
+                rsbac_target_id.process = arg;
+                rsbac_attribute_value.dummy = 0;
+                if(!rsbac_adf_request(R_SEND_SIGNAL,
+                                      current->pid,
+                                      T_PROCESS,
+                                      rsbac_target_id,
+                                      A_none,
+                                      rsbac_attribute_value))
+                  {
+                    return -EPERM;
+                  }
+                #endif
 		err = f_setown(filp, arg, 1);
 		break;
 	case F_GETSIG:
diff -urN trunk/fs/ioctl.c 2.6.14-rsbac-1.2.5/fs/ioctl.c
--- trunk/fs/ioctl.c	2005-11-11 10:03:46.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/ioctl.c	2005-11-10 16:16:49.000000000 +0000
@@ -16,14 +16,79 @@
 #include <asm/uaccess.h>
 #include <asm/ioctls.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_IOCTL
+#include <rsbac/adf.h>
+#include <net/sock.h>
+#endif
+
 static long do_ioctl(struct file *filp, unsigned int cmd,
 		unsigned long arg)
 {
 	int error = -ENOTTY;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_IOCTL
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!filp->f_op)
 		goto out;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_IOCTL
+	if(S_ISBLK(filp->f_dentry->d_inode->i_mode))
+	  {
+	    rsbac_target = T_DEV;
+	    rsbac_target_id.dev.type = D_block;
+	    rsbac_target_id.dev.major = RSBAC_MAJOR(filp->f_dentry->d_inode->i_rdev);
+	    rsbac_target_id.dev.minor = RSBAC_MINOR(filp->f_dentry->d_inode->i_rdev);
+	  }
+	else
+	if(S_ISCHR(filp->f_dentry->d_inode->i_mode))
+	  {
+	    rsbac_target = T_DEV;
+	    rsbac_target_id.dev.type = D_char;
+	    rsbac_target_id.dev.major = RSBAC_MAJOR(filp->f_dentry->d_inode->i_rdev);
+	    rsbac_target_id.dev.minor = RSBAC_MINOR(filp->f_dentry->d_inode->i_rdev);
+	  }
+	else
+        #ifdef CONFIG_RSBAC_NET_OBJ
+	if(S_ISSOCK(filp->f_dentry->d_inode->i_mode))
+	  {
+	    rsbac_target = T_NETOBJ;
+            rsbac_target_id.netobj.sock_p
+              = SOCKET_I(filp->f_dentry->d_inode);
+            rsbac_target_id.netobj.local_addr = NULL;
+            rsbac_target_id.netobj.local_len = 0;
+            rsbac_target_id.netobj.remote_addr = NULL;
+            rsbac_target_id.netobj.remote_len = 0;
+	  }
+	else
+	#endif
+	  rsbac_target = T_NONE;
+	if(rsbac_target != T_NONE)
+	  {
+	    #ifdef CONFIG_RSBAC_DEBUG
+	    if (rsbac_debug_aef)
+	      rsbac_printk(KERN_DEBUG "do_ioctl() [sys_ioctl()]: calling ADF\n");
+	    #endif
+	    rsbac_attribute_value.ioctl_cmd = cmd;
+	    if (!rsbac_adf_request(R_IOCTL,
+	                           current->pid,
+	                           rsbac_target,
+	                           rsbac_target_id,
+	                           A_ioctl_cmd,
+	                           rsbac_attribute_value))
+	      {
+	        error = -EPERM;
+	        goto out;
+	      }
+	  }
+	#endif
+
 	if (filp->f_op->unlocked_ioctl) {
 		error = filp->f_op->unlocked_ioctl(filp, cmd, arg);
 		if (error == -ENOIOCTLCMD)
diff -urN trunk/fs/locks.c 2.6.14-rsbac-1.2.5/fs/locks.c
--- trunk/fs/locks.c	2005-11-11 10:03:49.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/locks.c	2005-11-10 16:16:50.000000000 +0000
@@ -129,6 +129,11 @@
 #include <asm/semaphore.h>
 #include <asm/uaccess.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 #define IS_POSIX(fl)	(fl->fl_flags & FL_POSIX)
 #define IS_FLOCK(fl)	(fl->fl_flags & FL_FLOCK)
 #define IS_LEASE(fl)	(fl->fl_flags & FL_LEASE)
@@ -1489,6 +1494,13 @@
 	int can_sleep, unlock;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = -EBADF;
 	filp = fget(fd);
 	if (!filp)
@@ -1501,6 +1513,35 @@
 	if (!unlock && !(cmd & LOCK_MAND) && !(filp->f_mode & 3))
 		goto out_putf;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sys_flock(): calling ADF\n");
+#endif
+        rsbac_target = T_FILE;
+        if (S_ISDIR(filp->f_dentry->d_inode->i_mode))
+          rsbac_target = T_DIR;
+        else if (S_ISFIFO(filp->f_dentry->d_inode->i_mode))
+          rsbac_target = T_FIFO;
+        else if (S_ISLNK(filp->f_dentry->d_inode->i_mode))
+          rsbac_target = T_SYMLINK;
+        rsbac_target_id.file.device = filp->f_dentry->d_sb->s_dev;
+        rsbac_target_id.file.inode  = filp->f_dentry->d_inode->i_ino;
+        rsbac_target_id.file.dentry_p = filp->f_dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_LOCK,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            goto out_putf;
+          }
+        #endif
+
 	error = flock_make_lock(filp, &lock, cmd);
 	if (error)
 		goto out_putf;
@@ -1538,6 +1579,13 @@
 	struct flock flock;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = -EFAULT;
 	if (copy_from_user(&flock, l, sizeof(flock)))
 		goto out;
@@ -1549,6 +1597,35 @@
 	if (error)
 		goto out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "fcntl_getlk() [sys_fcntl()]: calling ADF\n");
+#endif
+        rsbac_target = T_FILE;
+        if (S_ISDIR(filp->f_dentry->d_inode->i_mode))
+          rsbac_target = T_DIR;
+        else if (S_ISFIFO(filp->f_dentry->d_inode->i_mode))
+          rsbac_target = T_FIFO;
+        else if (S_ISLNK(filp->f_dentry->d_inode->i_mode))
+          rsbac_target = T_SYMLINK;
+        rsbac_target_id.file.device = filp->f_dentry->d_sb->s_dev;
+        rsbac_target_id.file.inode  = filp->f_dentry->d_inode->i_ino;
+        rsbac_target_id.file.dentry_p = filp->f_dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_GET_STATUS_DATA,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            goto out;
+          }
+        #endif
+
 	if (filp->f_op && filp->f_op->lock) {
 		error = filp->f_op->lock(filp, F_GETLK, &file_lock);
 		if (file_lock.fl_ops && file_lock.fl_ops->fl_release_private)
@@ -1600,6 +1677,13 @@
 	struct inode *inode;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (file_lock == NULL)
 		return -ENOLCK;
 
@@ -1630,6 +1714,35 @@
 		file_lock->fl_flags |= FL_SLEEP;
 	}
 	
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "fcntl_setlk() [sys_fcntl()]: calling ADF\n");
+#endif
+        rsbac_target = T_FILE;
+        if (S_ISDIR(inode->i_mode))
+          rsbac_target = T_DIR;
+        else if (S_ISFIFO(inode->i_mode))
+          rsbac_target = T_FIFO;
+        else if (S_ISLNK(inode->i_mode))
+          rsbac_target = T_SYMLINK;
+        rsbac_target_id.file.device = filp->f_dentry->d_sb->s_dev;
+        rsbac_target_id.file.inode  = inode->i_ino;
+        rsbac_target_id.file.dentry_p = filp->f_dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_LOCK,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            goto out;
+          }
+        #endif
+
 	error = -EBADF;
 	switch (flock.l_type) {
 	case F_RDLCK:
@@ -1692,6 +1805,13 @@
 	struct flock64 flock;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = -EFAULT;
 	if (copy_from_user(&flock, l, sizeof(flock)))
 		goto out;
@@ -1703,6 +1823,35 @@
 	if (error)
 		goto out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "fcntl_getlk64() [sys_fcntl()]: calling ADF\n");
+#endif
+        rsbac_target = T_FILE;
+        if (S_ISDIR(filp->f_dentry->d_inode->i_mode))
+          rsbac_target = T_DIR;
+        else if (S_ISFIFO(filp->f_dentry->d_inode->i_mode))
+          rsbac_target = T_FIFO;
+        else if (S_ISLNK(filp->f_dentry->d_inode->i_mode))
+          rsbac_target = T_SYMLINK;
+        rsbac_target_id.file.device = filp->f_dentry->d_sb->s_dev;
+        rsbac_target_id.file.inode  = filp->f_dentry->d_inode->i_ino;
+        rsbac_target_id.file.dentry_p = filp->f_dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_GET_STATUS_DATA,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            goto out;
+          }
+        #endif
+
 	if (filp->f_op && filp->f_op->lock) {
 		error = filp->f_op->lock(filp, F_GETLK, &file_lock);
 		if (file_lock.fl_ops && file_lock.fl_ops->fl_release_private)
@@ -1743,6 +1892,13 @@
 	struct inode *inode;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (file_lock == NULL)
 		return -ENOLCK;
 
@@ -1790,6 +1946,35 @@
 		goto out;
 	}
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "fcntl_setlk64() [sys_fcntl()]: calling ADF\n");
+#endif
+        rsbac_target = T_FILE;
+        if (S_ISDIR(inode->i_mode))
+          rsbac_target = T_DIR;
+        else if (S_ISFIFO(inode->i_mode))
+          rsbac_target = T_FIFO;
+        else if (S_ISLNK(inode->i_mode))
+          rsbac_target = T_SYMLINK;
+        rsbac_target_id.file.device = filp->f_dentry->d_sb->s_dev;
+        rsbac_target_id.file.inode  = inode->i_ino;
+        rsbac_target_id.file.dentry_p = filp->f_dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_LOCK,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            goto out;
+          }
+        #endif
+
 	error = security_file_lock(filp, file_lock->fl_type);
 	if (error)
 		goto out;
diff -urN trunk/fs/minix/namei.c 2.6.14-rsbac-1.2.5/fs/minix/namei.c
--- trunk/fs/minix/namei.c	2005-11-11 10:03:49.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/minix/namei.c	2005-11-10 16:16:50.000000000 +0000
@@ -6,6 +6,11 @@
 
 #include "minix.h"
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_SECDEL
+#include <rsbac/adf.h>
+#endif
+
 static inline void inc_count(struct inode *inode)
 {
 	inode->i_nlink++;
@@ -201,6 +206,12 @@
 	if (err)
 		goto end_unlink;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_SECDEL
+        if(inode->i_nlink == 1)
+          rsbac_sec_del(dentry);
+        #endif
+
 	inode->i_ctime = dir->i_ctime;
 	dec_count(inode);
 end_unlink:
@@ -257,6 +268,13 @@
 		new_de = minix_find_entry(new_dentry, &new_page);
 		if (!new_de)
 			goto out_dir;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC_SECDEL
+                if(new_inode->i_nlink == 1)
+                  rsbac_sec_del(new_dentry);
+                #endif
+
 		inc_count(old_inode);
 		minix_set_link(new_de, new_page, old_inode);
 		new_inode->i_ctime = CURRENT_TIME_SEC;
diff -urN trunk/fs/msdos/namei.c 2.6.14-rsbac-1.2.5/fs/msdos/namei.c
--- trunk/fs/msdos/namei.c	2005-11-11 10:03:49.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/msdos/namei.c	2005-11-10 16:16:50.000000000 +0000
@@ -12,6 +12,11 @@
 #include <linux/msdos_fs.h>
 #include <linux/smp_lock.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_SECDEL
+#include <rsbac/adf.h>
+#endif
+
 /* MS-DOS "device special files" */
 static const unsigned char *reserved_names[] = {
 	"CON     ", "PRN     ", "NUL     ", "AUX     ",
@@ -441,6 +446,12 @@
 	inode->i_nlink = 0;
 	inode->i_ctime = CURRENT_TIME_SEC;
 	fat_detach(inode);
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_SECDEL
+        rsbac_sec_del(dentry);
+        #endif
+
 out:
 	unlock_kernel();
 
@@ -536,6 +547,15 @@
 	}
 	new_dir->i_version++;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_SECDEL
+	if (new_inode)
+	      {
+                if(new_inode->i_nlink == 1)
+                  rsbac_sec_del(new_dentry);
+	      }
+        #endif
+
 	fat_detach(old_inode);
 	fat_attach(old_inode, sinfo.i_pos);
 	if (is_hid)
diff -urN trunk/fs/namei.c 2.6.14-rsbac-1.2.5/fs/namei.c
--- trunk/fs/namei.c	2005-11-11 10:03:48.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/namei.c	2005-11-10 16:16:50.000000000 +0000
@@ -33,6 +33,15 @@
 
 #define ACC_MODE(x) ("\000\004\002\006"[(x)&O_ACCMODE])
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#include <rsbac/fs.h>
+#ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_FULL
+#include <rsbac/debug.h>
+#endif
+#endif
+
 /* [Feb-1997 T. Schoebel-Theuer]
  * Fundamental changes in the pathname lookup mechanisms (namei)
  * were necessary because of omirr.  The reason is that omirr needs
@@ -243,6 +252,11 @@
 	}
 
 
+#ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_FULL
+	if(rsbac_dac_disable)
+	  return 0;
+#endif
+
 	/* Ordinary permission routines do not understand MAY_APPEND. */
 	submask = mask & ~MAY_APPEND;
 	if (inode->i_op && inode->i_op->permission)
@@ -514,8 +528,20 @@
 	if (!IS_ERR(cookie)) {
 		char *s = nd_get_link(nd);
 		error = 0;
-		if (s)
+		if (s) {
+		        #ifdef CONFIG_RSBAC_SYM_REDIR
+		        char * rsbac_name;
+
+                        rsbac_name = rsbac_symlink_redirect(dentry, s, PAGE_SIZE);
+			if(rsbac_name)
+			  {
+			    error = __vfs_follow_link(nd, rsbac_name);
+                            kfree(rsbac_name);
+                          }
+                        else
+			#endif
 			error = __vfs_follow_link(nd, s);
+                }
 		if (dentry->d_inode->i_op->put_link)
 			dentry->d_inode->i_op->put_link(dentry, nd, cookie);
 	}
@@ -551,6 +577,13 @@
 static inline int do_follow_link(struct path *path, struct nameidata *nd)
 {
 	int err = -ELOOP;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (current->link_count >= MAX_NESTED_LINKS)
 		goto loop;
 	if (current->total_link_count >= 40)
@@ -560,6 +593,31 @@
 	err = security_inode_follow_link(path->dentry, nd);
 	if (err)
 		goto loop;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+/* too much...
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_follow_link(): calling ADF\n");
+#endif
+*/
+        rsbac_target_id.dir.device = path->dentry->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = path->dentry->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = path->dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_SEARCH,
+                               current->pid,
+                               T_SYMLINK,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+             err = -EPERM;
+             goto loop;
+          }
+        #endif
+
 	current->link_count++;
 	current->total_link_count++;
 	nd->depth++;
@@ -735,6 +793,12 @@
 	int err;
 	unsigned int lookup_flags = nd->flags;
 	
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	while (*name=='/')
 		name++;
 	if (!*name)
@@ -750,6 +814,11 @@
 		struct qstr this;
 		unsigned int c;
 
+                #ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+                if(rsbac_dac_part_disabled(nd->dentry))
+                  err = 0;
+                else
+                #endif
 		err = exec_permission_lite(inode, nd);
 		if (err == -EAGAIN) { 
 			err = permission(inode, MAY_EXEC, nd);
@@ -757,6 +826,30 @@
  		if (err)
 			break;
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+/* too much...
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  printk(KERN_DEBUG "link_path_walk(): calling ADF\n");
+#endif
+*/
+                rsbac_target_id.dir.device = inode->i_sb->s_dev;
+                rsbac_target_id.dir.inode  = inode->i_ino;
+                rsbac_target_id.dir.dentry_p = nd->dentry;
+                rsbac_attribute_value.dummy = 0;
+                if (!rsbac_adf_request(R_SEARCH,
+                                       current->pid,
+                                       T_DIR,
+                                       rsbac_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    err = -EPERM;
+                    break;
+                  }
+                #endif
+
 		this.name = name;
 		c = *(const unsigned char *)name;
 
@@ -1063,12 +1156,49 @@
 	struct inode *inode;
 	int err;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	inode = base->d_inode;
+
+        #ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+        if(rsbac_dac_part_disabled(base))
+          err = 0;
+        else
+        #endif
 	err = permission(inode, MAY_EXEC, nd);
 	dentry = ERR_PTR(err);
 	if (err)
 		goto out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+/*
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+                    rsbac_printk(KERN_DEBUG "lookup_hash(): calling ADF\n");
+#endif
+*/
+        rsbac_target_id.dir.device = inode->i_sb->s_dev;
+        rsbac_target_id.dir.inode  = inode->i_ino;
+        rsbac_target_id.dir.dentry_p = base;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_SEARCH,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            err = -EPERM;
+            dentry = ERR_PTR(err);
+            goto out;
+          }
+        #endif
+
 	/*
 	 * See if the low-level filesystem might want
 	 * to use its own hash..
@@ -1127,6 +1257,82 @@
 	return ERR_PTR(-EACCES);
 }
 
+/* RSBAC *
+ * I hate to put new functions into this file, but even more I hate removing
+ * all statics from all the lookup helpers in here...
+ * Still, I need some form of RSBAC bypass for internal file access.
+ * Amon Ott <ao@rsbac.org>
+ */
+#ifdef CONFIG_RSBAC
+static struct dentry * __rsbac_lookup_hash(struct qstr *name, struct dentry * base, struct nameidata *nd)
+{
+	struct dentry * dentry;
+	struct inode *inode;
+	int err;
+
+	inode = base->d_inode;
+
+	/*
+	 * See if the low-level filesystem might want
+	 * to use its own hash..
+	 */
+	if (base->d_op && base->d_op->d_hash) {
+		err = base->d_op->d_hash(base, name);
+		dentry = ERR_PTR(err);
+		if (err < 0)
+			goto out;
+	}
+
+	dentry = cached_lookup(base, name, nd);
+	if (!dentry) {
+		struct dentry *new = d_alloc(base, name);
+		dentry = ERR_PTR(-ENOMEM);
+		if (!new)
+			goto out;
+		dentry = inode->i_op->lookup(inode, new, nd);
+		if (!dentry)
+			dentry = new;
+		else
+			dput(new);
+	}
+out:
+	return dentry;
+}
+
+struct dentry * rsbac_lookup_hash(struct qstr *name, struct dentry * base)
+{
+	return __rsbac_lookup_hash(name, base, NULL);
+}
+
+/* SMP-safe */
+struct dentry * rsbac_lookup_one_len(const char * name, struct dentry * base, int len)
+{
+	unsigned long hash;
+	struct qstr this;
+	unsigned int c;
+
+	this.name = name;
+	this.len = len;
+	if (!len)
+		goto access;
+
+	hash = init_name_hash();
+	while (len--) {
+		c = *(const unsigned char *)name++;
+		if (c == '/' || c == '\0')
+			goto access;
+		hash = partial_name_hash(c, hash);
+	}
+	this.hash = end_name_hash(hash);
+
+	return rsbac_lookup_hash(&this, base);
+access:
+	return ERR_PTR(-EACCES);
+}
+
+EXPORT_SYMBOL(rsbac_lookup_one_len);
+#endif
+
 /*
  *	namei()
  *
@@ -1193,6 +1399,11 @@
 
 	BUG_ON(victim->d_parent->d_inode != dir);
 
+        #ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+        if(rsbac_dac_part_disabled(victim))
+          error = 0;
+        else
+        #endif
 	error = permission(dir,MAY_WRITE | MAY_EXEC, NULL);
 	if (error)
 		return error;
@@ -1230,6 +1441,12 @@
 		return -EEXIST;
 	if (IS_DEADDIR(dir))
 		return -ENOENT;
+
+        #ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+        if(rsbac_dac_part_disabled(child->d_parent))
+          return 0;
+        else
+        #endif
 	return permission(dir,MAY_WRITE | MAY_EXEC, nd);
 }
 
@@ -1304,6 +1521,15 @@
 {
 	int error = may_create(dir, dentry, nd);
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        enum  rsbac_target_t          rsbac_new_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (error)
 		return error;
 
@@ -1314,10 +1540,59 @@
 	error = security_inode_create(dir, dentry, mode);
 	if (error)
 		return error;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "vfs_create() [open_namei() [filp_open() [do_open() [sys_open()]]]]: calling ADF\n");
+#endif
+        rsbac_target = T_DIR;
+        rsbac_target_id.dir.device = dentry->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = dir->i_ino;
+        rsbac_target_id.dir.dentry_p = dentry->d_parent;
+        rsbac_attribute_value.create_data.target = T_FILE;
+        rsbac_attribute_value.create_data.dentry_p = dentry;
+        rsbac_attribute_value.create_data.mode = mode;
+        rsbac_attribute_value.create_data.device = 0;
+        if (!rsbac_adf_request(R_CREATE,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_create_data,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	DQUOT_INIT(dir);
 	error = dir->i_op->create(dir, dentry, mode, nd);
-	if (!error)
+	if (!error) {
 		fsnotify_create(dir, dentry->d_name.name);
+
+                /* RSBAC: notify ADF of new file */
+                #ifdef CONFIG_RSBAC
+                {
+                  rsbac_new_target = T_FILE;
+                  rsbac_new_target_id.file.device = dentry->d_sb->s_dev;
+                  rsbac_new_target_id.file.inode  = dentry->d_inode->i_ino;
+                  rsbac_new_target_id.file.dentry_p = dentry;
+                  if (rsbac_adf_set_attr(R_CREATE,
+                                         current->pid,
+                                         rsbac_target,
+                                         rsbac_target_id,
+                                         rsbac_new_target,
+                                         rsbac_new_target_id,
+                                         A_create_data,
+                                         rsbac_attribute_value))
+                    {
+                      rsbac_printk(KERN_WARNING
+                             "vfs_create() [open_namei() [filp_open() [do_open() [sys_open()]]]]: rsbac_adf_set_attr() returned error");
+                    }
+                }
+                #endif
+	}
 	return error;
 }
 
@@ -1327,6 +1602,15 @@
 	struct inode *inode = dentry->d_inode;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_adf_request_t     rsbac_adf_req;
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!inode)
 		return -ENOENT;
 
@@ -1336,6 +1620,11 @@
 	if (S_ISDIR(inode->i_mode) && (flag & FMODE_WRITE))
 		return -EISDIR;
 
+        #ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+        if(rsbac_dac_part_disabled(dentry))
+          error = 0;
+        else
+        #endif
 	error = permission(inode, acc_mode, nd);
 	if (error)
 		return error;
@@ -1369,6 +1658,85 @@
 		if (current->fsuid != inode->i_uid && !capable(CAP_FOWNER))
 			return -EPERM;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "may_open() [open_namei() [filp_open() [do_open() [sys_open()]]]]: calling ADF\n");
+#endif
+        /* get target type and id clear */
+        if(   S_ISBLK(inode->i_mode)
+           || S_ISCHR(inode->i_mode))
+          {
+            rsbac_target = T_DEV;
+            if(S_ISBLK(inode->i_mode))
+              {
+                rsbac_target_id.dev.type = D_block;
+              }
+            else
+              {
+                rsbac_target_id.dev.type = D_char;
+              }
+            rsbac_target_id.dev.major = RSBAC_MAJOR(inode->i_rdev);
+            rsbac_target_id.dev.minor = RSBAC_MINOR(inode->i_rdev);
+          }
+        else
+        if(S_ISSOCK(inode->i_mode))
+          {
+          }
+        else /* must be file, dir or fifo */
+          {
+            if(S_ISDIR(inode->i_mode))
+              rsbac_target = T_DIR;
+            else if(S_ISFIFO(inode->i_mode))
+              {
+                if(inode->i_sb->s_magic != PIPEFS_MAGIC)
+                  rsbac_target = T_FIFO;
+                else
+                  rsbac_target = T_NONE;
+              }
+            else
+              rsbac_target = T_FILE;
+
+            rsbac_target_id.file.device = inode->i_sb->s_dev;
+            rsbac_target_id.file.inode  = inode->i_ino;
+            rsbac_target_id.file.dentry_p = dentry;
+          }
+        /* determine request type */
+        rsbac_adf_req = R_NONE;
+        if (flag & O_APPEND)
+          rsbac_adf_req = R_APPEND_OPEN;
+        else
+          if ((flag & FMODE_WRITE) && (flag & FMODE_READ))
+            rsbac_adf_req = R_READ_WRITE_OPEN;
+          else
+            if (flag & FMODE_WRITE)
+              rsbac_adf_req = R_WRITE_OPEN;
+            else
+              if (flag & FMODE_READ)
+                {
+                  if(rsbac_target == T_DIR)
+                    rsbac_adf_req = R_READ;
+                  else
+                    rsbac_adf_req = R_READ_OPEN;
+                }
+        if (   (rsbac_adf_req != R_NONE)
+            && (rsbac_target != T_NONE)
+           )
+          {
+            rsbac_attribute_value.open_flag = flag;
+            if (!rsbac_adf_request(rsbac_adf_req,
+                                   current->pid,
+                                   rsbac_target,
+                                   rsbac_target_id,
+                                   A_open_flag,
+                                   rsbac_attribute_value))
+              {
+                return -EPERM;
+              }
+          }
+        #endif /* CONFIG_RSBAC */
+
 	/*
 	 * Ensure there are no outstanding leases on the file.
 	 */
@@ -1397,6 +1765,28 @@
 		if (flag & FMODE_WRITE)
 			DQUOT_INIT(inode);
 
+        /* RSBAC: notify adf of opened file */
+        #ifdef CONFIG_RSBAC
+        if (   (rsbac_adf_req != R_NONE)
+            && (rsbac_target != T_NONE)
+           )
+          {
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(rsbac_adf_req,
+                                   current->pid,
+                                   rsbac_target,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_open_flag,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "open_namei() [filp_open() [do_open() [sys_open()]]]: rsbac_adf_set_attr() returned error\n");
+              }
+          }
+        #endif
+
 	return 0;
 }
 
@@ -1421,6 +1811,12 @@
 	struct dentry *dir;
 	int count = 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	acc_mode = ACC_MODE(flag);
 
 	/* Allow the LSM permission hook to distinguish append 
@@ -1541,6 +1937,31 @@
 	error = security_inode_follow_link(path.dentry, nd);
 	if (error)
 		goto exit_dput;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+/*
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+                    rsbac_printk(KERN_DEBUG "open_namei(): calling ADF for link SEARCH\n");
+#endif
+*/
+        rsbac_target_id.dir.device = path.dentry->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = path.dentry->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = path.dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_SEARCH,
+                               current->pid,
+                               T_SYMLINK,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            goto exit_dput;
+          }
+        #endif
+
 	error = __do_follow_link(&path, nd);
 	if (error)
 		return error;
@@ -1618,6 +2039,14 @@
 {
 	int error = may_create(dir, dentry, NULL);
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        enum  rsbac_target_t          rsbac_new_target;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (error)
 		return error;
 
@@ -1631,10 +2060,64 @@
 	if (error)
 		return error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "vfs_mknod() [sys_mknod()]: calling ADF\n");
+#endif
+        rsbac_target_id.dir.device = dentry->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = dir->i_ino;
+        rsbac_target_id.dir.dentry_p = dentry->d_parent;
+        rsbac_attribute_value.create_data.target = T_FILE;
+        rsbac_attribute_value.create_data.dentry_p = dentry;
+        rsbac_attribute_value.create_data.mode = mode;
+        rsbac_attribute_value.create_data.device = dev;
+        if (!rsbac_adf_request(R_CREATE,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_create_data,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	DQUOT_INIT(dir);
 	error = dir->i_op->mknod(dir, dentry, mode, dev);
-	if (!error)
+	if (!error) {
 		fsnotify_create(dir, dentry->d_name.name);
+
+                /* RSBAC: notify ADF of new dir entry */
+                #ifdef CONFIG_RSBAC
+                if(S_ISFIFO(dentry->d_inode->i_mode))
+                  rsbac_new_target = T_FIFO;
+                else
+                if(S_ISLNK(dentry->d_inode->i_mode))
+                  rsbac_new_target = T_SYMLINK;
+                else
+                  rsbac_new_target = T_FILE;
+                rsbac_new_target_id.dir.device = dentry->d_sb->s_dev;
+                rsbac_new_target_id.dir.inode  = dentry->d_inode->i_ino;
+                rsbac_new_target_id.dir.dentry_p = dentry;
+                if (rsbac_adf_set_attr(R_CREATE,
+                                       current->pid,
+                                       T_DIR,
+                                       rsbac_target_id,
+                                       rsbac_new_target,
+                                       rsbac_new_target_id,
+                                       A_create_data,
+                                       rsbac_attribute_value))
+                  {
+#ifdef CONFIG_RSBAC_DEBUG
+                    if (rsbac_debug_aef)
+                      rsbac_printk(KERN_DEBUG
+                             "vfs_mknod() [do_mknod(), sys_mknod()]: rsbac_adf_set_attr() returned error");
+#endif
+                  }
+                #endif
+	}
 	return error;
 }
 
@@ -1691,6 +2174,13 @@
 {
 	int error = may_create(dir, dentry, NULL);
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (error)
 		return error;
 
@@ -1702,10 +2192,55 @@
 	if (error)
 		return error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "vfs_mkdir() [sys_mkdir()]: calling ADF\n");
+#endif
+        rsbac_target_id.dir.device = dentry->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = dir->i_ino;
+        rsbac_target_id.dir.dentry_p = dentry->d_parent;
+        rsbac_attribute_value.create_data.target = T_DIR;
+        rsbac_attribute_value.create_data.dentry_p = dentry;
+        rsbac_attribute_value.create_data.mode = mode;
+        rsbac_attribute_value.create_data.device = 0;
+        rsbac_attribute_value.mode = mode;
+        if (!rsbac_adf_request(R_CREATE,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_create_data,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	DQUOT_INIT(dir);
 	error = dir->i_op->mkdir(dir, dentry, mode);
-	if (!error)
+	if (!error) {
 		fsnotify_mkdir(dir, dentry->d_name.name);
+
+                /* RSBAC: notify ADF of new dir */
+                #ifdef CONFIG_RSBAC
+                rsbac_new_target_id.dir.device = dentry->d_sb->s_dev;
+                rsbac_new_target_id.dir.inode  = dentry->d_inode->i_ino;
+                rsbac_new_target_id.dir.dentry_p = dentry;
+                if (rsbac_adf_set_attr(R_CREATE,
+                                       current->pid,
+                                       T_DIR,
+                                       rsbac_target_id,
+                                       T_DIR,
+                                       rsbac_new_target_id,
+                                       A_create_data,
+                                       rsbac_attribute_value))
+                  {
+                    rsbac_printk(KERN_WARNING
+                           "vfs_mkdir() [sys_mkdir()]: rsbac_adf_set_attr() returned error");
+                  }
+                #endif
+	}
 	return error;
 }
 
@@ -1772,12 +2307,40 @@
 {
 	int error = may_delete(dir, dentry, 1);
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (error)
 		return error;
 
 	if (!dir->i_op || !dir->i_op->rmdir)
 		return -EPERM;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "vfs_rmdir() [do_rmdir() [sys_rmdir()]]: calling ADF\n");
+#endif
+        rsbac_target_id.dir.device = dentry->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = dentry->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_DELETE,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	DQUOT_INIT(dir);
 
 	down(&dentry->d_inode->i_sem);
@@ -1795,6 +2358,25 @@
 	up(&dentry->d_inode->i_sem);
 	if (!error) {
 		d_delete(dentry);
+
+                /* RSBAC: notify ADF of deleted dir */
+                #ifdef CONFIG_RSBAC
+                {
+                  rsbac_new_target_id.dummy = 0;
+                  if (rsbac_adf_set_attr(R_DELETE,
+                                         current->pid,
+                                         T_DIR,
+                                         rsbac_target_id,
+                                         T_NONE,
+                                         rsbac_new_target_id,
+                                         A_none,
+                                         rsbac_attribute_value))
+                    {
+                      rsbac_printk(KERN_WARNING
+                             "vfs_rmdir() [do_rmdir() [sys_rmdir()]]: rsbac_adf_set_attr() returned error");
+                    }
+                }
+                #endif
 	}
 	dput(dentry);
 
@@ -1846,6 +2428,14 @@
 {
 	int error = may_delete(dir, dentry, 0);
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (error)
 		return error;
 
@@ -1859,8 +2449,61 @@
 		error = -EBUSY;
 	else {
 		error = security_inode_unlink(dir, dentry);
-		if (!error)
+		if (!error) {
+                        /* RSBAC */
+                        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                        if (rsbac_debug_aef)
+                          rsbac_printk(KERN_DEBUG "vfs_unlink() [do_unlink() [sys_unlink()]]: calling ADF\n");
+#endif
+                        if(S_ISDIR(dentry->d_inode->i_mode))
+                          rsbac_target = T_DIR;
+                        else
+                        if(S_ISFIFO(dentry->d_inode->i_mode))
+                          rsbac_target = T_FIFO;
+                        else
+                        if(S_ISLNK(dentry->d_inode->i_mode))
+                          rsbac_target = T_SYMLINK;
+                        else
+                          rsbac_target = T_FILE;
+                        rsbac_target_id.file.device = dentry->d_sb->s_dev;
+                        rsbac_target_id.file.inode  = dentry->d_inode->i_ino;
+                        rsbac_target_id.file.dentry_p = dentry;
+                        rsbac_attribute_value.nlink = dentry->d_inode->i_nlink;
+                        if (!rsbac_adf_request(R_DELETE,
+                                               current->pid,
+                                               rsbac_target,
+                                               rsbac_target_id,
+                                               A_nlink,
+                                               rsbac_attribute_value))
+                          {
+                            up(&dentry->d_inode->i_sem);
+                            return(-EPERM);
+                          }
+                        #endif
+ 
 			error = dir->i_op->unlink(dir, dentry);
+
+                        /* RSBAC: notify ADF of deleted file */
+                        #ifdef CONFIG_RSBAC
+                        if (!error)
+                          {
+                            rsbac_new_target_id.dummy = 0;
+                            if (rsbac_adf_set_attr(R_DELETE,
+                                                   current->pid,
+                                                   rsbac_target,
+                                                   rsbac_target_id,
+                                                   T_NONE,
+                                                   rsbac_new_target_id,
+                                                   A_nlink,
+                                                   rsbac_attribute_value))
+                              {
+                                rsbac_printk(KERN_WARNING
+                                       "vfs_unlink() [do_unlink() [sys_unlink()]]: rsbac_adf_set_attr() returned error\n");
+                              }
+                          }
+                        #endif
+		}
 	}
 	up(&dentry->d_inode->i_sem);
 
@@ -1929,6 +2572,13 @@
 {
 	int error = may_create(dir, dentry, NULL);
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (error)
 		return error;
 
@@ -1939,10 +2589,54 @@
 	if (error)
 		return error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "vfs_symlink() [do_symlink(), sys_symlink()]: calling ADF\n");
+#endif
+        rsbac_target_id.dir.device = dentry->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = dir->i_ino;
+        rsbac_target_id.dir.dentry_p = dentry->d_parent;
+        rsbac_attribute_value.create_data.target = T_SYMLINK;
+        rsbac_attribute_value.create_data.dentry_p = dentry;
+        rsbac_attribute_value.create_data.mode = 0;
+        rsbac_attribute_value.create_data.device = 0;
+        if (!rsbac_adf_request(R_CREATE,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_create_data,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	DQUOT_INIT(dir);
 	error = dir->i_op->symlink(dir, dentry, oldname);
-	if (!error)
+	if (!error) {
 		fsnotify_create(dir, dentry->d_name.name);
+
+                /* RSBAC: notify ADF of new file */
+                #ifdef CONFIG_RSBAC
+                rsbac_new_target_id.file.device = dentry->d_sb->s_dev;
+                rsbac_new_target_id.file.inode  = dentry->d_inode->i_ino;
+                rsbac_new_target_id.file.dentry_p = dentry;
+                if (rsbac_adf_set_attr(R_CREATE,
+                                       current->pid,
+                                       T_DIR,
+                                       rsbac_target_id,
+                                       T_SYMLINK,
+                                       rsbac_new_target_id,
+                                       A_create_data,
+                                       rsbac_attribute_value))
+                  {
+                    rsbac_printk(KERN_WARNING
+                           "vfs_symlink() [do_symlink(), sys_symlink()]: rsbac_adf_set_attr() returned error");
+                  }
+                #endif
+	}
 	return error;
 }
 
@@ -1984,6 +2678,13 @@
 	struct inode *inode = old_dentry->d_inode;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!inode)
 		return -ENOENT;
 
@@ -2008,6 +2709,34 @@
 	if (error)
 		return error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "vfs_link() [do_link() [sys_link()]]: calling ADF\n");
+#endif
+        rsbac_target = T_FILE;
+        if (S_ISDIR (old_dentry->d_inode->i_mode))
+          rsbac_target = T_DIR;
+        else if (S_ISFIFO (old_dentry->d_inode->i_mode))
+          rsbac_target = T_FIFO;
+        else if (S_ISLNK (old_dentry->d_inode->i_mode))
+          rsbac_target = T_SYMLINK;
+        rsbac_target_id.dir.device = old_dentry->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = old_dentry->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = old_dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_LINK_HARD,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	down(&old_dentry->d_inode->i_sem);
 	DQUOT_INIT(dir);
 	error = dir->i_op->link(old_dentry, dir, new_dentry);
@@ -2101,11 +2830,25 @@
 	int error = 0;
 	struct inode *target;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        rsbac_boolean_t target_exists = FALSE;
+        #endif
+
 	/*
 	 * If we are going to change the parent - check write permissions,
 	 * we'll need to flip '..'.
 	 */
 	if (new_dir != old_dir) {
+                #ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+                if(rsbac_dac_part_disabled(old_dentry))
+                  error = 0;
+                else
+                #endif
 		error = permission(old_dentry->d_inode, MAY_WRITE, NULL);
 		if (error)
 			return error;
@@ -2115,6 +2858,82 @@
 	if (error)
 		return error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG
+                 "do_rename() [sys_rename()]: calling ADF\n");
+#endif
+        rsbac_target = T_FILE;
+        if (S_ISDIR(old_dentry->d_inode->i_mode))
+          rsbac_target = T_DIR;
+        else if (S_ISFIFO (old_dentry->d_inode->i_mode))
+          rsbac_target = T_FIFO;
+        else if (S_ISLNK (old_dentry->d_inode->i_mode))
+          rsbac_target = T_SYMLINK;
+        rsbac_target_id.file.device = old_dentry->d_sb->s_dev;
+        rsbac_target_id.file.inode  = old_dentry->d_inode->i_ino;
+        rsbac_target_id.file.dentry_p = old_dentry;
+        rsbac_attribute_value.new_dir_dentry_p = new_dentry->d_parent;
+        if (!rsbac_adf_request(R_RENAME,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_new_dir_dentry_p,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG
+                 "do_rename() [sys_rename()]: calling ADF for WRITE on new_dir\n");
+#endif
+        rsbac_target_id.dir.device = new_dentry->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = new_dir->i_ino;
+        rsbac_target_id.dir.dentry_p = new_dentry->d_parent;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_WRITE,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        if(new_dentry->d_inode)
+          {
+            target_exists = TRUE;
+#ifdef CONFIG_RSBAC_DEBUG
+           if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG
+                     "do_rename() [sys_rename()]: calling ADF for DELETE on existing target\n");
+#endif
+            rsbac_target = T_FILE;
+            if (S_ISDIR(new_dentry->d_inode->i_mode))
+              rsbac_target = T_DIR;
+            else if (S_ISFIFO (new_dentry->d_inode->i_mode))
+              rsbac_target = T_FIFO;
+            else if (S_ISLNK (new_dentry->d_inode->i_mode))
+              rsbac_target = T_SYMLINK;
+            rsbac_target_id.file.device = new_dentry->d_sb->s_dev;
+            rsbac_target_id.file.inode  = new_dentry->d_inode->i_ino;
+            rsbac_target_id.file.dentry_p = new_dentry;
+            rsbac_attribute_value.nlink = new_dentry->d_inode->i_nlink;
+            if (!rsbac_adf_request(R_DELETE,
+                                   current->pid,
+                                   rsbac_target,
+                                   rsbac_target_id,
+                                   A_nlink,
+                                   rsbac_attribute_value))
+              {
+                return -EPERM;
+              }
+          }
+        #endif /* CONFIG_RSBAC */
+
 	target = new_dentry->d_inode;
 	if (target) {
 		down(&target->i_sem);
@@ -2132,8 +2951,29 @@
 			d_rehash(new_dentry);
 		dput(new_dentry);
 	}
-	if (!error)
+	if (!error) {
 		d_move(old_dentry,new_dentry);
+
+                /* RSBAC: notify ADF of deleted file */
+                #ifdef CONFIG_RSBAC
+                if (target_exists)
+                  {
+                    rsbac_new_target_id.dummy = 0;
+                    if (rsbac_adf_set_attr(R_DELETE,
+                                           current->pid,
+                                           rsbac_target,
+                                           rsbac_target_id,
+                                           T_NONE,
+                                           rsbac_new_target_id,
+                                           A_nlink,
+                                           rsbac_attribute_value))
+                      {
+                        rsbac_printk(KERN_WARNING
+                               "do_rename() [sys_rename()]: rsbac_adf_set_attr() returned error");
+                      }
+                  }
+                #endif
+	}
 	return error;
 }
 
@@ -2143,10 +2983,95 @@
 	struct inode *target;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        rsbac_boolean_t target_exists = FALSE;
+        #endif
+
 	error = security_inode_rename(old_dir, old_dentry, new_dir, new_dentry);
 	if (error)
 		return error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG
+                 "do_rename() [sys_rename()]: calling ADF\n");
+#endif
+        rsbac_target = T_FILE;
+        if (S_ISDIR(old_dentry->d_inode->i_mode))
+          rsbac_target = T_DIR;
+        else if (S_ISFIFO (old_dentry->d_inode->i_mode))
+          rsbac_target = T_FIFO;
+        else if (S_ISLNK (old_dentry->d_inode->i_mode))
+          rsbac_target = T_SYMLINK;
+        rsbac_target_id.file.device = old_dentry->d_sb->s_dev;
+        rsbac_target_id.file.inode  = old_dentry->d_inode->i_ino;
+        rsbac_target_id.file.dentry_p = old_dentry;
+        rsbac_attribute_value.new_dir_dentry_p = new_dentry->d_parent;
+        if (!rsbac_adf_request(R_RENAME,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_new_dir_dentry_p,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG
+                 "do_rename() [sys_rename()]: calling ADF for WRITE on new_dir\n");
+#endif
+        rsbac_target_id.dir.device = new_dentry->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = new_dir->i_ino;
+        rsbac_target_id.dir.dentry_p = new_dentry->d_parent;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_WRITE,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        if(new_dentry->d_inode)
+          {
+            target_exists = TRUE;
+#ifdef CONFIG_RSBAC_DEBUG
+           if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG
+                     "do_rename() [sys_rename()]: calling ADF for DELETE on existing target\n");
+#endif
+            rsbac_target = T_FILE;
+            if (S_ISDIR(new_dentry->d_inode->i_mode))
+              rsbac_target = T_DIR;
+            else if (S_ISFIFO (new_dentry->d_inode->i_mode))
+              rsbac_target = T_FIFO;
+            else if (S_ISLNK (new_dentry->d_inode->i_mode))
+              rsbac_target = T_SYMLINK;
+            rsbac_target_id.file.device = new_dentry->d_sb->s_dev;
+            rsbac_target_id.file.inode  = new_dentry->d_inode->i_ino;
+            rsbac_target_id.file.dentry_p = new_dentry;
+            rsbac_attribute_value.nlink = new_dentry->d_inode->i_nlink;
+            if (!rsbac_adf_request(R_DELETE,
+                                   current->pid,
+                                   rsbac_target,
+                                   rsbac_target_id,
+                                   A_nlink,
+                                   rsbac_attribute_value))
+              {
+                return -EPERM;
+              }
+          }
+        #endif /* CONFIG_RSBAC */
+
 	dget(new_dentry);
 	target = new_dentry->d_inode;
 	if (target)
@@ -2159,6 +3084,26 @@
 		/* The following d_move() should become unconditional */
 		if (!(old_dir->i_sb->s_type->fs_flags & FS_ODD_RENAME))
 			d_move(old_dentry, new_dentry);
+
+                /* RSBAC: notify ADF of deleted file */
+                #ifdef CONFIG_RSBAC
+                if (target_exists)
+                  {
+                    rsbac_new_target_id.dummy = 0;
+                    if (rsbac_adf_set_attr(R_DELETE,
+                                           current->pid,
+                                           rsbac_target,
+                                           rsbac_target_id,
+                                           T_NONE,
+                                           rsbac_new_target_id,
+                                           A_nlink,
+                                           rsbac_attribute_value))
+                      {
+                        rsbac_printk(KERN_WARNING
+                               "do_rename() [sys_rename()]: rsbac_adf_set_attr() returned error");
+                      }
+                  }
+                #endif
 	}
 	if (target)
 		up(&target->i_sem);
@@ -2307,6 +3252,9 @@
 int vfs_readlink(struct dentry *dentry, char __user *buffer, int buflen, const char *link)
 {
 	int len;
+        #ifdef CONFIG_RSBAC_SYM_REDIR
+        char * rsbac_name;
+        #endif
 
 	len = PTR_ERR(link);
 	if (IS_ERR(link))
@@ -2315,8 +3263,21 @@
 	len = strlen(link);
 	if (len > (unsigned) buflen)
 		len = buflen;
+
+        #ifdef CONFIG_RSBAC_SYM_REDIR
+        rsbac_name = rsbac_symlink_redirect(dentry, link, buflen);
+        if(rsbac_name)
+          {
+            len = strlen(rsbac_name);
+	    if (copy_to_user(buffer, rsbac_name, len))
+		len = -EFAULT;
+            kfree(rsbac_name);
+          }
+        else
+        #endif
 	if (copy_to_user(buffer, link, len))
 		len = -EFAULT;
+
 out:
 	return len;
 }
diff -urN trunk/fs/namespace.c 2.6.14-rsbac-1.2.5/fs/namespace.c
--- trunk/fs/namespace.c	2005-11-11 10:03:48.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/namespace.c	2005-11-10 16:16:50.000000000 +0000
@@ -25,6 +25,12 @@
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
 
+/* RSBAC: including rsbac_mount/umount declaration and adf-calls*/
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#include <rsbac/adf.h>
+#endif
+
 extern int __init init_rootfs(void);
 
 #ifdef CONFIG_SYSFS
@@ -370,6 +376,12 @@
 	struct super_block * sb = mnt->mnt_sb;
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	retval = security_sb_umount(mnt, flags);
 	if (retval)
 		return retval;
@@ -421,6 +433,45 @@
 		 * Special case for "unmounting" root ...
 		 * we just try to remount it readonly.
 		 */
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  rsbac_printk(KERN_DEBUG "do_umount(): calling ADF for DIR\n");
+#endif
+                rsbac_target_id.dir.device = sb->s_root->d_sb->s_dev;
+                rsbac_target_id.dir.inode  = sb->s_root->d_inode->i_ino;
+                rsbac_target_id.dir.dentry_p = sb->s_root;
+                rsbac_attribute_value.dummy = 0;
+                if (!rsbac_adf_request(R_UMOUNT,
+                                       current->pid,
+                                       T_DIR,
+                                       rsbac_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    return -EPERM;
+                  }
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  rsbac_printk(KERN_DEBUG "do_umount(): calling ADF for dev\n");
+#endif
+                rsbac_target_id.dev.type = D_block;
+                rsbac_target_id.dev.major = RSBAC_MAJOR(sb->s_dev);
+                rsbac_target_id.dev.minor = RSBAC_MINOR(sb->s_dev);
+                rsbac_attribute_value.dummy = 0;
+                if (!rsbac_adf_request(R_UMOUNT,
+                                       current->pid,
+                                       T_DEV,
+                                       rsbac_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    return -EPERM;
+                  }
+                #endif
+
 		down_write(&sb->s_umount);
 		if (!(sb->s_flags & MS_RDONLY)) {
 			lock_kernel();
@@ -433,6 +484,59 @@
 	}
 
 	down_write(&current->namespace->sem);
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_umount(): calling ADF for DIR\n");
+#endif
+        rsbac_target_id.dir.device = sb->s_root->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = sb->s_root->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = sb->s_root;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_UMOUNT,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            up_write(&current->namespace->sem);
+            return -EPERM;
+          }
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_umount(): calling ADF for dev\n");
+#endif
+        rsbac_target_id.dev.type = D_block;
+        rsbac_target_id.dev.major = RSBAC_MAJOR(sb->s_dev);
+        rsbac_target_id.dev.minor = RSBAC_MINOR(sb->s_dev);
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_UMOUNT,
+                               current->pid,
+                               T_DEV,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            up_write(&current->namespace->sem);
+            return -EPERM;
+          }
+        #endif
+
+        /* RSBAC: removing data structures for this fs from memory */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_ds)
+          {
+            rsbac_printk(KERN_DEBUG "do_umount() [sys_umount()]: calling rsbac_umount for Device %02u:%02u\n",
+                   MAJOR(mnt->mnt_sb->s_dev), MINOR(mnt->mnt_sb->s_dev));
+          }
+#endif
+        rsbac_umount(mnt->mnt_sb, mnt->mnt_mountpoint);
+        #endif
+
 	spin_lock(&vfsmount_lock);
 
 	if (atomic_read(&sb->s_active) == 1) {
@@ -454,6 +558,18 @@
 	spin_unlock(&vfsmount_lock);
 	if (retval)
 		security_sb_umount_busy(mnt);
+
+        #ifdef CONFIG_RSBAC
+        /* RSBAC: umount failed, so reread data structures for this fs from disk */
+        if(retval)
+          {
+            rsbac_printk(KERN_WARNING
+                   "do_umount() [sys_umount()]: umount failed -> calling rsbac_mount for Device %02u:%02u\n",
+                   MAJOR(mnt->mnt_sb->s_dev),MINOR(mnt->mnt_sb->s_dev));
+            rsbac_mount(mnt->mnt_sb, mnt->mnt_mountpoint);
+          }
+        #endif
+
 	up_write(&current->namespace->sem);
 	return retval;
 }
@@ -611,6 +727,22 @@
 	up(&nd->dentry->d_inode->i_sem);
 	if (!err)
 		security_sb_post_addmount(mnt, nd);
+
+        /* RSBAC: initialising data structures for this fs (not root fs) */
+        #ifdef CONFIG_RSBAC
+        if(!err)
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_ds)
+              {
+                rsbac_printk(KERN_DEBUG "graft_tree() [do_loopback(), do_add_mount() [sys_mount()]]: calling rsbac_mount for Device %02u:%02u\n",
+                       MAJOR(mnt->mnt_sb->s_dev), MINOR(mnt->mnt_sb->s_dev));
+              }
+#endif
+            rsbac_mount(mnt->mnt_sb, mnt->mnt_mountpoint);
+          }
+        #endif
+
 	return err;
 }
 
@@ -622,6 +754,14 @@
 	struct nameidata old_nd;
 	struct vfsmount *mnt = NULL;
 	int err = mount_is_safe(nd);
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (err)
 		return err;
 	if (!old_name || !*old_name)
@@ -630,6 +770,62 @@
 	if (err)
 		return err;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_loopback() [do_mount() [sys_mount()]]: calling ADF for DIR\n");
+#endif
+	rsbac_target_id.dir.device = nd->dentry->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = nd->dentry->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = nd->dentry;
+        rsbac_attribute_value.mode = recurse;
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_mode,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_loopback() [do_mount() [sys_mount()]]: calling ADF for DEV\n");
+#endif
+        if(S_ISBLK(old_nd.dentry->d_inode->i_mode))
+          {
+            rsbac_target = T_DEV;
+            rsbac_target_id.dev.type = D_block;
+            rsbac_target_id.dev.major = RSBAC_MAJOR(old_nd.dentry->d_sb->s_dev);
+            rsbac_target_id.dev.minor = RSBAC_MINOR(old_nd.dentry->d_sb->s_dev);
+          }
+        else
+        if(S_ISDIR(old_nd.dentry->d_inode->i_mode))
+          {
+            rsbac_target = T_DIR;
+	    rsbac_target_id.dir.device = old_nd.dentry->d_sb->s_dev;
+            rsbac_target_id.dir.inode  = old_nd.dentry->d_inode->i_ino;
+            rsbac_target_id.dir.dentry_p = old_nd.dentry;
+          }
+        else
+          {
+            rsbac_target = T_FILE;
+            rsbac_target_id.file.device = old_nd.dentry->d_sb->s_dev;
+            rsbac_target_id.file.inode  = old_nd.dentry->d_inode->i_ino;
+            rsbac_target_id.file.dentry_p = old_nd.dentry;
+          }
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_mode,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	down_write(&current->namespace->sem);
 	err = -EINVAL;
 	if (check_mnt(nd->mnt) && (!recurse || check_mnt(old_nd.mnt))) {
@@ -672,6 +868,12 @@
 	int err;
 	struct super_block * sb = nd->mnt->mnt_sb;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
 
@@ -681,6 +883,43 @@
 	if (nd->dentry != nd->mnt->mnt_root)
 		return -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_remount() [do_mount() [sys_mount()]]: calling ADF for DIR\n");
+#endif
+        rsbac_target_id.dir.device = nd->dentry->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = nd->dentry->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = nd->dentry;
+        rsbac_attribute_value.mode = flags;
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_mode,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_remount() [do_mount() [sys_mount()]]: calling ADF for DEV\n");
+#endif
+        rsbac_target_id.dev.type = D_block;
+        rsbac_target_id.dev.major = RSBAC_MAJOR(sb->s_dev);
+        rsbac_target_id.dev.minor = RSBAC_MINOR(sb->s_dev);
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               T_DEV,
+                               rsbac_target_id,
+                               A_mode,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	down_write(&sb->s_umount);
 	err = do_remount_sb(sb, flags, data, 0);
 	if (!err)
@@ -696,6 +935,13 @@
 	struct nameidata old_nd, parent_nd;
 	struct vfsmount *p;
 	int err = 0;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
 	if (!old_name || !*old_name)
@@ -704,6 +950,77 @@
 	if (err)
 		return err;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_move_mount() [do_mount() [sys_mount()]]: calling ADF for UMOUNT on old DIR\n");
+#endif
+        rsbac_target_id.dir.device = old_nd.dentry->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = old_nd.dentry->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = old_nd.dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_UMOUNT,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            path_release(&old_nd);
+            return -EPERM;
+          }
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_move_mount() [do_mount() [sys_mount()]]: calling ADF for MOUNT on new DIR\n");
+#endif
+        rsbac_target_id.dir.device = nd->dentry->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = nd->dentry->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = nd->dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            path_release(&old_nd);
+            return -EPERM;
+          }
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_move_mount() [do_mount() [sys_mount()]]: calling ADF for UMOUNT on DEV\n");
+#endif
+        rsbac_target_id.dev.type = D_block;
+        rsbac_target_id.dev.major = RSBAC_MAJOR(old_nd.dentry->d_sb->s_dev);
+        rsbac_target_id.dev.minor = RSBAC_MINOR(old_nd.dentry->d_sb->s_dev);
+        if (!rsbac_adf_request(R_UMOUNT,
+                               current->pid,
+                               T_DEV,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            path_release(&old_nd);
+            return -EPERM;
+          }
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_move_mount() [do_mount() [sys_mount()]]: calling ADF for MOUNT on DEV\n");
+#endif
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               T_DEV,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            path_release(&old_nd);
+            return -EPERM;
+          }
+        #endif
+
 	down_write(&current->namespace->sem);
 	while(d_mountpoint(nd->dentry) && follow_down(&nd->mnt, &nd->dentry))
 		;
@@ -787,6 +1104,12 @@
 {
 	int err;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	down_write(&current->namespace->sem);
 	/* Something was mounted here while we slept */
 	while(d_mountpoint(nd->dentry) && follow_down(&nd->mnt, &nd->dentry))
@@ -805,6 +1128,46 @@
 	if (S_ISLNK(newmnt->mnt_root->d_inode->i_mode))
 		goto unlock;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_add_mount() [do_mount() [sys_mount()]]: calling ADF for DIR\n");
+#endif
+        rsbac_target_id.dir.device = nd->dentry->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = nd->dentry->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = nd->dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            err = -EPERM;
+            goto unlock;
+          }
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+         rsbac_printk(KERN_DEBUG "do_add_mount() [do_mount() [sys_mount()]]: calling ADF for DEV\n");
+#endif
+        rsbac_target_id.dev.type = D_block;
+        rsbac_target_id.dev.major = RSBAC_MAJOR(newmnt->mnt_sb->s_dev);
+        rsbac_target_id.dev.minor = RSBAC_MINOR(newmnt->mnt_sb->s_dev);
+        rsbac_attribute_value.mode = mnt_flags;
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               T_DEV,
+                               rsbac_target_id,
+                               A_mode,
+                               rsbac_attribute_value))
+          {
+            err = -EPERM;
+            goto unlock;
+          }
+        #endif
+
 	newmnt->mnt_flags = mnt_flags;
 	newmnt->mnt_namespace = current->namespace;
 	err = graft_tree(newmnt, nd);
@@ -1288,6 +1651,12 @@
 	struct nameidata new_nd, old_nd, parent_nd, root_parent, user_nd;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
 
@@ -1310,6 +1679,51 @@
 		goto out1;
 	}
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sys_pivot_root(): calling ADF for MOUNT on put_old\n");
+#endif
+        rsbac_target_id.dir.device = old_nd.dentry->d_sb->s_dev;
+        rsbac_target_id.dir.inode  = old_nd.dentry->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = old_nd.dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            path_release(&old_nd);
+            error = -EPERM;
+            goto out1;
+          }
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sys_pivot_root(): calling ADF for MOUNT on root DIR\n");
+#endif
+        rsbac_target_id.dir.device = current->fs->rootmnt->mnt_sb->s_dev;
+        rsbac_target_id.dir.inode  = current->fs->root->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = current->fs->root;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MOUNT,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            path_release(&old_nd);
+            error = -EPERM;
+            goto out1;
+          }
+
+        /* Make the new root's cached rsbac.dat dentry be put to free the old root's dcache */
+        rsbac_free_dat_dentries();
+        #endif
+
 	read_lock(&current->fs->lock);
 	user_nd.mnt = mntget(current->fs->rootmnt);
 	user_nd.dentry = dget(current->fs->root);
diff -urN trunk/fs/open.c 2.6.14-rsbac-1.2.5/fs/open.c
--- trunk/fs/open.c	2005-11-11 10:03:50.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/open.c	2005-11-10 16:16:51.000000000 +0000
@@ -28,11 +28,46 @@
 
 #include <asm/unistd.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#ifdef CONFIG_RSBAC_NET_OBJ
+#include <net/sock.h>
+#endif
+#endif
+
 int vfs_statfs(struct super_block *sb, struct kstatfs *buf)
 {
 	int retval = -ENODEV;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (sb) {
+		/* RSBAC */
+		#ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+		if (rsbac_debug_aef)
+		  rsbac_printk(KERN_DEBUG "vfs_statfs(): calling ADF\n");
+#endif
+                rsbac_target_id.dev.type = D_block;
+                rsbac_target_id.dev.major = RSBAC_MAJOR(sb->s_dev);
+                rsbac_target_id.dev.minor = RSBAC_MINOR(sb->s_dev);
+                rsbac_attribute_value.dummy = 0;
+                if (!rsbac_adf_request(R_GET_STATUS_DATA,
+                                       current->pid,
+                                       T_DEV,
+                                       rsbac_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+		  {
+		    return -EPERM;
+		  }
+		#endif
+
 		retval = -ENOSYS;
 		if (sb->s_op->statfs) {
 			memset(buf, 0, sizeof(*buf));
@@ -199,16 +234,76 @@
 	int err;
 	struct iattr newattrs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #ifdef CONFIG_RSBAC_SECDEL
+        loff_t old_len = dentry->d_inode->i_size;
+        #endif
+        #endif
+
 	/* Not pretty: "inode->i_size" shouldn't really be signed. But it is. */
 	if (length < 0)
 		return -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_truncate() [open_namei(), do_sys_truncate() [sys_truncate()]]: calling ADF\n");
+#endif
+        rsbac_target_id.file.device = dentry->d_inode->i_sb->s_dev;
+        rsbac_target_id.file.inode  = dentry->d_inode->i_ino;
+        rsbac_target_id.file.dentry_p = dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_TRUNCATE,
+                               current->pid,
+                               T_FILE,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
+        /* RSBAC: Overwrite truncated part, if asked by flag */
+        #ifdef CONFIG_RSBAC_SECDEL
+        rsbac_sec_trunc(dentry, length, old_len);
+        #endif
+
 	newattrs.ia_size = length;
 	newattrs.ia_valid = ATTR_SIZE | ATTR_CTIME;
 
 	down(&dentry->d_inode->i_sem);
 	err = notify_change(dentry, &newattrs);
 	up(&dentry->d_inode->i_sem);
+
+        #ifdef CONFIG_RSBAC
+        if (!err)
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "do_truncate() [open_namei(), do_sys_truncate() [sys_truncate()]]: notifying ADF\n");
+#endif
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(R_TRUNCATE,
+                                   current->pid,
+                                   T_FILE,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "do_truncate() [open_namei(), do_sys_truncate() [sys_truncate()]]: rsbac_adf_set_attr() returned error\n");
+              }
+          }
+        #endif
+
 	return err;
 }
 
@@ -236,6 +331,11 @@
 	if (!S_ISREG(inode->i_mode))
 		goto dput_and_out;
 
+        #ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+        if(rsbac_dac_part_disabled(nd.dentry))
+          error = 0;
+        else
+        #endif
 	error = permission(inode,MAY_WRITE,&nd);
 	if (error)
 		goto dput_and_out;
@@ -359,6 +459,13 @@
 	struct inode * inode;
 	struct iattr newattrs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = user_path_walk(filename, &nd);
 	if (error)
 		goto out;
@@ -390,9 +497,41 @@
                         goto dput_and_out;
 
 		if (current->fsuid != inode->i_uid &&
+                    #ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+                    !rsbac_dac_part_disabled(nd.dentry) &&
+                    #endif
 		    (error = permission(inode,MAY_WRITE,&nd)) != 0)
 			goto dput_and_out;
 	}
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) printk(KERN_DEBUG "sys_utime(): calling ADF\n");
+#endif
+        rsbac_target = T_FILE;
+        if (S_ISDIR(inode->i_mode))
+          rsbac_target = T_DIR;
+	else if (S_ISFIFO(inode->i_mode))
+	  rsbac_target = T_FIFO;
+	else if (S_ISLNK(inode->i_mode))
+	  rsbac_target = T_SYMLINK;
+        rsbac_target_id.file.device = inode->i_sb->s_dev;
+        rsbac_target_id.file.inode  = inode->i_ino;
+        rsbac_target_id.file.dentry_p = nd.dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_ACCESS_DATA,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            goto dput_and_out;
+          }
+        #endif
+
 	down(&inode->i_sem);
 	error = notify_change(nd.dentry, &newattrs);
 	up(&inode->i_sem);
@@ -415,6 +554,13 @@
 	struct inode * inode;
 	struct iattr newattrs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = user_path_walk(filename, &nd);
 
 	if (error)
@@ -442,10 +588,42 @@
                 if (IS_IMMUTABLE(inode))
                         goto dput_and_out;
 
+                #ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+                if(!rsbac_dac_part_disabled(nd.dentry))
+                #endif
 		if (current->fsuid != inode->i_uid &&
 		    (error = permission(inode,MAY_WRITE,&nd)) != 0)
 			goto dput_and_out;
 	}
+	
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_utimes(): calling ADF\n");
+#endif
+        rsbac_target = T_FILE;
+        if (S_ISDIR(inode->i_mode))
+          rsbac_target = T_DIR;
+	else if (S_ISFIFO(inode->i_mode))
+	  rsbac_target = T_FIFO;
+	else if (S_ISLNK(inode->i_mode))
+	  rsbac_target = T_SYMLINK;
+        rsbac_target_id.file.device = inode->i_sb->s_dev;
+        rsbac_target_id.file.inode  = inode->i_ino;
+        rsbac_target_id.file.dentry_p = nd.dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_ACCESS_DATA,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            goto dput_and_out;
+          }
+        #endif
+
 	down(&inode->i_sem);
 	error = notify_change(nd.dentry, &newattrs);
 	up(&inode->i_sem);
@@ -477,6 +655,13 @@
 	kernel_cap_t old_cap;
 	int res;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
 
@@ -495,8 +680,12 @@
 	 * value below.  We should hold task_capabilities_lock,
 	 * but we cannot because user_path_walk can sleep.
 	 */
-	if (current->uid)
+	if (current->uid) {
+                #ifdef CONFIG_RSBAC_FAKE_ROOT_UID
+                if(!rsbac_uid_faked())
+                #endif
 		cap_clear(current->cap_effective);
+	}
 	else
 		current->cap_effective = current->cap_permitted;
 
@@ -507,6 +696,36 @@
 		if(!res && (mode & S_IWOTH) && IS_RDONLY(nd.dentry->d_inode)
 		   && !special_file(nd.dentry->d_inode->i_mode))
 			res = -EROFS;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                if(!res)
+                  {
+#ifdef CONFIG_RSBAC_DEBUG
+		    if (rsbac_debug_aef)
+                      rsbac_printk(KERN_DEBUG "sys_access(): calling ADF\n");
+#endif
+                    rsbac_target = T_FILE;
+                    if (S_ISDIR(nd.dentry->d_inode->i_mode))
+                      rsbac_target = T_DIR;
+                    else if (S_ISFIFO(nd.dentry->d_inode->i_mode))
+                      rsbac_target = T_FIFO;
+                    else if (S_ISLNK(nd.dentry->d_inode->i_mode))
+                      rsbac_target = T_SYMLINK;
+                    rsbac_target_id.file.device = nd.dentry->d_inode->i_sb->s_dev;
+                    rsbac_target_id.file.inode  = nd.dentry->d_inode->i_ino;
+                    rsbac_target_id.file.dentry_p = nd.dentry;
+                    rsbac_attribute_value.dummy = 0;
+                    if (!rsbac_adf_request(R_GET_PERMISSIONS_DATA,
+                                           current->pid,
+                                           rsbac_target,
+                                           rsbac_target_id,
+                                           A_none,
+                                           rsbac_attribute_value))
+                      res = -EPERM;
+                  }
+                #endif
+
 		path_release(&nd);
 	}
 
@@ -522,14 +741,46 @@
 	struct nameidata nd;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = __user_walk(filename, LOOKUP_FOLLOW|LOOKUP_DIRECTORY, &nd);
 	if (error)
 		goto out;
 
+        #ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+        if(rsbac_dac_part_disabled(nd.dentry))
+          error = 0;
+        else
+        #endif
 	error = permission(nd.dentry->d_inode,MAY_EXEC,&nd);
 	if (error)
 		goto dput_and_out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_chdir(): calling ADF\n");
+#endif
+        rsbac_target_id.dir.device = nd.dentry->d_inode->i_sb->s_dev;
+        rsbac_target_id.dir.inode  = nd.dentry->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = nd.dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_CHDIR,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            goto dput_and_out;
+          }
+        #endif
+
 	set_fs_pwd(current->fs, nd.mnt, nd.dentry);
 
 dput_and_out:
@@ -546,6 +797,12 @@
 	struct vfsmount *mnt;
 	int error;
 
+	/* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = -EBADF;
 	file = fget(fd);
 	if (!file)
@@ -559,7 +816,37 @@
 	if (!S_ISDIR(inode->i_mode))
 		goto out_putf;
 
+        #ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+        if(rsbac_dac_part_disabled(dentry))
+          error = 0;
+        else
+        #endif
 	error = permission(inode, MAY_EXEC, NULL);
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        if(!error)
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "sys_fchdir(): calling ADF\n");
+#endif
+            rsbac_target_id.dir.device = inode->i_sb->s_dev;
+            rsbac_target_id.dir.inode  = inode->i_ino;
+            rsbac_target_id.dir.dentry_p = dentry;
+            rsbac_attribute_value.dummy = 0;
+            if (!rsbac_adf_request(R_CHDIR,
+                                   current->pid,
+                                   T_DIR,
+                                   rsbac_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                error = -EPERM;
+              }
+          }
+        #endif
+
 	if (!error)
 		set_fs_pwd(current->fs, mnt, dentry);
 out_putf:
@@ -573,10 +860,21 @@
 	struct nameidata nd;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = __user_walk(filename, LOOKUP_FOLLOW | LOOKUP_DIRECTORY | LOOKUP_NOALT, &nd);
 	if (error)
 		goto out;
 
+        #ifdef CONFIG_RSBAC_ALLOW_DAC_DISABLE_PART
+        if(rsbac_dac_part_disabled(nd.dentry))
+          error = 0;
+        else
+        #endif
 	error = permission(nd.dentry->d_inode,MAY_EXEC,&nd);
 	if (error)
 		goto dput_and_out;
@@ -585,6 +883,28 @@
 	if (!capable(CAP_SYS_CHROOT))
 		goto dput_and_out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sys_chroot(): calling ADF\n");
+#endif
+        rsbac_target_id.dir.device = nd.dentry->d_inode->i_sb->s_dev;
+        rsbac_target_id.dir.inode  = nd.dentry->d_inode->i_ino;
+        rsbac_target_id.dir.dentry_p = nd.dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_CHDIR,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            goto dput_and_out;
+          }
+        #endif
+
 	set_fs_root(current->fs, nd.mnt, nd.dentry);
 	set_fs_altroot();
 	error = 0;
@@ -602,6 +922,13 @@
 	int err = -EBADF;
 	struct iattr newattrs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	file = fget(fd);
 	if (!file)
 		goto out;
@@ -615,6 +942,35 @@
 	err = -EPERM;
 	if (IS_IMMUTABLE(inode) || IS_APPEND(inode))
 		goto out_putf;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_fchmod(): calling ADF\n");
+#endif
+        rsbac_target = T_FILE;
+        if (S_ISDIR(inode->i_mode))
+          rsbac_target = T_DIR;
+        else if (S_ISFIFO(inode->i_mode))
+          rsbac_target = T_FIFO;
+        else if (S_ISLNK(inode->i_mode))
+          rsbac_target = T_SYMLINK;
+        rsbac_target_id.file.device = inode->i_sb->s_dev;
+        rsbac_target_id.file.inode  = inode->i_ino;
+        rsbac_target_id.file.dentry_p = dentry;
+        rsbac_attribute_value.mode = mode;
+        if (!rsbac_adf_request(R_MODIFY_PERMISSIONS_DATA,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_mode,
+                               rsbac_attribute_value))
+          {
+            err = -EPERM;
+            goto out_putf;
+          }
+        #endif
+        
 	down(&inode->i_sem);
 	if (mode == (mode_t) -1)
 		mode = inode->i_mode;
@@ -636,6 +992,13 @@
 	int error;
 	struct iattr newattrs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = user_path_walk(filename, &nd);
 	if (error)
 		goto out;
@@ -649,6 +1012,34 @@
 	if (IS_IMMUTABLE(inode) || IS_APPEND(inode))
 		goto dput_and_out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_chmod(): calling ADF\n");
+#endif
+        rsbac_target = T_FILE;
+        if (S_ISDIR(inode->i_mode))
+          rsbac_target = T_DIR;
+        else if (S_ISFIFO(inode->i_mode))
+          rsbac_target = T_FIFO;
+        else if (S_ISLNK(inode->i_mode))
+          rsbac_target = T_SYMLINK;
+        rsbac_target_id.file.device = inode->i_sb->s_dev;
+        rsbac_target_id.file.inode  = inode->i_ino;
+        rsbac_target_id.file.dentry_p = nd.dentry;
+        rsbac_attribute_value.mode = mode;
+        if (!rsbac_adf_request(R_MODIFY_PERMISSIONS_DATA,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_mode,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            goto dput_and_out;
+          }
+        #endif
+
 	down(&inode->i_sem);
 	if (mode == (mode_t) -1)
 		mode = inode->i_mode;
@@ -669,6 +1060,13 @@
 	int error;
 	struct iattr newattrs;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = -ENOENT;
 	if (!(inode = dentry->d_inode)) {
 		printk(KERN_ERR "chown_common: NULL inode\n");
@@ -691,6 +1089,35 @@
 	}
 	if (!S_ISDIR(inode->i_mode))
 		newattrs.ia_valid |= ATTR_KILL_SUID|ATTR_KILL_SGID;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "chown_common() [sys_*chown]: calling ADF\n");
+#endif
+        rsbac_target = T_FILE;
+        if (S_ISDIR(inode->i_mode))
+          rsbac_target = T_DIR;
+        else if (S_ISFIFO(inode->i_mode))
+          rsbac_target = T_FIFO;
+        else if (S_ISLNK(inode->i_mode))
+          rsbac_target = T_SYMLINK;
+        rsbac_target_id.file.device = inode->i_sb->s_dev;
+        rsbac_target_id.file.inode  = inode->i_ino;
+        rsbac_target_id.file.dentry_p = dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_CHANGE_OWNER,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            error = -EPERM;
+            goto out;
+          }
+        #endif
+
 	down(&inode->i_sem);
 	error = notify_change(dentry, &newattrs);
 	up(&inode->i_sem);
@@ -1004,16 +1431,172 @@
 {
 	int retval = 0;
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+	enum  rsbac_target_t          rsbac_target = T_NONE;
+#ifdef CONFIG_RSBAC_NET_OBJ
+	int                           rsbac_is_socket = 0;
+#endif
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_target_id_t       rsbac_new_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
 	if (!file_count(filp)) {
 		printk(KERN_ERR "VFS: Close: file count is 0\n");
 		return 0;
 	}
 
+        /* RSBAC: calling adf */
+        #ifdef CONFIG_RSBAC
+        if (   filp
+            && filp->f_dentry
+            && filp->f_dentry->d_inode
+            && !S_ISSOCK(filp->f_dentry->d_inode->i_mode))
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "filp_close() [sys_close]: calling ADF\n");
+#endif
+            rsbac_target = T_FILE;
+            if(   S_ISBLK(filp->f_dentry->d_inode->i_mode)
+               || S_ISCHR(filp->f_dentry->d_inode->i_mode))
+              {
+                rsbac_target = T_DEV;
+                if(S_ISBLK(filp->f_dentry->d_inode->i_mode))
+                  {
+                    rsbac_target_id.dev.type = D_block;
+                  }
+                else
+                  {
+                    rsbac_target_id.dev.type = D_char;
+                  }
+                rsbac_target_id.dev.major = RSBAC_MAJOR(filp->f_dentry->d_inode->i_sb->s_dev);
+                rsbac_target_id.dev.minor = RSBAC_MINOR(filp->f_dentry->d_inode->i_sb->s_dev);
+              }
+            else /* must be file, fifo or dir */
+              {
+                if(S_ISDIR(filp->f_dentry->d_inode->i_mode))
+                  rsbac_target = T_DIR;
+                else if(S_ISFIFO(filp->f_dentry->d_inode->i_mode))
+                  rsbac_target = T_FIFO;
+                rsbac_target_id.file.device = filp->f_dentry->d_inode->i_sb->s_dev;
+                rsbac_target_id.file.inode  = filp->f_dentry->d_inode->i_ino;
+                rsbac_target_id.file.dentry_p = filp->f_dentry;
+              }
+            rsbac_attribute_value.f_mode = filp->f_mode;
+            if (!rsbac_adf_request(R_CLOSE,
+                                   current->pid,
+                                   rsbac_target,
+                                   rsbac_target_id,
+                                   A_f_mode,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING "filp_close() [sys_close]: ADF-call returned NOT_GRANTED\n");
+                return -EPERM;
+              }
+          }
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        /* RSBAC: remember, whether it was a socket, and request ADF
+         * This is special, because closing a socket means deleting it.
+         * The real close might have been done via sys_shutdown, then
+         * here is nothing more to do.
+         */
+        else if (   filp
+                 && filp->f_dentry
+                 && filp->f_dentry->d_inode
+                 && S_ISSOCK(filp->f_dentry->d_inode->i_mode)
+                 && SOCKET_I(filp->f_dentry->d_inode)
+                 #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+                 && SOCKET_I(filp->f_dentry->d_inode)->ops
+                 && (SOCKET_I(filp->f_dentry->d_inode)->ops->family != AF_UNIX)
+                 #endif
+                )
+          {
+            rsbac_is_socket = 1;
+            rsbac_target_id.netobj.sock_p = SOCKET_I(filp->f_dentry->d_inode);
+            rsbac_target_id.netobj.local_addr = NULL;
+            rsbac_target_id.netobj.local_len = 0;
+            rsbac_target_id.netobj.remote_addr = NULL;
+            rsbac_target_id.netobj.remote_len = 0;
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "filp_close() [sys_close()]: calling ADF for CLOSE on NETOBJ\n");
+#endif
+            rsbac_attribute_value.f_mode = filp->f_mode;
+            if (!rsbac_adf_request(R_CLOSE,
+                                   current->pid,
+                                   T_NETOBJ,
+                                   rsbac_target_id,
+                                   A_f_mode,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "filp_close() [sys_close()]: ADF-call for CLOSE on NETOBJ returned NOT_GRANTED\n");
+                return -EPERM;
+              }
+          }
+        #endif /* NET_OBJ */
+        #endif /* RSBAC */
+
 	if (filp->f_op && filp->f_op->flush)
 		retval = filp->f_op->flush(filp);
 
 	dnotify_flush(filp, id);
 	locks_remove_posix(filp, id);
+
+        /* RSBAC: notifying adf */
+        #ifdef CONFIG_RSBAC
+        if (   filp->f_dentry
+            && filp->f_dentry->d_inode
+            && !S_ISSOCK(filp->f_dentry->d_inode->i_mode))
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "filp_close() [sys_close]: notifying ADF\n");
+#endif
+            rsbac_new_target_id.dummy = 0;
+            rsbac_attribute_value.f_mode = filp->f_mode;
+            if (rsbac_adf_set_attr(R_CLOSE,
+                                   current->pid,
+                                   rsbac_target,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_f_mode,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "filp_close() [sys_close]: rsbac_adf_set_attr() returned error\n");
+              }
+          }
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        else
+        /* RSBAC: notifying adf / network */
+        if (!retval && rsbac_is_socket)
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG
+                     "filp_close [sys_close]: notifying ADF for CLOSE on NETOBJ\n");
+#endif
+            rsbac_new_target_id.dummy = 0;
+            rsbac_attribute_value.f_mode = filp->f_mode;
+            if (rsbac_adf_set_attr(R_CLOSE,
+                                   current->pid,
+                                   T_NETOBJ,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_f_mode,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING 
+                       "filp_close [sys_close()]: rsbac_adf_set_attr() for CLOSE on netobj returned error\n");
+              }
+          }
+        #endif /* CONFIG_RSBAC_NET_OBJ */
+        #endif /* RSBAC */
+
 	fput(filp);
 	return retval;
 }
diff -urN trunk/fs/pipe.c 2.6.14-rsbac-1.2.5/fs/pipe.c
--- trunk/fs/pipe.c	2005-11-11 10:03:50.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/pipe.c	2005-11-10 16:16:51.000000000 +0000
@@ -19,6 +19,11 @@
 #include <asm/uaccess.h>
 #include <asm/ioctls.h>
 
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#include <rsbac/aci.h>
+#endif
+
 /*
  * We use a start+len construction, which provides full use of the 
  * allocated memory.
@@ -129,11 +134,40 @@
 	struct iovec *iov = (struct iovec *)_iov;
 	size_t total_len;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	total_len = iov_length(iov, nr_segs);
 	/* Null read succeeds. */
 	if (unlikely(total_len == 0))
 		return 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+	    rsbac_printk(KERN_DEBUG "pipe_readv(): calling ADF\n");
+#endif
+    
+        rsbac_target_id.ipc.type = I_anonpipe;
+        rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	rsbac_attribute_value.dummy = 0;
+
+	if (!rsbac_adf_request(R_READ,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+	#endif /* CONFIG_RSBAC_RW */
+
 	do_wakeup = 0;
 	ret = 0;
 	down(PIPE_SEM(*inode));
@@ -206,8 +240,28 @@
 		wake_up_interruptible(PIPE_WAIT(*inode));
 		kill_fasync(PIPE_FASYNC_WRITERS(*inode), SIGIO, POLL_OUT);
 	}
-	if (ret > 0)
+	if (ret > 0) {
 		file_accessed(filp);
+		
+		/* RSBAC: notify adf of read from pipe */
+                #ifdef CONFIG_RSBAC_RW
+		rsbac_new_target_id.dummy = 0;
+		
+		if (rsbac_adf_set_attr(R_READ,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           T_NONE,
+                                           rsbac_new_target_id,
+                                           A_none,
+                                           rsbac_attribute_value))
+                      {
+                        rsbac_printk(KERN_WARNING
+                               "pipe_readv(): rsbac_adf_set_attr() returned error\n");
+                      }
+                #endif
+
+	}
 	return ret;
 }
 
@@ -230,11 +284,40 @@
 	size_t total_len;
 	ssize_t chars;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	total_len = iov_length(iov, nr_segs);
 	/* Null write succeeds. */
 	if (unlikely(total_len == 0))
 		return 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+	    rsbac_printk(KERN_DEBUG "pipe_writev(): calling ADF\n");
+#endif
+    
+        rsbac_target_id.ipc.type = I_anonpipe;
+        rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	rsbac_attribute_value.dummy = 0;
+
+	if (!rsbac_adf_request(R_WRITE,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+	#endif /* CONFIG_RSBAC_RW */
+
 	do_wakeup = 0;
 	ret = 0;
 	down(PIPE_SEM(*inode));
@@ -346,8 +429,28 @@
 		wake_up_interruptible(PIPE_WAIT(*inode));
 		kill_fasync(PIPE_FASYNC_READERS(*inode), SIGIO, POLL_IN);
 	}
-	if (ret > 0)
+	if (ret > 0) {
 		inode_update_time(inode, 1);	/* mtime and ctime */
+		
+		/* RSBAC: notify adf of write to pipe */
+                #ifdef CONFIG_RSBAC_RW
+		rsbac_new_target_id.dummy = 0;
+		
+		if (rsbac_adf_set_attr(R_WRITE,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           T_NONE,
+                                           rsbac_new_target_id,
+                                           A_none,
+                                           rsbac_attribute_value))
+                      {
+                        rsbac_printk(KERN_WARNING
+                               "pipe_writev(): rsbac_adf_set_attr() returned error\n");
+                      }
+                #endif
+	}
+
 	return ret;
 }
 
@@ -437,7 +540,25 @@
 	PIPE_READERS(*inode) -= decr;
 	PIPE_WRITERS(*inode) -= decw;
 	if (!PIPE_READERS(*inode) && !PIPE_WRITERS(*inode)) {
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                union rsbac_target_id_t rsbac_target_id;
+                #endif
+
 		free_pipe_info(inode);
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  rsbac_printk(KERN_DEBUG "pipe_release: calling ACI remove_target()\n");
+#endif
+                rsbac_target_id.ipc.type   = I_anonpipe;
+                rsbac_target_id.ipc.id.id_nr  = inode->i_ino;
+                rsbac_remove_target(T_IPC, rsbac_target_id);
+                #endif
+
 	} else {
 		wake_up_interruptible(PIPE_WAIT(*inode));
 		kill_fasync(PIPE_FASYNC_READERS(*inode), SIGIO, POLL_IN);
@@ -454,6 +575,35 @@
 	struct inode *inode = filp->f_dentry->d_inode;
 	int retval;
 
+	/* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+	    rsbac_printk(KERN_DEBUG "pipe_read_fasync(): calling ADF\n");
+#endif
+    
+        rsbac_target_id.ipc.type = I_anonpipe;
+        rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	rsbac_attribute_value.dummy = 0;
+
+	if (!rsbac_adf_request(R_READ,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+	#endif /* CONFIG_RSBAC_RW */
+
 	down(PIPE_SEM(*inode));
 	retval = fasync_helper(fd, filp, on, PIPE_FASYNC_READERS(*inode));
 	up(PIPE_SEM(*inode));
@@ -461,6 +611,23 @@
 	if (retval < 0)
 		return retval;
 
+	/* RSBAC: notify adf of read from pipe */
+        #ifdef CONFIG_RSBAC_RW
+	rsbac_new_target_id.dummy = 0;
+		
+	if (rsbac_adf_set_attr(R_READ,
+                                   current->pid,
+                                   T_IPC,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING "pipe_read_fasync(): rsbac_adf_set_attr() returned error\n");
+              }
+        #endif
+
 	return 0;
 }
 
@@ -471,6 +638,35 @@
 	struct inode *inode = filp->f_dentry->d_inode;
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+	    rsbac_printk(KERN_DEBUG "pipe_write_fasync(): calling ADF\n");
+#endif
+    
+        rsbac_target_id.ipc.type = I_anonpipe;
+        rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	rsbac_attribute_value.dummy = 0;
+
+	if (!rsbac_adf_request(R_WRITE,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+	#endif /* CONFIG_RSBAC_RW */
+
 	down(PIPE_SEM(*inode));
 	retval = fasync_helper(fd, filp, on, PIPE_FASYNC_WRITERS(*inode));
 	up(PIPE_SEM(*inode));
@@ -478,6 +674,23 @@
 	if (retval < 0)
 		return retval;
 
+	/* RSBAC: notify adf of write to pipe */
+        #ifdef CONFIG_RSBAC_RW
+	rsbac_new_target_id.dummy = 0;
+		
+	if (rsbac_adf_set_attr(R_WRITE,
+                                   current->pid,
+                                   T_IPC,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING "pipe_write_fasync(): rsbac_adf_set_attr() returned error\n");
+              }
+        #endif
+
 	return 0;
 }
 
@@ -488,6 +701,55 @@
 	struct inode *inode = filp->f_dentry->d_inode;
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+	    rsbac_printk(KERN_DEBUG "pipe_rdwr_fasync(): calling ADF for READ\n");
+#endif
+    
+        rsbac_target_id.ipc.type = I_anonpipe;
+        rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	rsbac_attribute_value.dummy = 0;
+
+	if (!rsbac_adf_request(R_READ,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+	
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+	    rsbac_printk(KERN_DEBUG "pipe_rdwr_fasync(): calling ADF for WRITE\n");
+#endif
+    
+        rsbac_target_id.ipc.type = I_anonpipe;
+        rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	rsbac_attribute_value.dummy = 0;
+
+	if (!rsbac_adf_request(R_WRITE,
+				current->pid,
+				T_IPC,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	{
+		return -EPERM;
+	}
+	#endif /* CONFIG_RSBAC_RW */
+
+
 	down(PIPE_SEM(*inode));
 
 	retval = fasync_helper(fd, filp, on, PIPE_FASYNC_READERS(*inode));
@@ -500,6 +762,40 @@
 	if (retval < 0)
 		return retval;
 
+	/* RSBAC: notify adf of read from pipe */
+        #ifdef CONFIG_RSBAC_RW
+	rsbac_new_target_id.dummy = 0;
+		
+	if (rsbac_adf_set_attr(R_READ,
+                                   current->pid,
+                                   T_IPC,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "pipe_rwdr_fasync(): rsbac_adf_set_attr() returned error\n");
+              }
+	
+	/* RSBAC: notify adf of write to pipe */
+	rsbac_new_target_id.dummy = 0;
+		
+	if (rsbac_adf_set_attr(R_WRITE,
+                                   current->pid,
+                                   T_IPC,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "pipe_rwdr_fasync(): rsbac_adf_set_attr() returned error\n");
+              }
+        #endif
+
 	return 0;
 }
 
@@ -532,28 +828,144 @@
 static int
 pipe_read_open(struct inode *inode, struct file *filp)
 {
+	
+	#ifdef CONFIG_RSBAC
+	/* RSBAC */
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+	
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "pipe_read_open(): calling ADF\n");
+#endif
+
+	rsbac_target_id.ipc.type = I_anonpipe;
+        rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	rsbac_attribute_value.dummy = 0;
+
+	if (!rsbac_adf_request(R_READ_OPEN,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+	#endif
+
 	/* We could have perhaps used atomic_t, but this and friends
 	   below are the only places.  So it doesn't seem worthwhile.  */
 	down(PIPE_SEM(*inode));
 	PIPE_READERS(*inode)++;
 	up(PIPE_SEM(*inode));
 
+        #ifdef CONFIG_RSBAC
+	/* RSBAC: notify adf of read_open on pipe */
+	rsbac_new_target_id.dummy = 0;
+		
+	if (rsbac_adf_set_attr(R_READ_OPEN,
+                                   current->pid,
+                                   T_IPC,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING "pipe_read_open(): rsbac_adf_set_attr() returned error\n");
+              }
+        #endif
+
 	return 0;
 }
 
 static int
 pipe_write_open(struct inode *inode, struct file *filp)
 {
+
+	#ifdef CONFIG_RSBAC
+	/* RSBAC */
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+	
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "pipe_write_open(): calling ADF\n");
+#endif
+
+	rsbac_target_id.ipc.type = I_anonpipe;
+        rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	rsbac_attribute_value.dummy = 0;
+
+	if (!rsbac_adf_request(R_WRITE_OPEN,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+	#endif
+
 	down(PIPE_SEM(*inode));
 	PIPE_WRITERS(*inode)++;
 	up(PIPE_SEM(*inode));
 
+        #ifdef CONFIG_RSBAC
+	/* RSBAC: notify adf of write_open on pipe */
+	rsbac_new_target_id.dummy = 0;
+		
+	if (rsbac_adf_set_attr(R_WRITE_OPEN,
+                                   current->pid,
+                                   T_IPC,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING "pipe_write_open(): rsbac_adf_set_attr() returned error\n");
+              }
+        #endif
+
 	return 0;
 }
 
 static int
 pipe_rdwr_open(struct inode *inode, struct file *filp)
 {
+
+	#ifdef CONFIG_RSBAC
+	/* RSBAC */
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+	
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "pipe_rdwr_open(): calling ADF\n");
+#endif
+
+	rsbac_target_id.ipc.type = I_anonpipe;
+        rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+	rsbac_attribute_value.dummy = 0;
+
+	if (!rsbac_adf_request(R_READ_WRITE_OPEN,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+	
+	#endif
+
 	down(PIPE_SEM(*inode));
 	if (filp->f_mode & FMODE_READ)
 		PIPE_READERS(*inode)++;
@@ -561,6 +973,23 @@
 		PIPE_WRITERS(*inode)++;
 	up(PIPE_SEM(*inode));
 
+        #ifdef CONFIG_RSBAC
+	/* RSBAC: notify adf of read_write_open on pipe */
+	rsbac_new_target_id.dummy = 0;
+		
+	if (rsbac_adf_set_attr(R_READ_WRITE_OPEN,
+                                   current->pid,
+                                   T_IPC,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING "pipe_rdwr_open(): rsbac_adf_set_attr() returned error\n");
+              }
+        #endif
+
 	return 0;
 }
 
@@ -727,6 +1156,32 @@
 	int error;
 	int i,j;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "do_pipe() [sys_pipe()]: calling ADF\n");
+#endif
+        rsbac_target_id.ipc.type = I_anonpipe;
+        rsbac_target_id.ipc.id.id_nr = 0;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_CREATE,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	error = -ENFILE;
 	f1 = get_empty_filp();
 	if (!f1)
@@ -781,6 +1236,25 @@
 	fd_install(j, f2);
 	fd[0] = i;
 	fd[1] = j;
+	
+        /* RSBAC: notify ADF of new anonpipe */
+        #ifdef CONFIG_RSBAC
+        rsbac_target_id.ipc.id.id_nr = inode->i_ino;
+        rsbac_new_target_id.dummy = 0;
+        if (rsbac_adf_set_attr(R_CREATE,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               T_NONE,
+                               rsbac_new_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "do_pipe() [sys_pipe()]: rsbac_adf_set_attr() returned error");
+          }
+        #endif
+
 	return 0;
 
 close_f12_inode_i_j:
@@ -826,12 +1300,33 @@
 			err = PTR_ERR(pipe_mnt);
 			unregister_filesystem(&pipe_fs_type);
 		}
+		#ifdef CONFIG_RSBAC
+		else {
+			/* RSBAC: initialising data structures for this fs (not root fs) */
+			#ifdef CONFIG_RSBAC_DEBUG
+			if (rsbac_debug_ds)
+			  rsbac_printk(KERN_DEBUG "init_pipe_fs(): calling rsbac_mount for Device %02u:%02u\n",
+				 MAJOR(pipe_mnt->mnt_sb->s_dev), MINOR(pipe_mnt->mnt_sb->s_dev));
+			#endif
+			rsbac_mount(pipe_mnt->mnt_sb, NULL);
+		}
+		#endif
 	}
 	return err;
 }
 
 static void __exit exit_pipe_fs(void)
 {
+        /* RSBAC: removing data structures for this fs from memory */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_ds)
+          rsbac_printk(KERN_DEBUG "exit_pipefs(): calling rsbac_umount for Device %02u:%02u\n",
+                 MAJOR(pipe_mnt->mnt_sb->s_dev), MINOR(pipe_mnt->mnt_sb->s_dev));
+#endif
+        rsbac_umount(pipe_mnt->mnt_sb, NULL);
+        #endif
+
 	unregister_filesystem(&pipe_fs_type);
 	mntput(pipe_mnt);
 }
diff -urN trunk/fs/proc/array.c 2.6.14-rsbac-1.2.5/fs/proc/array.c
--- trunk/fs/proc/array.c	2005-11-11 10:03:48.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/proc/array.c	2005-11-10 16:16:50.000000000 +0000
@@ -82,6 +82,11 @@
 #include <asm/processor.h>
 #include "internal.h"
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /* Gcc optimizes away "strlen(x)" for constant x */
 #define ADDBUF(buffer, string) \
 do { memcpy(buffer, string, strlen(string)); \
@@ -298,6 +303,34 @@
 	char * orig = buffer;
 	struct mm_struct *mm = get_task_mm(task);
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "proc_pid_status(): calling ADF\n");
+#endif
+        rsbac_target_id.process = task->pid;
+        if(!task->mm)
+          rsbac_attribute_value.kernel_thread = TRUE;
+        else
+          rsbac_attribute_value.kernel_thread = FALSE;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_kernel_thread,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	buffer = task_name(task, buffer);
 	buffer = task_state(task, buffer);
  
@@ -324,7 +357,7 @@
 	int res;
  	pid_t ppid, pgid = -1, sid = -1;
 	int num_threads = 0;
-	struct mm_struct *mm;
+	struct mm_struct *mm = get_task_mm(task);
 	unsigned long long start_time;
 	unsigned long cmin_flt = 0, cmaj_flt = 0;
 	unsigned long  min_flt = 0,  maj_flt = 0;
@@ -334,9 +367,36 @@
 	struct task_struct *t;
 	char tcomm[sizeof(task->comm)];
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "proc_pid_stat(): calling ADF\n");
+#endif
+        rsbac_target_id.process = task->pid;
+        if(!task->mm)
+          rsbac_attribute_value.kernel_thread = TRUE;
+        else
+          rsbac_attribute_value.kernel_thread = FALSE;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_kernel_thread,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	state = *get_task_state(task);
 	vsize = eip = esp = 0;
-	mm = get_task_mm(task);
 	if (mm) {
 		vsize = task_vsize(mm);
 		eip = KSTK_EIP(task);
@@ -478,8 +538,37 @@
 int proc_pid_statm(struct task_struct *task, char *buffer)
 {
 	int size = 0, resident = 0, shared = 0, text = 0, lib = 0, data = 0;
-	struct mm_struct *mm = get_task_mm(task);
+	struct mm_struct *mm;
 	
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "proc_pid_statm(): calling ADF\n");
+#endif
+        rsbac_target_id.process = task->pid;
+        if(!task->mm)
+          rsbac_attribute_value.kernel_thread = TRUE;
+        else
+          rsbac_attribute_value.kernel_thread = FALSE;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_kernel_thread,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+	
+	mm = get_task_mm(task);
 	if (mm) {
 		size = task_statm(mm, &shared, &text, &data, &resident);
 		mmput(mm);
diff -urN trunk/fs/proc/base.c 2.6.14-rsbac-1.2.5/fs/proc/base.c
--- trunk/fs/proc/base.c	2005-11-11 10:03:48.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/proc/base.c	2005-11-10 16:16:50.000000000 +0000
@@ -72,6 +72,11 @@
 #include <linux/audit.h>
 #include "internal.h"
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /*
  * For hysterical raisins we keep the same inumbers as in the old procfs.
  * Feel free to change the macro below - just keep the range distinct from
@@ -290,6 +295,31 @@
 	struct file *file;
 	int fd = proc_type(inode) - PROC_TID_FD_DIR;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "proc_fd_link(): calling ADF\n");
+#endif
+        rsbac_target_id.process = inode->i_ino >> 16;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	files = get_files_struct(task);
 	if (files) {
 		rcu_read_lock();
@@ -322,6 +352,26 @@
 {
 	struct fs_struct *fs = get_fs_struct(proc_task(inode));
 	int result = -ENOENT;
+#ifdef CONFIG_RSBAC
+	union rsbac_target_id_t       rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+
+#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+		rsbac_printk(KERN_DEBUG "proc_cwd_link(): calling ADF\n");
+#endif
+
+	rsbac_target_id.process = inode->i_ino >> 16;
+	rsbac_attribute_value.dummy = 0;
+	if(!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_PROCESS,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+		return -EPERM;
+#endif
+
 	if (fs) {
 		read_lock(&fs->lock);
 		*mnt = mntget(fs->pwdmnt);
@@ -358,6 +408,32 @@
 	int result = -ENOENT;
 	struct task_struct *leader = proc_task(inode);
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "proc_root_link(): calling ADF\n");
+#endif
+        rsbac_target_id.process = inode->i_ino >> 16;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
+
 	task_lock(leader);
 	fs = leader->fs;
 	if (fs) {
@@ -407,6 +483,31 @@
 {
 	int res = 0;
 	struct mm_struct *mm = get_task_mm(task);
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "proc_pid_environ(): calling ADF\n");
+#endif
+        rsbac_target_id.process = task->pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	if (mm) {
 		unsigned int len = mm->env_end - mm->env_start;
 		if (len > PAGE_SIZE)
@@ -424,6 +525,32 @@
 	int res = 0;
 	unsigned int len;
 	struct mm_struct *mm = get_task_mm(task);
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "proc_pid_cmdline(): calling ADF\n");
+#endif
+        rsbac_target_id.process = task->pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	if (!mm)
 		goto out;
 	if (!mm->arg_end)
@@ -460,6 +587,33 @@
 {
 	int res = 0;
 	struct mm_struct *mm = get_task_mm(task);
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "proc_pid_auxv(): calling ADF\n");
+#endif
+        rsbac_target_id.process = task->pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
+	mm = get_task_mm(task);
 	if (mm) {
 		unsigned int nwords = 0;
 		do
@@ -487,6 +641,31 @@
 	unsigned long wchan, size, offset;
 	char namebuf[KSYM_NAME_LEN+1];
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "proc_pid_wchan(): calling ADF\n");
+#endif
+        rsbac_target_id.process = task->pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	wchan = get_wchan(task);
 
 	sym_name = kallsyms_lookup(wchan, &size, &offset, &modname, namebuf);
@@ -502,6 +681,31 @@
  */
 static int proc_pid_schedstat(struct task_struct *task, char *buffer)
 {
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "proc_pid_schedstat(): calling ADF\n");
+#endif
+        rsbac_target_id.process = task->pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	return sprintf(buffer, "%lu %lu %lu\n",
 			task->sched_info.cpu_time,
 			task->sched_info.run_delay,
@@ -516,6 +720,31 @@
 	unsigned long points;
 	struct timespec uptime;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "proc_oom_score(): calling ADF\n");
+#endif
+        rsbac_target_id.process = task->pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	do_posix_clock_monotonic_gettime(&uptime);
 	points = badness(task, uptime.tv_sec);
 	return sprintf(buffer, "%lu\n", points);
@@ -603,6 +832,32 @@
 {
 	struct task_struct *task = proc_task(inode);
 	int ret = seq_open(file, &proc_pid_maps_op);
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "maps_open(): calling ADF\n");
+#endif
+        rsbac_target_id.process = task->pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	if (!ret) {
 		struct seq_file *m = file->private_data;
 		m->private = task;
@@ -665,6 +920,31 @@
 	struct task_struct *task = proc_task(inode);
 	int ret = seq_open(file, &mounts_op);
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "mounts_open(): calling ADF\n");
+#endif
+        rsbac_target_id.process = task->pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	if (!ret) {
 		struct seq_file *m = file->private_data;
 		struct namespace *namespace;
@@ -741,9 +1021,34 @@
 	int ret = -ESRCH;
 	struct mm_struct *mm;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!MAY_PTRACE(task) || !ptrace_may_attach(task))
 		goto out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "mem_read(): calling ADF\n");
+#endif
+        rsbac_target_id.process = task->pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	ret = -ENOMEM;
 	page = (char *)__get_free_page(GFP_USER);
 	if (!page)
@@ -805,9 +1110,34 @@
 	struct task_struct *task = proc_task(file->f_dentry->d_inode);
 	unsigned long dst = *ppos;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!MAY_PTRACE(task) || !ptrace_may_attach(task))
 		return -ESRCH;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "mem_write(): calling ADF\n");
+#endif
+        rsbac_target_id.process = task->pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	page = (char *)__get_free_page(GFP_USER);
 	if (!page)
 		return -ENOMEM;
@@ -869,6 +1199,31 @@
 	int oom_adjust = task->oomkilladj;
 	loff_t __ppos = *ppos;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "oom_adjust_read(): calling ADF\n");
+#endif
+        rsbac_target_id.process = task->pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	len = sprintf(buffer, "%i\n", oom_adjust);
 	if (__ppos >= len)
 		return 0;
@@ -887,8 +1242,34 @@
 	char buffer[8], *end;
 	int oom_adjust;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!capable(CAP_SYS_RESOURCE))
 		return -EPERM;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "oom_adjust_write(): calling ADF\n");
+#endif
+        rsbac_target_id.process = task->pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	memset(buffer, 0, 8);
 	if (count > 6)
 		count = 6;
@@ -924,6 +1305,31 @@
 	ssize_t length;
 	char tmpbuf[TMPBUFLEN];
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "proc_loginuid_read(): calling ADF\n");
+#endif
+        rsbac_target_id.process = task->pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	length = scnprintf(tmpbuf, TMPBUFLEN, "%u",
 				audit_get_loginuid(task->audit_context));
 	return simple_read_from_buffer(buf, count, ppos, tmpbuf, length);
@@ -938,6 +1344,12 @@
 	struct task_struct *task = proc_task(inode);
 	uid_t loginuid;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!capable(CAP_AUDIT_CONTROL))
 		return -EPERM;
 
@@ -951,6 +1363,26 @@
 		/* No partial writes. */
 		return -EINVAL;
 	}
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "proc_loginuid_write(): calling ADF\n");
+#endif
+        rsbac_target_id.process = task->pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	page = (char*)__get_free_page(GFP_USER);
 	if (!page)
 		return -ENOMEM;
@@ -1190,12 +1622,34 @@
 	ino_t ino;
 	int ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_PROC_HIDE
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	ret = -ENOENT;
 	if (!pid_alive(proc_task(inode)))
 		goto out;
 
 	ret = 0;
 	pid = proc_task(inode)->pid;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_PROC_HIDE
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -ENOENT;
+          }
+        #endif
+
 	i = filp->f_pos;
 	switch (i) {
 	case 0:
@@ -2053,6 +2507,12 @@
 	struct task_struct *p;
 	int nr_tgids = 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_PROC_HIDE
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	index--;
 	read_lock(&tasklist_lock);
 	p = NULL;
@@ -2071,6 +2531,22 @@
 		int tgid = p->pid;
 		if (!pid_alive(p))
 			continue;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC_PROC_HIDE
+                rsbac_target_id.process = tgid;
+                rsbac_attribute_value.dummy = 0;
+                if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                                      current->pid,
+                                      T_PROCESS,
+                                      rsbac_target_id,
+                                      A_none,
+                                      rsbac_attribute_value))
+                  {
+                    continue;
+                  }
+                #endif
+
 		if (--index >= 0)
 			continue;
 		tgids[nr_tgids] = tgid;
diff -urN trunk/fs/proc/kcore.c 2.6.14-rsbac-1.2.5/fs/proc/kcore.c
--- trunk/fs/proc/kcore.c	2005-11-11 10:03:48.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/proc/kcore.c	2005-11-10 16:16:50.000000000 +0000
@@ -22,10 +22,39 @@
 #include <asm/uaccess.h>
 #include <asm/io.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
 
 static int open_kcore(struct inode * inode, struct file * filp)
 {
+        /* RSBAC */
+#ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+
+	if(!capable(CAP_SYS_RAWIO))
+	  return -EPERM;
+
+        rsbac_target_id.scd = ST_kmem;
+        rsbac_attribute_value.dummy = 0;
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "open_kcore(): calling ADF\n");
+#endif
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_SCD,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          return -EPERM;
+        else
+          return 0;
+#else
 	return capable(CAP_SYS_RAWIO) ? 0 : -EPERM;
+#endif
 }
 
 static ssize_t read_kcore(struct file *, char __user *, size_t, loff_t *);
diff -urN trunk/fs/proc/task_mmu.c 2.6.14-rsbac-1.2.5/fs/proc/task_mmu.c
--- trunk/fs/proc/task_mmu.c	2005-11-11 10:03:48.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/proc/task_mmu.c	2005-11-10 16:16:50.000000000 +0000
@@ -11,6 +11,11 @@
 #include <asm/tlbflush.h>
 #include "internal.h"
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 char *task_mem(struct mm_struct *mm, char *buffer)
 {
 	unsigned long data, text, lib;
@@ -61,8 +66,35 @@
 	struct task_struct *task = proc_task(inode);
 	struct mm_struct * mm = get_task_mm(task);
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!mm)
 		goto out;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "proc_exe_link(): calling ADF\n");
+#endif
+        rsbac_target_id.process = task->pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            mmput(mm);
+            return -EPERM;
+          }
+        #endif
+
 	down_read(&mm->mmap_sem);
 
 	vma = mm->mmap;
diff -urN trunk/fs/proc/task_nommu.c 2.6.14-rsbac-1.2.5/fs/proc/task_nommu.c
--- trunk/fs/proc/task_nommu.c	2005-11-11 10:03:48.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/proc/task_nommu.c	2005-11-10 16:16:50.000000000 +0000
@@ -5,6 +5,11 @@
 #include <linux/seq_file.h>
 #include "internal.h"
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /*
  * Logic: we've got two memory sums for each process, "shared", and
  * "non-shared". Shared memory may get counted more then once, for
@@ -111,8 +116,35 @@
 	struct mm_struct *mm = get_task_mm(task);
 	int result = -ENOENT;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!mm)
 		goto out;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "proc_exe_link(): calling ADF\n");
+#endif
+        rsbac_target_id.process = task->pid;
+        rsbac_attribute_value.dummy = 0;
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            mmput(mm);
+            return -EPERM;
+          }
+        #endif
+
 	down_read(&mm->mmap_sem);
 
 	vml = mm->context.vmlist;
diff -urN trunk/fs/quota.c 2.6.14-rsbac-1.2.5/fs/quota.c
--- trunk/fs/quota.c	2005-11-11 10:03:48.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/quota.c	2005-11-10 16:16:50.000000000 +0000
@@ -16,6 +16,11 @@
 #include <linux/syscalls.h>
 #include <linux/buffer_head.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /* Check validity of generic quotactl commands */
 static int generic_quotactl_valid(struct super_block *sb, int type, int cmd, qid_t id)
 {
@@ -82,10 +87,35 @@
 		    !capable(CAP_SYS_ADMIN))
 			return -EPERM;
 	}
-	else if (cmd != Q_GETFMT && cmd != Q_SYNC && cmd != Q_GETINFO)
+	else if (cmd != Q_GETFMT && cmd != Q_SYNC && cmd != Q_GETINFO) {
+	        /* RSBAC */
+	        #ifdef CONFIG_RSBAC
+	        union rsbac_target_id_t       rsbac_target_id;
+	        union rsbac_attribute_value_t rsbac_attribute_value;
+	        #endif
+
 		if (!capable(CAP_SYS_ADMIN))
 			return -EPERM;
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                rsbac_target_id.scd = ST_quota;
+                rsbac_attribute_value.dummy = 0;
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  printk(KERN_DEBUG "generic_quotactl_valid() [sys_quotactl()]: calling ADF\n");
+#endif
+                if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                                      current->pid,
+                                      T_SCD,
+                                      rsbac_target_id,
+                                      A_none,
+                                      rsbac_attribute_value))
+                  {
+                    return -EPERM;
+                  }
+                #endif
+	}
 	return 0;
 }
 
@@ -129,10 +159,34 @@
 		     !capable(CAP_SYS_ADMIN))
 			return -EPERM;
 	} else if (cmd != Q_XGETQSTAT) {
+	        /* RSBAC */
+	        #ifdef CONFIG_RSBAC
+	        union rsbac_target_id_t       rsbac_target_id;
+	        union rsbac_attribute_value_t rsbac_attribute_value;
+	        #endif
+
 		if (!capable(CAP_SYS_ADMIN))
 			return -EPERM;
-	}
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                rsbac_target_id.scd = ST_quota;
+                rsbac_attribute_value.dummy = 0;
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  printk(KERN_DEBUG "xqm_quotactl_valid() [sys_quotactl()]: calling ADF\n");
+#endif
+                if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                                      current->pid,
+                                      T_SCD,
+                                      rsbac_target_id,
+                                      A_none,
+                                      rsbac_attribute_value))
+                  {
+                    return -EPERM;
+                  }
+                #endif
+	}
 	return 0;
 }
 
diff -urN trunk/fs/readdir.c 2.6.14-rsbac-1.2.5/fs/readdir.c
--- trunk/fs/readdir.c	2005-11-11 10:03:49.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/readdir.c	2005-11-10 16:16:50.000000000 +0000
@@ -19,10 +19,22 @@
 
 #include <asm/uaccess.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 int vfs_readdir(struct file *file, filldir_t filler, void *buf)
 {
 	struct inode *inode = file->f_dentry->d_inode;
 	int res = -ENOTDIR;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!file->f_op || !file->f_op->readdir)
 		goto out;
 
@@ -30,6 +42,28 @@
 	if (res)
 		goto out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "vfs_readdir() [old_readdir(), sys_getdents()]: calling ADF\n");
+#endif
+        rsbac_target_id.dir.device = inode->i_sb->s_dev;
+        rsbac_target_id.dir.inode  = inode->i_ino;
+        rsbac_target_id.dir.dentry_p = file->f_dentry;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_READ,
+                               current->pid,
+                               T_DIR,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            res = -EPERM;
+            goto out;
+          }
+        #endif
+
 	down(&inode->i_sem);
 	res = -ENOENT;
 	if (!IS_DEADDIR(inode)) {
diff -urN trunk/fs/read_write.c 2.6.14-rsbac-1.2.5/fs/read_write.c
--- trunk/fs/read_write.c	2005-11-11 10:03:54.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/read_write.c	2005-11-10 16:16:54.000000000 +0000
@@ -15,6 +15,12 @@
 #include <linux/module.h>
 #include <linux/syscalls.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_RW
+#include <rsbac/adf.h>
+#include <net/sock.h>
+#endif
+
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
 
@@ -236,6 +242,14 @@
 {
 	ssize_t ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!(file->f_mode & FMODE_READ))
 		return -EBADF;
 	if (!file->f_op || (!file->f_op->read && !file->f_op->aio_read))
@@ -247,6 +261,82 @@
 	if (!ret) {
 		ret = security_file_permission (file, MAY_READ);
 		if (!ret) {
+                        /* RSBAC */
+                        #ifdef CONFIG_RSBAC_RW
+#ifdef CONFIG_RSBAC_DEBUG
+                        if (rsbac_debug_aef)
+                          rsbac_printk(KERN_DEBUG "vfs_read() [sys_read()]: calling ADF\n");
+#endif
+                        /* get target type and id clear */
+                        #ifdef CONFIG_RSBAC_NET_OBJ_RW
+                        if(S_ISSOCK(file->f_dentry->d_inode->i_mode))
+                          {
+                            #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+                            if(   SOCKET_I(file->f_dentry->d_inode)->ops
+                               && (SOCKET_I(file->f_dentry->d_inode)->ops->family != AF_UNIX)
+                              )
+                            #endif
+                              {
+                                rsbac_target = T_NETOBJ;
+                                rsbac_target_id.netobj.sock_p
+                                 = SOCKET_I(file->f_dentry->d_inode);
+                                rsbac_target_id.netobj.local_addr = NULL;
+                                rsbac_target_id.netobj.local_len = 0;
+                                rsbac_target_id.netobj.remote_addr = NULL;
+                                rsbac_target_id.netobj.remote_len = 0;
+                              }
+                          }
+                        else
+                        #endif
+                        if(   S_ISFIFO(file->f_dentry->d_inode->i_mode)
+                              /* named FIFO only */
+                           && (file->f_dentry->d_sb->s_magic != PIPEFS_MAGIC)
+                          )
+                          {
+                            rsbac_target = T_FIFO;
+                            rsbac_target_id.fifo.device = file->f_dentry->d_sb->s_dev;
+                            rsbac_target_id.fifo.inode  = file->f_dentry->d_inode->i_ino;
+                            rsbac_target_id.fifo.dentry_p = file->f_dentry;
+                          }
+                        else
+                        if(S_ISREG(file->f_dentry->d_inode->i_mode))
+                          {
+                            rsbac_target = T_FILE;
+                            rsbac_target_id.file.device = file->f_dentry->d_sb->s_dev;
+                            rsbac_target_id.file.inode  = file->f_dentry->d_inode->i_ino;
+                            rsbac_target_id.file.dentry_p = file->f_dentry;
+                          }
+                        else
+                        if(S_ISBLK(file->f_dentry->d_inode->i_mode))
+                          {
+                            rsbac_target = T_DEV;
+                            rsbac_target_id.dev.type = D_block;
+                            rsbac_target_id.dev.major = RSBAC_MAJOR(file->f_dentry->d_inode->i_rdev);
+                            rsbac_target_id.dev.minor = RSBAC_MINOR(file->f_dentry->d_inode->i_rdev);
+                          }
+                        else
+                        if(S_ISCHR(file->f_dentry->d_inode->i_mode))
+                          {
+                            rsbac_target = T_DEV;
+                            rsbac_target_id.dev.type = D_char;
+                            rsbac_target_id.dev.major = RSBAC_MAJOR(file->f_dentry->d_inode->i_rdev);
+                            rsbac_target_id.dev.minor = RSBAC_MINOR(file->f_dentry->d_inode->i_rdev);
+                          }
+                        rsbac_attribute_value.dummy = 0;
+                        if (   (rsbac_target != T_NONE)
+                            && !rsbac_adf_request(R_READ,
+                                                  current->pid,
+                                                  rsbac_target,
+                                                  rsbac_target_id,
+                                                  A_none,
+                                                  rsbac_attribute_value)
+                           )
+                          {
+                            ret = -EPERM;
+                          }
+                        else
+                        #endif /* CONFIG_RSBAC_RW */
+
 			if (file->f_op->read)
 				ret = file->f_op->read(file, buf, count, pos);
 			else
@@ -254,6 +344,26 @@
 			if (ret > 0) {
 				fsnotify_access(file->f_dentry);
 				current->rchar += ret;
+
+	                        /* RSBAC: notify adf of read file etc. */
+	                        #ifdef CONFIG_RSBAC_RW
+	                        if (rsbac_target != T_NONE)
+	                          {
+	                            rsbac_new_target_id.dummy = 0;
+	                            if (rsbac_adf_set_attr(R_READ,
+	                                                   current->pid,
+	                                                   rsbac_target,
+	                                                   rsbac_target_id,
+	                                                   T_NONE,
+	                                                   rsbac_new_target_id,
+	                                                   A_none,
+	                                                   rsbac_attribute_value))
+	                              {
+	                                rsbac_printk(KERN_WARNING
+	                                       "vfs_read() [sys_read()]: rsbac_adf_set_attr() returned error\n");
+	                              }
+	                          }
+	                        #endif
 			}
 			current->syscr++;
 		}
@@ -287,6 +397,14 @@
 {
 	ssize_t ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!(file->f_mode & FMODE_WRITE))
 		return -EBADF;
 	if (!file->f_op || (!file->f_op->write && !file->f_op->aio_write))
@@ -298,6 +416,82 @@
 	if (!ret) {
 		ret = security_file_permission (file, MAY_WRITE);
 		if (!ret) {
+                        /* RSBAC */
+                        #ifdef CONFIG_RSBAC_RW
+#ifdef CONFIG_RSBAC_DEBUG
+                        if (rsbac_debug_aef)
+                          rsbac_printk(KERN_DEBUG "vfs_write()[sys_write()]: calling ADF\n");
+#endif
+                        /* get target type and id clear */
+                        #ifdef CONFIG_RSBAC_NET_OBJ_RW
+                        if(S_ISSOCK(file->f_dentry->d_inode->i_mode))
+                          {
+                            #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+                            if(   SOCKET_I(file->f_dentry->d_inode)->ops
+                               && (SOCKET_I(file->f_dentry->d_inode)->ops->family != AF_UNIX)
+                              )
+                            #endif
+                              {
+                                rsbac_target = T_NETOBJ;
+                                rsbac_target_id.netobj.sock_p
+                                 = SOCKET_I(file->f_dentry->d_inode);
+                                rsbac_target_id.netobj.local_addr = NULL;
+                                rsbac_target_id.netobj.local_len = 0;
+                                rsbac_target_id.netobj.remote_addr = NULL;
+                                rsbac_target_id.netobj.remote_len = 0;
+                              }
+                          }
+                        else
+                        #endif
+                        if(   S_ISFIFO(file->f_dentry->d_inode->i_mode)
+                              /* named FIFO only */
+                           && (file->f_dentry->d_sb->s_magic != PIPEFS_MAGIC)
+                          )
+                          {
+                            rsbac_target = T_FIFO;
+                            rsbac_target_id.fifo.device = file->f_dentry->d_sb->s_dev;
+                            rsbac_target_id.fifo.inode  = file->f_dentry->d_inode->i_ino;
+                            rsbac_target_id.fifo.dentry_p = file->f_dentry;
+                          }
+                        else
+                        if(S_ISREG(file->f_dentry->d_inode->i_mode))
+                          {
+                            rsbac_target = T_FILE;
+                            rsbac_target_id.file.device = file->f_dentry->d_sb->s_dev;
+                            rsbac_target_id.file.inode  = file->f_dentry->d_inode->i_ino;
+                            rsbac_target_id.file.dentry_p = file->f_dentry;
+                          }
+                        else
+                        if(S_ISBLK(file->f_dentry->d_inode->i_mode))
+                          {
+                            rsbac_target = T_DEV;
+                            rsbac_target_id.dev.type = D_block;
+                            rsbac_target_id.dev.major = RSBAC_MAJOR(file->f_dentry->d_inode->i_rdev);
+                            rsbac_target_id.dev.minor = RSBAC_MINOR(file->f_dentry->d_inode->i_rdev);
+                          }
+                        else
+                        if(S_ISCHR(file->f_dentry->d_inode->i_mode))
+                          {
+                            rsbac_target = T_DEV;
+                            rsbac_target_id.dev.type = D_char;
+                            rsbac_target_id.dev.major = RSBAC_MAJOR(file->f_dentry->d_inode->i_rdev);
+                            rsbac_target_id.dev.minor = RSBAC_MINOR(file->f_dentry->d_inode->i_rdev);
+                          }
+                        rsbac_attribute_value.dummy = 0;
+                        if (   (rsbac_target != T_NONE)
+                            && !rsbac_adf_request(R_WRITE,
+                                                  current->pid,
+                                                  rsbac_target,
+                                                  rsbac_target_id,
+                                                  A_none,
+                                                  rsbac_attribute_value)
+                           )
+                          {
+                            ret = -EPERM;
+                          }
+                        else
+                        #endif /* CONFIG_RSBAC_RW */
+
 			if (file->f_op->write)
 				ret = file->f_op->write(file, buf, count, pos);
 			else
@@ -305,6 +499,26 @@
 			if (ret > 0) {
 				fsnotify_modify(file->f_dentry);
 				current->wchar += ret;
+
+	                        /* RSBAC: notify adf of written file etc. */
+	                        #ifdef CONFIG_RSBAC_RW
+	                        if (rsbac_target != T_NONE)
+	                          {
+	                            rsbac_new_target_id.dummy = 0;
+	                            if (rsbac_adf_set_attr(R_WRITE,
+	                                                   current->pid,
+	                                                   rsbac_target,
+	                                                   rsbac_target_id,
+	                                                   T_NONE,
+	                                                   rsbac_new_target_id,
+	                                                   A_none,
+	                                                   rsbac_attribute_value))
+	                              {
+	                                rsbac_printk(KERN_WARNING
+	                                       "vfs_write()[sys_write()]: rsbac_adf_set_attr() returned error\n");
+	                              }
+	                          }
+	                        #endif
 			}
 			current->syscw++;
 		}
@@ -442,6 +656,16 @@
 	io_fn_t fn;
 	iov_fn_t fnv;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+        enum  rsbac_adf_request_t     rsbac_request = R_NONE;
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        struct inode * rsbac_inode;
+        #endif
+
 	/*
 	 * SuS says "The readv() function *may* fail if the iovcnt argument
 	 * was less than or equal to 0, or greater than {IOV_MAX}.  Linux has
@@ -503,6 +727,86 @@
 	if (ret)
 		goto out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_readv_writev() [sys_vread(), sys_vwrite()]: calling ADF\n");
+#endif
+        rsbac_inode = file->f_dentry->d_inode;
+        /* get target type and id clear */
+        #ifdef CONFIG_RSBAC_NET_OBJ_RW
+        if(S_ISSOCK(rsbac_inode->i_mode))
+          {
+            #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+            if(   SOCKET_I(rsbac_inode)->ops
+               && (SOCKET_I(rsbac_inode)->ops->family != AF_UNIX)
+              )
+            #endif
+              {
+                rsbac_target = T_NETOBJ;
+                rsbac_target_id.netobj.sock_p = SOCKET_I(rsbac_inode);
+                rsbac_target_id.netobj.local_addr = NULL;
+                rsbac_target_id.netobj.local_len = 0;
+                rsbac_target_id.netobj.remote_addr = NULL;
+                rsbac_target_id.netobj.remote_len = 0;
+              }
+          }
+        else
+        #endif
+        if(   S_ISFIFO(rsbac_inode->i_mode)
+           /* named FIFO only */
+           && (rsbac_inode->i_sb->s_magic != PIPEFS_MAGIC)
+          )
+          {
+            rsbac_target = T_FIFO;
+            rsbac_target_id.fifo.device = rsbac_inode->i_sb->s_dev;
+            rsbac_target_id.fifo.inode  = rsbac_inode->i_ino;
+            rsbac_target_id.fifo.dentry_p = file->f_dentry;
+          }
+        else
+        if(S_ISREG(rsbac_inode->i_mode))
+          {
+            rsbac_target = T_FILE;
+            rsbac_target_id.file.device = rsbac_inode->i_sb->s_dev;
+            rsbac_target_id.file.inode  = rsbac_inode->i_ino;
+            rsbac_target_id.file.dentry_p = file->f_dentry;
+          }
+        else
+        if(S_ISBLK(rsbac_inode->i_mode))
+          {
+            rsbac_target = T_DEV;
+            rsbac_target_id.dev.type = D_block;
+            rsbac_target_id.dev.major = RSBAC_MAJOR(rsbac_inode->i_rdev);
+            rsbac_target_id.dev.minor = RSBAC_MINOR(rsbac_inode->i_rdev);
+          }
+        else
+        if(S_ISCHR(rsbac_inode->i_mode))
+          {
+            rsbac_target = T_DEV;
+            rsbac_target_id.dev.type = D_char;
+            rsbac_target_id.dev.major = RSBAC_MAJOR(rsbac_inode->i_rdev);
+            rsbac_target_id.dev.minor = RSBAC_MINOR(rsbac_inode->i_rdev);
+          }
+        if(type == READ)
+          rsbac_request = R_READ;
+        else
+          rsbac_request = R_WRITE;
+        rsbac_attribute_value.dummy = 0;
+        if (   (rsbac_target != T_NONE)
+            && !rsbac_adf_request(rsbac_request,
+                                  current->pid,
+                                  rsbac_target,
+                                  rsbac_target_id,
+                                  A_none,
+                                  rsbac_attribute_value)
+           )
+          {
+            ret = -EPERM;
+            goto out;
+          }
+        #endif /* CONFIG_RSBAC_RW */
+
 	fnv = NULL;
 	if (type == READ) {
 		fn = file->f_op->read;
@@ -548,6 +852,29 @@
 		else
 			fsnotify_modify(file->f_dentry);
 	}
+
+        /* RSBAC: notify adf of read or written file etc. */
+        #ifdef CONFIG_RSBAC_RW
+        if (   (ret > 0)
+            && (rsbac_target != T_NONE)
+           )
+          {
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(rsbac_request,
+                                   current->pid,
+                                   rsbac_target,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "do_readv_writev() [sys_vread(), sys_vwrite()]: rsbac_adf_set_attr() returned error\n");
+              }
+          }
+        #endif
+
 	return ret;
 Efault:
 	ret = -EFAULT;
@@ -631,6 +958,16 @@
 	ssize_t retval;
 	int fput_needed_in, fput_needed_out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        enum  rsbac_target_t          rsbac_target2 = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_target2_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	/*
 	 * Get input file, and verify that it is ok..
 	 */
@@ -660,6 +997,81 @@
 	if (retval)
 		goto fput_in;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_sendfile() [sys_sendfile()]: calling ADF\n");
+#endif
+        /* get target type and id clear */
+        #ifdef CONFIG_RSBAC_NET_OBJ_RW
+        if(S_ISSOCK(in_file->f_dentry->d_inode->i_mode))
+          {
+            #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+            if(   SOCKET_I(in_file->f_dentry->d_inode)->ops
+               && (SOCKET_I(in_file->f_dentry->d_inode)->ops->family != AF_UNIX)
+              )
+            #endif
+              {
+                rsbac_target = T_NETOBJ;
+                rsbac_target_id.netobj.sock_p
+                 = SOCKET_I(in_file->f_dentry->d_inode);
+                rsbac_target_id.netobj.local_addr = NULL;
+                rsbac_target_id.netobj.local_len = 0;
+                rsbac_target_id.netobj.remote_addr = NULL;
+                rsbac_target_id.netobj.remote_len = 0;
+              }
+          }
+        else
+        #endif
+        if(   S_ISFIFO(in_file->f_dentry->d_inode->i_mode)
+              /* named FIFO only */
+           && (in_file->f_dentry->d_sb->s_magic != PIPEFS_MAGIC)
+          )
+          {
+            rsbac_target = T_FIFO;
+            rsbac_target_id.fifo.device = in_file->f_dentry->d_sb->s_dev;
+            rsbac_target_id.fifo.inode  = in_file->f_dentry->d_inode->i_ino;
+            rsbac_target_id.fifo.dentry_p = in_file->f_dentry;
+          }
+        else
+        if(S_ISREG(in_file->f_dentry->d_inode->i_mode))
+          {
+            rsbac_target = T_FILE;
+            rsbac_target_id.file.device = in_file->f_dentry->d_sb->s_dev;
+            rsbac_target_id.file.inode  = in_file->f_dentry->d_inode->i_ino;
+            rsbac_target_id.file.dentry_p = in_file->f_dentry;
+          }
+        else
+        if(S_ISBLK(in_file->f_dentry->d_inode->i_mode))
+          {
+            rsbac_target = T_DEV;
+            rsbac_target_id.dev.type = D_block;
+            rsbac_target_id.dev.major = RSBAC_MAJOR(in_file->f_dentry->d_inode->i_rdev);
+            rsbac_target_id.dev.minor = RSBAC_MINOR(in_file->f_dentry->d_inode->i_rdev);
+          }
+        else
+        if(S_ISCHR(in_file->f_dentry->d_inode->i_mode))
+          {
+            rsbac_target = T_DEV;
+            rsbac_target_id.dev.type = D_char;
+            rsbac_target_id.dev.major = RSBAC_MAJOR(in_file->f_dentry->d_inode->i_rdev);
+            rsbac_target_id.dev.minor = RSBAC_MINOR(in_file->f_dentry->d_inode->i_rdev);
+          }
+        rsbac_attribute_value.dummy = 0;
+        if (   (rsbac_target != T_NONE)
+            && !rsbac_adf_request(R_READ,
+                                  current->pid,
+                                  rsbac_target,
+                                  rsbac_target_id,
+                                  A_none,
+                                  rsbac_attribute_value)
+           )
+          {
+            return -EPERM;
+          }
+        #endif /* CONFIG_RSBAC_RW */
+
 	/*
 	 * Get output file, and verify that it is ok..
 	 */
@@ -681,6 +1093,82 @@
 	if (retval)
 		goto fput_out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_RW
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_sendfile() [sys_sendfile()]: calling ADF for outfile\n");
+#endif
+        /* get target type and id clear */
+        #ifdef CONFIG_RSBAC_NET_OBJ_RW
+        if(S_ISSOCK(out_file->f_dentry->d_inode->i_mode))
+          {
+            #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+            if(   SOCKET_I(out_file->f_dentry->d_inode)->ops
+               && (SOCKET_I(out_file->f_dentry->d_inode)->ops->family != AF_UNIX)
+              )
+            #endif
+              {
+                rsbac_target2 = T_NETOBJ;
+                rsbac_target2_id.netobj.sock_p
+                 = SOCKET_I(out_file->f_dentry->d_inode);
+                rsbac_target2_id.netobj.local_addr = NULL;
+                rsbac_target2_id.netobj.local_len = 0;
+                rsbac_target2_id.netobj.remote_addr = NULL;
+                rsbac_target2_id.netobj.remote_len = 0;
+              }
+          }
+        else
+        #endif
+        if(   S_ISFIFO(out_file->f_dentry->d_inode->i_mode)
+              /* named FIFO only */
+           && (out_file->f_dentry->d_sb->s_magic != PIPEFS_MAGIC)
+          )
+          {
+            rsbac_target2 = T_FIFO;
+            rsbac_target2_id.fifo.device = out_file->f_dentry->d_sb->s_dev;
+            rsbac_target2_id.fifo.inode  = out_file->f_dentry->d_inode->i_ino;
+            rsbac_target2_id.fifo.dentry_p = out_file->f_dentry;
+          }
+        else
+        if(S_ISREG(out_file->f_dentry->d_inode->i_mode))
+          {
+            rsbac_target2 = T_FILE;
+            rsbac_target2_id.file.device = out_file->f_dentry->d_sb->s_dev;
+            rsbac_target2_id.file.inode  = out_file->f_dentry->d_inode->i_ino;
+            rsbac_target2_id.file.dentry_p = out_file->f_dentry;
+          }
+        else
+        if(S_ISBLK(out_file->f_dentry->d_inode->i_mode))
+          {
+            rsbac_target2 = T_DEV;
+            rsbac_target2_id.dev.type = D_block;
+            rsbac_target2_id.dev.major = RSBAC_MAJOR(out_file->f_dentry->d_inode->i_rdev);
+            rsbac_target2_id.dev.minor = RSBAC_MINOR(out_file->f_dentry->d_inode->i_rdev);
+          }
+        else
+        if(S_ISCHR(out_file->f_dentry->d_inode->i_mode))
+          {
+            rsbac_target2 = T_DEV;
+            rsbac_target2_id.dev.type = D_char;
+            rsbac_target2_id.dev.major = RSBAC_MAJOR(out_file->f_dentry->d_inode->i_rdev);
+            rsbac_target2_id.dev.minor = RSBAC_MINOR(out_file->f_dentry->d_inode->i_rdev);
+          }
+        rsbac_attribute_value.dummy = 0;
+        if (   (rsbac_target2 != T_NONE)
+            && !rsbac_adf_request(R_WRITE,
+                                  current->pid,
+                                  rsbac_target2,
+                                  rsbac_target2_id,
+                                  A_none,
+                                  rsbac_attribute_value)
+           )
+          {
+            retval = -EPERM;
+            goto fput_out;
+          }
+        #endif /* CONFIG_RSBAC_RW */
+
 	if (!max)
 		max = min(in_inode->i_sb->s_maxbytes, out_inode->i_sb->s_maxbytes);
 
@@ -707,6 +1195,45 @@
 	if (*ppos > max)
 		retval = -EOVERFLOW;
 
+        /* RSBAC: notify adf of read and written files etc. */
+        #ifdef CONFIG_RSBAC_RW
+        if (retval > 0)
+          {
+            if(rsbac_target != T_NONE)
+              {
+                rsbac_new_target_id.dummy = 0;
+                if (rsbac_adf_set_attr(R_READ,
+                                       current->pid,
+                                       rsbac_target,
+                                       rsbac_target_id,
+                                       T_NONE,
+                                       rsbac_new_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    rsbac_printk(KERN_WARNING
+                           "do_sendfile() [sys_sendfile()]: rsbac_adf_set_attr() for in_file returned error\n");
+                  }
+              }
+            if(rsbac_target2 != T_NONE)
+              {
+                rsbac_new_target_id.dummy = 0;
+                if (rsbac_adf_set_attr(R_WRITE,
+                                       current->pid,
+                                       rsbac_target2,
+                                       rsbac_target2_id,
+                                       T_NONE,
+                                       rsbac_new_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    rsbac_printk(KERN_WARNING
+                           "do_sendfile() [sys_sendfile()]: rsbac_adf_set_attr() for out_file returned error\n");
+                  }
+              }
+          }
+        #endif
+
 fput_out:
 	fput_light(out_file, fput_needed_out);
 fput_in:
diff -urN trunk/fs/reiserfs/namei.c 2.6.14-rsbac-1.2.5/fs/reiserfs/namei.c
--- trunk/fs/reiserfs/namei.c	2005-11-11 10:03:49.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/reiserfs/namei.c	2005-11-10 16:16:50.000000000 +0000
@@ -20,6 +20,11 @@
 #include <linux/smp_lock.h>
 #include <linux/quotaops.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_SECDEL
+#include <rsbac/adf.h>
+#endif
+
 #define INC_DIR_INODE_NLINK(i) if (i->i_nlink != 1) { i->i_nlink++; if (i->i_nlink >= REISERFS_LINK_MAX) i->i_nlink=1; }
 #define DEC_DIR_INODE_NLINK(i) if (i->i_nlink != 1) i->i_nlink--;
 
@@ -1000,16 +1005,23 @@
 	}
 
 	inode->i_nlink--;
-
+	
 	/*
 	 * we schedule before doing the add_save_link call, save the link
 	 * count so we don't race
 	 */
 	savelink = inode->i_nlink;
+	
+	/* RSBAC */
+#ifdef CONFIG_RSBAC_SECDEL
+	if(inode->i_nlink == 1)
+		rsbac_sec_del(dentry);
+#endif
 
 	retval =
 	    reiserfs_cut_from_item(&th, &path, &(de.de_entry_key), dir, NULL,
 				   0);
+	
 	if (retval < 0) {
 		inode->i_nlink++;
 		goto end_unlink;
@@ -1378,6 +1390,12 @@
 			journal_end(&th, old_dir->i_sb, jbegin_count);
 			reiserfs_write_unlock(old_dir->i_sb);
 			return -EIO;
+/* RSBAC */
+#ifdef CONFIG_RSBAC_SECDEL
+		} else {
+			if(new_dentry_inode->i_nlink == 1)
+				rsbac_sec_del(new_dentry);
+#endif
 		}
 
 		copy_item_head(&new_entry_ih, get_ih(&new_entry_path));
diff -urN trunk/fs/reiserfs/xattr.c 2.6.14-rsbac-1.2.5/fs/reiserfs/xattr.c
--- trunk/fs/reiserfs/xattr.c	2005-11-11 10:03:49.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/reiserfs/xattr.c	2005-11-10 16:16:50.000000000 +0000
@@ -1257,6 +1257,10 @@
 	.d_compare = xattr_lookup_poison,
 };
 
+#ifdef CONFIG_RSBAC
+struct dentry * rsbac_lookup_one_len(const char * name, struct dentry * base, int len);
+#endif
+
 /* We need to take a copy of the mount flags since things like
  * MS_RDONLY don't get set until *after* we're called.
  * mount_flags != mount_options */
@@ -1284,14 +1288,19 @@
 	/* If we don't have the privroot located yet - go find it */
 	if (reiserfs_xattrs(s) && !REISERFS_SB(s)->priv_root) {
 		struct dentry *dentry;
+#ifdef CONFIG_RSBAC
+		dentry = rsbac_lookup_one_len(PRIVROOT_NAME, s->s_root,
+						strlen (PRIVROOT_NAME));
+#else
 		dentry = lookup_one_len(PRIVROOT_NAME, s->s_root,
-					strlen(PRIVROOT_NAME));
+					strlen (PRIVROOT_NAME));
+#endif
 		if (!IS_ERR(dentry)) {
 			if (!(mount_flags & MS_RDONLY) && !dentry->d_inode) {
 				struct inode *inode = dentry->d_parent->d_inode;
-				down(&inode->i_sem);
-				err = inode->i_op->mkdir(inode, dentry, 0700);
-				up(&inode->i_sem);
+				down (&inode->i_sem);
+				err = inode->i_op->mkdir (inode, dentry, 0700);
+				up (&inode->i_sem);
 				if (err) {
 					dput(dentry);
 					dentry = NULL;
diff -urN trunk/fs/stat.c 2.6.14-rsbac-1.2.5/fs/stat.c
--- trunk/fs/stat.c	2005-11-11 10:03:52.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/stat.c	2005-11-10 16:16:53.000000000 +0000
@@ -19,6 +19,14 @@
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#ifdef CONFIG_RSBAC_NET_OBJ
+#include <net/sock.h>
+#endif
+#endif
+
 void generic_fillattr(struct inode *inode, struct kstat *stat)
 {
 	stat->dev = inode->i_sb->s_dev;
@@ -43,10 +51,71 @@
 	struct inode *inode = dentry->d_inode;
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	retval = security_inode_getattr(mnt, dentry);
 	if (retval)
 		return retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "vfs_getattr() [sys_stat() etc.]: calling ADF\n");
+#endif
+#if 0
+        if(S_ISSOCK(inode->i_mode))
+          {
+            #ifdef CONFIG_RSBAC_NET_OBJ
+            #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+            if(   SOCKET_I(inode)
+               && SOCKET_I(inode)->ops
+               && (SOCKET_I(inode)->ops->family != AF_UNIX)
+              )
+            #endif
+              {
+                rsbac_target = T_NETOBJ;
+                rsbac_target_id.netobj.sock_p = SOCKET_I(inode);
+                rsbac_target_id.netobj.local_addr = NULL;
+                rsbac_target_id.netobj.local_len = 0;
+                rsbac_target_id.netobj.remote_addr = NULL;
+                rsbac_target_id.netobj.remote_len = 0;
+              }
+            #endif
+          }
+        else
+#endif
+          {
+            if (S_ISDIR(inode->i_mode))
+              rsbac_target = T_DIR;
+            else if (S_ISFIFO(inode->i_mode))
+              rsbac_target = T_FIFO;
+            else if (S_ISLNK(inode->i_mode))
+              rsbac_target = T_SYMLINK;
+            else
+              rsbac_target = T_FILE;
+            rsbac_target_id.file.device = dentry->d_sb->s_dev;
+            rsbac_target_id.file.inode  = inode->i_ino;
+            rsbac_target_id.file.dentry_p = dentry;
+          }
+        rsbac_attribute_value.dummy = 0;
+        if(   (rsbac_target != T_NONE)
+           && !rsbac_adf_request(R_GET_STATUS_DATA,
+                                 current->pid,
+                                 rsbac_target,
+                                 rsbac_target_id,
+                                 A_none,
+                                 rsbac_attribute_value)
+          )
+          {
+            return -EPERM;
+          }
+        #endif
+
 	if (inode->i_op->getattr)
 		return inode->i_op->getattr(mnt, dentry, stat);
 
@@ -265,6 +334,12 @@
 	struct nameidata nd;
 	int error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (bufsiz <= 0)
 		return -EINVAL;
 
@@ -276,6 +351,28 @@
 		if (inode->i_op && inode->i_op->readlink) {
 			error = security_inode_readlink(nd.dentry);
 			if (!error) {
+                                /* RSBAC */
+                                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                                if (rsbac_debug_aef)
+                                  rsbac_printk(KERN_DEBUG "sys_readlink(): calling ADF\n");
+#endif
+                                rsbac_target_id.file.device = nd.dentry->d_sb->s_dev;
+                                rsbac_target_id.file.inode  = inode->i_ino;
+                                rsbac_target_id.file.dentry_p = nd.dentry;
+                                rsbac_attribute_value.dummy = 0;
+                                if (!rsbac_adf_request(R_GET_STATUS_DATA,
+                                                       current->pid,
+                                                       T_SYMLINK,
+                                                       rsbac_target_id,
+                                                       A_none,
+                                                       rsbac_attribute_value))
+                                  {
+                                    path_release(&nd);
+                                    return -EPERM;
+                                  }
+                                #endif /* CONFIG_RSBAC */
+
 				touch_atime(nd.mnt, nd.dentry);
 				error = inode->i_op->readlink(nd.dentry, buf, bufsiz);
 			}
diff -urN trunk/fs/sysfs/file.c 2.6.14-rsbac-1.2.5/fs/sysfs/file.c
--- trunk/fs/sysfs/file.c	2005-11-11 10:03:48.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/sysfs/file.c	2005-11-10 16:16:50.000000000 +0000
@@ -9,6 +9,11 @@
 #include <asm/uaccess.h>
 #include <asm/semaphore.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 #include "sysfs.h"
 
 #define to_subsys(k) container_of(k,struct subsystem,kset.kobj)
@@ -253,6 +258,12 @@
 	struct sysfs_ops * ops = NULL;
 	int error = 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!kobj || !attr)
 		goto Einval;
 
@@ -287,6 +298,25 @@
 		if (!(inode->i_mode & S_IWUGO) || !ops->store)
 			goto Eaccess;
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  rsbac_printk(KERN_DEBUG "check_perm() [sysfs_open_file()]: calling ADF\n");
+#endif
+                rsbac_target_id.scd = ST_sysfs;
+                rsbac_attribute_value.dummy = 0;
+                if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                                      current->pid,
+                                      T_SCD,
+                                      rsbac_target_id,
+                                      A_owner,
+                                      rsbac_attribute_value))
+                  {
+                    module_put(attr->owner);
+                    return -EPERM;
+                  }
+                #endif
 	}
 
 	/* File needs read support.
@@ -296,6 +326,28 @@
 	if (file->f_mode & FMODE_READ) {
 		if (!(inode->i_mode & S_IRUGO) || !ops->show)
 			goto Eaccess;
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  rsbac_printk(KERN_DEBUG "check_perm() [sysfs_open_file()]: calling ADF\n");
+#endif
+                rsbac_target_id.scd = ST_sysfs;
+                rsbac_attribute_value.dummy = 0;
+                if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                                      current->pid,
+                                      T_SCD,
+                                      rsbac_target_id,
+                                      A_owner,
+                                      rsbac_attribute_value))
+                  {
+                    module_put(attr->owner);
+	            if (kobj)
+                      kobject_put(kobj);
+                    return -EPERM;
+                  }
+                #endif
 	}
 
 	/* No error? Great, allocate a buffer for the file, and store it
diff -urN trunk/fs/vfat/namei.c 2.6.14-rsbac-1.2.5/fs/vfat/namei.c
--- trunk/fs/vfat/namei.c	2005-11-11 10:03:46.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/vfat/namei.c	2005-11-10 16:16:49.000000000 +0000
@@ -25,6 +25,11 @@
 #include <linux/buffer_head.h>
 #include <linux/namei.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_SECDEL
+#include <rsbac/adf.h>
+#endif
+
 static int vfat_revalidate(struct dentry *dentry, struct nameidata *nd)
 {
 	int ret = 1;
@@ -824,6 +829,11 @@
 	if (err)
 		goto out;
 
+        /* RSBAC vfat_unlink */
+        #ifdef CONFIG_RSBAC_SECDEL
+        rsbac_sec_del(dentry);
+        #endif
+
 	err = fat_remove_entries(dir, &sinfo);	/* and releases bh */
 	if (err)
 		goto out;
@@ -928,6 +938,13 @@
 			if (err)
 				goto out;
 		}
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC_SECDEL
+                else
+                  if(new_inode->i_nlink == 1)
+                    rsbac_sec_del(new_dentry);
+                #endif
+
 		fat_detach(new_inode);
 	} else {
 		err = vfat_add_entry(new_dir, &new_dentry->d_name, is_dir, 0,
diff -urN trunk/fs/xattr.c 2.6.14-rsbac-1.2.5/fs/xattr.c
--- trunk/fs/xattr.c	2005-11-11 10:03:49.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/fs/xattr.c	2005-11-10 16:16:50.000000000 +0000
@@ -19,6 +19,11 @@
 #include <linux/fsnotify.h>
 #include <asm/uaccess.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /*
  * Extended attribute SET operations
  */
@@ -30,6 +35,13 @@
 	void *kvalue = NULL;
 	char kname[XATTR_NAME_MAX + 1];
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (flags & ~(XATTR_CREATE|XATTR_REPLACE))
 		return -EINVAL;
 
@@ -57,6 +69,35 @@
 		goto out;
 	error = -EOPNOTSUPP;
 	if (d->d_inode->i_op && d->d_inode->i_op->setxattr) {
+	        /* RSBAC */
+	        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+	        if (rsbac_debug_aef)
+	          rsbac_printk(KERN_DEBUG "setxattr() [sys_*setxattr()]: calling ADF\n");
+#endif
+	        rsbac_target = T_FILE;
+	        if (S_ISDIR(d->d_inode->i_mode))
+	          rsbac_target = T_DIR;
+	        else if (S_ISFIFO(d->d_inode->i_mode))
+	          rsbac_target = T_FIFO;
+	        else if (S_ISLNK(d->d_inode->i_mode))
+	          rsbac_target = T_SYMLINK;
+	        rsbac_target_id.file.device = d->d_sb->s_dev;
+	        rsbac_target_id.file.inode  = d->d_inode->i_ino;
+	        rsbac_target_id.file.dentry_p = d;
+	        rsbac_attribute_value.dummy = 0;
+	        if (!rsbac_adf_request(R_MODIFY_PERMISSIONS_DATA,
+	                               current->pid,
+	                               rsbac_target,
+	                               rsbac_target_id,
+	                               A_none,
+	                               rsbac_attribute_value))
+		  {
+	            error = -EPERM;
+	            goto out;
+	          }
+	        #endif
+
 		error = d->d_inode->i_op->setxattr(d, kname, kvalue,
 						   size, flags);
 		if (!error) {
@@ -134,6 +175,13 @@
 	void *kvalue = NULL;
 	char kname[XATTR_NAME_MAX + 1];
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = strncpy_from_user(kname, name, sizeof(kname));
 	if (error == 0 || error == sizeof(kname))
 		error = -ERANGE;
@@ -153,6 +201,36 @@
 		goto out;
 	error = -EOPNOTSUPP;
 	if (d->d_inode->i_op && d->d_inode->i_op->getxattr)
+
+	        /* RSBAC */
+	        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+	        if (rsbac_debug_aef)
+	          rsbac_printk(KERN_DEBUG "getxattr() [sys_*getxattr()]: calling ADF\n");
+#endif
+	        rsbac_target = T_FILE;
+	        if (S_ISDIR(d->d_inode->i_mode))
+	          rsbac_target = T_DIR;
+	        else if (S_ISFIFO(d->d_inode->i_mode))
+	          rsbac_target = T_FIFO;
+	        else if (S_ISLNK(d->d_inode->i_mode))
+	          rsbac_target = T_SYMLINK;
+	        rsbac_target_id.file.device = d->d_sb->s_dev;
+	        rsbac_target_id.file.inode  = d->d_inode->i_ino;
+	        rsbac_target_id.file.dentry_p = d;
+	        rsbac_attribute_value.dummy = 0;
+	        if (!rsbac_adf_request(R_GET_PERMISSIONS_DATA,
+	                               current->pid,
+	                               rsbac_target,
+	                               rsbac_target_id,
+	                               A_none,
+	                               rsbac_attribute_value))
+		  {
+	            error = -EPERM;
+	            goto out;
+	          }
+	        #endif
+	if (d->d_inode->i_op && d->d_inode->i_op->getxattr)
 		error = d->d_inode->i_op->getxattr(d, kname, kvalue, size);
 	else if (!strncmp(kname, XATTR_SECURITY_PREFIX,
 			  sizeof XATTR_SECURITY_PREFIX - 1)) {
@@ -227,6 +305,13 @@
 	ssize_t error;
 	char *klist = NULL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (size) {
 		if (size > XATTR_LIST_MAX)
 			size = XATTR_LIST_MAX;
@@ -240,6 +325,36 @@
 		goto out;
 	error = -EOPNOTSUPP;
 	if (d->d_inode->i_op && d->d_inode->i_op->listxattr) {
+
+	        /* RSBAC */
+	        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+	        if (rsbac_debug_aef)
+	          rsbac_printk(KERN_DEBUG "listxattr() [sys_*listxattr()]: calling ADF\n");
+#endif
+	        rsbac_target = T_FILE;
+	        if (S_ISDIR(d->d_inode->i_mode))
+	          rsbac_target = T_DIR;
+	        else if (S_ISFIFO(d->d_inode->i_mode))
+	          rsbac_target = T_FIFO;
+	        else if (S_ISLNK(d->d_inode->i_mode))
+	          rsbac_target = T_SYMLINK;
+	        rsbac_target_id.file.device = d->d_sb->s_dev;
+	        rsbac_target_id.file.inode  = d->d_inode->i_ino;
+	        rsbac_target_id.file.dentry_p = d;
+	        rsbac_attribute_value.dummy = 0;
+	        if (!rsbac_adf_request(R_GET_PERMISSIONS_DATA,
+	                               current->pid,
+	                               rsbac_target,
+	                               rsbac_target_id,
+	                               A_none,
+	                               rsbac_attribute_value))
+		  {
+	            error = -EPERM;
+	            goto out;
+	          }
+	        #endif
+
 		error = d->d_inode->i_op->listxattr(d, klist, size);
 	} else {
 		error = security_inode_listsecurity(d->d_inode, klist, size);
@@ -311,6 +426,13 @@
 	int error;
 	char kname[XATTR_NAME_MAX + 1];
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = strncpy_from_user(kname, name, sizeof(kname));
 	if (error == 0 || error == sizeof(kname))
 		error = -ERANGE;
@@ -322,6 +444,36 @@
 		error = security_inode_removexattr(d, kname);
 		if (error)
 			goto out;
+
+	        /* RSBAC */
+	        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+	        if (rsbac_debug_aef)
+	          rsbac_printk(KERN_DEBUG "removexattr() [sys_*removexattr()]: calling ADF\n");
+#endif
+	        rsbac_target = T_FILE;
+	        if (S_ISDIR(d->d_inode->i_mode))
+	          rsbac_target = T_DIR;
+	        else if (S_ISFIFO(d->d_inode->i_mode))
+	          rsbac_target = T_FIFO;
+	        else if (S_ISLNK(d->d_inode->i_mode))
+	          rsbac_target = T_SYMLINK;
+	        rsbac_target_id.file.device = d->d_sb->s_dev;
+	        rsbac_target_id.file.inode  = d->d_inode->i_ino;
+	        rsbac_target_id.file.dentry_p = d;
+	        rsbac_attribute_value.dummy = 0;
+	        if (!rsbac_adf_request(R_MODIFY_PERMISSIONS_DATA,
+	                               current->pid,
+	                               rsbac_target,
+	                               rsbac_target_id,
+	                               A_none,
+	                               rsbac_attribute_value))
+		  {
+	            error = -EPERM;
+	            goto out;
+	          }
+	        #endif
+
 		down(&d->d_inode->i_sem);
 		error = d->d_inode->i_op->removexattr(d, kname);
 		up(&d->d_inode->i_sem);
diff -urN trunk/include/asm-alpha/unistd.h 2.6.14-rsbac-1.2.5/include/asm-alpha/unistd.h
--- trunk/include/asm-alpha/unistd.h	2005-11-11 10:03:29.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/include/asm-alpha/unistd.h	2005-11-10 16:16:38.000000000 +0000
@@ -317,7 +317,12 @@
 #define __NR_getdents64			377
 #define __NR_gettid			378
 #define __NR_readahead			379
+/* RSBAC - use old sys_security */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac			380
+#else
 /* 380 is unused */
+#endif
 #define __NR_tkill			381
 #define __NR_setxattr			382
 #define __NR_lsetxattr			383
diff -urN trunk/include/asm-arm/unistd.h 2.6.14-rsbac-1.2.5/include/asm-arm/unistd.h
--- trunk/include/asm-arm/unistd.h	2005-11-11 10:03:20.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/include/asm-arm/unistd.h	2005-11-10 16:16:32.000000000 +0000
@@ -248,7 +248,13 @@
 #define __NR_madvise			(__NR_SYSCALL_BASE+220)
 #define __NR_fcntl64			(__NR_SYSCALL_BASE+221)
 					/* 222 for tux */
+/* RSBAC - we use 223, the old sys_security */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac			(__NR_SYSCALL_BASE+223)
+#else
 					/* 223 is unused */
+#endif
+
 #define __NR_gettid			(__NR_SYSCALL_BASE+224)
 #define __NR_readahead			(__NR_SYSCALL_BASE+225)
 #define __NR_setxattr			(__NR_SYSCALL_BASE+226)
diff -urN trunk/include/asm-cris/unistd.h 2.6.14-rsbac-1.2.5/include/asm-cris/unistd.h
--- trunk/include/asm-cris/unistd.h	2005-11-11 10:03:17.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/include/asm-cris/unistd.h	2005-11-10 16:16:30.000000000 +0000
@@ -229,7 +229,12 @@
 #define __NR_madvise		219
 #define __NR_getdents64		220
 #define __NR_fcntl64		221
+/* RSBAC - we use 223, the old sys_security */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac		223
+#else
 /* 223 is unused */
+#endif
 #define __NR_gettid             224
 #define __NR_readahead          225
 #define __NR_setxattr		226
diff -urN trunk/include/asm-i386/unistd.h 2.6.14-rsbac-1.2.5/include/asm-i386/unistd.h
--- trunk/include/asm-i386/unistd.h	2005-11-11 10:03:15.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/include/asm-i386/unistd.h	2005-11-10 16:16:28.000000000 +0000
@@ -300,6 +300,21 @@
 #define __NR_inotify_add_watch	292
 #define __NR_inotify_rm_watch	293
 
+#ifdef CONFIG_RSBAC /* we use old sys_security */
+#define __NR_rsbac		223
+/* special _syscall4 for -fPIC compatibility, arg1 is ignored! */
+#define rsbac_syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
+type name (type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
+{ \
+long __res; \
+__asm__ volatile ("int $0x80" \
+	: "=a" (__res) \
+	: "0" (__NR_##name),"D" ((long)(arg1)),"c" ((long)(arg2)), \
+	  "d" ((long)(arg3)),"S" ((long)(arg4))); \
+__syscall_return(type,__res); \
+} 
+#endif
+
 #define NR_syscalls 294
 
 /*
diff -urN trunk/include/asm-ia64/unistd.h 2.6.14-rsbac-1.2.5/include/asm-ia64/unistd.h
--- trunk/include/asm-ia64/unistd.h	2005-11-11 10:03:09.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/include/asm-ia64/unistd.h	2005-11-10 16:16:24.000000000 +0000
@@ -270,6 +270,11 @@
 #define __NR_inotify_add_watch		1278
 #define __NR_inotify_rm_watch		1279
 
+/* RSBAC - we use 1270 */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac			1270
+#endif
+
 #ifdef __KERNEL__
 
 #include <linux/config.h>
diff -urN trunk/include/asm-m68k/unistd.h 2.6.14-rsbac-1.2.5/include/asm-m68k/unistd.h
--- trunk/include/asm-m68k/unistd.h	2005-11-11 10:03:14.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/include/asm-m68k/unistd.h	2005-11-10 16:16:28.000000000 +0000
@@ -285,7 +285,13 @@
 #define __NR_request_key	280
 #define __NR_keyctl		281
 
+/* RSBAC - we use 300 */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac		300
+#define NR_syscalls		301
+#else
 #define NR_syscalls		282
+#endif
 
 /* user-visible error numbers are in the range -1 - -124: see
    <asm-m68k/errno.h> */
diff -urN trunk/include/asm-m68knommu/unistd.h 2.6.14-rsbac-1.2.5/include/asm-m68knommu/unistd.h
--- trunk/include/asm-m68knommu/unistd.h	2005-11-11 10:03:08.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/include/asm-m68knommu/unistd.h	2005-11-10 16:16:23.000000000 +0000
@@ -286,7 +286,13 @@
 #define __NR_request_key	280
 #define __NR_keyctl		281
  
+/* RSBAC - we use 300 */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac		300
+#define NR_syscalls		301
+#else
 #define NR_syscalls		282
+#endif
 
 /* user-visible error numbers are in the range -1 - -122: see
    <asm-m68k/errno.h> */
diff -urN trunk/include/asm-mips/unistd.h 2.6.14-rsbac-1.2.5/include/asm-mips/unistd.h
--- trunk/include/asm-mips/unistd.h	2005-11-11 10:03:11.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/include/asm-mips/unistd.h	2005-11-10 16:16:25.000000000 +0000
@@ -241,7 +241,12 @@
 #define __NR_madvise			(__NR_Linux + 218)
 #define __NR_getdents64			(__NR_Linux + 219)
 #define __NR_fcntl64			(__NR_Linux + 220)
+/* RSBAC - we use 221, the old sys_security */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac			(__NR_Linux + 221)
+#else
 #define __NR_reserved221		(__NR_Linux + 221)
+#endif
 #define __NR_gettid			(__NR_Linux + 222)
 #define __NR_readahead			(__NR_Linux + 223)
 #define __NR_setxattr			(__NR_Linux + 224)
diff -urN trunk/include/asm-parisc/unistd.h 2.6.14-rsbac-1.2.5/include/asm-parisc/unistd.h
--- trunk/include/asm-parisc/unistd.h	2005-11-11 10:03:13.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/include/asm-parisc/unistd.h	2005-11-10 16:16:27.000000000 +0000
@@ -756,7 +756,13 @@
 #define __NR_get_mempolicy	(__NR_Linux + 261)
 #define __NR_set_mempolicy	(__NR_Linux + 262)
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac		(__NR_Linux + 300)
+#define __NR_Linux_syscalls     301
+#else
 #define __NR_Linux_syscalls     263
+#endif
 
 #define HPUX_GATEWAY_ADDR       0xC0000004
 #define LINUX_GATEWAY_ADDR      0x100
diff -urN trunk/include/asm-ppc/unistd.h 2.6.14-rsbac-1.2.5/include/asm-ppc/unistd.h
--- trunk/include/asm-ppc/unistd.h	2005-11-11 10:03:29.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/include/asm-ppc/unistd.h	2005-11-10 16:16:37.000000000 +0000
@@ -283,6 +283,11 @@
 #define __NR_inotify_add_watch	276
 #define __NR_inotify_rm_watch	277
 
+/* RSBAC - we use 224, the old sys_security */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac		224
+#endif
+
 #define __NR_syscalls		278
 
 #define __NR(n)	#n
diff -urN trunk/include/asm-ppc64/unistd.h 2.6.14-rsbac-1.2.5/include/asm-ppc64/unistd.h
--- trunk/include/asm-ppc64/unistd.h	2005-11-11 10:03:16.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/include/asm-ppc64/unistd.h	2005-11-10 16:16:29.000000000 +0000
@@ -289,6 +289,11 @@
 #define __NR_inotify_add_watch	276
 #define __NR_inotify_rm_watch	277
 
+/* RSBAC - we use 224, the old sys_security */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac		224
+#endif
+
 #define __NR_syscalls		278
 #ifdef __KERNEL__
 #define NR_syscalls	__NR_syscalls
diff -urN trunk/include/asm-s390/unistd.h 2.6.14-rsbac-1.2.5/include/asm-s390/unistd.h
--- trunk/include/asm-s390/unistd.h	2005-11-11 10:03:30.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/include/asm-s390/unistd.h	2005-11-10 16:16:38.000000000 +0000
@@ -280,7 +280,13 @@
 #define __NR_inotify_add_watch	285
 #define __NR_inotify_rm_watch	286
 
+/* RSBAC - we use 300 */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac		300
+#define NR_syscalls 301
+#else
 #define NR_syscalls 287
+#endif
 
 /* 
  * There are some system calls that are not present on 64 bit, some
diff -urN trunk/include/asm-sh/unistd.h 2.6.14-rsbac-1.2.5/include/asm-sh/unistd.h
--- trunk/include/asm-sh/unistd.h	2005-11-11 10:03:19.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/include/asm-sh/unistd.h	2005-11-10 16:16:31.000000000 +0000
@@ -231,7 +231,12 @@
 #define __NR_madvise		219
 #define __NR_getdents64		220
 #define __NR_fcntl64		221
+/* RSBAC - we use 250 */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac		223
+#else
 /* 223 is unused */
+#endif
 #define __NR_gettid		224
 #define __NR_setxattr		226
 #define __NR_lsetxattr		227
diff -urN trunk/include/asm-sparc/unistd.h 2.6.14-rsbac-1.2.5/include/asm-sparc/unistd.h
--- trunk/include/asm-sparc/unistd.h	2005-11-11 10:03:10.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/include/asm-sparc/unistd.h	2005-11-10 16:16:24.000000000 +0000
@@ -180,7 +180,14 @@
 #define __NR_sched_get_affinity 161 /* Linux specific, getfh under SunOS           */
 #define __NR_getdomainname      162 /* SunOS Specific                              */
 #define __NR_setdomainname      163 /* Common                                      */
+
+/* RSBAC - we use 164, which seems to be unused */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac		164
+#else
 /* #define __NR_ni_syscall	164    ENOSYS under SunOS			   */
+#endif
+
 #define __NR_quotactl           165 /* Common                                      */
 #define __NR_set_tid_address    166 /* Linux specific, exportfs under SunOS        */
 #define __NR_mount              167 /* Common                                      */
diff -urN trunk/include/asm-v850/unistd.h 2.6.14-rsbac-1.2.5/include/asm-v850/unistd.h
--- trunk/include/asm-v850/unistd.h	2005-11-11 10:03:18.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/include/asm-v850/unistd.h	2005-11-10 16:16:30.000000000 +0000
@@ -206,6 +206,11 @@
 #define __NR_gettid		201
 #define __NR_tkill		202
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac		230
+#endif
+
 
 /* Syscall protocol:
    Syscall number in r12, args in r6-r9, r13-r14
diff -urN trunk/include/asm-x86_64/ia32_unistd.h 2.6.14-rsbac-1.2.5/include/asm-x86_64/ia32_unistd.h
--- trunk/include/asm-x86_64/ia32_unistd.h	2005-11-11 10:03:16.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/include/asm-x86_64/ia32_unistd.h	2005-11-10 16:16:29.000000000 +0000
@@ -300,6 +300,11 @@
 #define __NR_ia32_inotify_add_watch	292
 #define __NR_ia32_inotify_rm_watch	293
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#define __NR_ia32_rsbac __NR_ia32_security
+#endif
+
 #define IA32_NR_syscalls 294	/* must be > than biggest syscall! */
 
 #endif /* _ASM_X86_64_IA32_UNISTD_H_ */
diff -urN trunk/include/asm-x86_64/smp.h 2.6.14-rsbac-1.2.5/include/asm-x86_64/smp.h
--- trunk/include/asm-x86_64/smp.h	2005-11-11 10:03:16.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/include/asm-x86_64/smp.h	2005-11-10 16:16:29.000000000 +0000
@@ -46,6 +46,8 @@
 extern void lock_ipi_call_lock(void);
 extern void unlock_ipi_call_lock(void);
 extern int smp_num_siblings;
+extern int smp_call_function_single (int cpuid, void (*func) (void *info), void *info,
+				     int retry, int wait);
 extern void smp_send_reschedule(int cpu);
 extern void zap_low_mappings(void);
 void smp_stop_cpu(void);
diff -urN trunk/include/asm-x86_64/unistd.h 2.6.14-rsbac-1.2.5/include/asm-x86_64/unistd.h
--- trunk/include/asm-x86_64/unistd.h	2005-11-11 10:03:16.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/include/asm-x86_64/unistd.h	2005-11-10 16:16:29.000000000 +0000
@@ -428,7 +428,13 @@
 __SYSCALL(__NR_tuxcall, sys_ni_syscall)
 
 #define __NR_security			185
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#define __NR_rsbac			185 /* reserved for security */
+__SYSCALL(__NR_rsbac, sys_rsbac)
+#else
 __SYSCALL(__NR_security, sys_ni_syscall)
+#endif
 
 #define __NR_gettid		186
 __SYSCALL(__NR_gettid, sys_gettid)
diff -urN trunk/include/linux/sched.h 2.6.14-rsbac-1.2.5/include/linux/sched.h
--- trunk/include/linux/sched.h	2005-11-11 10:03:27.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/include/linux/sched.h	2005-11-10 16:16:36.000000000 +0000
@@ -37,6 +37,10 @@
 
 #include <linux/auxvec.h>	/* For AT_VECTOR_SIZE */
 
+#if defined(CONFIG_RSBAC_CAP_LOG_MISSING) || defined(CONFIG_RSBAC_JAIL_LOG_MISSING)
+#include <rsbac/log_cap.h>
+#endif
+
 struct exec_domain;
 
 /*
@@ -1063,6 +1067,10 @@
 		current->flags |= PF_SUPERPRIV;
 		return 1;
 	}
+#if defined(CONFIG_RSBAC_CAP_LOG_MISSING) || defined(CONFIG_RSBAC_JAIL_LOG_MISSING)
+	else
+		rsbac_log_missing_cap(cap);
+#endif
 	return 0;
 }
 #endif
diff -urN trunk/init/do_mounts.c 2.6.14-rsbac-1.2.5/init/do_mounts.c
--- trunk/init/do_mounts.c	2005-11-11 10:03:42.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/init/do_mounts.c	2005-11-10 16:16:48.000000000 +0000
@@ -15,6 +15,15 @@
 
 #include "do_mounts.h"
 
+/* RSBAC: including rsbac_init declaration */
+#ifdef CONFIG_RSBAC
+#include <rsbac/aci.h>
+#include <rsbac/debug.h>
+#ifdef CONFIG_BLK_DEV_INITRD
+#include <linux/initrd.h>
+#endif
+#endif
+
 extern int get_filesystem_list(char * buf);
 
 int __initdata rd_doload;	/* 1 = load RAM disk, 0 = don't load */
@@ -423,6 +432,14 @@
 	umount_devfs("/dev");
 	sys_mount(".", "/", NULL, MS_MOVE, NULL);
 	sys_chroot(".");
+
+        /* RSBAC: OK, most stuff initialized and root mounted: Init RSBAC. */
+#ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_INIT_DELAY
+        if(rsbac_no_delay_init)
+#endif
+        rsbac_init(ROOT_DEV);
+#endif
 	security_sb_post_mountroot();
 	mount_devfs_fs ();
 }
diff -urN trunk/ipc/msg.c 2.6.14-rsbac-1.2.5/ipc/msg.c
--- trunk/ipc/msg.c	2005-11-11 10:03:59.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/ipc/msg.c	2005-11-10 16:16:58.000000000 +0000
@@ -31,6 +31,11 @@
 #include <asm/uaccess.h>
 #include "util.h"
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /* sysctl: */
 int msg_ctlmax = MSGMAX;
 int msg_ctlmnb = MSGMNB;
@@ -93,6 +98,13 @@
 	int retval;
 	struct msg_queue *msq;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	msq  = ipc_rcu_alloc(sizeof(*msq));
 	if (!msq) 
 		return -ENOMEM;
@@ -100,6 +112,26 @@
 	msq->q_perm.mode = (msgflg & S_IRWXUGO);
 	msq->q_perm.key = key;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "newque() [sys_msgget()]: calling ADF\n");
+#endif
+        rsbac_target_id.ipc.type = I_msg;
+        rsbac_target_id.ipc.id.id_nr = 0;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_CREATE,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            ipc_rcu_putref(msq);
+            return -EPERM;
+          }
+        #endif
+
 	msq->q_perm.security = NULL;
 	retval = security_msg_queue_alloc(msq);
 	if (retval) {
@@ -123,6 +155,26 @@
 	INIT_LIST_HEAD(&msq->q_messages);
 	INIT_LIST_HEAD(&msq->q_receivers);
 	INIT_LIST_HEAD(&msq->q_senders);
+
+        /* RSBAC: notify ADF of new message queue */
+        #ifdef CONFIG_RSBAC
+        rsbac_target_id.ipc.type = I_msg;
+        rsbac_target_id.ipc.id.id_nr = id;
+        rsbac_new_target_id.dummy = 0;
+        if (rsbac_adf_set_attr(R_CREATE,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               T_NONE,
+                               rsbac_new_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "newque() [sys_msgget()]: rsbac_adf_set_attr() returned error");
+          }
+        #endif
+
 	msg_unlock(msq);
 
 	return msq->q_id;
@@ -333,6 +385,13 @@
 	struct msq_setbuf setbuf;
 	struct kern_ipc_perm *ipcp;
 	
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (msqid < 0 || cmd < 0)
 		return -EINVAL;
 
@@ -464,6 +523,67 @@
 		if (setbuf.qbytes > msg_ctlmnb && !capable(CAP_SYS_RESOURCE))
 			goto out_unlock_up;
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                rsbac_target_id.ipc.type = I_msg;
+                rsbac_target_id.ipc.id.id_nr = msqid;
+                if (ipcp->uid != setbuf.uid)
+                  {
+#ifdef CONFIG_RSBAC_DEBUG
+                    if (rsbac_debug_aef)
+                      rsbac_printk(KERN_DEBUG "sys_msgctl(): calling ADF\n");
+#endif
+                    rsbac_attribute_value.owner = setbuf.uid;
+                    if (!rsbac_adf_request(R_CHANGE_OWNER,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           A_owner,
+                                           rsbac_attribute_value))
+                      {
+                        err = -EPERM;
+                        goto out_unlock_up;
+                      }
+                  }
+                if (ipcp->gid != setbuf.gid)
+                  {
+#ifdef CONFIG_RSBAC_DEBUG
+                    if (rsbac_debug_aef)
+                      rsbac_printk(KERN_DEBUG "sys_msgctl(): calling ADF\n");
+#endif
+                    rsbac_attribute_value.group = setbuf.gid;
+                    if (!rsbac_adf_request(R_CHANGE_GROUP,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           A_group,
+                                           rsbac_attribute_value))
+                      {
+                        err = -EPERM;
+                        goto out_unlock_up;
+                      }
+                  }
+                if (ipcp->mode != ((ipcp->mode & ~S_IRWXUGO) | 
+                                  (S_IRWXUGO & setbuf.mode)) )
+                  {
+#ifdef CONFIG_RSBAC_DEBUG
+                    if (rsbac_debug_aef)
+                      rsbac_printk(KERN_DEBUG "sys_msgctl(): calling ADF\n");
+#endif
+                    rsbac_attribute_value.mode = (S_IRWXUGO & setbuf.mode);
+                    if (!rsbac_adf_request(R_ALTER,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           A_mode,
+                                           rsbac_attribute_value))
+                      {
+                        err = -EPERM;
+                        goto out_unlock_up;
+                      }
+                  }
+                #endif
+
 		msq->q_qbytes = setbuf.qbytes;
 
 		ipcp->uid = setbuf.uid;
@@ -483,7 +603,46 @@
 		break;
 	}
 	case IPC_RMID:
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                rsbac_target_id.ipc.type = I_msg;
+                rsbac_target_id.ipc.id.id_nr = msqid;
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  printk(KERN_DEBUG "sys_msgctl(): calling ADF\n");
+#endif
+                rsbac_attribute_value.dummy = 0;
+                if (!rsbac_adf_request(R_DELETE,
+                                       current->pid,
+                                       T_IPC,
+                                       rsbac_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    err = -EPERM;
+                    goto out_up;
+                  }
+                #endif
+
 		freeque (msq, msqid); 
+
+                /* RSBAC: notify ADF of deleted message queue */
+                #ifdef CONFIG_RSBAC
+                rsbac_new_target_id.dummy = 0;
+                if (rsbac_adf_set_attr(R_DELETE,
+                                       current->pid,
+                                       T_IPC,
+                                       rsbac_target_id,
+                                       T_NONE,
+                                       rsbac_new_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    rsbac_printk(KERN_WARNING
+                           "sys_msgctl(): rsbac_adf_set_attr() returned error");
+                  }
+                #endif
+
 		break;
 	}
 	err = 0;
@@ -558,6 +717,13 @@
 	long mtype;
 	int err;
 	
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (msgsz > msg_ctlmax || (long) msgsz < 0 || msqid < 0)
 		return -EINVAL;
 	if (get_user(mtype, &msgp->mtype))
@@ -565,6 +731,25 @@
 	if (mtype < 1)
 		return -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_msgsnd(): calling ADF\n");
+#endif
+        rsbac_target_id.ipc.type   = I_msg;
+        rsbac_target_id.ipc.id.id_nr  = msqid;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_APPEND_OPEN,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	msg = load_msg(msgp->mtext, msgsz);
 	if(IS_ERR(msg))
 		return PTR_ERR(msg);
@@ -633,12 +818,55 @@
 		atomic_inc(&msg_hdrs);
 	}
 	
+        /* RSBAC: notify ADF of opened ipc */
+        #ifdef CONFIG_RSBAC
+        rsbac_new_target_id.dummy = 0;
+        if (rsbac_adf_set_attr(R_APPEND_OPEN,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               T_NONE,
+                               rsbac_new_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "sys_msgsnd(): rsbac_adf_set_attr() returned error");
+          }
+        #endif
+
 	err = 0;
 	msg = NULL;
 
 out_unlock_free:
 	msg_unlock(msq);
 out_free:
+        /* RSBAC: notify ADF of closed ipc and set attributes */
+        #ifdef CONFIG_RSBAC
+        if (!rsbac_adf_request(R_CLOSE,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "sys_msgsnd(): rsbac_adf_request() for CLOSE returned NOT_GRANTED");
+          }
+        if (rsbac_adf_set_attr(R_CLOSE,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               T_NONE,
+                               rsbac_new_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            printk(KERN_WARNING
+                   "sys_msgsnd(): rsbac_adf_set_attr() for CLOSE returned error");
+          }
+        #endif
+
 	if(msg!=NULL)
 		free_msg(msg);
 	return err;
@@ -670,10 +898,37 @@
 	struct msg_msg *msg;
 	int mode;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (msqid < 0 || (long) msgsz < 0)
 		return -EINVAL;
 	mode = convert_mode(&msgtyp,msgflg);
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sys_msgrcv(): calling ADF\n");
+#endif
+        rsbac_target_id.ipc.type   = I_msg;
+        rsbac_target_id.ipc.id.id_nr  = msqid;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_READ_OPEN,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	msq = msg_lock(msqid);
 	if(msq==NULL)
 		return -EINVAL;
@@ -714,6 +969,23 @@
 				msg = ERR_PTR(-E2BIG);
 				goto out_unlock;
 			}
+	                /* RSBAC: notify ADF of opened ipc */
+	                #ifdef CONFIG_RSBAC
+	                rsbac_new_target_id.dummy = 0;
+	                if (rsbac_adf_set_attr(R_READ_OPEN,
+	                                       current->pid,
+	                                       T_IPC,
+	                                       rsbac_target_id,
+	                                       T_NONE,
+	                                       rsbac_new_target_id,
+	                                       A_none,
+	                                       rsbac_attribute_value))
+	                  {
+	                    rsbac_printk(KERN_WARNING
+	                           "sys_msgrcv(): rsbac_adf_set_attr() returned error");
+	                  }
+	                #endif
+
 			list_del(&msg->m_list);
 			msq->q_qnum--;
 			msq->q_rtime = get_seconds();
@@ -806,6 +1078,33 @@
 		    msgsz = -EFAULT;
 	}
 	free_msg(msg);
+
+        /* RSBAC: notify ADF of closed ipc */
+        #ifdef CONFIG_RSBAC
+        if(!rsbac_adf_request(R_CLOSE,
+                              current->pid,
+                              T_IPC,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "sys_msgrcv(): rsbac_adf_request() for CLOSE returned NOT_GRANTED");
+          }
+        if(rsbac_adf_set_attr(R_CLOSE,
+                              current->pid,
+                              T_IPC,
+                              rsbac_target_id,
+                              T_NONE,
+                              rsbac_new_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "sys_msgrcv(): rsbac_adf_set_attr() for CLOSE returned error");
+          }
+        #endif
+
 	return msgsz;
 }
 
diff -urN trunk/ipc/sem.c 2.6.14-rsbac-1.2.5/ipc/sem.c
--- trunk/ipc/sem.c	2005-11-11 10:03:59.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/ipc/sem.c	2005-11-10 16:16:58.000000000 +0000
@@ -77,6 +77,10 @@
 #include <asm/uaccess.h>
 #include "util.h"
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_IPC_SEM
+#include <rsbac/adf.h>
+#endif
 
 #define sem_lock(id)	((struct sem_array*)ipc_lock(&sem_ids,id))
 #define sem_unlock(sma)	ipc_unlock(&(sma)->sem_perm)
@@ -164,6 +168,13 @@
 	struct sem_array *sma;
 	int size;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_IPC_SEM
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!nsems)
 		return -EINVAL;
 	if (used_sems + nsems > sc_semmns)
@@ -179,6 +190,26 @@
 	sma->sem_perm.mode = (semflg & S_IRWXUGO);
 	sma->sem_perm.key = key;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_IPC_SEM
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "newary() [sys_semget()]: calling ADF\n");
+#endif
+        rsbac_target_id.ipc.type = I_sem;
+        rsbac_target_id.ipc.id.id_nr = 0;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_CREATE,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            ipc_rcu_putref(sma);
+            return -EPERM;
+          }
+        #endif
+
 	sma->sem_perm.security = NULL;
 	retval = security_sem_alloc(sma);
 	if (retval) {
@@ -203,6 +234,24 @@
 	sma->sem_ctime = get_seconds();
 	sem_unlock(sma);
 
+        /* RSBAC: notify ADF of new shm */
+        #ifdef CONFIG_RSBAC_IPC_SEM
+        rsbac_target_id.ipc.id.id_nr = id;
+        rsbac_new_target_id.dummy = 0;
+        if (rsbac_adf_set_attr(R_CREATE,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               T_NONE,
+                               rsbac_new_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "newary() [sys_semget()]: rsbac_adf_set_attr() returned error");
+          }
+        #endif
+
 	return sma->sem_id;
 }
 
@@ -587,6 +636,13 @@
 	ushort* sem_io = fast_sem_io;
 	int nsems;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_IPC_SEM
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	sma = sem_lock(semid);
 	if(sma==NULL)
 		return -EINVAL;
@@ -633,12 +689,54 @@
 			}
 		}
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC_IPC_SEM
+                rsbac_target_id.ipc.type = I_sem;
+                rsbac_target_id.ipc.id.id_nr = semid;
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "semctl_main() [sys_semctl()]: calling ADF\n");
+#endif
+                rsbac_attribute_value.dummy = 0;
+                if (!rsbac_adf_request(R_READ,
+                                       current->pid,
+                                       T_IPC,
+                                       rsbac_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    err = -EPERM;
+                    sem_unlock(sma);
+                    goto out_free;
+                  }
+                #endif
+
 		for (i = 0; i < sma->sem_nsems; i++)
 			sem_io[i] = sma->sem_base[i].semval;
 		sem_unlock(sma);
 		err = 0;
 		if(copy_to_user(array, sem_io, nsems*sizeof(ushort)))
 			err = -EFAULT;
+
+                /* RSBAC: notify ADF of read sem */
+                #ifdef CONFIG_RSBAC_IPC_SEM
+                if(!err)
+                  {
+                    rsbac_new_target_id.dummy = 0;
+                    if (rsbac_adf_set_attr(R_READ,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           T_NONE,
+                                           rsbac_new_target_id,
+                                           A_none,
+                                           rsbac_attribute_value))
+                      {
+                        rsbac_printk(KERN_WARNING
+                               "semctl_main() [sys_semctl()]: rsbac_adf_set_attr() returned error");
+                      }
+                  }
+                #endif
+
 		goto out_free;
 	}
 	case SETALL:
@@ -667,6 +765,26 @@
 			goto out_free;
 		}
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC_IPC_SEM
+                rsbac_target_id.ipc.type = I_sem;
+                rsbac_target_id.ipc.id.id_nr = semid;
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "semctl_main() [sys_semctl()]: calling ADF\n");
+#endif
+                rsbac_attribute_value.dummy = 0;
+                if (!rsbac_adf_request(R_WRITE,
+                                       current->pid,
+                                       T_IPC,
+                                       rsbac_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    err = -EPERM;
+                    goto out_free;
+                  }
+                #endif
+
 		for (i = 0; i < nsems; i++) {
 			if (sem_io[i] > SEMVMX) {
 				ipc_lock_by_ptr(&sma->sem_perm);
@@ -690,6 +808,24 @@
 			for (i = 0; i < nsems; i++)
 				un->semadj[i] = 0;
 		sma->sem_ctime = get_seconds();
+
+                /* RSBAC: notify ADF of written sem */
+                #ifdef CONFIG_RSBAC_IPC_SEM
+                rsbac_new_target_id.dummy = 0;
+                if (rsbac_adf_set_attr(R_WRITE,
+                                       current->pid,
+                                       T_IPC,
+                                       rsbac_target_id,
+                                       T_NONE,
+                                       rsbac_new_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    rsbac_printk(KERN_WARNING
+                           "semctl_main() [sys_semctl()]: rsbac_adf_set_attr() returned error");
+                  }
+                #endif
+
 		/* maybe some queued-up processes were waiting for this */
 		update_queue(sma);
 		err = 0;
@@ -737,6 +873,26 @@
 		if (val > SEMVMX || val < 0)
 			goto out_unlock;
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC_IPC_SEM
+                rsbac_target_id.ipc.type = I_sem;
+                rsbac_target_id.ipc.id.id_nr = semid;
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "semctl_main() [sys_semctl()]: calling ADF\n");
+#endif
+                rsbac_attribute_value.dummy = 0;
+                if (!rsbac_adf_request(R_WRITE,
+                                       current->pid,
+                                       T_IPC,
+                                       rsbac_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    err = -EPERM;
+                    goto out_free;
+                  }
+                #endif
+
 		for (un = sma->undo; un; un = un->id_next)
 			un->semadj[semnum] = 0;
 		curr->semval = val;
@@ -803,6 +959,13 @@
 	struct sem_setbuf setbuf;
 	struct kern_ipc_perm *ipcp;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_IPC_SEM
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if(cmd == IPC_SET) {
 		if(copy_semid_from_user (&setbuf, arg.buf, version))
 			return -EFAULT;
@@ -831,10 +994,109 @@
 
 	switch(cmd){
 	case IPC_RMID:
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC_IPC_SEM
+                rsbac_target_id.ipc.type = I_sem;
+                rsbac_target_id.ipc.id.id_nr = semid;
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "semctl_down() [sys_semctl()]: calling ADF\n");
+#endif
+                rsbac_attribute_value.dummy = 0;
+                if (!rsbac_adf_request(R_DELETE,
+                                       current->pid,
+                                       T_IPC,
+                                       rsbac_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    err = -EPERM;
+                    goto out_unlock;
+                  }
+                #endif
+
 		freeary(sma, semid);
+
+                /* RSBAC: notify ADF of deleted sem */
+                #ifdef CONFIG_RSBAC_IPC_SEM
+                rsbac_new_target_id.dummy = 0;
+                if (rsbac_adf_set_attr(R_DELETE,
+                                       current->pid,
+                                       T_IPC,
+                                       rsbac_target_id,
+                                       T_NONE,
+                                       rsbac_new_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    rsbac_printk(KERN_WARNING
+                           "semctl_down() [sys_semctl()]: rsbac_adf_set_attr() returned error");
+                  }
+                #endif
+
 		err = 0;
 		break;
 	case IPC_SET:
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC_IPC_SEM
+                rsbac_target_id.ipc.type = I_sem;
+                rsbac_target_id.ipc.id.id_nr = semid;
+                if (ipcp->uid != setbuf.uid)
+                  {
+#ifdef CONFIG_RSBAC_DEBUG
+                    if (rsbac_debug_aef)
+                      rsbac_printk(KERN_DEBUG "sys_shmctl(): calling ADF\n");
+#endif
+                    rsbac_attribute_value.owner = setbuf.uid;
+                    if (!rsbac_adf_request(R_CHANGE_OWNER,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           A_owner,
+                                           rsbac_attribute_value))
+                      {
+                        err = -EPERM;
+                        goto out_unlock;
+                      }
+                  }
+                if (ipcp->gid != setbuf.gid)
+                  {
+#ifdef CONFIG_RSBAC_DEBUG
+                    if (rsbac_debug_aef)
+                      rsbac_printk(KERN_DEBUG "sys_shmctl(): calling ADF\n");
+#endif
+                    rsbac_attribute_value.group = setbuf.gid;
+                    if (!rsbac_adf_request(R_CHANGE_GROUP,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           A_group,
+                                           rsbac_attribute_value))
+                      {
+                        err = -EPERM;
+                        goto out_unlock;
+                      }
+                  }
+                if (ipcp->mode != ((ipcp->mode & ~S_IRWXUGO) | 
+                                           (S_IRWXUGO & setbuf.mode)) )
+                  {
+#ifdef CONFIG_RSBAC_DEBUG
+                    if (rsbac_debug_aef)
+                      rsbac_printk(KERN_DEBUG "sys_shmctl(): calling ADF\n");
+#endif
+                    rsbac_attribute_value.mode = (S_IRWXUGO & setbuf.mode);
+                    if (!rsbac_adf_request(R_ALTER,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           A_mode,
+                                           rsbac_attribute_value))
+                      {
+                        err = -EPERM;
+                        goto out_unlock;
+                      }
+                  }
+                #endif
+
 		ipcp->uid = setbuf.uid;
 		ipcp->gid = setbuf.gid;
 		ipcp->mode = (ipcp->mode & ~S_IRWXUGO)
diff -urN trunk/ipc/shm.c 2.6.14-rsbac-1.2.5/ipc/shm.c
--- trunk/ipc/shm.c	2005-11-11 10:03:59.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/ipc/shm.c	2005-11-10 16:16:58.000000000 +0000
@@ -32,6 +32,12 @@
 
 #include <asm/uaccess.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#include <rsbac/aci.h>
+#endif
+
 #include "util.h"
 
 #define shm_flags	shm_perm.mode
@@ -115,6 +121,11 @@
  */
 static void shm_destroy (struct shmid_kernel *shp)
 {
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        #endif
+
 	shm_tot -= (shp->shm_segsz + PAGE_SIZE - 1) >> PAGE_SHIFT;
 	shm_rmid (shp->id);
 	shm_unlock(shp);
@@ -125,6 +136,18 @@
 						shp->mlock_user);
 	fput (shp->shm_file);
 	security_shm_free(shp);
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "shm_destroy: calling ACI remove_target()\n");
+#endif
+        rsbac_target_id.ipc.type   = I_shm;
+        rsbac_target_id.ipc.id.id_nr  = shp->id;
+        rsbac_remove_target(T_IPC, rsbac_target_id);
+        #endif
+
 	ipc_rcu_putref(shp);
 }
 
@@ -140,6 +163,32 @@
 	int id = file->f_dentry->d_inode->i_ino;
 	struct shmid_kernel *shp;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "shm_close() [sys_shmdt() et al.]: calling ADF\n");
+#endif
+        rsbac_target_id.ipc.type   = I_shm;
+        rsbac_target_id.ipc.id.id_nr  = id;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_CLOSE,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "shm_close() [sys_shmdt() et al.]: rsbac_adf_request() for CLOSE returned NOT_GRANTED\n");
+          }
+        #endif
+
 	down (&shm_ids.sem);
 	/* remove from the list of attaches of the shm segment */
 	if(!(shp = shm_lock(id)))
@@ -186,6 +235,13 @@
 	char name[13];
 	int id;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (size < SHMMIN || size > shm_ctlmax)
 		return -EINVAL;
 
@@ -207,6 +263,27 @@
 		return error;
 	}
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "newseg() [sys_shmget()]: calling ADF\n");
+#endif
+        rsbac_target_id.ipc.type = I_shm;
+        rsbac_target_id.ipc.id.id_nr = 0;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_CREATE,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            ipc_rcu_putref(shp);
+            return -EPERM;
+          }
+        #endif
+
 	if (shmflg & SHM_HUGETLB) {
 		/* hugetlb_zero_setup takes care of mlock user accounting */
 		file = hugetlb_zero_setup(size);
@@ -239,6 +316,23 @@
 		file->f_op = &shm_file_operations;
 	shm_tot += numpages;
 	shm_unlock(shp);
+        #ifdef CONFIG_RSBAC
+        rsbac_target_id.ipc.id.id_nr = shp->id;
+        rsbac_new_target_id.ipc.type = I_shm;
+        rsbac_new_target_id.ipc.id.id_nr = shp->id;
+        if (rsbac_adf_set_attr(R_CREATE,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               T_IPC,
+                               rsbac_new_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "newseg() [sys_shmget()]: rsbac_adf_set_attr() returned error");
+          }
+        #endif
 	return shp->id;
 
 no_id:
@@ -412,6 +506,13 @@
 	struct shmid_kernel *shp;
 	int err, version;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (cmd < 0 || shmid < 0) {
 		err = -EINVAL;
 		goto out;
@@ -587,6 +688,26 @@
 		if (err)
 			goto out_unlock_up;
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                rsbac_target_id.ipc.type = I_shm;
+                rsbac_target_id.ipc.id.id_nr = shmid;
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_shmctl(): calling ADF\n");
+#endif
+                rsbac_attribute_value.dummy = 0;
+                if (!rsbac_adf_request(R_DELETE,
+                                       current->pid,
+                                       T_IPC,
+                                       rsbac_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    err = -EPERM;
+                    goto out_unlock_up;
+                  }
+                #endif
+
 		if (shp->shm_nattch){
 			shp->shm_flags |= SHM_DEST;
 			/* Do not find it any more */
@@ -594,6 +715,24 @@
 			shm_unlock(shp);
 		} else
 			shm_destroy (shp);
+
+                /* RSBAC: notify ADF of deleted shm */
+                #ifdef CONFIG_RSBAC
+                rsbac_new_target_id.dummy = 0;
+                if (rsbac_adf_set_attr(R_DELETE,
+                                       current->pid,
+                                       T_IPC,
+                                       rsbac_target_id,
+                                       T_NONE,
+                                       rsbac_new_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    rsbac_printk(KERN_WARNING
+                           "sys_shmctl(): rsbac_adf_set_attr() returned error");
+                  }
+                #endif
+
 		up(&shm_ids.sem);
 		goto out;
 	}
@@ -625,6 +764,67 @@
 		if (err)
 			goto out_unlock_up;
 		
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                rsbac_target_id.ipc.type = I_shm;
+                rsbac_target_id.ipc.id.id_nr = shmid;
+                if (shp->shm_perm.uid != setbuf.uid)
+                  {
+#ifdef CONFIG_RSBAC_DEBUG
+                    if (rsbac_debug_aef)
+                      rsbac_printk(KERN_DEBUG "sys_shmctl(): calling ADF\n");
+#endif
+                    rsbac_attribute_value.owner = setbuf.uid;
+                    if (!rsbac_adf_request(R_CHANGE_OWNER,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           A_owner,
+                                           rsbac_attribute_value))
+                      {
+                        err = -EPERM;
+                        goto out_unlock_up;
+                      }
+                  }
+                if (shp->shm_perm.gid != setbuf.gid)
+                  {
+#ifdef CONFIG_RSBAC_DEBUG
+                    if (rsbac_debug_aef)
+                      rsbac_printk(KERN_DEBUG "sys_shmctl(): calling ADF\n");
+#endif
+                    rsbac_attribute_value.group = setbuf.gid;
+                    if (!rsbac_adf_request(R_CHANGE_GROUP,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           A_group,
+                                           rsbac_attribute_value))
+                      {
+                        err = -EPERM;
+                        goto out_unlock_up;
+                      }
+                  }
+                if (shp->shm_perm.mode != ((shp->shm_perm.mode & ~S_IRWXUGO) | 
+                                           (S_IRWXUGO & setbuf.mode)) )
+                  {
+#ifdef CONFIG_RSBAC_DEBUG
+                    if (rsbac_debug_aef)
+                      rsbac_printk(KERN_DEBUG "sys_shmctl(): calling ADF\n");
+#endif
+                    rsbac_attribute_value.mode = (S_IRWXUGO & setbuf.mode);
+                    if (!rsbac_adf_request(R_ALTER,
+                                           current->pid,
+                                           T_IPC,
+                                           rsbac_target_id,
+                                           A_mode,
+                                           rsbac_attribute_value))
+                      {
+                        err = -EPERM;
+                        goto out_unlock_up;
+                      }
+                  }
+                #endif
+
 		shp->shm_perm.uid = setbuf.uid;
 		shp->shm_perm.gid = setbuf.gid;
 		shp->shm_flags = (shp->shm_flags & ~S_IRWXUGO)
@@ -670,6 +870,14 @@
 	int acc_mode;
 	void *user_addr;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_adf_request_t     rsbac_request = R_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (shmid < 0) {
 		err = -EINVAL;
 		goto out;
@@ -731,6 +939,30 @@
 		return err;
 	}
 		
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) printk(KERN_DEBUG "sys_shmat(): calling ADF\n");
+#endif
+        if ((shmflg & SHM_RDONLY))
+          rsbac_request = R_READ_OPEN;
+        else
+          rsbac_request = R_READ_WRITE_OPEN;
+        rsbac_target_id.ipc.type   = I_shm;
+        rsbac_target_id.ipc.id.id_nr  = shp->id;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(rsbac_request,
+                               current->pid,
+                               T_IPC,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            shm_unlock(shp);
+            return -EPERM;
+          }
+        #endif
+
 	file = shp->shm_file;
 	size = i_size_read(file->f_dentry->d_inode);
 	shp->shm_nattch++;
@@ -771,6 +1003,26 @@
 	if (IS_ERR(user_addr))
 		err = PTR_ERR(user_addr);
 out:
+        /* RSBAC: notify ADF of attached shm */
+        #ifdef CONFIG_RSBAC
+        if(!err)
+          {
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(rsbac_request,
+                                   current->pid,
+                                   T_IPC,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sys_shmat(): rsbac_adf_set_attr() returned error");
+              }
+          }
+        #endif
+
 	return err;
 }
 
diff -urN trunk/kernel/capability.c 2.6.14-rsbac-1.2.5/kernel/capability.c
--- trunk/kernel/capability.c	2005-11-11 10:03:08.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/kernel/capability.c	2005-11-10 16:16:23.000000000 +0000
@@ -13,6 +13,11 @@
 #include <linux/syscalls.h>
 #include <asm/uaccess.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 unsigned securebits = SECUREBITS_DEFAULT; /* systemwide security settings */
 kernel_cap_t cap_bset = CAP_INIT_EFF_SET;
 
@@ -23,7 +28,13 @@
  * This lock protects task->cap_* for all tasks including current.
  * Locking rule: acquire this prior to tasklist_lock.
  */
+
+/* RSBAC: Setting caps from outside, need the lock */
+#ifdef CONFIG_RSBAC_CAP
+DEFINE_SPINLOCK(task_capability_lock);
+#else
 static DEFINE_SPINLOCK(task_capability_lock);
+#endif
 
 /*
  * For sys_getproccap() and sys_setproccap(), any of the three
@@ -48,6 +59,12 @@
      task_t *target;
      struct __user_cap_data_struct data;
 
+     /* RSBAC */
+     #ifdef CONFIG_RSBAC
+     union rsbac_target_id_t       rsbac_target_id;
+     union rsbac_attribute_value_t rsbac_attribute_value;
+     #endif
+
      if (get_user(version, &header->version))
 	     return -EFAULT;
 
@@ -63,6 +80,11 @@
      if (pid < 0) 
              return -EINVAL;
 
+     /* RSBAC */
+     #ifdef CONFIG_RSBAC
+     rsbac_attribute_value.kernel_thread = FALSE;
+     #endif
+
      spin_lock(&task_capability_lock);
      read_lock(&tasklist_lock); 
 
@@ -72,6 +94,11 @@
 	          ret = -ESRCH;
 	          goto out;
 	     }
+             /* RSBAC */
+             #ifdef CONFIG_RSBAC
+             if(!target->mm)
+               rsbac_attribute_value.kernel_thread = TRUE;
+             #endif
      } else
 	     target = current;
 
@@ -81,6 +108,27 @@
      read_unlock(&tasklist_lock); 
      spin_unlock(&task_capability_lock);
 
+     /* RSBAC */
+     #ifdef CONFIG_RSBAC
+     if(!ret)
+       {
+#ifdef CONFIG_RSBAC_DEBUG
+         if (rsbac_debug_aef)
+           rsbac_printk(KERN_DEBUG "sys_capget(): calling ADF\n");
+#endif
+         rsbac_target_id.process = pid;
+         if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_kernel_thread,
+                               rsbac_attribute_value))
+           {
+             ret = -EPERM;
+           }
+       }
+     #endif
+
      if (!ret && copy_to_user(dataptr, &data, sizeof data))
           return -EFAULT; 
 
@@ -175,6 +223,12 @@
      int ret;
      pid_t pid;
 
+     /* RSBAC */
+     #ifdef CONFIG_RSBAC
+     union rsbac_target_id_t       rsbac_target_id;
+     union rsbac_attribute_value_t rsbac_attribute_value;
+     #endif
+
      if (get_user(version, &header->version))
 	     return -EFAULT; 
 
@@ -195,6 +249,25 @@
 	 copy_from_user(&permitted, &data->permitted, sizeof(permitted)))
 	     return -EFAULT; 
 
+     /* RSBAC */
+     #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+     if (rsbac_debug_aef)
+       rsbac_printk(KERN_DEBUG "sys_capset(): calling ADF\n");
+#endif
+     rsbac_target_id.scd = ST_capability;
+     rsbac_attribute_value.dummy = 0;
+     if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                           current->pid,
+                           T_SCD,
+                           rsbac_target_id,
+                           A_none,
+                           rsbac_attribute_value))
+       {
+         return -EPERM;
+       }
+     #endif
+
      spin_lock(&task_capability_lock);
      read_lock(&tasklist_lock);
 
diff -urN trunk/kernel/exit.c 2.6.14-rsbac-1.2.5/kernel/exit.c
--- trunk/kernel/exit.c	2005-11-11 10:03:08.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/kernel/exit.c	2005-11-10 16:16:23.000000000 +0000
@@ -34,6 +34,11 @@
 #include <asm/pgtable.h>
 #include <asm/mmu_context.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 extern void sem_exit (void);
 extern struct task_struct *child_reaper;
 
@@ -794,6 +799,12 @@
 	struct task_struct *tsk = current;
 	int group_dead;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	profile_task_exit(tsk);
 
 	WARN_ON(atomic_read(&tsk->fs_excl));
@@ -865,6 +876,30 @@
 
 	tsk->exit_code = code;
 	exit_notify(tsk);
+
+        /* RSBAC: notifying ADF */
+        #ifdef CONFIG_RSBAC
+        if (tsk->pid)
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "do_exit() [sys_exit()]: calling ADF\n");
+#endif
+            rsbac_target_id.process = tsk->pid;
+            rsbac_attribute_value.dummy = 0;
+            if (!rsbac_adf_request(R_TERMINATE,
+                                   current->pid,
+                                   T_PROCESS,
+                                   rsbac_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                  "do_exit() [sys_exit()]: ADF request for TERMINATE returned NOT_GRANTED!\n");
+              }
+          }
+        #endif
+
 #ifdef CONFIG_NUMA
 	mpol_free(tsk->mempolicy);
 	tsk->mempolicy = NULL;
diff -urN trunk/kernel/fork.c 2.6.14-rsbac-1.2.5/kernel/fork.c
--- trunk/kernel/fork.c	2005-11-11 10:03:08.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/kernel/fork.c	2005-11-10 16:16:23.000000000 +0000
@@ -50,6 +50,12 @@
 #include <asm/cacheflush.h>
 #include <asm/tlbflush.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#include <rsbac/aci.h>
+#endif
+
 /*
  * Protected counters by write_lock_irq(&tasklist_lock)
  */
@@ -1250,8 +1256,38 @@
 	int trace = 0;
 	long pid = alloc_pidmap();
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (pid < 0)
 		return -EAGAIN;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        if(current->pid)
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "do_fork() [sys_fork(),sys_clone(),sys_vfork]: calling ADF\n");
+#endif
+            rsbac_target_id.process = current->pid;
+            rsbac_attribute_value.dummy = 0;
+            if (!rsbac_adf_request(R_CLONE,
+                                   current->pid,
+                                   T_PROCESS,
+                                   rsbac_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                return -EPERM;
+              }
+          }
+        #endif
+
 	if (unlikely(current->ptrace)) {
 		trace = fork_traceflag (clone_flags);
 		if (trace)
@@ -1279,6 +1315,30 @@
 			set_tsk_thread_flag(p, TIF_SIGPENDING);
 		}
 
+                /* RSBAC: notify ADF of forked process */
+                #ifdef CONFIG_RSBAC
+                if(current->pid)
+                  {
+#ifdef CONFIG_RSBAC_DEBUG
+                    if (rsbac_debug_aef)
+                      rsbac_printk(KERN_DEBUG "do_fork() [sys_fork(),sys_clone(),sys_vfork()]: calling ADF_set_attr\n");
+#endif
+                    rsbac_new_target_id.process = p->pid;
+                    if (rsbac_adf_set_attr(R_CLONE,
+                                           current->pid,
+                                           T_PROCESS,
+                                           rsbac_target_id,
+                                           T_PROCESS,
+                                           rsbac_new_target_id,
+                                           A_none,
+                                           rsbac_attribute_value))
+                      {
+                        rsbac_printk(KERN_WARNING
+                               "do_fork() [sys_fork(), sys_clone()]: rsbac_adf_set_attr() returned error!\n");
+                      }
+                  }
+                #endif
+
 		if (!(clone_flags & CLONE_STOPPED))
 			wake_up_new_task(p, clone_flags);
 		else
diff -urN trunk/kernel/kallsyms.c 2.6.14-rsbac-1.2.5/kernel/kallsyms.c
--- trunk/kernel/kallsyms.c	2005-11-11 10:03:08.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/kernel/kallsyms.c	2005-11-10 16:16:23.000000000 +0000
@@ -20,6 +20,11 @@
 #include <linux/proc_fs.h>
 #include <linux/mm.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 #include <asm/sections.h>
 
 #ifdef CONFIG_KALLSYMS_ALL
@@ -379,6 +384,31 @@
 	struct kallsym_iter *iter;
 	int ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_target_id.scd = ST_ksyms;
+        rsbac_attribute_value.dummy = 0;
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "kallsyms_open(): calling ADF\n");
+#endif
+        if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                              current->pid,
+                              T_SCD,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	iter = kmalloc(sizeof(*iter), GFP_KERNEL);
 	if (!iter)
 		return -ENOMEM;
diff -urN trunk/kernel/module.c 2.6.14-rsbac-1.2.5/kernel/module.c
--- trunk/kernel/module.c	2005-11-11 10:03:08.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/kernel/module.c	2005-11-10 16:16:23.000000000 +0000
@@ -41,6 +41,11 @@
 #include <asm/semaphore.h>
 #include <asm/cacheflush.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 #if 0
 #define DEBUGP printk
 #else
@@ -574,6 +579,12 @@
 	char name[MODULE_NAME_LEN];
 	int ret, forced = 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
 
@@ -581,6 +592,24 @@
 		return -EFAULT;
 	name[MODULE_NAME_LEN-1] = '\0';
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_delete_module(): calling ADF\n");
+#endif
+        rsbac_target_id.dummy = 0;
+        rsbac_attribute_value.mod_name = name;
+        if (!rsbac_adf_request(R_REMOVE_FROM_KERNEL,
+                               current->pid,
+                               T_NONE,
+                               rsbac_target_id,
+                               A_mod_name,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	if (down_interruptible(&module_mutex) != 0)
 		return -EINTR;
 
@@ -1882,10 +1911,34 @@
 	struct module *mod;
 	int ret = 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	/* Must have permission */
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_init_module(): calling ADF\n");
+#endif
+        rsbac_target_id.dummy = 0;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_ADD_TO_KERNEL,
+                               current->pid,
+                               T_NONE,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	/* Only one module load at a time, please */
 	if (down_interruptible(&module_mutex) != 0)
 		return -EINTR;
diff -urN trunk/kernel/printk.c 2.6.14-rsbac-1.2.5/kernel/printk.c
--- trunk/kernel/printk.c	2005-11-11 10:03:08.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/kernel/printk.c	2005-11-10 16:16:23.000000000 +0000
@@ -32,6 +32,11 @@
 #include <linux/bootmem.h>
 #include <linux/syscalls.h>
 
+/* RSBAC - for sys_syslog only */
+#ifdef CONFIG_RSBAC_SYSLOG
+#include <rsbac/adf.h>
+#endif
+
 #include <asm/uaccess.h>
 
 #define __LOG_BUF_LEN	(1 << CONFIG_LOG_BUF_SHIFT)
@@ -224,10 +229,61 @@
 	char c;
 	int error = 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_SYSLOG
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = security_syslog(type);
 	if (error)
 		return error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_SYSLOG
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_syslog() [sys_syslog()]: calling ADF\n");
+#endif
+        rsbac_target_id.scd = ST_syslog;
+        rsbac_attribute_value.dummy = 0;
+        switch(type)
+          {
+            case 2:
+            case 3:
+              if(!rsbac_adf_request(R_GET_STATUS_DATA,
+                                    current->pid,
+                                    T_SCD,
+                                    rsbac_target_id,
+                                    A_none,
+                                    rsbac_attribute_value))
+                {
+                  error = -EPERM;
+                  goto out;
+                }
+              break;
+            case 4:
+            case 5:
+            case 6:
+            case 7:
+            case 8:
+              if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                                    current->pid,
+                                    T_SCD,
+                                    rsbac_target_id,
+                                    A_none,
+                                    rsbac_attribute_value))
+                {
+                  error = -EPERM;
+                  goto out;
+                }
+              break;
+
+            default:
+              break;
+          }
+        #endif
+
 	switch (type) {
 	case 0:		/* Close log */
 		break;
diff -urN trunk/kernel/sched.c 2.6.14-rsbac-1.2.5/kernel/sched.c
--- trunk/kernel/sched.c	2005-11-11 10:03:08.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/kernel/sched.c	2005-11-10 16:16:23.000000000 +0000
@@ -51,6 +51,11 @@
 
 #include <asm/unistd.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /*
  * Convert user-nice values [ -20 ... 0 ... 19 ]
  * to static priority [ MAX_RT_PRIO..MAX_PRIO-1 ],
@@ -1166,7 +1171,6 @@
 #ifdef CONFIG_SMP
 	if (unlikely(task_running(rq, p)))
 		goto out_activate;
-
 	new_cpu = cpu;
 
 	schedstat_inc(rq, ttwu_cnt);
@@ -1182,7 +1186,6 @@
 			break;
 		}
 	}
-
 	if (unlikely(!cpu_isset(this_cpu, p->cpus_allowed)))
 		goto out_set_cpu;
 
@@ -3523,6 +3526,34 @@
 	if (increment < 0 && !can_nice(current, nice))
 		return -EPERM;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+	if (increment < 0) {
+                union rsbac_target_id_t       rsbac_target_id;
+                union rsbac_attribute_value_t rsbac_attribute_value;
+
+		if (!capable(CAP_SYS_NICE))
+			return -EPERM;
+		if (increment < -40)
+			increment = -40;
+
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_nice(): calling ADF\n");
+#endif
+                rsbac_target_id.scd = ST_priority;
+                rsbac_attribute_value.priority = nice;
+                if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                                       current->pid,
+                                       T_SCD,
+                                       rsbac_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    return -EPERM;
+                  }
+	}
+        #endif
+
 	retval = security_task_setnice(current, nice);
 	if (retval)
 		return retval;
@@ -3654,6 +3685,7 @@
 	retval = security_task_setscheduler(p, policy, param);
 	if (retval)
 		return retval;
+
 	/*
 	 * To be able to change p->policy safely, the apropriate
 	 * runqueue lock must be held.
@@ -3695,10 +3727,46 @@
 	struct sched_param lparam;
 	struct task_struct *p;
 
+	/* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!param || pid < 0)
 		return -EINVAL;
 	if (copy_from_user(&lparam, param, sizeof(struct sched_param)))
 		return -EFAULT;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_sched_setscheduler() [sys_sched_setscheduler, sys_sched_setparam]: calling ADF\n");
+#endif
+        if(!pid || (pid == current->pid))
+          {
+            rsbac_target = T_SCD;
+            rsbac_target_id.scd = ST_priority;
+          }
+        else
+          {
+            rsbac_target = T_PROCESS;
+            rsbac_target_id.process = pid;
+          }
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	read_lock_irq(&tasklist_lock);
 	p = find_process_by_pid(pid);
 	if (!p) {
@@ -3800,6 +3868,14 @@
 
 long sched_setaffinity(pid_t pid, cpumask_t new_mask)
 {
+
+	/* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	task_t *p;
 	int retval;
 	cpumask_t cpus_allowed;
@@ -3814,6 +3890,39 @@
 		return -ESRCH;
 	}
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sched_setaffinity() [sys_sched_setaffinity]: calling ADF\n");
+#endif
+        if(p == current)
+          {
+            rsbac_target = T_SCD;
+            rsbac_target_id.scd = ST_priority;
+          }
+        else
+          {
+            rsbac_target = T_PROCESS;
+            rsbac_target_id.process = p->pid;
+          }
+        if(!p->mm)
+          rsbac_attribute_value.kernel_thread = TRUE;
+        else
+          rsbac_attribute_value.kernel_thread = FALSE;
+        if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                               current->pid,
+                               rsbac_target,
+                               rsbac_target_id,
+                               A_kernel_thread,
+                               rsbac_attribute_value))
+          {
+	    read_unlock(&tasklist_lock);
+	    unlock_cpu_hotplug();
+            return -EPERM;
+          }
+        #endif
+
 	/*
 	 * It is not safe to call set_cpus_allowed with the
 	 * tasklist_lock held.  We will bump the task_struct's
diff -urN trunk/kernel/signal.c 2.6.14-rsbac-1.2.5/kernel/signal.c
--- trunk/kernel/signal.c	2005-11-11 10:03:08.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/kernel/signal.c	2005-11-10 16:16:23.000000000 +0000
@@ -30,6 +30,11 @@
 #include <asm/unistd.h>
 #include <asm/siginfo.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /*
  * SLAB caches for signal bits.
  */
@@ -647,6 +652,13 @@
 				 struct task_struct *t)
 {
 	int error = -EINVAL;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!valid_signal(sig))
 		return error;
 	error = -EPERM;
@@ -659,6 +671,32 @@
 	    && !capable(CAP_KILL))
 		return error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "check_kill_permission() [group_send_sig_info(), sys_tgkill(),sys_tkill()]: calling ADF\n");
+#endif
+        rsbac_target_id.process = t->pid;
+        if(!t->mm)
+          rsbac_attribute_value.kernel_thread = TRUE;
+        else
+          rsbac_attribute_value.kernel_thread = FALSE;
+        if(   (!info || ((unsigned long)info != 1 &&
+  			(unsigned long)info != 2 && SI_FROMUSER(info)))
+           && (   (sig != SIGCONT)
+               || (current->signal->session != t->signal->session)
+              )
+           && !rsbac_adf_request(R_SEND_SIGNAL,
+                                 current->pid,
+                                 T_PROCESS,
+                                 rsbac_target_id,
+                                 A_kernel_thread,
+                                 rsbac_attribute_value)
+          )
+          return -EPERM;
+        #endif
+
 	error = security_task_kill(t, info, sig);
 	if (!error)
 		audit_signal_info(sig, t); /* Let audit system see the signal */
diff -urN trunk/kernel/sys.c 2.6.14-rsbac-1.2.5/kernel/sys.c
--- trunk/kernel/sys.c	2005-11-11 10:03:08.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/kernel/sys.c	2005-11-10 16:16:23.000000000 +0000
@@ -32,6 +32,11 @@
 #include <linux/compat.h>
 #include <linux/syscalls.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 #include <asm/uaccess.h>
 #include <asm/io.h>
 #include <asm/unistd.h>
@@ -239,6 +244,7 @@
 		error = no_nice;
 		goto out;
 	}
+
 	if (error == -ESRCH)
 		error = 0;
 	set_user_nice(p, niceval);
@@ -252,6 +258,13 @@
 	struct user_struct *user;
 	int error = -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (which > 2 || which < 0)
 		goto out;
 
@@ -262,6 +275,45 @@
 	if (niceval > 19)
 		niceval = 19;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        if(   (niceval < (current->static_prio - MAX_RT_PRIO - 20))
+           || (   (which == PRIO_PROCESS)
+               && (who != 0)
+               && (who != current->pid)
+              )
+           || (   (which == PRIO_PGRP)
+               && (who != 0)
+               && (who != process_group(current))
+              )
+          )
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_setpriority(): calling ADF\n");
+#endif
+            if(niceval < (current->static_prio - MAX_RT_PRIO - 20))
+              {
+                rsbac_target = T_SCD;
+                rsbac_target_id.scd = ST_priority;
+              }
+            else
+              {
+                rsbac_target = T_PROCESS;
+                rsbac_target_id.process = who;
+              }
+            rsbac_attribute_value.priority = niceval;
+            if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                                   current->pid,
+                                   rsbac_target,
+                                   rsbac_target_id,
+                                   A_priority,
+                                   rsbac_attribute_value))
+              {
+                return -EPERM;
+              }
+          }
+        #endif
+
 	read_lock(&tasklist_lock);
 	switch (which) {
 		case PRIO_PROCESS:
@@ -472,6 +524,12 @@
 {
 	char buffer[256];
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	/* We only trust the superuser with rebooting the system. */
 	if (!capable(CAP_SYS_BOOT))
 		return -EPERM;
@@ -484,6 +542,24 @@
 	                magic2 != LINUX_REBOOT_MAGIC2C))
 		return -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_reboot(): calling ADF\n");
+#endif
+        rsbac_target_id.dummy = 0;
+        rsbac_attribute_value.reboot_cmd = cmd;
+        if (!rsbac_adf_request(R_SHUTDOWN,
+                               current->pid,
+                               T_NONE,
+                               rsbac_target_id,
+                               A_reboot_cmd,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	lock_kernel();
 	switch (cmd) {
 	case LINUX_REBOOT_CMD_RESTART:
@@ -594,18 +670,71 @@
 		return retval;
 
 	if (rgid != (gid_t) -1) {
-		if ((old_rgid == rgid) ||
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                union rsbac_target_id_t       rsbac_target_id;
+                union rsbac_attribute_value_t rsbac_attribute_value;
+
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  rsbac_printk(KERN_DEBUG "sys_setregid(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.long_dummy = 0;
+                rsbac_attribute_value.group = rgid;
+                #endif
+
+		if (((old_rgid == rgid) ||
 		    (current->egid==rgid) ||
 		    capable(CAP_SETGID))
+                    /* RSBAC */
+                    #ifdef CONFIG_RSBAC
+                    && rsbac_adf_request(R_CHANGE_GROUP,
+                                         current->pid,
+                                         T_PROCESS,
+                                         rsbac_target_id,
+                                         A_group,
+                                         rsbac_attribute_value)
+                    #endif
+                   )
 			new_rgid = rgid;
 		else
 			return -EPERM;
 	}
 	if (egid != (gid_t) -1) {
-		if ((old_rgid == egid) ||
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC_DAC_GROUP
+                union rsbac_target_id_t       rsbac_target_id;
+                union rsbac_attribute_value_t rsbac_attribute_value;
+
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  rsbac_printk(KERN_DEBUG "sys_setregid(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.long_dummy = 0;
+                rsbac_attribute_value.group = egid;
+                #endif
+
+		if (((old_rgid == egid) ||
 		    (current->egid == egid) ||
 		    (current->sgid == egid) ||
 		    capable(CAP_SETGID))
+                    #ifdef CONFIG_RSBAC_DAC_GROUP
+                    && rsbac_adf_request(R_CHANGE_DAC_EFF_GROUP,
+                                         current->pid,
+                                         T_PROCESS,
+                                         rsbac_target_id,
+                                         A_group,
+                                         rsbac_attribute_value)
+                    && rsbac_adf_request(R_CHANGE_DAC_FS_GROUP,
+                                         current->pid,
+                                         T_PROCESS,
+                                         rsbac_target_id,
+                                         A_group,
+                                         rsbac_attribute_value)
+                    #endif
+                   )
 			new_egid = egid;
 		else {
 			return -EPERM;
@@ -636,11 +765,51 @@
 	int old_egid = current->egid;
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	retval = security_task_setgid(gid, (gid_t)-1, (gid_t)-1, LSM_SETID_ID);
 	if (retval)
 		return retval;
 
-	if (capable(CAP_SETGID))
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sys_setgid(): calling ADF\n");
+#endif
+        rsbac_target_id.process = current->pid;
+        rsbac_attribute_value.group = gid;
+        #endif
+
+	if ((capable(CAP_SETGID))
+            /* RSBAC */
+            #ifdef CONFIG_RSBAC
+            && rsbac_adf_request(R_CHANGE_GROUP,
+                                 current->pid,
+                                 T_PROCESS,
+                                 rsbac_target_id,
+                                 A_group,
+                                 rsbac_attribute_value)
+            #ifdef CONFIG_RSBAC_DAC_GROUP
+            && rsbac_adf_request(R_CHANGE_DAC_EFF_GROUP,
+                                 current->pid,
+                                 T_PROCESS,
+                                 rsbac_target_id,
+                                 A_group,
+                                 rsbac_attribute_value)
+            && rsbac_adf_request(R_CHANGE_DAC_FS_GROUP,
+                                 current->pid,
+                                 T_PROCESS,
+                                 rsbac_target_id,
+                                 A_group,
+                                 rsbac_attribute_value)
+            #endif
+            #endif
+           )
 	{
 		if(old_egid != gid)
 		{
@@ -649,7 +818,23 @@
 		}
 		current->gid = current->egid = current->sgid = current->fsgid = gid;
 	}
-	else if ((gid == current->gid) || (gid == current->sgid))
+	else if (((gid == current->gid) || (gid == current->sgid))
+                 /* RSBAC */
+                 #ifdef CONFIG_RSBAC_DAC_GROUP
+                 && rsbac_adf_request(R_CHANGE_DAC_EFF_GROUP,
+                                      current->pid,
+                                      T_PROCESS,
+                                      rsbac_target_id,
+                                      A_group,
+                                      rsbac_attribute_value)
+                 && rsbac_adf_request(R_CHANGE_DAC_FS_GROUP,
+                                      current->pid,
+                                      T_PROCESS,
+                                      rsbac_target_id,
+                                      A_group,
+                                      rsbac_attribute_value)
+                 #endif
+                )
 	{
 		if(old_egid != gid)
 		{
@@ -711,10 +896,64 @@
 	int old_ruid, old_euid, old_suid, new_ruid, new_euid;
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	retval = security_task_setuid(ruid, euid, (uid_t)-1, LSM_SETID_RE);
 	if (retval)
 		return retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        if(ruid != (uid_t) -1)
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "sys_setreuid(): calling ADF\n");
+#endif
+            rsbac_target_id.process = current->pid;
+            rsbac_attribute_value.long_dummy = 0;
+            rsbac_attribute_value.owner = ruid;
+            if(!rsbac_adf_request(R_CHANGE_OWNER,
+                                  current->pid,
+                                  T_PROCESS,
+                                  rsbac_target_id,
+                                  A_owner,
+                                  rsbac_attribute_value))
+              return -EPERM;
+          }
+        #ifdef CONFIG_RSBAC_DAC_OWNER
+        if(euid != (uid_t) -1)
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "sys_setreuid(): calling ADF for euid\n");
+#endif
+            rsbac_target_id.process = current->pid;
+            rsbac_attribute_value.long_dummy = 0;
+            rsbac_attribute_value.owner = euid;
+            if(!rsbac_adf_request(R_CHANGE_DAC_EFF_OWNER,
+                                  current->pid,
+                                  T_PROCESS,
+                                  rsbac_target_id,
+                                  A_owner,
+                                  rsbac_attribute_value))
+              return -EPERM;
+            if(!rsbac_adf_request(R_CHANGE_DAC_FS_OWNER,
+                                  current->pid,
+                                  T_PROCESS,
+                                  rsbac_target_id,
+                                  A_owner,
+                                  rsbac_attribute_value))
+              return -EPERM;
+          }
+        #endif
+        #endif
+
 	new_ruid = old_ruid = current->uid;
 	new_euid = old_euid = current->euid;
 	old_suid = current->suid;
@@ -752,6 +991,59 @@
 
 	key_fsuid_changed(current);
 
+        /* RSBAC: notify ADF of changed process owner */
+        #ifdef CONFIG_RSBAC
+        if(ruid != (uid_t) -1)
+	  {
+            rsbac_set_audit_uid(old_ruid);
+            rsbac_attribute_value.owner = current->uid;
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(R_CHANGE_OWNER,
+                                   current->pid,
+                                   T_PROCESS,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_owner,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sys_setreuid(): rsbac_adf_set_attr() returned error");
+              }
+          }
+        #ifdef CONFIG_RSBAC_DAC_OWNER
+        if(euid != (uid_t) -1)
+	  {
+            rsbac_attribute_value.owner = current->euid;
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(R_CHANGE_DAC_EFF_OWNER,
+                                   current->pid,
+                                   T_PROCESS,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_owner,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sys_setreuid(): rsbac_adf_set_attr() for euid returned error");
+              }
+            if (rsbac_adf_set_attr(R_CHANGE_DAC_FS_OWNER,
+                                   current->pid,
+                                   T_PROCESS,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_owner,
+                                   rsbac_attribute_value))
+              {
+                printk(KERN_WARNING
+                       "sys_setreuid(): rsbac_adf_set_attr() for fsuid returned error");
+              }
+          }
+        #endif
+        #endif
+
 	return security_task_post_setuid(old_ruid, old_euid, old_suid, LSM_SETID_RE);
 }
 
@@ -774,10 +1066,66 @@
 	int old_ruid, old_suid, new_ruid, new_suid;
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        #ifdef CONFIG_RSBAC_FAKE_ROOT_UID
+        if(!uid && rsbac_uid_faked())
+          return 0;
+        #endif
+
 	retval = security_task_setuid(uid, (uid_t)-1, (uid_t)-1, LSM_SETID_ID);
 	if (retval)
 		return retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sys_setuid(): calling ADF\n");
+#endif
+        rsbac_target_id.process = current->pid;
+        rsbac_attribute_value.long_dummy = 0;
+        rsbac_attribute_value.owner = uid;
+        if(!rsbac_adf_request(R_CHANGE_OWNER,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_owner,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #ifdef CONFIG_RSBAC_DAC_OWNER
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sys_setuid(): calling ADF for euid\n");
+#endif
+        if(!rsbac_adf_request(R_CHANGE_DAC_EFF_OWNER,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_owner,
+                              rsbac_attribute_value))
+           return -EPERM;
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sys_setuid(): calling ADF for fsuid\n");
+#endif
+        if(!rsbac_adf_request(R_CHANGE_DAC_FS_OWNER,
+                              current->pid,
+                              T_PROCESS,
+                              rsbac_target_id,
+                              A_owner,
+                              rsbac_attribute_value))
+           return -EPERM;
+        #endif
+        #endif
+
 	old_ruid = new_ruid = current->uid;
 	old_suid = current->suid;
 	new_suid = old_suid;
@@ -799,6 +1147,52 @@
 
 	key_fsuid_changed(current);
 
+        /* RSBAC: notify ADF of changed process owner */
+        #ifdef CONFIG_RSBAC
+        rsbac_set_audit_uid(old_ruid);
+        rsbac_new_target_id.dummy = 0;
+        if (rsbac_adf_set_attr(R_CHANGE_OWNER,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               T_NONE,
+                               rsbac_new_target_id,
+                               A_owner,
+                               rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "sys_setuid(): rsbac_adf_set_attr() returned error");
+          }
+        #ifdef CONFIG_RSBAC_DAC_OWNER
+        rsbac_new_target_id.dummy = 0;
+        if (rsbac_adf_set_attr(R_CHANGE_DAC_EFF_OWNER,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               T_NONE,
+                               rsbac_new_target_id,
+                               A_owner,
+                               rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "sys_setuid(): rsbac_adf_set_attr() for euid returned error");
+          }
+        rsbac_new_target_id.dummy = 0;
+        if (rsbac_adf_set_attr(R_CHANGE_DAC_FS_OWNER,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               T_NONE,
+                               rsbac_new_target_id,
+                               A_owner,
+                               rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "sys_setuid(): rsbac_adf_set_attr() for fsuid returned error");
+          }
+        #endif
+        #endif
+
 	return security_task_post_setuid(old_ruid, old_euid, old_suid, LSM_SETID_ID);
 }
 
@@ -814,6 +1208,13 @@
 	int old_suid = current->suid;
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	retval = security_task_setuid(ruid, euid, suid, LSM_SETID_RES);
 	if (retval)
 		return retval;
@@ -829,6 +1230,58 @@
 		    (suid != current->euid) && (suid != current->suid))
 			return -EPERM;
 	}
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        if(ruid != (uid_t) -1)
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "sys_setresuid(): calling ADF\n");
+#endif
+            rsbac_target_id.process = current->pid;
+            rsbac_attribute_value.long_dummy = 0;
+            rsbac_attribute_value.owner = ruid;
+            if(!rsbac_adf_request(R_CHANGE_OWNER,
+                                  current->pid,
+                                  T_PROCESS,
+                                  rsbac_target_id,
+                                  A_owner,
+                                  rsbac_attribute_value))
+              return -EPERM;
+          }
+        #ifdef CONFIG_RSBAC_DAC_OWNER
+        if(euid != (uid_t) -1)
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "sys_setresuid(): calling ADF for euid\n");
+#endif
+            rsbac_target_id.process = current->pid;
+            rsbac_attribute_value.long_dummy = 0;
+            rsbac_attribute_value.owner = euid;
+            if(!rsbac_adf_request(R_CHANGE_DAC_EFF_OWNER,
+                                  current->pid,
+                                  T_PROCESS,
+                                  rsbac_target_id,
+                                  A_owner,
+                                  rsbac_attribute_value))
+              return -EPERM;
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "sys_setresuid(): calling ADF for fsuid\n");
+#endif
+            if(!rsbac_adf_request(R_CHANGE_DAC_FS_OWNER,
+                                  current->pid,
+                                  T_PROCESS,
+                                  rsbac_target_id,
+                                  A_owner,
+                                  rsbac_attribute_value))
+              return -EPERM;
+          }
+        #endif
+        #endif
+
 	if (ruid != (uid_t) -1) {
 		if (ruid != current->uid && set_user(ruid, euid != current->euid) < 0)
 			return -EAGAIN;
@@ -847,6 +1300,59 @@
 
 	key_fsuid_changed(current);
 
+        /* RSBAC: notify ADF of changed process owner */
+        #ifdef CONFIG_RSBAC
+        if(ruid != (uid_t) -1)
+	  {
+            rsbac_set_audit_uid(old_ruid);
+            rsbac_new_target_id.dummy = 0;
+            rsbac_attribute_value.owner = current->uid;
+            if (rsbac_adf_set_attr(R_CHANGE_OWNER,
+                                   current->pid,
+                                   T_PROCESS,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_owner,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sys_setresuid(): rsbac_adf_set_attr() returned error");
+              }
+          }
+        #ifdef CONFIG_RSBAC_DAC_OWNER
+        if(euid != (uid_t) -1)
+	  {
+            rsbac_new_target_id.dummy = 0;
+            rsbac_attribute_value.owner = current->euid;
+            if (rsbac_adf_set_attr(R_CHANGE_DAC_EFF_OWNER,
+                                   current->pid,
+                                   T_PROCESS,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_owner,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sys_setreuid(): rsbac_adf_set_attr() for euid returned error\n");
+              }
+            if (rsbac_adf_set_attr(R_CHANGE_DAC_FS_OWNER,
+                                   current->pid,
+                                   T_PROCESS,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_owner,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sys_setreuid(): rsbac_adf_set_attr() for fsuid returned error\n");
+              }
+          }
+        #endif
+        #endif
+
 	return security_task_post_setuid(old_ruid, old_euid, old_suid, LSM_SETID_RES);
 }
 
@@ -868,6 +1374,12 @@
 {
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	retval = security_task_setgid(rgid, egid, sgid, LSM_SETID_RES);
 	if (retval)
 		return retval;
@@ -883,7 +1395,52 @@
 		    (sgid != current->egid) && (sgid != current->sgid))
 			return -EPERM;
 	}
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        if(rgid != (gid_t) -1)
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "sys_setresgid(): calling ADF\n");
+#endif
+            rsbac_target_id.process = current->pid;
+            rsbac_attribute_value.group = rgid;
+            if(!rsbac_adf_request(R_CHANGE_GROUP,
+                                  current->pid,
+                                  T_PROCESS,
+                                  rsbac_target_id,
+                                  A_group,
+                                  rsbac_attribute_value))
+               return -EPERM;
+          }
+        #endif
+
 	if (egid != (gid_t) -1) {
+	        /* RSBAC */
+                #ifdef CONFIG_RSBAC_DAC_GROUP
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  printk(KERN_DEBUG "sys_setresgid(): calling ADF\n");
+#endif
+                rsbac_target_id.process = current->pid;
+                rsbac_attribute_value.group = egid;
+                if(!rsbac_adf_request(R_CHANGE_DAC_EFF_GROUP,
+                                      current->pid,
+                                      T_PROCESS,
+                                      rsbac_target_id,
+                                      A_group,
+                                      rsbac_attribute_value))
+                  return -EPERM;
+                if(!rsbac_adf_request(R_CHANGE_DAC_FS_GROUP,
+                                      current->pid,
+                                      T_PROCESS,
+                                      rsbac_target_id,
+                                      A_group,
+                                      rsbac_attribute_value))
+                  return -EPERM;
+                #endif
+
 		if (egid != current->egid)
 		{
 			current->mm->dumpable = suid_dumpable;
@@ -923,10 +1480,34 @@
 {
 	int old_fsuid;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_DAC_OWNER
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	old_fsuid = current->fsuid;
 	if (security_task_setuid(uid, (uid_t)-1, (uid_t)-1, LSM_SETID_FS))
 		return old_fsuid;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_DAC_OWNER
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sys_setfsuid(): calling ADF\n");
+#endif
+        rsbac_target_id.process = current->pid;
+        rsbac_attribute_value.owner = uid;
+        if (!rsbac_adf_request(R_CHANGE_DAC_FS_OWNER,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_owner,
+                               rsbac_attribute_value))
+          return old_fsuid;
+        #endif
+
 	if (uid == current->uid || uid == current->euid ||
 	    uid == current->suid || uid == current->fsuid || 
 	    capable(CAP_SETUID))
@@ -941,6 +1522,24 @@
 
 	key_fsuid_changed(current);
 
+        #ifdef CONFIG_RSBAC_DAC_OWNER
+        rsbac_target_id.process = current->pid;
+        rsbac_new_target_id.dummy = 0;
+        rsbac_attribute_value.owner = uid;
+        if (rsbac_adf_set_attr(R_CHANGE_DAC_FS_OWNER,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               T_NONE,
+                               rsbac_new_target_id,
+                               A_owner,
+                               rsbac_attribute_value))
+          {
+            rsbac_printk(KERN_WARNING
+                   "sys_setfsuid(): rsbac_adf_set_attr() returned error\n");
+          }
+        #endif
+
 	security_task_post_setuid(old_fsuid, (uid_t)-1, (uid_t)-1, LSM_SETID_FS);
 
 	return old_fsuid;
@@ -953,10 +1552,33 @@
 {
 	int old_fsgid;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_DAC_GROUP
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	old_fsgid = current->fsgid;
 	if (security_task_setgid(gid, (gid_t)-1, (gid_t)-1, LSM_SETID_FS))
 		return old_fsgid;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_DAC_GROUP
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          printk(KERN_DEBUG "sys_setfsgid(): calling ADF\n");
+#endif
+        rsbac_target_id.process = current->pid;
+        rsbac_attribute_value.group = gid;
+        if (!rsbac_adf_request(R_CHANGE_DAC_FS_GROUP,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_group,
+                               rsbac_attribute_value))
+          return old_fsgid;
+        #endif
+
 	if (gid == current->gid || gid == current->egid ||
 	    gid == current->sgid || gid == current->fsgid || 
 	    capable(CAP_SETGID))
@@ -1073,6 +1695,12 @@
 	struct task_struct *p;
 	int err = -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!pid)
 		pid = current->pid;
 	if (!pgid)
@@ -1080,6 +1708,25 @@
 	if (pgid < 0)
 		return -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sys_setpgid(): calling ADF\n");
+#endif
+        rsbac_target_id.process = pid;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                               current->pid,
+                               T_PROCESS,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	/* From this point forward we keep holding onto the tasklist lock
 	 * so that our parent does not change from under us. -DaveM
 	 */
@@ -1147,12 +1794,38 @@
 		int retval;
 		struct task_struct *p;
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                union rsbac_target_id_t       rsbac_target_id;
+                union rsbac_attribute_value_t rsbac_attribute_value;
+                #endif
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  rsbac_printk(KERN_DEBUG "sys_getpgid(): calling ADF\n");
+#endif
+                rsbac_target_id.process = pid;
+                rsbac_attribute_value.dummy = 0;
+                if (!rsbac_adf_request(R_GET_STATUS_DATA,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    return -EPERM;
+                  }
+                #endif
+
 		read_lock(&tasklist_lock);
 		p = find_task_by_pid(pid);
 
 		retval = -ESRCH;
 		if (p) {
 			retval = security_task_getpgid(p);
+
 			if (!retval)
 				retval = process_group(p);
 		}
@@ -1179,12 +1852,38 @@
 		int retval;
 		struct task_struct *p;
 
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+                union rsbac_target_id_t       rsbac_target_id;
+                union rsbac_attribute_value_t rsbac_attribute_value;
+                #endif
+
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  rsbac_printk(KERN_DEBUG "sys_getsid(): calling ADF\n");
+#endif
+                rsbac_target_id.process = pid;
+                rsbac_attribute_value.dummy = 0;
+                if (!rsbac_adf_request(R_GET_STATUS_DATA,
+                                       current->pid,
+                                       T_PROCESS,
+                                       rsbac_target_id,
+                                       A_none,
+                                       rsbac_attribute_value))
+                  {
+                    return -EPERM;
+                  }
+                #endif
+
 		read_lock(&tasklist_lock);
 		p = find_task_by_pid(pid);
 
 		retval = -ESRCH;
 		if(p) {
 			retval = security_task_getsid(p);
+
 			if (!retval)
 				retval = p->signal->session;
 		}
@@ -1434,6 +2133,13 @@
 	struct group_info *group_info;
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        int i;
+        #endif
+
 	if (!capable(CAP_SETGID))
 		return -EPERM;
 	if ((unsigned)gidsetsize > NGROUPS_MAX)
@@ -1448,6 +2154,32 @@
 		return retval;
 	}
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        if(gidsetsize > 0)
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "sys_setgroups(): calling ADF\n");
+#endif
+            rsbac_target_id.process = current->pid;
+            for(i=0; i < gidsetsize; i++)
+              {
+                rsbac_attribute_value.group = group_info->blocks[i / NGROUPS_PER_BLOCK][i];
+                if(!rsbac_adf_request(R_CHANGE_GROUP,
+                                      current->pid,
+                                      T_PROCESS,
+                                      rsbac_target_id,
+                                      A_group,
+                                      rsbac_attribute_value))
+                  {
+                    put_group_info(group_info);
+                    return -EPERM;
+                  }
+	      }
+          }
+        #endif
+
 	retval = set_current_groups(group_info);
 	put_group_info(group_info);
 
@@ -1503,10 +2235,36 @@
 	int errno;
 	char tmp[__NEW_UTS_LEN];
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+	
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sys_sethostname(): calling ADF\n");
+#endif
+        rsbac_target_id.scd = ST_host_id;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                               current->pid,
+                               T_SCD,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	down_write(&uts_sem);
 	errno = -EFAULT;
 	if (!copy_from_user(tmp, name, len)) {
@@ -1548,11 +2306,35 @@
 	int errno;
 	char tmp[__NEW_UTS_LEN];
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+	
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_setdomainname(): calling ADF\n");
+#endif
+        rsbac_target_id.scd = ST_net_id;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                               current->pid,
+                               T_SCD,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	down_write(&uts_sem);
 	errno = -EFAULT;
 	if (!copy_from_user(tmp, name, len)) {
@@ -1606,6 +2388,12 @@
 	struct rlimit new_rlim, *old_rlim;
 	int retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (resource >= RLIM_NLIMITS)
 		return -EINVAL;
 	if(copy_from_user(&new_rlim, rlim, sizeof(*rlim)))
@@ -1623,6 +2411,24 @@
 	if (retval)
 		return retval;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_setrlimit(): calling ADF\n");
+#endif
+        rsbac_target_id.scd = ST_rlimit;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                               current->pid,
+                               T_SCD,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	task_lock(current->group_leader);
 	*old_rlim = new_rlim;
 	task_unlock(current->group_leader);
diff -urN trunk/kernel/sysctl.c 2.6.14-rsbac-1.2.5/kernel/sysctl.c
--- trunk/kernel/sysctl.c	2005-11-11 10:03:08.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/kernel/sysctl.c	2005-11-10 16:16:23.000000000 +0000
@@ -46,6 +46,11 @@
 #include <asm/uaccess.h>
 #include <asm/processor.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 #ifdef CONFIG_ROOT_NFS
 #include <linux/nfs_fs.h>
 #endif
@@ -1114,9 +1119,49 @@
 static inline int ctl_perm(ctl_table *table, int op)
 {
 	int error;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = security_sysctl(table, op);
 	if (error)
 		return error;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        if(op & 002) /* write access */
+          {
+            switch(table->ctl_name)
+              {
+                case KERN_NODENAME:
+                  rsbac_target_id.scd = ST_host_id;
+                  break;
+                case KERN_DOMAINNAME:
+                  rsbac_target_id.scd = ST_net_id;
+                  break;
+                default:
+                  rsbac_target_id.scd = ST_sysctl;
+              }
+            rsbac_attribute_value.dummy = 0;
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "ctl_perm() [sysctl() etc.]: calling ADF\n");
+#endif
+            if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                                  current->pid,
+                                  T_SCD,
+                                  rsbac_target_id,
+                                  A_none,
+                                  rsbac_attribute_value))
+              {
+                return -EPERM;
+              }
+          }
+        #endif
+
 	return test_perm(table->mode, op);
 }
 
diff -urN trunk/kernel/time.c 2.6.14-rsbac-1.2.5/kernel/time.c
--- trunk/kernel/time.c	2005-11-11 10:03:08.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/kernel/time.c	2005-11-10 16:16:23.000000000 +0000
@@ -39,6 +39,11 @@
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 /* 
  * The timezone where the local system is located.  Used as a default by some
  * programs who obtain this value by using gettimeofday.
@@ -82,9 +87,33 @@
 	struct timespec tv;
 	int err;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (get_user(tv.tv_sec, tptr))
 		return -EFAULT;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_stime(): calling ADF\n");
+#endif
+        rsbac_target_id.scd = ST_clock;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                               current->pid,
+                               T_SCD,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	tv.tv_nsec = 0;
 
 	err = security_settime(&tv, NULL);
@@ -154,10 +183,35 @@
 	static int firsttime = 1;
 	int error = 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	error = security_settime(tv, tz);
 	if (error)
 		return error;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "do_sys_settimeofday() [sys_settimeofday()]: calling ADF\n");
+#endif
+        rsbac_target_id.scd = ST_clock;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                               current->pid,
+                               T_SCD,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	if (tz) {
 		/* SMP safe, global irq locking makes it work. */
 		sys_tz = *tz;
@@ -232,10 +286,33 @@
         long ltemp, mtemp, save_adjust;
 	int result;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	/* In order to modify anything, you gotta be super-user! */
 	if (txc->modes && !capable(CAP_SYS_TIME))
 		return -EPERM;
 		
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_adjtimex(): calling ADF\n");
+#endif
+        rsbac_target_id.scd = ST_time_strucs;
+        rsbac_attribute_value.dummy = 0;
+        if (   txc->modes
+            && !rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                                  current->pid,
+                                  T_SCD,
+                                  rsbac_target_id,
+                                  A_none,
+                                  rsbac_attribute_value))
+	  return -EPERM;
+        #endif
+
 	/* Now we validate the data before disabling interrupts */
 
 	if ((txc->modes & ADJ_OFFSET_SINGLESHOT) == ADJ_OFFSET_SINGLESHOT)
diff -urN trunk/kernel/timer.c 2.6.14-rsbac-1.2.5/kernel/timer.c
--- trunk/kernel/timer.c	2005-11-11 10:03:08.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/kernel/timer.c	2005-11-10 16:16:23.000000000 +0000
@@ -46,6 +46,11 @@
 #define time_interpolator_update(x)
 #endif
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_FAKE_ROOT_UID
+#include <rsbac/adf.h>
+#endif
+
 /*
  * per-CPU timer vector definitions:
  */
@@ -1045,14 +1050,22 @@
 
 asmlinkage long sys_getuid(void)
 {
+        #ifdef CONFIG_RSBAC_FAKE_ROOT_UID
+        return rsbac_fake_uid();
+        #else
 	/* Only we change this so SMP safe */
 	return current->uid;
+	#endif
 }
 
 asmlinkage long sys_geteuid(void)
 {
+        #ifdef CONFIG_RSBAC_FAKE_ROOT_UID
+        return rsbac_fake_euid();
+        #else
 	/* Only we change this so SMP safe */
 	return current->euid;
+	#endif
 }
 
 asmlinkage long sys_getgid(void)
diff -urN trunk/kernel/uid16.c 2.6.14-rsbac-1.2.5/kernel/uid16.c
--- trunk/kernel/uid16.c	2005-11-11 10:03:08.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/kernel/uid16.c	2005-11-10 16:16:23.000000000 +0000
@@ -15,6 +15,11 @@
 #include <linux/security.h>
 #include <linux/syscalls.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_FAKE_ROOT_UID
+#include <rsbac/adf.h>
+#endif
+
 #include <asm/uaccess.h>
 
 asmlinkage long sys_chown16(const char __user * filename, old_uid_t user, old_gid_t group)
@@ -177,12 +182,20 @@
 
 asmlinkage long sys_getuid16(void)
 {
+        #ifdef CONFIG_RSBAC_FAKE_ROOT_UID
+        return high2lowuid(rsbac_fake_uid());
+        #else
 	return high2lowuid(current->uid);
+	#endif
 }
 
 asmlinkage long sys_geteuid16(void)
 {
+        #ifdef CONFIG_RSBAC_FAKE_ROOT_UID
+        return high2lowuid(rsbac_fake_euid());
+        #else
 	return high2lowuid(current->euid);
+	#endif
 }
 
 asmlinkage long sys_getgid16(void)
diff -urN trunk/lib/zlib_inflate/inftrees.c 2.6.14-rsbac-1.2.5/lib/zlib_inflate/inftrees.c
--- trunk/lib/zlib_inflate/inftrees.c	2005-11-11 10:03:44.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/lib/zlib_inflate/inftrees.c	2005-11-10 16:16:48.000000000 +0000
@@ -141,7 +141,7 @@
   {
     *t = NULL;
     *m = 0;
-    return Z_OK;
+    return Z_DATA_ERROR;
   }
 
 
diff -urN trunk/MAINTAINERS 2.6.14-rsbac-1.2.5/MAINTAINERS
--- trunk/MAINTAINERS	2005-11-11 10:03:59.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/MAINTAINERS	2005-11-10 16:16:58.000000000 +0000
@@ -2053,6 +2053,13 @@
 RISCOM8 DRIVER
 S:	Orphan
 
+RSBAC
+P:	Amon Ott
+M:	ao@rsbac.org
+L:	rsbac@rsbac.org
+W:	http://www.rsbac.org
+S:	Maintained
+
 RTLINUX  REALTIME  LINUX
 P:	Victor Yodaiken
 M:	yodaiken@fsmlabs.com
diff -urN trunk/Makefile 2.6.14-rsbac-1.2.5/Makefile
--- trunk/Makefile	2005-11-11 10:04:24.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/Makefile	2005-11-10 16:17:15.000000000 +0000
@@ -555,6 +555,7 @@
 # and try to determine if the current source tree is a release tree, of any sort,
 # or if is a pure development tree.
 #
+#
 # A 'release tree' is any tree with a git TAG associated
 # with it.  The primary goal of this is to make it safe for a native
 # git/CVS/SVN user to build a release tree (i.e, 2.6.9) and also to
@@ -571,6 +572,12 @@
 	LOCALVERSION := $(LOCALVERSION)$(localversion-auto)
 endif
 
+# Add RSBAC version
+ifeq ($(CONFIG_RSBAC),y)
+EXTRAVERSION:=$(EXTRAVERSION)-rsbac
+core-y		+= rsbac/
+endif
+
 #
 # INSTALL_MOD_PATH specifies a prefix to MODLIB for module directory
 # relocations required by build roots.  This is not defined in the
diff -urN trunk/mm/mlock.c 2.6.14-rsbac-1.2.5/mm/mlock.c
--- trunk/mm/mlock.c	2005-11-11 10:03:59.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/mm/mlock.c	2005-11-10 16:16:58.000000000 +0000
@@ -10,6 +10,10 @@
 #include <linux/mempolicy.h>
 #include <linux/syscalls.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
 
 static int mlock_fixup(struct vm_area_struct *vma, struct vm_area_struct **prev,
 	unsigned long start, unsigned long end, unsigned int newflags)
@@ -126,9 +130,34 @@
 	unsigned long lock_limit;
 	int error = -ENOMEM;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!can_do_mlock())
 		return -EPERM;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_target_id.scd = ST_mlock;
+        rsbac_attribute_value.dummy = 0;
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sys_mlock(): calling ADF\n");
+#endif
+        if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                              current->pid,
+                              T_SCD,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	down_write(&current->mm->mmap_sem);
 	len = PAGE_ALIGN(len + (start & ~PAGE_MASK));
 	start &= PAGE_MASK;
@@ -188,6 +217,31 @@
 	unsigned long lock_limit;
 	int ret = -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        rsbac_target_id.scd = ST_mlock;
+        rsbac_attribute_value.dummy = 0;
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sys_mlockall(): calling ADF\n");
+#endif
+        if(!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                              current->pid,
+                              T_SCD,
+                              rsbac_target_id,
+                              A_none,
+                              rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	if (!flags || (flags & ~(MCL_CURRENT | MCL_FUTURE)))
 		goto out;
 
diff -urN trunk/mm/mmap.c 2.6.14-rsbac-1.2.5/mm/mmap.c
--- trunk/mm/mmap.c	2005-11-11 10:03:59.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/mm/mmap.c	2005-11-10 16:16:58.000000000 +0000
@@ -29,6 +29,11 @@
 #include <asm/cacheflush.h>
 #include <asm/tlb.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 static void unmap_region(struct mm_struct *mm,
 		struct vm_area_struct *vma, struct vm_area_struct *prev,
 		unsigned long start, unsigned long end);
@@ -875,6 +880,13 @@
 	int accountable = 1;
 	unsigned long charged = 0, reqprot = prot;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (file) {
 		if (is_file_hugepages(file))
 			accountable = 0;
@@ -996,6 +1008,44 @@
 	if (error)
 		return error;
 		
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        if(prot & PROT_EXEC)
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "do_mmap_pgoff() [do_mmap() [sys_mmap()]]: calling ADF\n");
+#endif
+            if(file)
+              {
+                rsbac_target = T_FILE;
+                rsbac_target_id.file.device = file->f_dentry->d_inode->i_sb->s_dev;
+                rsbac_target_id.file.inode  = file->f_dentry->d_inode->i_ino;
+                rsbac_target_id.file.dentry_p = file->f_dentry;
+              }
+            else
+              {
+                rsbac_target = T_NONE;
+                rsbac_target_id.dummy = 0;
+              }
+            rsbac_attribute_value.prot_bits = prot;
+            if (!rsbac_adf_request(R_MAP_EXEC,
+                                   current->pid,
+                                   rsbac_target,
+                                   rsbac_target_id,
+                                   A_prot_bits,
+                                   rsbac_attribute_value))
+              {
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  rsbac_printk(KERN_DEBUG "do_mmap_pgoff() [do_mmap() [sys_mmap()]]: request not granted, my PID: %i\n",
+                         current->pid);
+#endif
+                return -EPERM;
+              }
+          }
+        #endif
+
 	/* Clear old maps */
 	error = -ENOMEM;
 munmap_back:
diff -urN trunk/mm/mprotect.c 2.6.14-rsbac-1.2.5/mm/mprotect.c
--- trunk/mm/mprotect.c	2005-11-11 10:03:59.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/mm/mprotect.c	2005-11-10 16:16:58.000000000 +0000
@@ -25,6 +25,11 @@
 #include <asm/cacheflush.h>
 #include <asm/tlbflush.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 static void change_pte_range(struct mm_struct *mm, pmd_t *pmd,
 		unsigned long addr, unsigned long end, pgprot_t newprot)
 {
@@ -184,6 +189,15 @@
 	struct vm_area_struct *vma, *prev;
 	int error = -EINVAL;
 	const int grows = prot & (PROT_GROWSDOWN|PROT_GROWSUP);
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target = T_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        int need_notify = FALSE;
+        #endif
+
 	prot &= ~(PROT_GROWSDOWN|PROT_GROWSUP);
 	if (grows == (PROT_GROWSDOWN|PROT_GROWSUP)) /* can't be both */
 		return -EINVAL;
@@ -258,6 +272,45 @@
 		if (error)
 			goto out;
 
+#ifdef CONFIG_RSBAC
+		if(   (prot & PROT_EXEC)
+		   && !(vma->vm_flags & PROT_EXEC)
+		  )
+		{
+#ifdef CONFIG_RSBAC_DEBUG
+			if(rsbac_debug_aef)
+				rsbac_printk(KERN_DEBUG "sys_mprotect: calling ADF\n");
+#endif
+			if(vma->vm_file) {
+		                rsbac_target = T_FILE;
+				rsbac_target_id.file.device = vma->vm_file->f_dentry->d_inode->i_sb->s_dev;
+				rsbac_target_id.file.inode = vma->vm_file->f_dentry->d_inode->i_ino;
+				rsbac_target_id.file.dentry_p = vma->vm_file->f_dentry;
+			}
+			else {
+				rsbac_target = T_NONE;
+				rsbac_target_id.dummy = 0;
+			}
+			rsbac_attribute_value.prot_bits = prot;
+			if(!rsbac_adf_request(R_MAP_EXEC,
+						  current->pid,
+						  rsbac_target,
+						  rsbac_target_id,
+						  A_prot_bits,
+						  rsbac_attribute_value)) 
+			{
+#ifdef CONFIG_RSBAC_DEBUG
+				if(rsbac_debug_aef)
+					rsbac_printk(KERN_DEBUG "sys_mprotect: request NOT_GRANTED\n");
+#endif
+				error = -EPERM;
+				break;
+			}
+			else
+			  need_notify = TRUE;
+		}
+#endif
+
 		tmp = vma->vm_end;
 		if (tmp > end)
 			tmp = end;
@@ -279,5 +332,32 @@
 	}
 out:
 	up_write(&current->mm->mmap_sem);
+
+        /* RSBAC: notify ADF of mapped segment */
+        #ifdef CONFIG_RSBAC
+        if(need_notify && !error)
+          {
+            union rsbac_target_id_t rsbac_new_target_id;
+
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "sys_mprotect(): calling ADF_set_attr\n");
+#endif
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(R_MAP_EXEC,
+                                   current->pid,
+                                   rsbac_target,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sys_mprotect: rsbac_adf_set_attr() returned error\n");
+              }
+          }
+        #endif
+
 	return error;
 }
diff -urN trunk/mm/swapfile.c 2.6.14-rsbac-1.2.5/mm/swapfile.c
--- trunk/mm/swapfile.c	2005-11-11 10:03:59.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/mm/swapfile.c	2005-11-10 16:16:58.000000000 +0000
@@ -31,6 +31,11 @@
 #include <asm/tlbflush.h>
 #include <linux/swapops.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#endif
+
 DEFINE_SPINLOCK(swap_lock);
 unsigned int nr_swapfiles;
 long total_swap_pages;
@@ -1067,9 +1072,35 @@
 	int i, type, prev;
 	int err;
 	
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sys_swapoff(): calling ADF\n");
+#endif
+        rsbac_target_id.scd = ST_swap;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                               current->pid,
+                               T_SCD,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	pathname = getname(specialfile);
 	err = PTR_ERR(pathname);
 	if (IS_ERR(pathname))
@@ -1081,6 +1112,47 @@
 	if (IS_ERR(victim))
 		goto out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sys_swapoff(): calling ADF for DEV / FILE\n");
+#endif
+        if(S_ISBLK(victim->f_dentry->d_inode->i_mode))
+          {
+            rsbac_target = T_DEV;
+            rsbac_target_id.dev.type = D_block;
+            rsbac_target_id.dev.major = RSBAC_MAJOR(victim->f_dentry->d_inode->i_rdev);
+            rsbac_target_id.dev.minor = RSBAC_MINOR(victim->f_dentry->d_inode->i_rdev);
+          }
+        else
+        if(S_ISREG(victim->f_dentry->d_inode->i_mode))
+          {
+            rsbac_target = T_FILE;
+            rsbac_target_id.file.device = victim->f_dentry->d_sb->s_dev;
+            rsbac_target_id.file.inode  = victim->f_dentry->d_inode->i_ino;
+            rsbac_target_id.file.dentry_p = victim->f_dentry;
+          }
+        else
+          {
+            rsbac_target = T_NONE;
+            rsbac_target_id.dummy = 0;
+          }
+        rsbac_attribute_value.dummy = 0;
+        if(   (rsbac_target != T_NONE)
+           && !rsbac_adf_request(R_REMOVE_FROM_KERNEL,
+                                 current->pid,
+                                 rsbac_target,
+                                 rsbac_target_id,
+                                 A_none,
+                                 rsbac_attribute_value)
+	  )
+          {
+            err = -EPERM;
+            goto out_dput;
+          }
+        #endif
+
 	mapping = victim->f_mapping;
 	prev = -1;
 	spin_lock(&swap_lock);
@@ -1305,8 +1377,36 @@
 	struct inode *inode = NULL;
 	int did_down = 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+        enum  rsbac_target_t          rsbac_target;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG
+                 "sys_swapon(): calling ADF\n");
+#endif
+        rsbac_target_id.scd = ST_swap;
+        rsbac_attribute_value.dummy = 0;
+        if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+                               current->pid,
+                               T_SCD,
+                               rsbac_target_id,
+                               A_none,
+                               rsbac_attribute_value))
+          {
+            return -EPERM;
+          }
+        #endif
+
 	spin_lock(&swap_lock);
 	p = swap_info;
 	for (type = 0 ; type < nr_swapfiles ; type++,p++)
@@ -1375,6 +1475,47 @@
 			goto bad_swap;
 	}
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC
+#ifdef CONFIG_RSBAC_DEBUG
+        if (rsbac_debug_aef)
+          rsbac_printk(KERN_DEBUG "sys_swapon(): calling ADF for DEV / FILE\n");
+#endif
+        if(S_ISBLK(inode->i_mode))
+          {
+            rsbac_target = T_DEV;
+            rsbac_target_id.dev.type = D_block;
+            rsbac_target_id.dev.major = RSBAC_MAJOR(inode->i_rdev);
+            rsbac_target_id.dev.minor = RSBAC_MINOR(inode->i_rdev);
+          }
+        else
+        if(S_ISREG(inode->i_mode))
+          {
+            rsbac_target = T_FILE;
+            rsbac_target_id.file.device = swap_file->f_dentry->d_sb->s_dev;
+            rsbac_target_id.file.inode  = inode->i_ino;
+            rsbac_target_id.file.dentry_p = swap_file->f_dentry;
+          }
+        else
+          {
+            rsbac_target = T_NONE;
+            rsbac_target_id.dummy = 0;
+          }
+        rsbac_attribute_value.dummy = 0;
+        if(   (rsbac_target != T_NONE)
+           && !rsbac_adf_request(R_ADD_TO_KERNEL,
+                                 current->pid,
+                                 rsbac_target,
+                                 rsbac_target_id,
+                                 A_none,
+                                 rsbac_attribute_value)
+	  )
+          {
+            error = -EPERM;
+            goto bad_swap;
+          }
+        #endif
+
 	error = -EINVAL;
 	if (S_ISBLK(inode->i_mode)) {
 		bdev = I_BDEV(inode);
diff -urN trunk/net/bridge/br_if.c 2.6.14-rsbac-1.2.5/net/bridge/br_if.c
--- trunk/net/bridge/br_if.c	2005-11-11 10:03:35.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/net/bridge/br_if.c	2005-11-10 16:16:41.000000000 +0000
@@ -22,6 +22,11 @@
 #include <linux/rtnetlink.h>
 #include <net/sock.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_NET
+#include <rsbac/adf.h>
+#endif
+
 #include "br_private.h"
 
 /*
@@ -342,6 +347,12 @@
 	struct net_bridge_port *p;
 	int err = 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (dev->flags & IFF_LOOPBACK || dev->type != ARPHRD_ETHER)
 		return -EINVAL;
 
@@ -351,6 +362,40 @@
 	if (dev->br_port != NULL)
 		return -EBUSY;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET_DEV
+	#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  rsbac_printk(KERN_DEBUG "br_add_if(): calling ADF\n");
+	#endif
+	strncpy(rsbac_target_id.netdev, dev->name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#ifndef CONFIG_RSBAC_NET_DEV_VIRT
+	{
+	  char * p = rsbac_target_id.netdev;
+		  while(*p)
+	    {
+	      if(*p == ':')
+	        {
+	          *p=' ';
+	          break;
+	        }
+	      p++;
+	    }
+	}
+	#endif
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_NETDEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	if (IS_ERR(p = new_nbp(br, dev, br_initial_port_cost(dev))))
 		return PTR_ERR(p);
 
@@ -382,9 +427,49 @@
 {
 	struct net_bridge_port *p = dev->br_port;
 	
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!p || p->br != br) 
 		return -EINVAL;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET_DEV
+	#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  rsbac_printk(KERN_DEBUG "br_del_if(): calling ADF\n");
+	#endif
+	strncpy(rsbac_target_id.netdev, dev->name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#ifndef CONFIG_RSBAC_NET_DEV_VIRT
+	{
+	  char * p = rsbac_target_id.netdev;
+		  while(*p)
+	    {
+	      if(*p == ':')
+	        {
+	          *p=' ';
+	          break;
+	        }
+	      p++;
+	    }
+	}
+	#endif
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_NETDEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	br_sysfs_removeif(p);
 	del_nbp(p);
 
diff -urN trunk/net/core/dev.c 2.6.14-rsbac-1.2.5/net/core/dev.c
--- trunk/net/core/dev.c	2005-11-11 10:03:31.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/net/core/dev.c	2005-11-10 16:16:39.000000000 +0000
@@ -115,6 +115,11 @@
 #endif	/* CONFIG_NET_RADIO */
 #include <asm/current.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_NET_DEV
+#include <rsbac/adf.h>
+#endif
+
 /*
  *	The list of packet types we will receive (as opposed to discard)
  *	and the routines to invoke.
@@ -2419,6 +2424,12 @@
 	int ret;
 	char *colon;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_DEV
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	/* One special case: SIOCGIFCONF takes ifconf argument
 	   and requires shared lock, because it sleeps writing
 	   to user space.
@@ -2438,10 +2449,20 @@
 
 	ifr.ifr_name[IFNAMSIZ-1] = 0;
 
+	#ifdef CONFIG_RSBAC_NET_DEV_VIRT
+	strncpy(rsbac_target_id.netdev, ifr.ifr_name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#endif
+
 	colon = strchr(ifr.ifr_name, ':');
 	if (colon)
 		*colon = 0;
 
+	#if defined(CONFIG_RSBAC_NET_DEV) && !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	strncpy(rsbac_target_id.netdev, ifr.ifr_name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#endif
+
 	/*
 	 *	See which interface the caller is talking about.
 	 */
@@ -2461,6 +2482,24 @@
 		case SIOCGIFMAP:
 		case SIOCGIFINDEX:
 		case SIOCGIFTXQLEN:
+			/* RSBAC */
+			#ifdef CONFIG_RSBAC_NET_DEV
+			#ifdef CONFIG_RSBAC_DEBUG
+			if (rsbac_debug_aef)
+			  rsbac_printk(KERN_DEBUG "dev_ioctl(): calling ADF\n");
+			#endif
+			rsbac_attribute_value.dummy = 0;
+			if (!rsbac_adf_request(R_GET_STATUS_DATA,
+						current->pid,
+						T_NETDEV,
+						rsbac_target_id,
+						A_none,
+						rsbac_attribute_value))
+			  {
+			    return -EPERM;
+			  }
+			#endif
+
 			dev_load(ifr.ifr_name);
 			read_lock(&dev_base_lock);
 			ret = dev_ifsioc(&ifr, cmd);
@@ -2499,6 +2538,25 @@
 		case SIOCSIFNAME:
 			if (!capable(CAP_NET_ADMIN))
 				return -EPERM;
+
+			/* RSBAC */
+			#ifdef CONFIG_RSBAC_NET_DEV
+			#ifdef CONFIG_RSBAC_DEBUG
+			if (rsbac_debug_aef)
+			  rsbac_printk(KERN_DEBUG "dev_ioctl(): calling ADF\n");
+			#endif
+			rsbac_attribute_value.dummy = 0;
+			if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+						current->pid,
+						T_NETDEV,
+						rsbac_target_id,
+						A_none,
+						rsbac_attribute_value))
+			  {
+			    return -EPERM;
+			  }
+			#endif
+
 			dev_load(ifr.ifr_name);
 			rtnl_lock();
 			ret = dev_ifsioc(&ifr, cmd);
@@ -2539,6 +2597,25 @@
 		case SIOCBRDELIF:
 			if (!capable(CAP_NET_ADMIN))
 				return -EPERM;
+
+			/* RSBAC */
+			#ifdef CONFIG_RSBAC_NET_DEV
+			#ifdef CONFIG_RSBAC_DEBUG
+			if (rsbac_debug_aef)
+			  rsbac_printk(KERN_DEBUG "dev_ioctl(): calling ADF\n");
+			#endif
+			rsbac_attribute_value.dummy = 0;
+			if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+						current->pid,
+						T_NETDEV,
+						rsbac_target_id,
+						A_none,
+						rsbac_attribute_value))
+			  {
+			    return -EPERM;
+			  }
+			#endif
+
 			dev_load(ifr.ifr_name);
 			rtnl_lock();
 			ret = dev_ifsioc(&ifr, cmd);
@@ -2579,6 +2656,24 @@
 				if (IW_IS_SET(cmd) || cmd == SIOCGIWENCODE) {
 					if (!capable(CAP_NET_ADMIN))
 						return -EPERM;
+
+					/* RSBAC */
+					#ifdef CONFIG_RSBAC_NET_DEV
+					#ifdef CONFIG_RSBAC_DEBUG
+					if (rsbac_debug_aef)
+					  printk(KERN_DEBUG "dev_ioctl(): calling ADF\n");
+					#endif
+					rsbac_attribute_value.dummy = 0;
+					if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+					    current->pid,
+					    T_NETDEV,
+					    rsbac_target_id,
+					    A_none,
+					    rsbac_attribute_value))
+					  {
+					    return -EPERM;
+					  }
+					#endif
 				}
 				dev_load(ifr.ifr_name);
 				rtnl_lock();
diff -urN trunk/net/ipv4/arp.c 2.6.14-rsbac-1.2.5/net/ipv4/arp.c
--- trunk/net/ipv4/arp.c	2005-11-11 10:03:34.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/net/ipv4/arp.c	2005-11-10 16:16:40.000000000 +0000
@@ -124,6 +124,11 @@
 #include <asm/system.h>
 #include <asm/uaccess.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_NET_DEV
+#include <rsbac/adf.h>
+#endif
+
 #include <linux/netfilter_arp.h>
 
 /*
@@ -1137,15 +1142,29 @@
 	struct arpreq r;
 	struct net_device *dev = NULL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_DEV
+        enum  rsbac_adf_request_t     rsbac_request = R_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	switch (cmd) {
 		case SIOCDARP:
 		case SIOCSARP:
 			if (!capable(CAP_NET_ADMIN))
 				return -EPERM;
+			#ifdef CONFIG_RSBAC_NET_DEV
+			rsbac_request = R_MODIFY_SYSTEM_DATA;
+			#endif
 		case SIOCGARP:
 			err = copy_from_user(&r, arg, sizeof(struct arpreq));
 			if (err)
 				return -EFAULT;
+			#ifdef CONFIG_RSBAC_NET_DEV
+			if(rsbac_request == R_NONE)
+				rsbac_request = R_GET_STATUS_DATA;
+			#endif
 			break;
 		default:
 			return -EINVAL;
@@ -1172,6 +1191,27 @@
 		err = -EINVAL;
 		if ((r.arp_flags & ATF_COM) && r.arp_ha.sa_family != dev->type)
 			goto out;
+
+		/* RSBAC */
+		#ifdef CONFIG_RSBAC_NET_DEV
+#ifdef CONFIG_RSBAC_DEBUG
+		if (rsbac_debug_aef)
+		  rsbac_printk(KERN_DEBUG "arp_ioctl(): calling ADF\n");
+#endif
+		strncpy(rsbac_target_id.netdev, r.arp_dev, RSBAC_IFNAMSIZ);
+		rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+		rsbac_attribute_value.dummy = 0;
+		if (!rsbac_adf_request(rsbac_request,
+				    current->pid,
+				    T_NETDEV,
+				    rsbac_target_id,
+				    A_none,
+				    rsbac_attribute_value))
+		  {
+		    err = -EPERM;
+		    goto out;
+		  }
+		#endif
 	} else if (cmd == SIOCGARP) {
 		err = -ENODEV;
 		goto out;
diff -urN trunk/net/ipv4/devinet.c 2.6.14-rsbac-1.2.5/net/ipv4/devinet.c
--- trunk/net/ipv4/devinet.c	2005-11-11 10:03:34.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/net/ipv4/devinet.c	2005-11-10 16:16:40.000000000 +0000
@@ -62,6 +62,11 @@
 #include <net/route.h>
 #include <net/ip_fib.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_NET_DEV
+#include <rsbac/adf.h>
+#endif
+
 struct ipv4_devconf ipv4_devconf = {
 	.accept_redirects = 1,
 	.send_redirects =  1,
@@ -405,10 +410,51 @@
 	struct ifaddrmsg *ifm = NLMSG_DATA(nlh);
 	struct in_ifaddr *ifa, **ifap;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	ASSERT_RTNL();
 
 	if ((in_dev = inetdev_by_index(ifm->ifa_index)) == NULL)
 		goto out;
+
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET_DEV
+	#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  rsbac_printk(KERN_DEBUG "inet_rtm_deladdr(): calling ADF\n");
+	#endif
+	strncpy(rsbac_target_id.netdev, in_dev->dev->name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#ifndef CONFIG_RSBAC_NET_DEV_VIRT
+	{
+	  char * p = rsbac_target_id.netdev;
+		  while(*p)
+	    {
+	      if(*p == ':')
+	        {
+	          *p=' ';
+	          break;
+	        }
+	      p++;
+	    }
+	}
+	#endif
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_BIND,
+				current->pid,
+				T_NETDEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	__in_dev_put(in_dev);
 
 	for (ifap = &in_dev->ifa_list; (ifa = *ifap) != NULL;
@@ -439,6 +485,12 @@
 	struct in_ifaddr *ifa;
 	int rc = -EINVAL;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	ASSERT_RTNL();
 
 	if (ifm->ifa_prefixlen > 32 || !rta[IFA_LOCAL - 1])
@@ -455,6 +507,40 @@
 			goto out;
 	}
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET_DEV
+	#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  rsbac_printk(KERN_DEBUG "inet_rtm_newaddr(): calling ADF\n");
+	#endif
+	strncpy(rsbac_target_id.netdev, in_dev->dev->name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#ifndef CONFIG_RSBAC_NET_DEV_VIRT
+	{
+	  char * p = rsbac_target_id.netdev;
+		  while(*p)
+	    {
+	      if(*p == ':')
+	        {
+	          *p=' ';
+	          break;
+	        }
+	      p++;
+	    }
+	}
+	#endif
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_BIND,
+				current->pid,
+				T_NETDEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	if ((ifa = inet_alloc_ifa()) == NULL)
 		goto out;
 
@@ -521,6 +607,13 @@
 	int ret = -EFAULT;
 	int tryaddrmatch = 0;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_DEV
+        enum  rsbac_adf_request_t     rsbac_request = R_NONE;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	/*
 	 *	Fetch the caller's info block into kernel space
 	 */
@@ -529,6 +622,11 @@
 		goto out;
 	ifr.ifr_name[IFNAMSIZ - 1] = 0;
 
+	#ifdef CONFIG_RSBAC_NET_DEV_VIRT
+	strncpy(rsbac_target_id.netdev, ifr.ifr_name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#endif
+
 	/* save original address for comparison */
 	memcpy(&sin_orig, sin, sizeof(*sin));
 
@@ -536,6 +634,11 @@
 	if (colon)
 		*colon = 0;
 
+	#if defined(CONFIG_RSBAC_NET_DEV) && !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	strncpy(rsbac_target_id.netdev, ifr.ifr_name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#endif
+
 #ifdef CONFIG_KMOD
 	dev_load(ifr.ifr_name);
 #endif
@@ -552,12 +655,19 @@
 		tryaddrmatch = (sin_orig.sin_family == AF_INET);
 		memset(sin, 0, sizeof(*sin));
 		sin->sin_family = AF_INET;
+
+		#ifdef CONFIG_RSBAC_NET_DEV
+		rsbac_request = R_GET_STATUS_DATA;
+		#endif
 		break;
 
 	case SIOCSIFFLAGS:
 		ret = -EACCES;
 		if (!capable(CAP_NET_ADMIN))
 			goto out;
+		#ifdef CONFIG_RSBAC_NET_DEV
+		rsbac_request = R_MODIFY_SYSTEM_DATA;
+		#endif
 		break;
 	case SIOCSIFADDR:	/* Set interface address (and family) */
 	case SIOCSIFBRDADDR:	/* Set the broadcast address */
@@ -569,6 +679,9 @@
 		ret = -EINVAL;
 		if (sin->sin_family != AF_INET)
 			goto out;
+		#ifdef CONFIG_RSBAC_NET_DEV
+		rsbac_request = R_BIND;
+		#endif
 		break;
 	default:
 		ret = -EINVAL;
@@ -581,6 +694,25 @@
 	if ((dev = __dev_get_by_name(ifr.ifr_name)) == NULL)
 		goto done;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET_DEV
+	#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  printk(KERN_DEBUG "devinet_ioctl(): calling ADF\n");
+	#endif
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(rsbac_request,
+				current->pid,
+				T_NETDEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    ret = -EPERM;
+	    goto done;
+	  }
+	#endif
+
 	if (colon)
 		*colon = ':';
 
diff -urN trunk/net/ipv4/fib_frontend.c 2.6.14-rsbac-1.2.5/net/ipv4/fib_frontend.c
--- trunk/net/ipv4/fib_frontend.c	2005-11-11 10:03:34.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/net/ipv4/fib_frontend.c	2005-11-10 16:16:40.000000000 +0000
@@ -45,6 +45,11 @@
 #include <net/arp.h>
 #include <net/ip_fib.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_NET
+#include <rsbac/adf.h>
+#endif
+
 #define FFprint(a...) printk(KERN_DEBUG a)
 
 #ifndef CONFIG_IP_MULTIPLE_TABLES
@@ -245,6 +250,12 @@
 		struct rtmsg	rtm;
 	} req;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	switch (cmd) {
 	case SIOCADDRT:		/* Add a route */
 	case SIOCDELRT:		/* Delete a route */
@@ -252,6 +263,26 @@
 			return -EPERM;
 		if (copy_from_user(&r, arg, sizeof(struct rtentry)))
 			return -EFAULT;
+
+		/* RSBAC */
+		#ifdef CONFIG_RSBAC_NET
+		#ifdef CONFIG_RSBAC_DEBUG
+		if (rsbac_debug_aef)
+		  rsbac_printk(KERN_DEBUG "ip_rt_ioctl(): calling ADF\n");
+		#endif
+		rsbac_target_id.scd = ST_network;
+		rsbac_attribute_value.dummy = 0;
+		if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+					current->pid,
+					T_SCD,
+					rsbac_target_id,
+					A_none,
+					rsbac_attribute_value))
+		  {
+		    return -EPERM;
+		  }
+		#endif
+
 		rtnl_lock();
 		err = fib_convert_rtentry(cmd, &req.nlh, &req.rtm, &rta, &r);
 		if (err == 0) {
@@ -306,9 +337,34 @@
 	struct rtattr **rta = arg;
 	struct rtmsg *r = NLMSG_DATA(nlh);
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (inet_check_attr(r, rta))
 		return -EINVAL;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET
+	#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  rsbac_printk(KERN_DEBUG "inet_rtm_delroute(): calling ADF\n");
+	#endif
+	rsbac_target_id.scd = ST_network;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	tb = fib_get_table(r->rtm_table);
 	if (tb)
 		return tb->tb_delete(tb, r, (struct kern_rta*)rta, nlh, &NETLINK_CB(skb));
@@ -321,9 +377,34 @@
 	struct rtattr **rta = arg;
 	struct rtmsg *r = NLMSG_DATA(nlh);
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (inet_check_attr(r, rta))
 		return -EINVAL;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET
+	#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  rsbac_printk(KERN_DEBUG "inet_rtm_newroute(): calling ADF\n");
+	#endif
+	rsbac_target_id.scd = ST_network;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	tb = fib_new_table(r->rtm_table);
 	if (tb)
 		return tb->tb_insert(tb, r, (struct kern_rta*)rta, nlh, &NETLINK_CB(skb));
diff -urN trunk/net/ipv4/fib_rules.c 2.6.14-rsbac-1.2.5/net/ipv4/fib_rules.c
--- trunk/net/ipv4/fib_rules.c	2005-11-11 10:03:33.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/net/ipv4/fib_rules.c	2005-11-10 16:16:40.000000000 +0000
@@ -47,6 +47,11 @@
 #include <net/sock.h>
 #include <net/ip_fib.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_NET
+#include <rsbac/adf.h>
+#endif
+
 #define FRprintk(a...)
 
 struct fib_rule
@@ -108,6 +113,31 @@
 	struct fib_rule *r, **rp;
 	int err = -ESRCH;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET
+	#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  rsbac_printk(KERN_DEBUG "inet_rtm_delrule(): calling ADF\n");
+	#endif
+	rsbac_target_id.scd = ST_network;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	for (rp=&fib_rules; (r=*rp) != NULL; rp=&r->r_next) {
 		if ((!rta[RTA_SRC-1] || memcmp(RTA_DATA(rta[RTA_SRC-1]), &r->r_src, 4) == 0) &&
 		    rtm->rtm_src_len == r->r_src_len &&
@@ -166,6 +196,12 @@
 	struct fib_rule *r, *new_r, **rp;
 	unsigned char table_id;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (rtm->rtm_src_len > 32 || rtm->rtm_dst_len > 32 ||
 	    (rtm->rtm_tos & ~IPTOS_TOS_MASK))
 		return -EINVAL;
@@ -183,6 +219,25 @@
 		}
 	}
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET
+	#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  rsbac_printk(KERN_DEBUG "inet_rtm_newrule(): calling ADF\n");
+	#endif
+	rsbac_target_id.scd = ST_network;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	new_r = kmalloc(sizeof(*new_r), GFP_KERNEL);
 	if (!new_r)
 		return -ENOMEM;
@@ -374,6 +429,31 @@
 	struct nlmsghdr  *nlh;
 	unsigned char	 *b = skb->tail;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET
+	#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  rsbac_printk(KERN_DEBUG "inet_fill_rule() [inet_dump_rules()]: calling ADF\n");
+	#endif
+	rsbac_target_id.scd = ST_network;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	nlh = NLMSG_NEW_ANSWER(skb, cb, RTM_NEWRULE, sizeof(*rtm), flags);
 	rtm = NLMSG_DATA(nlh);
 	rtm->rtm_family = AF_INET;
diff -urN trunk/net/ipv4/inet_diag.c 2.6.14-rsbac-1.2.5/net/ipv4/inet_diag.c
--- trunk/net/ipv4/inet_diag.c	2005-11-11 10:03:34.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/net/ipv4/inet_diag.c	2005-11-10 16:16:40.000000000 +0000
@@ -34,6 +34,10 @@
 
 #include <linux/inet_diag.h>
 
+#ifdef CONFIG_RSBAC_NET
+#include <rsbac/adf.h>
+#endif
+
 static const struct inet_diag_handler **inet_diag_table;
 
 struct inet_diag_entry {
@@ -733,6 +737,12 @@
 static __inline__ int
 inet_diag_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh)
 {
+#ifdef CONFIG_RSBAC_NET
+	union rsbac_target_id_t rsbac_target_id;
+	union rsbac_attribute_value_t rsbac_attribute_value;
+#endif
+
+
 	if (!(nlh->nlmsg_flags&NLM_F_REQUEST))
 		return 0;
 
@@ -745,6 +755,22 @@
 	if (NLMSG_LENGTH(sizeof(struct inet_diag_req)) > skb->len)
 		goto err_inval;
 
+#ifdef CONFIG_RSBAC_NET
+#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+		rsbac_printk(KERN_DEBUG "tcpdiag_rcv_msg(): calling ADF\n");
+#endif
+	rsbac_target_id.scd = ST_network;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	    return -EPERM;
+#endif
+
 	if (nlh->nlmsg_flags&NLM_F_DUMP) {
 		if (nlh->nlmsg_len >
 		    (4 + NLMSG_SPACE(sizeof(struct inet_diag_req)))) {
diff -urN trunk/net/ipv4/ipmr.c 2.6.14-rsbac-1.2.5/net/ipv4/ipmr.c
--- trunk/net/ipv4/ipmr.c	2005-11-11 10:03:33.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/net/ipv4/ipmr.c	2005-11-10 16:16:40.000000000 +0000
@@ -62,6 +62,11 @@
 #include <net/ipip.h>
 #include <net/checksum.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_NET
+#include <rsbac/adf.h>
+#endif
+
 #if defined(CONFIG_IP_PIMSM_V1) || defined(CONFIG_IP_PIMSM_V2)
 #define CONFIG_IP_PIMSM	1
 #endif
@@ -860,8 +865,33 @@
 	
 	if(optname!=MRT_INIT)
 	{
+	        /* RSBAC */
+        	#ifdef CONFIG_RSBAC_NET_DEV
+	        union rsbac_target_id_t       rsbac_target_id;
+        	union rsbac_attribute_value_t rsbac_attribute_value;
+	        #endif
+
 		if(sk!=mroute_socket && !capable(CAP_NET_ADMIN))
 			return -EACCES;
+
+		/* RSBAC */
+		#ifdef CONFIG_RSBAC_NET_DEV
+		#ifdef CONFIG_RSBAC_DEBUG
+		if (rsbac_debug_aef)
+		  rsbac_printk(KERN_DEBUG "ip_mroute_setsockopt(): calling ADF\n");
+		#endif
+		rsbac_target_id.scd = ST_network;
+		rsbac_attribute_value.dummy = 0;
+		if (!rsbac_adf_request(R_GET_STATUS_DATA,
+					current->pid,
+					T_SCD,
+					rsbac_target_id,
+					A_none,
+					rsbac_attribute_value))
+		  {
+		    return -EPERM;
+		  }
+		#endif
 	}
 
 	switch(optname)
diff -urN trunk/net/ipv4/netfilter/ip_tables.c 2.6.14-rsbac-1.2.5/net/ipv4/netfilter/ip_tables.c
--- trunk/net/ipv4/netfilter/ip_tables.c	2005-11-11 10:03:34.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/net/ipv4/netfilter/ip_tables.c	2005-11-10 16:16:40.000000000 +0000
@@ -35,6 +35,11 @@
 MODULE_AUTHOR("Netfilter Core Team <coreteam@netfilter.org>");
 MODULE_DESCRIPTION("IPv4 packet filter");
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_NET
+#include <rsbac/adf.h>
+#endif
+
 /*#define DEBUG_IP_FIREWALL*/
 /*#define DEBUG_ALLOW_ALL*/ /* Useful for remote debugging */
 /*#define DEBUG_IP_FIREWALL_USER*/
@@ -1288,9 +1293,34 @@
 {
 	int ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!capable(CAP_NET_ADMIN))
 		return -EPERM;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET
+	#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  rsbac_printk(KERN_DEBUG "do_ipt_set_ctl(): calling ADF\n");
+	#endif
+	rsbac_target_id.scd = ST_firewall;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	switch (cmd) {
 	case IPT_SO_SET_REPLACE:
 		ret = do_replace(user, len);
@@ -1313,9 +1343,34 @@
 {
 	int ret;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (!capable(CAP_NET_ADMIN))
 		return -EPERM;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET
+	#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  rsbac_printk(KERN_DEBUG "do_ipt_get_ctl(): calling ADF\n");
+	#endif
+	rsbac_target_id.scd = ST_firewall;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	switch (cmd) {
 	case IPT_SO_GET_INFO: {
 		char name[IPT_TABLE_MAXNAMELEN];
diff -urN trunk/net/ipv4/route.c 2.6.14-rsbac-1.2.5/net/ipv4/route.c
--- trunk/net/ipv4/route.c	2005-11-11 10:03:34.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/net/ipv4/route.c	2005-11-10 16:16:40.000000000 +0000
@@ -107,6 +107,11 @@
 #include <linux/sysctl.h>
 #endif
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_NET
+#include <rsbac/adf.h>
+#endif
+
 #define RT_FL_TOS(oldflp) \
     ((u32)(oldflp->fl4_tos & (IPTOS_RT_MASK | RTO_ONLINK)))
 
@@ -2743,6 +2748,31 @@
 	int err = -ENOBUFS;
 	struct sk_buff *skb;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET
+	#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  rsbac_printk(KERN_DEBUG "inet_rtm_getroute(): calling ADF\n");
+	#endif
+	rsbac_target_id.scd = ST_network;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	skb = alloc_skb(NLMSG_GOODSIZE, GFP_KERNEL);
 	if (!skb)
 		goto out;
diff -urN trunk/net/sched/cls_api.c 2.6.14-rsbac-1.2.5/net/sched/cls_api.c
--- trunk/net/sched/cls_api.c	2005-11-11 10:03:31.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/net/sched/cls_api.c	2005-11-10 16:16:39.000000000 +0000
@@ -38,6 +38,11 @@
 #include <net/pkt_sched.h>
 #include <net/pkt_cls.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_NET
+#include <rsbac/adf.h>
+#endif
+
 #if 0 /* control */
 #define DPRINTK(format,args...) printk(KERN_DEBUG format,##args)
 #else
@@ -146,6 +151,36 @@
 	unsigned long fh;
 	int err;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        enum  rsbac_adf_request_t     rsbac_request;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET
+	#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  rsbac_printk(KERN_DEBUG "tc_ctl_tfilter(): calling ADF\n");
+	#endif
+	if(n->nlmsg_type == RTM_GETTFILTER)
+	  rsbac_request = R_GET_STATUS_DATA;
+	else
+	  rsbac_request = R_MODIFY_SYSTEM_DATA;
+	rsbac_target_id.scd = ST_network;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(rsbac_request,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 replay:
 	tca = arg;
 	t = NLMSG_DATA(n);
@@ -397,6 +432,31 @@
 	struct Qdisc_class_ops *cops;
 	struct tcf_dump_args arg;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET
+	#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  rsbac_printk(KERN_DEBUG "tc_dump_tfilter(): calling ADF\n");
+	#endif
+	rsbac_target_id.scd = ST_network;
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_SCD,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	if (cb->nlh->nlmsg_len < NLMSG_LENGTH(sizeof(*tcm)))
 		return skb->len;
 	if ((dev = dev_get_by_index(tcm->tcm_ifindex)) == NULL)
diff -urN trunk/net/sched/sch_api.c 2.6.14-rsbac-1.2.5/net/sched/sch_api.c
--- trunk/net/sched/sch_api.c	2005-11-11 10:03:31.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/net/sched/sch_api.c	2005-11-10 16:16:39.000000000 +0000
@@ -37,6 +37,11 @@
 #include <linux/list.h>
 #include <linux/bitops.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC_NET_DEV
+#include <rsbac/adf.h>
+#endif
+
 #include <net/sock.h>
 #include <net/pkt_sched.h>
 
@@ -560,9 +565,48 @@
 	struct Qdisc *p = NULL;
 	int err;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_DEV
+        enum  rsbac_adf_request_t     rsbac_request;
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+	#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	char * rsbac_colon;
+	#endif
+        #endif
+
 	if ((dev = __dev_get_by_index(tcm->tcm_ifindex)) == NULL)
 		return -ENODEV;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET_DEV
+	#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  rsbac_printk(KERN_DEBUG "tc_get_qdisc(): calling ADF\n");
+	#endif
+	if(n->nlmsg_type == RTM_DELQDISC)
+	  rsbac_request = R_MODIFY_SYSTEM_DATA;
+	else
+	  rsbac_request = R_GET_STATUS_DATA;
+	strncpy(rsbac_target_id.netdev, dev->name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	rsbac_colon = strchr(rsbac_target_id.netdev, ':');
+	if(rsbac_colon)
+	  *rsbac_colon = 0;
+	#endif
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(rsbac_request,
+				current->pid,
+				T_NETDEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	if (clid) {
 		if (clid != TC_H_ROOT) {
 			if (TC_H_MAJ(clid) != TC_H_MAJ(TC_H_INGRESS)) {
@@ -620,6 +664,15 @@
 	struct Qdisc *q, *p;
 	int err;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_DEV
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+	#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	char * rsbac_colon;
+	#endif
+        #endif
+
 replay:
 	/* Reinit, just in case something touches this. */
 	tcm = NLMSG_DATA(n);
@@ -630,6 +683,31 @@
 	if ((dev = __dev_get_by_index(tcm->tcm_ifindex)) == NULL)
 		return -ENODEV;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET_DEV
+	#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  printk(KERN_DEBUG "tc_modify_qdisc(): calling ADF\n");
+	#endif
+	strncpy(rsbac_target_id.netdev, dev->name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	rsbac_colon = strchr(rsbac_target_id.netdev, ':');
+	if(rsbac_colon)
+	  *rsbac_colon = 0;
+	#endif
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_NETDEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	if (clid) {
 		if (clid != TC_H_ROOT) {
 			if (clid != TC_H_INGRESS) {
@@ -830,6 +908,15 @@
 	struct net_device *dev;
 	struct Qdisc *q;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_DEV
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+	#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	char * rsbac_colon;
+	#endif
+        #endif
+
 	s_idx = cb->args[0];
 	s_q_idx = q_idx = cb->args[1];
 	read_lock(&dev_base_lock);
@@ -838,6 +925,32 @@
 			continue;
 		if (idx > s_idx)
 			s_q_idx = 0;
+
+		/* RSBAC */
+		#ifdef CONFIG_RSBAC_NET_DEV
+		#ifdef CONFIG_RSBAC_DEBUG
+		if (rsbac_debug_aef)
+		  printk(KERN_DEBUG "tc_dump_qdisc(): calling ADF\n");
+		#endif
+		strncpy(rsbac_target_id.netdev, dev->name, RSBAC_IFNAMSIZ);
+		rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+		#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+		rsbac_colon = strchr(rsbac_target_id.netdev, ':');
+		if(rsbac_colon)
+		  *rsbac_colon = 0;
+		#endif
+		rsbac_attribute_value.dummy = 0;
+		if (!rsbac_adf_request(R_GET_STATUS_DATA,
+					current->pid,
+					T_NETDEV,
+					rsbac_target_id,
+					A_none,
+					rsbac_attribute_value))
+		  {
+		    continue;
+		  }
+		#endif
+
 		read_lock_bh(&qdisc_tree_lock);
 		q_idx = 0;
 		list_for_each_entry(q, &dev->qdisc_list, list) {
@@ -886,9 +999,43 @@
 	u32 qid = TC_H_MAJ(clid);
 	int err;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_DEV
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+	#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	char * rsbac_colon;
+	#endif
+        #endif
+
 	if ((dev = __dev_get_by_index(tcm->tcm_ifindex)) == NULL)
 		return -ENODEV;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET_DEV
+	#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  printk(KERN_DEBUG "tc_ctl_tclass(): calling ADF\n");
+	#endif
+	strncpy(rsbac_target_id.netdev, dev->name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	rsbac_colon = strchr(rsbac_target_id.netdev, ':');
+	if(rsbac_colon)
+	  *rsbac_colon = 0;
+	#endif
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+				current->pid,
+				T_NETDEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	/*
 	   parent == TC_H_UNSPEC - unspecified parent.
 	   parent == TC_H_ROOT   - class is root, which has no parent.
@@ -1067,11 +1214,45 @@
 	struct tcmsg *tcm = (struct tcmsg*)NLMSG_DATA(cb->nlh);
 	struct qdisc_dump_args arg;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_DEV
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+	#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	char * rsbac_colon;
+	#endif
+        #endif
+
 	if (cb->nlh->nlmsg_len < NLMSG_LENGTH(sizeof(*tcm)))
 		return 0;
 	if ((dev = dev_get_by_index(tcm->tcm_ifindex)) == NULL)
 		return 0;
 
+	/* RSBAC */
+	#ifdef CONFIG_RSBAC_NET_DEV
+	#ifdef CONFIG_RSBAC_DEBUG
+	if (rsbac_debug_aef)
+	  rsbac_printk(KERN_DEBUG "tc_dump_tclass(): calling ADF\n");
+	#endif
+	strncpy(rsbac_target_id.netdev, dev->name, RSBAC_IFNAMSIZ);
+	rsbac_target_id.netdev[RSBAC_IFNAMSIZ] = 0;
+	#if !defined(CONFIG_RSBAC_NET_DEV_VIRT)
+	rsbac_colon = strchr(rsbac_target_id.netdev, ':');
+	if(rsbac_colon)
+	  *rsbac_colon = 0;
+	#endif
+	rsbac_attribute_value.dummy = 0;
+	if (!rsbac_adf_request(R_GET_STATUS_DATA,
+				current->pid,
+				T_NETDEV,
+				rsbac_target_id,
+				A_none,
+				rsbac_attribute_value))
+	  {
+	    return -EPERM;
+	  }
+	#endif
+
 	s_t = cb->args[0];
 	t = 0;
 
diff -urN trunk/net/socket.c 2.6.14-rsbac-1.2.5/net/socket.c
--- trunk/net/socket.c	2005-11-11 10:03:35.000000000 +0000
+++ 2.6.14-rsbac-1.2.5/net/socket.c	2005-11-10 16:16:42.000000000 +0000
@@ -85,6 +85,13 @@
 #include <linux/kmod.h>
 #include <linux/audit.h>
 
+/* RSBAC */
+#ifdef CONFIG_RSBAC
+#include <rsbac/adf.h>
+#include <rsbac/aci.h>
+#include <rsbac/helpers.h>
+#endif
+
 #ifdef CONFIG_NET_RADIO
 #include <linux/wireless.h>		/* Note : will define WIRELESS_EXT */
 #endif	/* CONFIG_NET_RADIO */
@@ -538,6 +545,44 @@
 	struct sock_iocb *si = kiocb_to_siocb(iocb);
 	int err;
 
+        /* RSBAC  */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
+        /* RSBAC */
+        #if defined(CONFIG_RSBAC_NET_OBJ)
+        #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+        if(   sock->ops
+           && (sock->ops->family != AF_UNIX)
+          )
+        #endif
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG
+                     "sock_sendmsg() [sys_send(), sys_sendto(), sys_sendmsg()]: calling ADF\n");
+#endif
+            rsbac_target_id.netobj.sock_p = sock;
+            rsbac_target_id.netobj.local_addr = NULL;
+            rsbac_target_id.netobj.local_len = 0;
+            rsbac_target_id.netobj.remote_addr = msg->msg_name;
+            rsbac_target_id.netobj.remote_len = msg->msg_namelen;
+            rsbac_attribute_value.dummy = 0;
+            if (!rsbac_adf_request(R_SEND,
+                                   current->pid,
+                                   T_NETOBJ,
+                                   rsbac_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                return -EPERM;
+              }
+          }
+        #endif
+
 	si->sock = sock;
 	si->scm = NULL;
 	si->msg = msg;
@@ -547,7 +592,34 @@
 	if (err)
 		return err;
 
-	return sock->ops->sendmsg(iocb, sock, msg, size);
+	err = sock->ops->sendmsg(iocb, sock, msg, size);
+
+        /* RSBAC: notify ADF of sent msg */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        if(   !err
+           #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+           && sock->ops
+           && (sock->ops->family != AF_UNIX)
+           #endif
+          )
+          {
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(R_SEND,
+                                   current->pid,
+                                   T_NETOBJ,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sock_sendmsg() [sys_send(), sys_sendto(), sys_sendmsg()]: rsbac_adf_set_attr() returned error");
+              }
+          }
+        #endif
+
+	return err;
 }
 
 int sock_sendmsg(struct socket *sock, struct msghdr *msg, size_t size)
@@ -588,6 +660,13 @@
 	int err;
 	struct sock_iocb *si = kiocb_to_siocb(iocb);
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	si->sock = sock;
 	si->scm = NULL;
 	si->msg = msg;
@@ -598,7 +677,68 @@
 	if (err)
 		return err;
 
-	return sock->ops->recvmsg(iocb, sock, msg, size, flags);
+	err = sock->ops->recvmsg(iocb, sock, msg, size, flags);
+
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+        if(   sock->ops
+           && (sock->ops->family != AF_UNIX)
+          )
+        #endif
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG
+                     "sock_recvmsg() [sys_recv(), sys_recvfrom(), sys_recvmsg()]: calling ADF\n");
+#endif
+            rsbac_target_id.netobj.sock_p = sock;
+            rsbac_target_id.netobj.local_addr = NULL;
+            rsbac_target_id.netobj.local_len = 0;
+            rsbac_target_id.netobj.remote_addr = NULL;
+            rsbac_target_id.netobj.remote_len = 0;
+            rsbac_attribute_value.dummy = 0;
+            if (!rsbac_adf_request(R_RECEIVE,
+                                   current->pid,
+                                   T_NETOBJ,
+                                   rsbac_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                /* clear buffer */
+                if(err > 0)
+                  memset(msg->msg_iov->iov_base - err, 0, err);
+                return -EPERM;
+              }
+          }
+        #endif
+
+        /* RSBAC: notify ADF of received message */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        if((err >= 0)
+        #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+           && sock->ops
+           && (sock->ops->family != AF_UNIX)
+        #endif
+          )
+          {
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(R_RECEIVE,
+                                   current->pid,
+                                   T_NETOBJ,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sock_recvmsg() [sys_recv(), sys_recvfrom(), sys_recvmsg()]: rsbac_adf_set_attr() for RECEIVE returned error\n");
+              }
+          }
+        #endif
+
+	return err;
 }
 
 int sock_recvmsg(struct socket *sock, struct msghdr *msg, 
@@ -1191,14 +1331,76 @@
 	int retval;
 	struct socket *sock;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        union  rsbac_target_id_t       rsbac_target_id;
+        union  rsbac_target_id_t       rsbac_new_target_id;
+        union  rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	retval = sock_create(family, type, protocol, &sock);
 	if (retval < 0)
 		goto out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+        if(family != AF_UNIX)
+        #endif
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "sys_socket() [sys_socketcall()]: calling ADF\n");
+#endif
+            rsbac_target_id.netobj.sock_p = sock;
+            rsbac_target_id.netobj.local_addr = NULL;
+            rsbac_target_id.netobj.local_len = 0;
+            rsbac_target_id.netobj.remote_addr = NULL;
+            rsbac_target_id.netobj.remote_len = 0;
+            rsbac_attribute_value.dummy = 0;
+            if (!rsbac_adf_request(R_CREATE,
+                                   current->pid,
+                                   T_NETOBJ,
+                                   rsbac_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  rsbac_printk(KERN_DEBUG "sys_socket() [sys_socketcall()]: ADF returned NOT_GRANTED\n");
+#endif
+                retval = -EPERM;
+                goto out_release;
+              }
+          }
+        #endif
+
 	retval = sock_map_fd(sock);
 	if (retval < 0)
 		goto out_release;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+        if(family != AF_UNIX)
+        #endif
+          {
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(R_CREATE,
+                                   current->pid,
+                                   T_NETOBJ,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sys_socket() [sys_socketcall()]: rsbac_adf_set_attr() returned error\n");
+              }
+          }
+        #endif
+
 out:
 	/* It may be already another descriptor 8) Not kernel problem. */
 	return retval;
@@ -1217,6 +1419,12 @@
 	struct socket *sock1, *sock2;
 	int fd1, fd2, err;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        union  rsbac_target_id_t       rsbac_target_id;
+        union  rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	/*
 	 * Obtain the first socket and check if the underlying protocol
 	 * supports the socketpair call.
@@ -1226,10 +1434,76 @@
 	if (err < 0)
 		goto out;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+        if(family != AF_UNIX)
+        #endif
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "sys_socketpair() [sys_socketcall()]: calling ADF\n");
+#endif
+            rsbac_target_id.netobj.sock_p = sock1;
+            rsbac_target_id.netobj.local_addr = NULL;
+            rsbac_target_id.netobj.local_len = 0;
+            rsbac_target_id.netobj.remote_addr = NULL;
+            rsbac_target_id.netobj.remote_len = 0;
+            rsbac_attribute_value.dummy = 0;
+            if (!rsbac_adf_request(R_CREATE,
+                                   current->pid,
+                                   T_NETOBJ,
+                                   rsbac_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  rsbac_printk(KERN_DEBUG "sys_socketpair() [sys_socketcall()]: ADF returned NOT_GRANTED\n");
+#endif
+                err = -EPERM;
+                goto out_release_1;
+              }
+          }
+        #endif
+
 	err = sock_create(family, type, protocol, &sock2);
 	if (err < 0)
 		goto out_release_1;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+        if(family != AF_UNIX)
+        #endif
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "sys_socketpair() [sys_socketcall()]: calling ADF\n");
+#endif
+            rsbac_target_id.netobj.sock_p = sock2;
+            rsbac_target_id.netobj.local_addr = NULL;
+            rsbac_target_id.netobj.local_len = 0;
+            rsbac_target_id.netobj.remote_addr = NULL;
+            rsbac_target_id.netobj.remote_len = 0;
+            rsbac_attribute_value.dummy = 0;
+            if (!rsbac_adf_request(R_CREATE,
+                                   current->pid,
+                                   T_NETOBJ,
+                                   rsbac_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  rsbac_printk(KERN_DEBUG "sys_socketpair() [sys_socketcall()]: ADF returned NOT_GRANTED\n");
+#endif
+                err = -EPERM;
+                goto out_release_both;
+              }
+          }
+        #endif
+
 	err = sock1->ops->socketpair(sock1, sock2);
 	if (err < 0) 
 		goto out_release_both;
@@ -1291,12 +1565,76 @@
 	if((sock = sockfd_lookup(fd,&err))!=NULL)
 	{
 		if((err=move_addr_to_kernel(umyaddr,addrlen,address))>=0) {
+                        #ifdef CONFIG_RSBAC_NET_OBJ
+			union rsbac_target_id_t		rsbac_target_id;
+			union rsbac_target_id_t		rsbac_new_target_id;
+			union rsbac_attribute_value_t   rsbac_attribute_value;
+
+                        #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+                        if(   sock->ops
+                           && (sock->ops->family != AF_UNIX)
+                          )
+                        #endif
+                          {
+                            rsbac_target_id.netobj.sock_p = sock;
+                            rsbac_target_id.netobj.local_addr = address;
+                            rsbac_target_id.netobj.local_len = addrlen;
+                            rsbac_target_id.netobj.remote_addr = NULL;
+                            rsbac_target_id.netobj.remote_len = 0;
+			    rsbac_attribute_value.dummy = 0;
+#ifdef CONFIG_RSBAC_DEBUG
+			    if (rsbac_debug_aef)
+				rsbac_printk(KERN_DEBUG
+					"sys_bind() [sys_socketcall()]: calling ADF");
+#endif
+			    if(!rsbac_adf_request(R_BIND,
+						current->pid,
+						T_NETOBJ,
+						rsbac_target_id,
+						A_none,
+						rsbac_attribute_value))
+			      {
+#ifdef CONFIG_RSBAC_DEBUG
+				   if (rsbac_debug_aef)
+					   rsbac_printk(KERN_DEBUG "sys_bind() [sys_socketcall()]: ADF returned NOT_GRANTED\n");
+#endif
+				   sockfd_put(sock);
+				   return -EPERM;
+			      }
+			  }
+                        #endif
+
 			err = security_socket_bind(sock, (struct sockaddr *)address, addrlen);
 			if (err) {
 				sockfd_put(sock);
 				return err;
 			}
 			err = sock->ops->bind(sock, (struct sockaddr *)address, addrlen);
+
+                        /* RSBAC: notify ADF of binding */
+                        #ifdef CONFIG_RSBAC_NET_OBJ
+                        if(!err
+                        #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+                           && sock->ops
+                           && (sock->ops->family != AF_UNIX)
+                        #endif
+                          )
+                          {
+                            rsbac_new_target_id.dummy = 0;
+                            if (rsbac_adf_set_attr(R_BIND,
+                                                   current->pid,
+                                                   T_NETOBJ,
+                                                   rsbac_target_id,
+                                                   T_NONE,
+                                                   rsbac_new_target_id,
+                                                   A_none,
+                                                   rsbac_attribute_value))
+                              {
+                                rsbac_printk(KERN_WARNING
+                                       "sys_bind() [sys_socketcall()]: rsbac_adf_set_attr() returned error");
+                              }
+                          }
+                        #endif
 		}
 		sockfd_put(sock);
 	}			
@@ -1317,7 +1655,50 @@
 	struct socket *sock;
 	int err;
 	
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+	
 	if ((sock = sockfd_lookup(fd, &err)) != NULL) {
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC_NET_OBJ
+                #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+                if(   sock->ops
+                   && (sock->ops->family != AF_UNIX)
+                  )
+                #endif
+                  {
+#ifdef CONFIG_RSBAC_DEBUG
+                    if (rsbac_debug_aef)
+                      rsbac_printk(KERN_DEBUG
+                             "sys_listen() [sys_socketcall()]: calling ADF\n");
+#endif
+                    rsbac_target_id.netobj.sock_p = sock;
+                    rsbac_target_id.netobj.local_addr = NULL;
+                    rsbac_target_id.netobj.local_len = 0;
+                    rsbac_target_id.netobj.remote_addr = NULL;
+                    rsbac_target_id.netobj.remote_len = 0;
+                    rsbac_attribute_value.dummy = 0;
+                    if (!rsbac_adf_request(R_LISTEN,
+                                           current->pid,
+                                           T_NETOBJ,
+                                           rsbac_target_id,
+                                           A_none,
+                                           rsbac_attribute_value))
+                      {
+#ifdef CONFIG_RSBAC_DEBUG
+                        if (rsbac_debug_aef)
+                          rsbac_printk(KERN_DEBUG "sys_listen() [sys_socketcall()]: ADF returned NOT_GRANTED\n");
+#endif
+                        sockfd_put(sock);
+                        return -EPERM;
+                      }
+                  }
+                #endif
+
 		if ((unsigned) backlog > sysctl_somaxconn)
 			backlog = sysctl_somaxconn;
 
@@ -1328,6 +1709,32 @@
 		}
 
 		err=sock->ops->listen(sock, backlog);
+
+                /* RSBAC: notify ADF of listened socket */
+                #ifdef CONFIG_RSBAC_NET_OBJ
+                if(!err
+                #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+                   && sock->ops
+                   && (sock->ops->family != AF_UNIX)
+                #endif
+                  )
+                  {
+                    rsbac_new_target_id.dummy = 0;
+                    if (rsbac_adf_set_attr(R_LISTEN,
+                                           current->pid,
+                                           T_NETOBJ,
+                                           rsbac_target_id,
+                                           T_NONE,
+                                           rsbac_new_target_id,
+                                           A_none,
+                                           rsbac_attribute_value))
+                      {
+                        rsbac_printk(KERN_WARNING
+                               "sys_listen() [sys_socketcall()]: rsbac_adf_set_attr() returned error");
+                      }
+		  }
+                #endif
+
 		sockfd_put(sock);
 	}
 	return err;
@@ -1352,6 +1759,13 @@
 	int err, len;
 	char address[MAX_SOCK_ADDR];
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	sock = sockfd_lookup(fd, &err);
 	if (!sock)
 		goto out;
@@ -1377,6 +1791,49 @@
 	if (err < 0)
 		goto out_release;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+        if(   sock->ops
+           && (sock->ops->family != AF_UNIX)
+          )
+        #endif
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG "sys_accept() [sys_socketcall()]: calling ADF\n");
+#endif
+            rsbac_target_id.netobj.sock_p = newsock;
+            rsbac_target_id.netobj.local_addr = NULL;
+            rsbac_target_id.netobj.local_len = 0;
+            if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0)
+              {
+                rsbac_target_id.netobj.remote_addr = NULL;
+                rsbac_target_id.netobj.remote_len = 0;
+              }
+            else
+              {
+                rsbac_target_id.netobj.remote_addr = address;
+                rsbac_target_id.netobj.remote_len = len;
+              }
+            rsbac_attribute_value.dummy = 0;
+            if (!rsbac_adf_request(R_ACCEPT,
+                                   current->pid,
+                                   T_NETOBJ,
+                                   rsbac_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  rsbac_printk(KERN_DEBUG "sys_accept() [sys_socketcall()]: ADF returned NOT_GRANTED\n");
+#endif
+                err = -EPERM;
+                goto out_release;
+              }
+          }
+        #endif
+
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
 			err = -ECONNABORTED;
@@ -1394,6 +1851,30 @@
 
 	security_socket_post_accept(sock, newsock);
 
+        /* RSBAC: notify ADF of accepted connection */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+        if(   sock->ops
+           && (sock->ops->family != AF_UNIX)
+          )
+        #endif
+          {
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(R_ACCEPT,
+                                   current->pid,
+                                   T_NETOBJ,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sys_accept() [sys_socketcall()]: rsbac_adf_set_attr() returned error\n");
+              }
+          }
+        #endif
+
 out_put:
 	sockfd_put(sock);
 out:
@@ -1422,6 +1903,13 @@
 	char address[MAX_SOCK_ADDR];
 	int err;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	sock = sockfd_lookup(fd, &err);
 	if (!sock)
 		goto out;
@@ -1433,8 +1921,68 @@
 	if (err)
 		goto out_put;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+        if(   sock->ops
+           && (sock->ops->family != AF_UNIX)
+          )
+        #endif
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef) rsbac_printk(KERN_DEBUG "sys_connect() [sys_socketcall()]: calling ADF\n");
+#endif
+            rsbac_target_id.netobj.sock_p = sock;
+            rsbac_target_id.netobj.local_addr = NULL;
+            rsbac_target_id.netobj.local_len = 0;
+            rsbac_target_id.netobj.remote_addr = address;
+            rsbac_target_id.netobj.remote_len = addrlen;
+            rsbac_attribute_value.dummy = 0;
+            if (!rsbac_adf_request(R_CONNECT,
+                                   current->pid,
+                                   T_NETOBJ,
+                                   rsbac_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+#ifdef CONFIG_RSBAC_DEBUG
+                if (rsbac_debug_aef)
+                  rsbac_printk(KERN_DEBUG "sys_connect() [sys_socketcall()]: ADF returned NOT_GRANTED\n");
+#endif
+                err = -EPERM;
+                goto out_put;
+              }
+          }
+        #endif
+
 	err = sock->ops->connect(sock, (struct sockaddr *) address, addrlen,
 				 sock->file->f_flags);
+
+        /* RSBAC: notify ADF of opened socket connection */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        if(!err
+        #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+           && sock->ops
+           && (sock->ops->family != AF_UNIX)
+        #endif
+          )
+          {
+            rsbac_new_target_id.dummy = 0;
+            if (rsbac_adf_set_attr(R_CONNECT,
+                                   current->pid,
+                                   T_NETOBJ,
+                                   rsbac_target_id,
+                                   T_NONE,
+                                   rsbac_new_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                rsbac_printk(KERN_WARNING
+                       "sys_connect() [sys_socketcall()]: rsbac_adf_set_attr() returned error");
+              }
+          }
+        #endif
+
 out_put:
 	sockfd_put(sock);
 out:
@@ -1452,6 +2000,12 @@
 	char address[MAX_SOCK_ADDR];
 	int len, err;
 	
+        /* RSBAC  */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	sock = sockfd_lookup(fd, &err);
 	if (!sock)
 		goto out;
@@ -1460,6 +2014,38 @@
 	if (err)
 		goto out_put;
 
+        /* RSBAC */
+        #if defined(CONFIG_RSBAC_NET_OBJ)
+        #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+        if(   sock->ops
+           && (sock->ops->family != AF_UNIX)
+          )
+        #endif
+          {
+#ifdef CONFIG_RSBAC_DEBUG
+            if (rsbac_debug_aef)
+              rsbac_printk(KERN_DEBUG
+                     "sys_getsockname(): calling ADF\n");
+#endif
+            rsbac_target_id.netobj.sock_p = sock;
+            rsbac_target_id.netobj.local_addr = NULL;
+            rsbac_target_id.netobj.local_len = 0;
+            rsbac_target_id.netobj.remote_addr = NULL;
+            rsbac_target_id.netobj.remote_len = 0;
+            rsbac_attribute_value.dummy = 0;
+            if (!rsbac_adf_request(R_GET_STATUS_DATA,
+                                   current->pid,
+                                   T_NETOBJ,
+                                   rsbac_target_id,
+                                   A_none,
+                                   rsbac_attribute_value))
+              {
+                err = -EPERM;
+                goto out_put;
+              }
+          }
+        #endif
+
 	err = sock->ops->getname(sock, (struct sockaddr *)address, &len, 0);
 	if (err)
 		goto out_put;
@@ -1482,6 +2068,12 @@
 	char address[MAX_SOCK_ADDR];
 	int len, err;
 
+        /* RSBAC  */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if ((sock = sockfd_lookup(fd, &err))!=NULL)
 	{
 		err = security_socket_getpeername(sock);
@@ -1490,6 +2082,38 @@
 			return err;
 		}
 
+	        /* RSBAC */
+	        #if defined(CONFIG_RSBAC_NET_OBJ)
+	        #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+	        if(   sock->ops
+	           && (sock->ops->family != AF_UNIX)
+	          )
+	        #endif
+	          {
+#ifdef CONFIG_RSBAC_DEBUG
+	            if (rsbac_debug_aef)
+	              rsbac_printk(KERN_DEBUG
+	                     "sys_getpeername(): calling ADF\n");
+#endif
+	            rsbac_target_id.netobj.sock_p = sock;
+	            rsbac_target_id.netobj.local_addr = NULL;
+	            rsbac_target_id.netobj.local_len = 0;
+	            rsbac_target_id.netobj.remote_addr = NULL;
+	            rsbac_target_id.netobj.remote_len = 0;
+	            rsbac_attribute_value.dummy = 0;
+	            if (!rsbac_adf_request(R_GET_STATUS_DATA,
+	                                   current->pid,
+	                                   T_NETOBJ,
+	                                   rsbac_target_id,
+	                                   A_none,
+	                                   rsbac_attribute_value))
+	              {
+			sockfd_put(sock);
+	                return -EPERM;
+	              }
+	          }
+	        #endif
+
 		err = sock->ops->getname(sock, (struct sockaddr *)address, &len, 1);
 		if (!err)
 			err=move_addr_to_user(address,len, usockaddr, usockaddr_len);
@@ -1613,6 +2237,12 @@
 	int err;
 	struct socket *sock;
 
+        /* RSBAC  */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if (optlen < 0)
 		return -EINVAL;
 			
@@ -1624,6 +2254,38 @@
 			return err;
 		}
 
+	        /* RSBAC */
+	        #if defined(CONFIG_RSBAC_NET_OBJ)
+	        #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+	        if(   sock->ops
+	           && (sock->ops->family != AF_UNIX)
+	          )
+	        #endif
+	          {
+#ifdef CONFIG_RSBAC_DEBUG
+	            if (rsbac_debug_aef)
+	              rsbac_printk(KERN_DEBUG
+	                     "sys_setsockopt()]: calling ADF\n");
+#endif
+	            rsbac_target_id.netobj.sock_p = sock;
+	            rsbac_target_id.netobj.local_addr = NULL;
+	            rsbac_target_id.netobj.local_len = 0;
+	            rsbac_target_id.netobj.remote_addr = NULL;
+	            rsbac_target_id.netobj.remote_len = 0;
+	            rsbac_attribute_value.setsockopt_level = level;
+	            if (!rsbac_adf_request(R_MODIFY_SYSTEM_DATA,
+	                                   current->pid,
+	                                   T_NETOBJ,
+	                                   rsbac_target_id,
+	                                   A_setsockopt_level,
+	                                   rsbac_attribute_value))
+	              {
+			sockfd_put(sock);
+	                return -EPERM;
+	              }
+	          }
+	        #endif
+
 		if (level == SOL_SOCKET)
 			err=sock_setsockopt(sock,level,optname,optval,optlen);
 		else
@@ -1643,6 +2305,12 @@
 	int err;
 	struct socket *sock;
 
+        /* RSBAC  */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if ((sock = sockfd_lookup(fd, &err))!=NULL)
 	{
 		err = security_socket_getsockopt(sock, level, 
@@ -1652,6 +2320,38 @@
 			return err;
 		}
 
+	        /* RSBAC */
+	        #if defined(CONFIG_RSBAC_NET_OBJ)
+	        #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+	        if(   sock->ops
+	           && (sock->ops->family != AF_UNIX)
+	          )
+	        #endif
+	          {
+#ifdef CONFIG_RSBAC_DEBUG
+	            if (rsbac_debug_aef)
+	              rsbac_printk(KERN_DEBUG
+	                     "sys_getsockopt(): calling ADF\n");
+#endif
+	            rsbac_target_id.netobj.sock_p = sock;
+	            rsbac_target_id.netobj.local_addr = NULL;
+	            rsbac_target_id.netobj.local_len = 0;
+	            rsbac_target_id.netobj.remote_addr = NULL;
+	            rsbac_target_id.netobj.remote_len = 0;
+	            rsbac_attribute_value.dummy = 0;
+	            if (!rsbac_adf_request(R_GET_STATUS_DATA,
+	                                   current->pid,
+	                                   T_NETOBJ,
+	                                   rsbac_target_id,
+	                                   A_none,
+	                                   rsbac_attribute_value))
+	              {
+			sockfd_put(sock);
+	                return -EPERM;
+	              }
+	          }
+	        #endif
+
 		if (level == SOL_SOCKET)
 			err=sock_getsockopt(sock,level,optname,optval,optlen);
 		else
@@ -1671,6 +2371,13 @@
 	int err;
 	struct socket *sock;
 
+        /* RSBAC */
+        #ifdef CONFIG_RSBAC_NET_OBJ
+        union rsbac_target_id_t       rsbac_target_id;
+        union rsbac_target_id_t       rsbac_new_target_id;
+        union rsbac_attribute_value_t rsbac_attribute_value;
+        #endif
+
 	if ((sock = sockfd_lookup(fd, &err))!=NULL)
 	{
 		err = security_socket_shutdown(sock, how);
@@ -1679,7 +2386,71 @@
 			return err;
 		}
 				
+                /* RSBAC */
+                #ifdef CONFIG_RSBAC_NET_OBJ
+                #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+                if(   sock->ops
+                   && (sock->ops->family != AF_UNIX)
+                  )
+                #endif
+                  {
+#ifdef CONFIG_RSBAC_DEBUG
+                    if (rsbac_debug_aef)
+                      rsbac_printk(KERN_DEBUG
+                             "sys_shutdown() [sys_socketcall()]: calling ADF\n");
+#endif
+                    rsbac_target_id.netobj.sock_p = sock;
+                    rsbac_target_id.netobj.local_addr = NULL;
+                    rsbac_target_id.netobj.local_len = 0;
+                    rsbac_target_id.netobj.remote_addr = NULL;
+                    rsbac_target_id.netobj.remote_len = 0;
+                    rsbac_attribute_value.dummy = 0;
+                    if (!rsbac_adf_request(R_NET_SHUTDOWN,
+                                           current->pid,
+                                           T_NETOBJ,
+                                           rsbac_target_id,
+                                           A_none,
+                                           rsbac_attribute_value))
+                      {
+                        sockfd_put(sock);
+                        return -EPERM;
+                      }
+                  }
+                #endif
+
 		err=sock->ops->shutdown(sock, how);
+
+                /* RSBAC: notifying adf / socket */
+                #ifdef CONFIG_RSBAC_NET_OBJ
+                if(!err
+                #if !defined(CONFIG_RSBAC_NET_OBJ_UNIX)
+                   && sock->ops
+                   && (sock->ops->family != AF_UNIX)
+                #endif
+                  )
+                  {
+#ifdef CONFIG_RSBAC_DEBUG
+                    if (rsbac_debug_aef)
+                      rsbac_printk(KERN_DEBUG
+                             "sys_shutdown: calling rsbac_adf_set_attr() for NET_SHUTDOWN on netobj\n");
+#endif
+                    rsbac_new_target_id.dummy = 0;
+                    rsbac_attribute_value.dummy = 0;
+                    if (rsbac_adf_set_attr(R_NET_SHUTDOWN,
+                                           current->pid,
+                                           T_NETOBJ,
+                                           rsbac_target_id,
+                                           T_NONE,
+                                           rsbac_new_target_id,
+                                           A_none,
+                                           rsbac_attribute_value))
+                      {
+                        rsbac_printk(KERN_WARNING 
+                               "sys_shutdown(): rsbac_adf_set_attr() for NET_SHUTDOWN on socket returned error\n");
+                      }
+                  }
+                #endif
+
 		sockfd_put(sock);
 	}
 	return err;
