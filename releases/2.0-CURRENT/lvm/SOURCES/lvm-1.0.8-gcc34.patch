--- LVM/1.0.8/tools/lib/pv_read_all_pv_of_vg.c.bluca	2003-09-03 17:16:08.000000000 +0200
+++ LVM/1.0.8/tools/lib/pv_read_all_pv_of_vg.c	2004-11-28 11:44:46.919068551 +0100
@@ -130,6 +130,7 @@
             }
             pv_this[p] = NULL;
 uuid_check_end:
+		 1; /* trick gcc 3.4 */
          }
          for ( pp = 0; pp < p - 2; pp++) {
             if ( pv_this[pp] == NULL) {
--- LVM/1.0.8/tools/lib/pv_read_uuidlist.c.bluca	2003-02-06 16:05:34.000000000 +0100
+++ LVM/1.0.8/tools/lib/pv_read_uuidlist.c	2004-11-28 11:43:43.734522720 +0100
@@ -50,7 +50,7 @@
    static char *this_pv_uuidlist = NULL;
    int num;
 
-   debug_enter(__FUNCTION__ " -- CALLED with %s\n", pv ? pv->pv_name : "NULL");
+   debug_enter("pv_read_uuidlist -- CALLED with %s\n", pv ? pv->pv_name : "NULL");
 
    if (pv == NULL || pv_uuidlist == NULL)
       return -LVM_EPARAM;
--- LVM/1.0.8/tools/lib/pv_write_uuidlist.c.bluca	2003-02-06 16:05:34.000000000 +0100
+++ LVM/1.0.8/tools/lib/pv_write_uuidlist.c	2004-11-28 11:44:18.154828190 +0100
@@ -71,7 +71,7 @@
 
             /* Create/fix UUIDs for any PVs that need it */
             if (lvm_check_uuid(pv->pv_uuid) < 0) {
-               debug(__FUNCTION__ " -- creating new UUID for PV %s\n",
+               debug("pv_write_uuidlist -- creating new UUID for PV %s\n",
                      pv->pv_name);
                memset(pv->pv_uuid, 0, sizeof(pv->pv_uuid));
                memcpy(pv->pv_uuid, lvm_create_uuid(UUID_LEN), UUID_LEN);
