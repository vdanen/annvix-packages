--- mkinitrd-4.2.17/nash/Makefile.label	2007-09-14 12:51:51.000000000 +0200
+++ mkinitrd-4.2.17/nash/Makefile	2007-09-14 12:51:51.000000000 +0200
@@ -14,7 +14,7 @@ endif
 
 mandir=usr/share/man
 
-nash: nash.o mount_by_label.o name_to_dev_t.o
+nash: nash.o mount_by_label.o name_to_dev_t.o $(DIETLIBC_LIB)/libvolume_id.a $(DIETLIBC_LIB)/libcompat.a
 	$(CC) $(STATIC) -g $(LDFLAGS) -o $@ $^
 
 clean:
--- mkinitrd-4.2.17/nash/mount_by_label.c.label	2005-03-02 04:10:42.000000000 +0100
+++ mkinitrd-4.2.17/nash/mount_by_label.c	2007-09-14 12:51:59.000000000 +0200
@@ -20,9 +20,13 @@
 #include <fcntl.h>
 #include <stdlib.h>
 #include <unistd.h>
+#include <sys/ioctl.h>
 #include <sys/stat.h>
 #include "linux_fs.h"
 #include "mount_by_label.h"
+#include <libvolume_id.h>
+
+#define BLKGETSIZE64 _IOR(0x12,114,size_t)
 
 #define PROC_PARTITIONS "/proc/partitions"
 #define DEVLABELDIR	"/dev"
@@ -39,41 +43,45 @@ static struct uuidCache_s {
 
 /* for now, only ext2, ext3 and xfs are supported */
 static int
-get_label_uuid(const char *device, char **label, char *uuid) {
-
-	/* start with ext2/3 and xfs tests, taken from mount_guess_fstype */
-	/* should merge these later */
-	int fd;
+get_label_uuid(const char *device, char **label, char **uuid) {
 	int rv = 1;
-	size_t namesize;
-	struct ext2_super_block e2sb;
-	struct xfs_super_block xfsb;
-
-	fd = open(device, O_RDONLY);
-	if (fd < 0)
-		return rv;
-
-	if (lseek(fd, 1024, SEEK_SET) == 1024
-	    && read(fd, (char *) &e2sb, sizeof(e2sb)) == sizeof(e2sb)
-	    && (ext2magic(e2sb) == EXT2_SUPER_MAGIC)) {
-		memcpy(uuid, e2sb.s_uuid, sizeof(e2sb.s_uuid));
-		namesize = sizeof(e2sb.s_volume_name);
-		if ((*label = calloc(namesize + 1, 1)) != NULL)
-			memcpy(*label, e2sb.s_volume_name, namesize);
-		rv = 0;
-	}
-	else if (lseek(fd, 0, SEEK_SET) == 0
-	    && read(fd, (char *) &xfsb, sizeof(xfsb)) == sizeof(xfsb)
-	    && (strncmp((char *)xfsb.s_magic, XFS_SUPER_MAGIC, 4) == 0)) {
-		memcpy(uuid, xfsb.s_uuid, sizeof(xfsb.s_uuid));
-		namesize = sizeof(xfsb.s_fname);
-		if ((*label = calloc(namesize + 1, 1)) != NULL)
-			memcpy(*label, xfsb.s_fname, namesize);
-		rv = 0;
+        uint64_t size;
+        struct volume_id *vid = NULL;
+        vid = volume_id_open_node(device);
+        if (vid == NULL) {
+                fprintf(stderr, "%s: error open volume\n", device);
+                goto exit;
+        }
+
+        if (ioctl(vid->fd, BLKGETSIZE64, &size) != 0) {
+                size = 0;
+        }
+
+        if (volume_id_probe_all(vid, 0, size) != 0) {
+                goto exit;
+        }
+
+        if (vid->label[0] != '\0' || vid->uuid[0] != '\0') {
+                if ((*label = calloc(sizeof(vid->label) + 1, 1)) != NULL &&
+		     (*uuid = calloc(sizeof(vid->uuid) + 1, 1)) != NULL) {
+                        strncpy(*label, vid->label, sizeof(vid->label));
+                        strncpy(*uuid, vid->uuid, sizeof(vid->uuid));
+                        if (vid->label[0] != '\0') {
+                                printf("Found label %s on %s\n", *label, device);
+                        }
+                        if (vid->uuid[0] != '\0') {
+                                printf("Found UUID %s on %s\n", *uuid, device);
+                        }
+                        rv=0;
+                }
+        }
+exit:
+        if (vid != NULL) {
+                volume_id_close(vid);
 	}
 
-	close(fd);
 	return rv;
+
 }
 
 static void
@@ -102,7 +110,7 @@ uuidcache_init(void) {
 	int ma, mi, sz;
 	static char ptname[100];
 	FILE *procpt;
-	char uuid[16], *label;
+	char *uuid, *label;
 	char device[110];
 	int firstPass;
 	int handleOnFirst;
--- mkinitrd-4.2.17/mkinitrd.label	2007-09-14 12:51:51.000000000 +0200
+++ mkinitrd-4.2.17/mkinitrd	2007-09-14 12:51:51.000000000 +0200
@@ -566,10 +566,15 @@ fi
 # check to see if we need to set up a loopback filesystem
 rootdev=$(awk '/^[ \t]*[^#]/ { if ($2 == "/") { print $1; }}' $fstab)
 fstabrootdev=$rootdev
-if [ ${rootdev#LABEL=} != $rootdev ]; then
-    rootdev=${rootdev#LABEL=}
-    if [ $(e2label /dev/root) = ${rootdev} ]; then
-	rootdev=/dev/root
+if [ -z "${rootdev}" ]; then
+    echo "cannot find root device specification in fstab" 2>&1
+    exit
+fi
+if [ -z "${fstabrootdev##LABEL=*}" -o -z "${fstabrootdev##UUID=*}" ]; then
+    rootdev=$(blkid -o device -t ${fstabrootdev})
+    if [ -z "${rootdev}" ]; then
+	echo "cannot find root device: ${fstabrootdev}" 2>&1
+	exit
     fi
     echo "rootdev=${rootdev}"
 fi
