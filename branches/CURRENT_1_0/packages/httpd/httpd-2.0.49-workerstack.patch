
Add ThreadStackSize directive (Jeff Trawick).
Then copy'n'paste it all to add ThreadGuardSize too.

Upstream-HEAD: needed
Upstream-Status: Jeff's bits are upstream, ours aren't.

--- httpd-2.0.49/include/mpm_common.h.workerstack
+++ httpd-2.0.49/include/mpm_common.h
@@ -249,6 +249,18 @@
                                            const char *arg);
 #endif
 
+#ifdef AP_MPM_WANT_SET_STACKSIZE
+extern apr_size_t ap_thread_stacksize;
+extern const char *ap_mpm_set_thread_stacksize(cmd_parms *cmd, void *dummy,
+                                               const char *arg);
+#endif
+
+#ifdef AP_MPM_WANT_SET_GUARDSIZE
+extern apr_size_t ap_thread_guardsize;
+extern const char *ap_mpm_set_thread_guardsize(cmd_parms *cmd, void *dummy,
+                                               const char *arg);
+#endif
+
 #ifdef AP_MPM_WANT_FATAL_SIGNAL_HANDLER
 extern apr_status_t ap_fatal_signal_setup(server_rec *s, apr_pool_t *pconf);
 extern apr_status_t ap_fatal_signal_child_setup(server_rec *s);
--- httpd-2.0.49/server/mpm/worker/mpm.h.workerstack
+++ httpd-2.0.49/server/mpm/worker/mpm.h
@@ -34,6 +34,8 @@
 #define AP_MPM_WANT_SET_ACCEPT_LOCK_MECH
 #define AP_MPM_WANT_SIGNAL_SERVER
 #define AP_MPM_WANT_SET_MAX_MEM_FREE
+#define AP_MPM_WANT_SET_STACKSIZE
+#define AP_MPM_WANT_SET_GUARDSIZE
 #define AP_MPM_WANT_FATAL_SIGNAL_HANDLER
 #define AP_MPM_DISABLE_NAGLE_ACCEPTED_SOCK
 
--- httpd-2.0.49/server/mpm/worker/worker.c.workerstack
+++ httpd-2.0.49/server/mpm/worker/worker.c
@@ -1152,6 +1152,13 @@
     /* 0 means PTHREAD_CREATE_JOINABLE */
     apr_threadattr_detach_set(thread_attr, 0);
 
+    if (ap_thread_stacksize != 0) {
+        apr_threadattr_stacksize_set(thread_attr, ap_thread_stacksize);
+    }
+    if (ap_thread_guardsize != 0) {
+        apr_threadattr_guardsize_set(thread_attr, ap_thread_guardsize);
+    }
+    
     ts->threads = threads;
     ts->listener = NULL;
     ts->child_num_arg = child_num_arg;
--- httpd-2.0.49/server/core.c.workerstack
+++ httpd-2.0.49/server/core.c
@@ -3236,6 +3236,14 @@
 AP_INIT_TAKE1("MaxMemFree", ap_mpm_set_max_mem_free, NULL, RSRC_CONF,
               "Maximum number of 1k blocks a particular childs allocator may hold."),
 #endif
+#ifdef AP_MPM_WANT_SET_STACKSIZE
+AP_INIT_TAKE1("ThreadStackSize", ap_mpm_set_thread_stacksize, NULL, RSRC_CONF,
+              "Size in bytes of stack used by threads handling client connections"),
+#endif
+#ifdef AP_MPM_WANT_SET_STACKSIZE
+AP_INIT_TAKE1("ThreadGuardSize", ap_mpm_set_thread_guardsize, NULL, RSRC_CONF,
+              "Size in bytes of stack guard area used by threads handling client connections"),
+#endif
 #if AP_ENABLE_EXCEPTION_HOOK
 AP_INIT_TAKE1("EnableExceptionHook", ap_mpm_set_exception_hook, NULL, RSRC_CONF,
               "Controls whether exception hook may be called after a crash"),
--- httpd-2.0.49/server/mpm_common.c.workerstack
+++ httpd-2.0.49/server/mpm_common.c
@@ -875,6 +875,52 @@
 
 #endif /* AP_MPM_WANT_SET_MAX_MEM_FREE */
 
+#ifdef AP_MPM_WANT_SET_STACKSIZE
+apr_size_t ap_thread_stacksize = 0; /* use system default */
+
+const char *ap_mpm_set_thread_stacksize(cmd_parms *cmd, void *dummy,
+                                        const char *arg)
+{
+    long value;
+    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
+    if (err != NULL) {
+        return err;
+    }
+    
+    value = strtol(arg, NULL, 0);
+    if (value < 0 || errno == ERANGE)
+        return apr_pstrcat(cmd->pool, "Invalid ThreadStackSize value: ", 
+                           arg, NULL);
+
+    ap_thread_stacksize = (apr_size_t)value;
+
+    return NULL;
+}
+#endif /* AP_MPM_WANT_SET_STACKSIZE */
+
+#ifdef AP_MPM_WANT_SET_GUARDSIZE
+apr_size_t ap_thread_guardsize = 0; /* use system default */
+
+const char *ap_mpm_set_thread_guardsize(cmd_parms *cmd, void *dummy,
+                                        const char *arg)
+{
+    long value;
+    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
+    if (err != NULL) {
+        return err;
+    }
+    
+    value = strtol(arg, NULL, 0);
+    if (value < 0 || errno == ERANGE)
+        return apr_pstrcat(cmd->pool, "Invalid ThreadGuardSize value: ", 
+                           arg, NULL);
+
+    ap_thread_guardsize = (apr_size_t)value;
+
+    return NULL;
+}
+#endif /* AP_MPM_WANT_SET_STACKSIZE */
+
 #ifdef AP_MPM_WANT_FATAL_SIGNAL_HANDLER
 
 static pid_t parent_pid, my_pid;
