--- linux-2.4.22/fs/proc/proc_misc.c.boot-edid-vbe	2003-10-23 22:07:31.000000000 +0200
+++ linux-2.4.22/fs/proc/proc_misc.c	2003-10-23 22:11:26.000000000 +0200
@@ -37,6 +37,7 @@
 #include <linux/smp_lock.h>
 #include <linux/seq_file.h>
 #include <linux/sysrq.h>
+#include <linux/bootinfo.h>
 
 #include <asm/uaccess.h>
 #include <asm/pgtable.h>
@@ -470,6 +471,31 @@ static int memory_read_proc(char *page, 
 	return proc_calc_metrics(page, start, off, count, eof, len);
 }
 
+/* Copy EDID & VBE blocks obtained from early boot */
+#ifdef CONFIG_BOOT_KERNEL
+static int edid_read_proc(char *page, char **start, off_t off,
+			  int count, int *eof, void *data)
+{
+	int len = 0;
+#ifdef CONFIG_X86
+	len = sizeof(struct edid_info);
+	memcpy(page, edid_info.dummy, len);
+#endif
+	return proc_calc_metrics(page, start, off, count, eof, len);
+}
+
+static int vbe_read_proc(char *page, char **start, off_t off,
+			 int count, int *eof, void *data)
+{
+	int len = 0;
+#ifdef CONFIG_X86
+	len = sizeof(struct vbe_info);
+	memcpy(page, vbe_info.dummy, len);
+#endif
+	return proc_calc_metrics(page, start, off, count, eof, len);
+}
+#endif
+
 /*
  * This function accesses profiling information. The returned data is
  * binary: the sampling step and the actual contents of the profile
@@ -648,4 +674,11 @@ void __init proc_misc_init(void)
 			entry->proc_fops = &ppc_htab_operations;
 	}
 #endif
+
+	/* Extra kernel -BOOT specific information to pass on to DrakX.  */
+#ifdef CONFIG_BOOT_KERNEL
+	proc_mkdir("BOOT", 0);
+	create_proc_read_entry("BOOT/edid", 0, NULL, &edid_read_proc, NULL);
+	create_proc_read_entry("BOOT/vbe", 0, NULL, &vbe_read_proc, NULL);
+#endif
 }
--- linux-2.4.22/include/asm-x86_64/bootsetup.h.boot-edid-vbe	2003-10-23 22:07:31.000000000 +0200
+++ linux-2.4.22/include/asm-x86_64/bootsetup.h	2003-10-23 22:08:01.000000000 +0200
@@ -23,6 +23,8 @@ extern char x86_boot_params[2048];
 #define KERNEL_START (*(unsigned int *) (PARAM+0x214))
 #define INITRD_START (*(unsigned int *) (PARAM+0x218))
 #define INITRD_SIZE (*(unsigned int *) (PARAM+0x21c))
+#define EDID_INFO (*(struct edid_info *) (PARAM+0x440))
+#define VBE_INFO (*(struct vbe_info *) (PARAM+0x540))
 #define COMMAND_LINE saved_command_line
 #define COMMAND_LINE_SIZE 256
 
--- linux-2.4.22/include/linux/bootinfo.h.boot-edid-vbe	2003-10-23 22:07:31.000000000 +0200
+++ linux-2.4.22/include/linux/bootinfo.h	2003-10-23 22:08:01.000000000 +0200
@@ -0,0 +1,28 @@
+/*
+ * Some information worth getting for a -BOOT kernel only.
+ */
+#ifndef _LINUX_BOOTINFO_H
+#define _LINUX_BOOTINFO_H
+
+#ifdef __KERNEL__
+
+#include <linux/config.h>
+
+#ifdef CONFIG_X86
+struct edid_info {
+  unsigned char dummy[128];
+};
+
+extern struct edid_info edid_info;
+
+struct vbe_info {
+  unsigned char dummy[512];
+};
+
+extern struct vbe_info vbe_info;
+
+#endif /* CONFIG_X86 */
+
+#endif /* __KERNEL__ */
+
+#endif /* _LINUX_BOOTINFO_H__ */
--- linux-2.4.22/arch/x86_64/kernel/setup.c.boot-edid-vbe	2003-10-23 22:07:31.000000000 +0200
+++ linux-2.4.22/arch/x86_64/kernel/setup.c	2003-10-23 22:08:01.000000000 +0200
@@ -34,6 +34,7 @@
 #include <asm/processor.h>
 #include <linux/console.h>
 #include <linux/seq_file.h>
+#include <linux/bootinfo.h>
 #include <asm/mtrr.h>
 #include <asm/uaccess.h>
 #include <asm/system.h>
@@ -73,7 +74,8 @@ struct sys_desc_table_struct {
 	unsigned short length;
 	unsigned char table[0];
 };
-
+struct edid_info edid_info;
+struct vbe_info vbe_info;
 struct e820map e820;
 
 unsigned char aux_device_present;
@@ -199,6 +201,8 @@ void __init setup_arch(char **cmdline_p)
  	ROOT_DEV = to_kdev_t(ORIG_ROOT_DEV);
  	drive_info = DRIVE_INFO;
  	screen_info = SCREEN_INFO;
+	edid_info = EDID_INFO;
+	vbe_info = VBE_INFO;
 	aux_device_present = AUX_DEVICE_INFO;
 
 #ifdef CONFIG_BLK_DEV_RAM
--- linux-2.4.22/arch/x86_64/boot/video.S.boot-edid-vbe	2003-10-23 22:07:31.000000000 +0200
+++ linux-2.4.22/arch/x86_64/boot/video.S	2003-10-23 22:08:01.000000000 +0200
@@ -137,6 +137,10 @@ vid1:
 #endif /* CONFIG_VIDEO_RETAIN */
 #endif /* CONFIG_VIDEO_SELECT */
 	call	mode_params			# Store mode parameters
+#ifdef CONFIG_BOOT_KERNEL
+	call	store_edid			# Store EDID block
+	call	store_vbe			# Store VBE information
+#endif
 	popw	%ds				# Restore original DS
 	ret
 
@@ -1898,6 +1902,74 @@ skip10:	movb	%ah, %al
 	popw	%ax
 	ret
 
+#ifdef CONFIG_BOOT_KERNEL
+store_edid:
+	pushw	%es			# just save all registers
+	pushw	%ax
+	pushw	%bx
+	pushw	%cx
+	pushw	%dx
+	pushw	%di
+
+	pushw	%fs
+	popw	%es
+
+	movl	$0x13131313, %eax	# memset block with 0x13
+	movw	$32, %cx
+	movw	$0x440, %di
+	cld
+	rep
+	stosl
+
+	movw	$0x4f15, %ax		# do VBE/DDC
+	movw	$0x01, %bx
+	movw	$0x00, %cx
+	movw	$0x01, %dx
+	movw	$0x440, %di
+	int	$0x10
+
+	popw	%di			# restore all registers
+	popw	%dx
+	popw	%cx
+	popw	%bx
+	popw	%ax
+	popw	%es
+	ret
+
+store_vbe:
+	pushw	%es			# just save all registers
+	pushw	%ax
+	pushw	%bx
+	pushw	%cx
+	pushw	%dx
+	pushw	%di
+
+	pushw	%fs
+	popw	%es
+
+	movl	$0x13131313, %eax	# memset block with 0x13
+	movw	$128, %cx
+	movw	$0x540, %di
+	cld
+	rep
+	stosl
+
+	movw	$0x4f00, %ax		# do VBE/DDC
+	movw	$0x01, %bx
+	movw	$0x00, %cx
+	movw	$0x01, %dx
+	movw	$0x540, %di
+	int	$0x10
+
+	popw	%di			# restore all registers
+	popw	%dx
+	popw	%cx
+	popw	%bx
+	popw	%ax
+	popw	%es
+	ret
+#endif
+
 # VIDEO_SELECT-only variables
 mt_end:		.word	0	# End of video mode table if built
 edit_buf:	.space	6	# Line editor buffer
--- linux-2.4.22/arch/i386/boot/video.S.boot-edid-vbe	2003-10-23 22:07:31.000000000 +0200
+++ linux-2.4.22/arch/i386/boot/video.S	2003-10-23 22:08:01.000000000 +0200
@@ -138,6 +138,10 @@ vid1:
 #endif /* CONFIG_VIDEO_RETAIN */
 #endif /* CONFIG_VIDEO_SELECT */
 	call	mode_params			# Store mode parameters
+#ifdef CONFIG_BOOT_KERNEL
+	call	store_edid
+	call	store_vbe
+#endif
 	popw	%ds				# Restore original DS
 	ret
 
@@ -1911,6 +1915,74 @@ skip10:	movb	%ah, %al
 	popw	%ax
 	ret
 
+#ifdef CONFIG_BOOT_KERNEL
+store_edid:
+	pushw	%es			# just save all registers
+	pushw	%ax
+	pushw	%bx
+	pushw	%cx
+	pushw	%dx
+	pushw	%di
+
+	pushw	%fs
+	popw	%es
+
+	movl	$0x13131313, %eax	# memset block with 0x13
+	movw	$32, %cx
+	movw	$0x440, %di
+	cld
+	rep
+	stosl
+
+	movw	$0x4f15, %ax		# do VBE/DDC
+	movw	$0x01, %bx
+	movw	$0x00, %cx
+	movw	$0x01, %dx
+	movw	$0x440, %di
+	int	$0x10
+
+	popw	%di			# restore all registers
+	popw	%dx
+	popw	%cx
+	popw	%bx
+	popw	%ax
+	popw	%es
+	ret
+
+store_vbe:
+	pushw	%es			# just save all registers
+	pushw	%ax
+	pushw	%bx
+	pushw	%cx
+	pushw	%dx
+	pushw	%di
+
+	pushw	%fs
+	popw	%es
+
+	movl	$0x13131313, %eax	# memset block with 0x13
+	movw	$128, %cx
+	movw	$0x540, %di
+	cld
+	rep
+	stosl
+
+	movw	$0x4f00, %ax		# do VBE/DDC
+	movw	$0x01, %bx
+	movw	$0x00, %cx
+	movw	$0x01, %dx
+	movw	$0x540, %di
+	int	$0x10
+
+	popw	%di			# restore all registers
+	popw	%dx
+	popw	%cx
+	popw	%bx
+	popw	%ax
+	popw	%es
+	ret
+#endif
+
 # VIDEO_SELECT-only variables
 mt_end:		.word	0	# End of video mode table if built
 edit_buf:	.space	6	# Line editor buffer
--- linux-2.4.22/arch/i386/kernel/setup.c.boot-edid-vbe	2003-10-23 22:07:31.000000000 +0200
+++ linux-2.4.22/arch/i386/kernel/setup.c	2003-10-23 22:08:01.000000000 +0200
@@ -105,6 +105,7 @@
 #include <linux/pci.h>
 #include <linux/pci_ids.h>
 #include <linux/seq_file.h>
+#include <linux/bootinfo.h>
 #include <asm/processor.h>
 #include <linux/console.h>
 #include <linux/module.h>
@@ -160,7 +161,8 @@ struct sys_desc_table_struct {
 	unsigned short length;
 	unsigned char table[0];
 };
-
+struct edid_info edid_info;
+struct vbe_info vbe_info;
 struct e820map e820;
 
 unsigned char aux_device_present;
@@ -211,6 +213,8 @@ extern int blk_nohighio;
 #define KERNEL_START (*(unsigned long *) (PARAM+0x214))
 #define INITRD_START (*(unsigned long *) (PARAM+0x218))
 #define INITRD_SIZE (*(unsigned long *) (PARAM+0x21c))
+#define EDID_INFO (*(struct edid_info *) (PARAM+0x440))
+#define VBE_INFO (*(struct vbe_info *) (PARAM+0x540))
 #define COMMAND_LINE ((char *) (PARAM+2048))
 #define COMMAND_LINE_SIZE 256
 
@@ -1166,6 +1170,8 @@ void __init setup_arch(char **cmdline_p)
  	ROOT_DEV = to_kdev_t(ORIG_ROOT_DEV);
  	drive_info = DRIVE_INFO;
  	screen_info = SCREEN_INFO;
+	edid_info = EDID_INFO;
+	vbe_info = VBE_INFO;
 	apm_info.bios = APM_BIOS_INFO;
 	if( SYS_DESC_TABLE.length != 0 ) {
 		MCA_bus = SYS_DESC_TABLE.table[3] &0x2;
