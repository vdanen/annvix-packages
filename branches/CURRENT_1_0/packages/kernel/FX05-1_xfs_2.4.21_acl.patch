--- linux-2.4.22/fs/namei.c.fx05.orig	2003-08-25 13:44:43.000000000 +0200
+++ linux-2.4.22/fs/namei.c	2003-09-06 23:23:35.000000000 +0200
@@ -1048,8 +1048,9 @@ do_last:
 
 	/* Negative dentry, just create the file */
 	if (!dentry->d_inode) {
-		error = vfs_create(dir->d_inode, dentry,
-				   mode & ~current->fs->umask);
+		if (!IS_POSIXACL(dir->d_inode))
+			mode &= ~current->fs->umask;
+		error = vfs_create(dir->d_inode, dentry, mode);
 		up(&dir->d_inode->i_sem);
 		dput(nd->dentry);
 		nd->dentry = dentry;
@@ -1280,7 +1281,8 @@ asmlinkage long sys_mknod(const char * f
 	dentry = lookup_create(&nd, 0);
 	error = PTR_ERR(dentry);
 
-	mode &= ~current->fs->umask;
+	if (!IS_POSIXACL(nd.dentry->d_inode))
+		mode &= ~current->fs->umask;
 	if (!IS_ERR(dentry)) {
 		switch (mode & S_IFMT) {
 		case 0: case S_IFREG:
@@ -1348,8 +1350,9 @@ asmlinkage long sys_mkdir(const char * p
 		dentry = lookup_create(&nd, 1);
 		error = PTR_ERR(dentry);
 		if (!IS_ERR(dentry)) {
-			error = vfs_mkdir(nd.dentry->d_inode, dentry,
-					  mode & ~current->fs->umask);
+			if (!IS_POSIXACL(nd.dentry->d_inode))
+				mode &= ~current->fs->umask;
+			error = vfs_mkdir(nd.dentry->d_inode, dentry, mode);
 			dput(dentry);
 		}
 		up(&nd.dentry->d_inode->i_sem);
--- linux-2.4.22/fs/Config.in.fx05.orig	2003-09-06 23:23:35.000000000 +0200
+++ linux-2.4.22/fs/Config.in	2003-09-06 23:23:35.000000000 +0200
@@ -102,6 +102,7 @@ tristate 'UFS file system support (read 
 dep_mbool '  UFS file system write support (DANGEROUS)' CONFIG_UFS_FS_WRITE $CONFIG_UFS_FS $CONFIG_EXPERIMENTAL
 
 tristate 'XFS filesystem support' CONFIG_XFS_FS
+dep_mbool    '  ACL support' CONFIG_XFS_POSIX_ACL $CONFIG_XFS_FS
 dep_mbool    '  Realtime support (EXPERIMENTAL)' CONFIG_XFS_RT $CONFIG_XFS_FS $CONFIG_EXPERIMENTAL
 dep_mbool    '  Quota support' CONFIG_XFS_QUOTA $CONFIG_XFS_FS
 dep_mbool    '  Debugging support (EXPERIMENTAL)' CONFIG_XFS_DEBUG $CONFIG_XFS_FS $CONFIG_EXPERIMENTAL
--- linux-2.4.22/include/linux/fs.h.fx05.orig	2003-09-06 23:23:35.000000000 +0200
+++ linux-2.4.22/include/linux/fs.h	2003-09-06 23:24:16.000000000 +0200
@@ -112,6 +112,7 @@ extern int leases_enable, dir_notify_ena
 #define MS_MOVE		8192
 #define MS_REC		16384
 #define MS_VERBOSE	32768
+#define MS_POSIXACL	65536	/* VFS does not apply the umask */
 #define MS_SUPERMOUNTED	(1<<17)
 #define MS_ACTIVE	(1<<30)
 #define MS_NOUSER	(1<<31)
@@ -163,6 +164,7 @@ extern int leases_enable, dir_notify_ena
 #define IS_IMMUTABLE(inode)	((inode)->i_flags & S_IMMUTABLE)
 #define IS_NOATIME(inode)	(__IS_FLG(inode, MS_NOATIME) || ((inode)->i_flags & S_NOATIME))
 #define IS_NODIRATIME(inode)	__IS_FLG(inode, MS_NODIRATIME)
+#define IS_POSIXACL(inode)	__IS_FLG(inode, MS_POSIXACL)
 
 #define IS_DEADDIR(inode)	((inode)->i_flags & S_DEAD)
 
--- linux-2.4.22/include/linux/posix_cap_xattr.h.fx05.orig	2003-09-06 23:23:35.000000000 +0200
+++ linux-2.4.22/include/linux/posix_cap_xattr.h	2003-09-06 23:23:35.000000000 +0200
@@ -0,0 +1,27 @@
+/*
+  File: linux/posix_cap_xattr.h
+
+  Extended attribute representation of capabilities
+*/
+#ifndef _POSIX_CAP_XATTR_H
+#define _POSIX_CAP_XATTR_H
+
+#define POSIX_CAP_XATTR		"system.posix_capabilities"
+#define POSIX_CAP_XATTR_VERSION	0x0001
+
+typedef __u64 posix_cap_xattr_value;
+
+typedef struct {
+	__u32			c_version;
+	__u32			c_abiversion;
+	posix_cap_xattr_value	c_effective;
+	posix_cap_xattr_value	c_permitted;
+	posix_cap_xattr_value	c_inheritable;
+} posix_cap_xattr;
+
+static inline size_t posix_cap_xattr_size(void)
+{
+	return (sizeof(posix_cap_xattr));
+}
+
+#endif	/* _POSIX_CAP_XATTR_H */
--- linux-2.4.22/include/linux/posix_acl_xattr.h.fx05.orig	2003-09-06 23:23:35.000000000 +0200
+++ linux-2.4.22/include/linux/posix_acl_xattr.h	2003-09-06 23:23:35.000000000 +0200
@@ -0,0 +1,67 @@
+/*
+  File: linux/posix_acl_xattr.h
+
+  Extended attribute system call representation of Access Control Lists.
+
+  Copyright (C) 2000 by Andreas Gruenbacher <a.gruenbacher@computer.org>
+  Copyright (C) 2002 SGI - Silicon Graphics, Inc <linux-xfs@oss.sgi.com>
+ */
+#ifndef _POSIX_ACL_XATTR_H
+#define _POSIX_ACL_XATTR_H
+
+/* Extended attribute names */
+#define POSIX_ACL_XATTR_ACCESS	"system.posix_acl_access"
+#define POSIX_ACL_XATTR_DEFAULT	"system.posix_acl_default"
+
+/* Supported ACL a_version fields */
+#define POSIX_ACL_XATTR_VERSION	0x0002
+
+
+/* An undefined entry e_id value */
+#define ACL_UNDEFINED_ID	(-1)
+
+/* ACL entry e_tag field values */
+#define ACL_USER_OBJ		(0x01)
+#define ACL_USER		(0x02)
+#define ACL_GROUP_OBJ		(0x04)
+#define ACL_GROUP		(0x08)
+#define ACL_MASK		(0x10)
+#define ACL_OTHER		(0x20)
+
+/* ACL entry e_perm bitfield values */
+#define ACL_READ		(0x04)
+#define ACL_WRITE		(0x02)
+#define ACL_EXECUTE		(0x01)
+
+
+typedef struct {
+	__u16			e_tag;
+	__u16			e_perm;
+	__u32			e_id;
+} posix_acl_xattr_entry;
+
+typedef struct {
+	__u32			a_version;
+	posix_acl_xattr_entry	a_entries[0];
+} posix_acl_xattr_header;
+
+
+static inline size_t
+posix_acl_xattr_size(int count)
+{
+	return (sizeof(posix_acl_xattr_header) +
+		(count * sizeof(posix_acl_xattr_entry)));
+}
+
+static inline int
+posix_acl_xattr_count(size_t size)
+{
+	if (size < sizeof(posix_acl_xattr_header))
+		return -1;
+	size -= sizeof(posix_acl_xattr_header);
+	if (size % sizeof(posix_acl_xattr_entry))
+		return -1;
+	return size / sizeof(posix_acl_xattr_entry);
+}
+
+#endif	/* _POSIX_ACL_XATTR_H */
--- linux-2.4.22/Documentation/Configure.help.fx05.orig	2003-09-06 23:23:35.000000000 +0200
+++ linux-2.4.22/Documentation/Configure.help	2003-09-06 23:23:35.000000000 +0200
@@ -17063,6 +17063,16 @@ CONFIG_XFS_RT
 
   If unsure, say N.
 
+ACL support
+CONFIG_XFS_POSIX_ACL
+  Posix Access Control Lists (ACLs) support permissions for users and
+  groups beyond the owner/group/world scheme.
+
+  To learn more about Access Control Lists, visit the Posix ACLs for
+  Linux website <http://acl.bestbits.at/>.
+
+  If you don't know what Access Control Lists are, say N
+
 Debugging support (EXPERIMENTAL)
 CONFIG_XFS_DEBUG
   Say Y here to get an XFS build with many debugging features,
