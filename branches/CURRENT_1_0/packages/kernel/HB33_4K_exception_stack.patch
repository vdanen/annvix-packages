--- linux-2.4.22/include/asm-x86_64/processor.h.amd64-4K-exception-stack	2003-11-10 10:20:04.000000000 +0100
+++ linux-2.4.22/include/asm-x86_64/processor.h	2003-11-10 10:33:20.000000000 +0100
@@ -329,7 +329,7 @@ struct thread_struct {
 #define DOUBLEFAULT_STACK 2 
 #define NMI_STACK 3 
 #define N_EXCEPTION_STACKS 3  /* hw limit: 7 */
-#define EXCEPTION_STKSZ 1024
+#define EXCEPTION_STKSZ PAGE_SIZE
 #define EXCEPTION_STK_ORDER 0
 
 extern void load_gs_index(unsigned);
--- linux-2.4.22/arch/x86_64/kernel/setup64.c.amd64-4K-exception-stack	2003-11-10 10:20:05.000000000 +0100
+++ linux-2.4.22/arch/x86_64/kernel/setup64.c	2003-11-10 10:33:20.000000000 +0100
@@ -3,7 +3,7 @@
  * Copyright (C) 1995  Linus Torvalds
  * Copyright 2001, 2002 SuSE Labs / Andi Kleen.
  * See setup.c for older changelog.
- * $Id: setup64.c,v 1.25 2003/07/11 15:58:47 ak Exp $
+ * $Id: setup64.c,v 1.26 2003/10/15 01:32:42 ak Exp $
  */ 
 #include <linux/config.h>
 #include <linux/init.h>
@@ -158,7 +158,6 @@ void syscall_init(void)
 #endif
 }
 
-#define EXCEPTION_STK_ORDER 0 /* >= N_EXCEPTION_STACKS*EXCEPTION_STKSZ */
 char boot_exception_stacks[N_EXCEPTION_STACKS*EXCEPTION_STKSZ];
 
 /*
@@ -177,16 +176,11 @@ void __init cpu_init (void)
 #endif
 	struct tss_struct * t = &init_tss[nr];
 	unsigned long v, efer; 	
-	char *estacks; 
+	unsigned long estack;
 
 	/* CPU 0 is initialised in head64.c */
-	if (nr != 0) {
+	if (nr != 0)
 		pda_init(nr);
-		estacks = (char *)__get_free_pages(GFP_ATOMIC, EXCEPTION_STK_ORDER); 
-		if (!estacks)
-			panic("Can't allocate exception stacks for CPU %d\n",nr);
-	} else 
-		estacks = boot_exception_stacks; 
 
 	if (test_and_set_bit(nr, &cpu_initialized))
 		panic("CPU#%d already initialized!\n", nr);
@@ -208,12 +202,12 @@ void __init cpu_init (void)
 
 	syscall_init();
 
-		rdmsrl(MSR_EFER, efer); 
+	rdmsrl(MSR_EFER, efer); 
 	if (!(efer & EFER_NX) || do_not_nx) { 
 			__supported_pte_mask &= ~_PAGE_NX; 
 	} else { 
 		__supported_pte_mask |= _PAGE_NX; 
-		} 
+	} 
 
 	t->io_map_base = INVALID_IO_BITMAP_OFFSET;	
 	memset(t->io_bitmap, 0xff, sizeof(t->io_bitmap));
@@ -228,10 +222,17 @@ void __init cpu_init (void)
 	/*
 	 * set up and load the per-CPU TSS
 	 */
-	estacks += EXCEPTION_STKSZ;
+	estack = (unsigned long)boot_exception_stacks + EXCEPTION_STKSZ;
 	for (v = 0; v < N_EXCEPTION_STACKS; v++) {
-		t->ist[v] = (unsigned long)estacks;
-		estacks += EXCEPTION_STKSZ;
+		if (nr == 0) {
+			t->ist[v] = estack;
+			estack += EXCEPTION_STKSZ;
+		} else {
+			estack = __get_free_pages(GFP_ATOMIC, EXCEPTION_STK_ORDER);
+			if(!estack) 
+				panic("Can't allocate exception stack %lu for CPU %d\n", v, nr);
+			t->ist[v] = estack + EXCEPTION_STKSZ;		
+		}
 	}
 
 	atomic_inc(&init_mm.mm_count);
