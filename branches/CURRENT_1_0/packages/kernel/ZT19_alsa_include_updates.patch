diff -Nurp -X /Data/dontdiff 6mdk/include/sound/ac97_codec.h patched/include/sound/ac97_codec.h
--- 6mdk/include/sound/ac97_codec.h	2003-06-19 23:15:33.000000000 +0300
+++ patched/include/sound/ac97_codec.h	2003-09-09 22:44:03.000000000 +0300
@@ -217,6 +217,7 @@
 #define AC97_ALC650_SURR_DAC_VOL	0x64
 #define AC97_ALC650_LFE_DAC_VOL		0x66
 #define AC97_ALC650_MULTICH	0x6a
+#define AC97_ALC650_REVISION    0x6e
 #define AC97_ALC650_CLOCK	0x7a
 
 /* specific - Yamaha YMF753 */
@@ -248,6 +249,7 @@
 #define AC97_AD_MULTI		(1<<1)	/* Analog Devices - multi codecs */
 #define AC97_CS_SPDIF		(1<<2)	/* Cirrus Logic uses funky SPDIF */
 #define AC97_CX_SPDIF		(1<<3)	/* Conexant's spdif interface */
+#define AC97_STEREO_MUTES	(1<<4)	/* has stereo mute bits */
 
 /* rates indexes */
 #define AC97_RATES_FRONT_DAC	0
@@ -345,13 +347,20 @@ void snd_ac97_suspend(ac97_t *ac97);
 void snd_ac97_resume(ac97_t *ac97);
 #endif
 
-enum { AC97_TUNE_HP_ONLY, AC97_TUNE_SWAP_HP, AC97_TUNE_SWAP_SURROUND };
+/* quirk types */
+enum {
+	AC97_TUNE_HP_ONLY,	/* headphone (true line-out) control as master only */
+	AC97_TUNE_SWAP_HP,	/* swap headphone and master controls */
+	AC97_TUNE_SWAP_SURROUND, /* swap master and surround controls */
+	AC97_TUNE_AD_SHARING	/* for AD1985, turn on OMS bit and use headphone */
+};
 
 struct ac97_quirk {
-	unsigned short vendor;
-	unsigned short device;
-	const char *name;
-	int type;
+	unsigned short vendor;	/* PCI vendor id */
+	unsigned short device;	/* PCI device id */
+	unsigned short mask;	/* device id bit mask, 0 = accept all */
+	const char *name;	/* name shown as info */
+	int type;		/* quirk type above */
 };
 
 int snd_ac97_tune_hardware(ac97_t *ac97, struct ac97_quirk *quirk);
diff -Nurp -X /Data/dontdiff 6mdk/include/sound/emu10k1.h patched/include/sound/emu10k1.h
--- 6mdk/include/sound/emu10k1.h	2003-07-25 13:37:39.000000000 +0300
+++ patched/include/sound/emu10k1.h	2003-09-09 22:44:03.000000000 +0300
@@ -852,7 +852,7 @@ typedef struct {
 	unsigned int value[32];
 	unsigned int min;		/* minimum range */
 	unsigned int max;		/* maximum range */
-	unsigned int translation;	/* translation type (EMU10K1_GRP_TRANSLATION*) */
+	unsigned int translation;	/* translation type (EMU10K1_GPR_TRANSLATION*) */
 	snd_kcontrol_t *kcontrol;
 } snd_emu10k1_fx8010_ctl_t;
 
@@ -1152,6 +1152,8 @@ int snd_emu10k1_proc_init(emu10k1_t * em
 #define FXBUS_MIDI_RIGHT	0x05
 #define FXBUS_PCM_CENTER	0x06
 #define FXBUS_PCM_LFE		0x07
+#define FXBUS_PT_LEFT		20
+#define FXBUS_PT_RIGHT		21
 #define FXBUS_MIDI_REVERB	0x0c
 #define FXBUS_MIDI_CHORUS	0x0d
 
@@ -1282,8 +1284,8 @@ typedef struct {
 
 #define EMU10K1_GPR_TRANSLATION_NONE		0
 #define EMU10K1_GPR_TRANSLATION_TABLE100	1
-#define EMU10K1_GRP_TRANSLATION_BASS		2
-#define EMU10K1_GRP_TRANSLATION_TREBLE		3
+#define EMU10K1_GPR_TRANSLATION_BASS		2
+#define EMU10K1_GPR_TRANSLATION_TREBLE		3
 #define EMU10K1_GPR_TRANSLATION_ONOFF		4
 
 typedef struct {
@@ -1294,7 +1296,7 @@ typedef struct {
 	unsigned int value[32];		/* initial values */
 	unsigned int min;		/* minimum range */
 	unsigned int max;		/* maximum range */
-	unsigned int translation;	/* translation type (EMU10K1_GRP_TRANSLATION*) */
+	unsigned int translation;	/* translation type (EMU10K1_GPR_TRANSLATION*) */
 } emu10k1_fx8010_control_gpr_t;
 
 typedef struct {
