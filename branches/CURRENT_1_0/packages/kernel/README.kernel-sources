Hello Mandrake Users,

kernel-headers contains the headers for the source code of Linux kernel.
All source code necessary to compile a new kernel is included in two
packages kernel-headers, and kernel-source. You will need to install
both kernel-headers (needed for general Linux compilation), and
kernel-source in order to compile a new kernel.

The kernel is the central process of your Linux machine, the mediator
between the hardware and your programs. It is responsible for memory
allocations, process managing, device access...

Although modern kernels are very flexible thanks to dynamic modules, you
may need to compile your own kernel for various reasons: your found a
new module which need a more recent kernel, you need a feature of a new
kernel, etc...
Anyway, all the new kernels may be found in the cooker distrib (look for
mirrors at http://www.linux-mandrake.com/en/cookerdevel.php3).

Here is a short sum-up of what you can find in the Kernel-HOWTO. Consult
it in case of a problem or if the shortcut here provided does not meet
your needs. You should also consult the README of kernel-sources.

1. Configure your new kernel

cd into /usr/src/linux/
To clean-up previous compilations, issue "make mrproper",
In console mode, run "make menuconfig",
Under X11, run "make xconfig".

Configure then all sections of your kernel making each feature you need
available constantly or as a module. Note that you should compile most
features as a module, as it consume less memory, taking into account
that some of them cannot be modules as you may need them at boot time,
before dynamic modules be loaded...

Then run "make dep" to prepare the source for compilation.

2. Compile it

Just issue "make bzImage" to create a compressed kernel image. 
Also have a "make modules" to compile the modules you configured.
Make a backup of your current modules (in case of a problem) and then
"make modules_install" (Read Documentation/modules.txt for more
information).

3. install your new kernel

"make install"

This will copy your new kernel and system.map to boot dir (/boot/) with
correct names including version, and change respective links.
It also backup your old files with .old extensions.
It finally runs lilo to take into account your new kernel.

4. Modify Lilo to allow your booting on old kernel

* This step is optional, although recommended *
See lilo.conf man page.
Your are encouraged during this step to create a new section in your
lilo.conf file, in order to enable you to boot on your both kernels, the
old and the new one.
You need to run lilo then to take your changes into account.
You may also use linuxconf to do all that with a nice GUI.

5. Reboot your machine...

And pray.
Anyway if something goes wrong, you just need to reboot and choose your
old kernel with lilo.

Enjoy!


========================================================================
(c) 1999 MandrakeSoft, Camille Bégnis <camille@mandrakesoft.com>
