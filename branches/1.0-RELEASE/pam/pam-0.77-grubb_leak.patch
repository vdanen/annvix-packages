diff -urN Linux-PAM-0.77.orig/doc/pam_appl.sgml Linux-PAM-0.77/doc/pam_appl.sgml
--- Linux-PAM-0.77.orig/doc/pam_appl.sgml	2002-05-10 01:25:52.000000000 -0400
+++ Linux-PAM-0.77/doc/pam_appl.sgml	2004-05-24 11:22:06.000000000 -0400
@@ -442,12 +442,7 @@
 </descrip>
 
 <p>
-Note, in the case of an error, the contents of <tt/item/ is not
-modified - that is, it retains its pre-call value. One should take
-care to initialize this value prior to calling
-<tt/pam_get_item()/. Since, if its value - despite the
-<tt/pam_get_item()/ function failing - is to be used the consequences
-are undefined.
+In the case of an error, the contents of <tt/item/ is set to <tt/NULL/.
 
 <sect2>Understanding errors
 <label id="pam-strerror-section">
diff -urN Linux-PAM-0.77.orig/libpam/include/security/_pam_types.h Linux-PAM-0.77/libpam/include/security/_pam_types.h
--- Linux-PAM-0.77.orig/libpam/include/security/_pam_types.h	2001-01-22 01:07:29.000000000 -0500
+++ Linux-PAM-0.77/libpam/include/security/_pam_types.h	2004-05-24 11:22:06.000000000 -0400
@@ -76,7 +76,7 @@
 #define PAM_AUTHTOK_LOCK_BUSY 22   /* Authentication token lock busy */
 #define PAM_AUTHTOK_DISABLE_AGING 23 /* Authentication token aging disabled */
 #define PAM_TRY_AGAIN 24	/* Preliminary check by password service */
-#define PAM_IGNORE 25		/* Ingore underlying account module */
+#define PAM_IGNORE 25		/* Ignore underlying account module */
 				/* regardless of whether the control */
 				/* flag is required, optional, or sufficient */
 #define PAM_ABORT 26            /* Critical error (?module fail now request) */
diff -urN Linux-PAM-0.77.orig/libpam/pam_env.c Linux-PAM-0.77/libpam/pam_env.c
--- Linux-PAM-0.77.orig/libpam/pam_env.c	2001-01-22 01:07:28.000000000 -0500
+++ Linux-PAM-0.77/libpam/pam_env.c	2004-05-24 11:22:06.000000000 -0400
@@ -343,6 +343,7 @@
 		_pam_overwrite(dump[i]);
 		_pam_drop(dump[i]);
 	    }
+	    _pam_drop(dump);
 	    return NULL;
 	}
     }
diff -urN Linux-PAM-0.77.orig/libpam/pam_handlers.c Linux-PAM-0.77/libpam/pam_handlers.c
--- Linux-PAM-0.77.orig/libpam/pam_handlers.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/libpam/pam_handlers.c	2004-05-24 11:22:06.000000000 -0400
@@ -561,7 +561,7 @@
 		mod_full_isa_path = malloc(strlen(mod_path) + strlen(_PAM_ISA) + 1);
 		if (mod_full_isa_path == NULL) {
 		    D(("_pam_handler: couldn't get memory for mod_path"));
-		    _pam_system_log(LOG_ERR, "no memory for module path", mod_path);
+		    _pam_system_log(LOG_ERR, "no memory for module path");
 		    success = PAM_ABORT;
 		} else {
 		    strcpy(mod_full_isa_path, mod_path);
@@ -627,7 +627,7 @@
 	/* indicate its name - later we will search for it by this */
 	if ((mod->name = _pam_strdup(mod_path)) == NULL) {
 	    D(("_pam_handler: couldn't get memory for mod_path"));
-	    _pam_system_log(LOG_ERR, "no memory for module path", mod_path);
+	    _pam_system_log(LOG_ERR, "no memory for module path");
 	    success = PAM_ABORT;
 	}
 
diff -urN Linux-PAM-0.77.orig/libpam/pam_item.c Linux-PAM-0.77/libpam/pam_item.c
--- Linux-PAM-0.77.orig/libpam/pam_item.c	2001-01-22 01:07:28.000000000 -0500
+++ Linux-PAM-0.77/libpam/pam_item.c	2004-05-24 11:22:06.000000000 -0400
@@ -158,6 +158,8 @@
 			"pam_get_item: nowhere to place requested item");
 	return PAM_PERM_DENIED;
     }
+    else
+	*item = NULL;
 
     switch (item_type) {
     case PAM_SERVICE:
@@ -238,6 +240,12 @@
     struct pam_response *resp;
 
     D(("called."));
+    if (user == NULL) {  /* ensure that the module has supplied a destination */
+	_pam_system_log(LOG_ERR, "pam_get_user: nowhere to record username");
+	return PAM_PERM_DENIED;
+    } else
+	*user = NULL;
+    
     IF_NO_PAMH("pam_get_user", pamh, PAM_SYSTEM_ERR);
 
     if (pamh->pam_conversation == NULL) {
@@ -245,12 +253,6 @@
 	return PAM_SERVICE_ERR;
     }
 
-    if (user == NULL) {  /* ensure the the module has suplied a destination */
-	_pam_system_log(LOG_ERR, "pam_get_user: nowhere to record username");
-	return PAM_PERM_DENIED;
-    } else
-	*user = NULL;
-    
     if (pamh->user) {    /* have one so return it */
 	*user = pamh->user;
 	return PAM_SUCCESS;
diff -urN Linux-PAM-0.77.orig/libpam/pam_private.h Linux-PAM-0.77/libpam/pam_private.h
--- Linux-PAM-0.77.orig/libpam/pam_private.h	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/libpam/pam_private.h	2004-05-24 11:22:06.000000000 -0400
@@ -250,7 +250,13 @@
 
 void _pam_parse_control(int *control_array, char *tok);
 
-void _pam_system_log(int priority, const char *format,  ... );
+void _pam_system_log(int priority, const char *format,  ... )
+#ifdef __GNUC__
+        __attribute__ ((format (printf, 2, 3)));
+#else
+        ;
+#endif
+
 #define _PAM_SYSTEM_LOG_PREFIX "PAM "
 
 /*
diff -urN Linux-PAM-0.77.orig/modules/pam_access/pam_access.c Linux-PAM-0.77/modules/pam_access/pam_access.c
--- Linux-PAM-0.77.orig/modules/pam_access/pam_access.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_access/pam_access.c	2004-05-24 11:22:06.000000000 -0400
@@ -64,8 +64,6 @@
 #include <security/pam_modules.h>
 #include <security/_pam_modutil.h>
 
-int strcasecmp(const char *s1, const char *s2);
-
 /* login_access.c from logdaemon-5.6 with several changes by A.Nogin: */
 
  /*
@@ -184,6 +182,23 @@
      */
 
     if ((fp = fopen(item->config_file, "r"))!=NULL) {
+        struct stat st;
+        /*
+         * Make sure this is a regular file
+         */
+        if (fstat( fileno(fp), &st) == 0) {
+            if (!S_ISREG(st.st_mode)) {
+		fclose(fp);
+		_log_err("%s is not a regular file", item->config_file);
+		return 0;
+	    }
+	}
+	else {
+		fclose(fp);
+		_log_err("cannot stat %s: %m", item->config_file);
+		return 0;
+	}
+
 	while (!match && fgets(line, sizeof(line), fp)) {
 	    lineno++;
 	    if (line[end = strlen(line) - 1] != '\n') {
@@ -217,6 +232,7 @@
 	(void) fclose(fp);
     } else if (errno != ENOENT) {
 	_log_err("cannot open %s: %m", item->config_file);
+	return 0;
     }
     return (match == 0 || (line[0] == '+'));
 }
@@ -259,9 +275,11 @@
 {
     static char name[MAXHOSTNAMELEN + 1];
 
-    gethostname(name, MAXHOSTNAMELEN);
-    name[MAXHOSTNAMELEN] = 0;
-    return (name);
+    if (gethostname(name, MAXHOSTNAMELEN) == 0) {
+	    name[MAXHOSTNAMELEN] = 0;
+	    return (name);
+    }
+    return NULL;
 }
 
 /* netgroup_match - match group against machine or user */
@@ -298,6 +316,8 @@
     if ((at = strchr(tok + 1, '@')) != 0) {	/* split user@host pattern */
 	*at = 0;
 	fake_item.from = myhostname();
+	if (fake_item.from == NULL)
+		return NO;
 	return (user_match(pamh, tok, item) && from_match(pamh, at + 1, &fake_item));
     } else if (tok[0] == '@') {			/* netgroup */
 	return (netgroup_match(tok + 1, (char *) 0, string));
@@ -390,14 +410,6 @@
     return (NO);
 }
 
-/* end of login_access.c */
-
-int strcasecmp(const char *s1, const char *s2) 
-{
-    while ((toupper(*s1)==toupper(*s2)) && (*s1) && (*s2)) {s1++; s2++;}
-    return(toupper(*s1)-toupper(*s2));
-}
-
 /* --- public account management functions --- */
 
 PAM_EXTERN int pam_sm_acct_mgmt(pam_handle_t *pamh,int flags,int argc
diff -urN Linux-PAM-0.77.orig/modules/pam_console/pam_console.c Linux-PAM-0.77/modules/pam_console/pam_console.c
--- Linux-PAM-0.77.orig/modules/pam_console/pam_console.c	2003-07-07 23:16:28.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_console/pam_console.c	2004-05-24 11:22:06.000000000 -0400
@@ -120,7 +120,7 @@
 static int
 lock_console(const char *id)
 {
-    int fd;
+    int fd, ret_val;
 
     fd = open(consolelock, O_RDWR|O_CREAT|O_EXCL, 0600);
     if (fd < 0) {
@@ -128,9 +128,14 @@
 		"console file lock already in place %s", consolelock);
 	return -1;
     }
-    write (fd, id, strlen(id));
+    ret_val = _pammodutil_write(fd, id, strlen(id));
     close (fd);
-    return 0;
+    if (ret_val < 0) { /* Some other failure e.g. no space */
+	unlink(consolelock);
+	return -1;
+    }
+    else
+	return 0;
 }
 
 /* warning, the following function uses goto for error recovery.
@@ -163,7 +168,7 @@
 	lockinfo.l_whence = SEEK_SET;
 	lockinfo.l_start = 0;
 	lockinfo.l_len = 0;
-	alarm(20);
+	alarm(20);	/* FIXME: what if caller has sigalrm masked? */
 	err = fcntl(fd, F_SETLKW, &lockinfo);
 	alarm(0);
 	if (err == EAGAIN) {
@@ -205,7 +210,8 @@
     }
     buf = _do_malloc(st.st_size+2); /* size will never grow by more than one */
     if (st.st_size) {
-	if (read (fd, buf, st.st_size) == -1) {
+	buf[0] = 0; /* if read returns eof, need atoi to give us 0 */
+	if (_pammodutil_read (fd, buf, st.st_size) == -1) {
 	    _pam_log(LOG_ERR, FALSE,
 		    "\"impossible\" read error on %s", filename);
 	    err = -1; goto return_error;
@@ -233,7 +239,7 @@
 	}
 
 	sprintf(buf, "%d", val);
-	if (write(fd, buf, strlen(buf)) == -1) {
+	if (_pammodutil_write(fd, buf, strlen(buf)) == -1) {
 	    _pam_log(LOG_ERR, FALSE,
 		    "\"impossible\" write error on %s", filename);
 	    err = -1; goto return_error;
@@ -327,9 +333,9 @@
     int got_console = 0;
     int count = 0;
     int ret = PAM_SESSION_ERR;
-    const char *username;
+    const char *username = NULL;
     char *lockfile;
-    char *tty;
+    char *tty = NULL;
 
     D(("called."));
     _pam_log(LOG_ERR, TRUE, "pam_console open_session");
@@ -365,7 +371,7 @@
     count = use_count(lockfile , 1, 0);
     if (count < 0) ret = PAM_SESSION_ERR;
 
-    if (got_console) {
+    else if (got_console) {
 	_pam_log(LOG_DEBUG, TRUE, "%s is console user", username);
 	/* woohoo!  We got here first, grab ownership and perms... */
 	set_permissions(pamh, tty, username, allow_nonroot_tty);
@@ -396,7 +402,7 @@
     const char *username = NULL;
     char *lockfile = NULL;
     char *consoleuser = NULL;
-    char *tty;
+    char *tty = NULL;
     struct stat st;
 
     D(("called."));
@@ -427,14 +433,14 @@
 	    if (fstat (fd, &st)) {
 		_pam_log(LOG_ERR, FALSE,
 			"\"impossible\" fstat error on %s", consolelock);
-		err = PAM_SESSION_ERR; goto return_error;
+		err = PAM_SESSION_ERR; close (fd); goto return_error;
 	    }
 	    consoleuser = _do_malloc(st.st_size+1);
 	    if (st.st_size) {
 		if (read (fd, consoleuser, st.st_size) == -1) {
 		    _pam_log(LOG_ERR, FALSE,
 			    "\"impossible\" read error on %s", consolelock);
-		    err = PAM_SESSION_ERR; goto return_error;
+		    err = PAM_SESSION_ERR; close (fd); goto return_error;
 		}
 		consoleuser[st.st_size] = '\0';
 	    }
@@ -448,6 +454,9 @@
 		 */
 	    }
 	}
+	else { /* didn't open file */
+	    err = PAM_SESSION_ERR; goto return_error;
+	}
     }
 
     count = use_count(lockfile, -1, 1);
diff -urN Linux-PAM-0.77.orig/modules/pam_cracklib/pam_cracklib.c Linux-PAM-0.77/modules/pam_cracklib/pam_cracklib.c
--- Linux-PAM-0.77.orig/modules/pam_cracklib/pam_cracklib.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_cracklib/pam_cracklib.c	2004-05-24 11:22:06.000000000 -0400
@@ -186,11 +186,11 @@
                     struct pam_response **response)
 {
     int retval;
-    struct pam_conv *conv;
+    struct pam_conv *conv = NULL;
 
     retval = pam_get_item(pamh, PAM_CONV, (const void **) &conv); 
 
-    if ( retval == PAM_SUCCESS ) {
+    if ( retval == PAM_SUCCESS  && conv) {
         retval = conv->conv(nargs, (const struct pam_message **)message,
 			                response, conv->appdata_ptr);
         if (retval != PAM_SUCCESS && (ctrl && PAM_DEBUG_ARG)) {
@@ -200,6 +200,8 @@
     } else {
         _pam_log(LOG_ERR, "couldn't obtain coversation function [%s]",
                 pam_strerror(pamh, retval));
+	if (retval == PAM_SUCCESS)
+		retval = PAM_BAD_ITEM; /* conv was NULL */
     }
 
     return retval;                  /* propagate error status */
@@ -524,7 +526,7 @@
     msg = password_check(opt, pass_old,pass_new);
     if (!msg) {
 	retval = pam_get_item(pamh, PAM_USER, (const void **)&user);
-	if (retval != PAM_SUCCESS) {
+	if (retval != PAM_SUCCESS || user == NULL) {
 	    if (ctrl & PAM_DEBUG_ARG) {
 		_pam_log(LOG_ERR,"Can not get username");
         	return PAM_AUTHTOK_ERR;
diff -urN Linux-PAM-0.77.orig/modules/pam_debug/pam_debug.c Linux-PAM-0.77/modules/pam_debug/pam_debug.c
--- Linux-PAM-0.77.orig/modules/pam_debug/pam_debug.c	2001-10-10 01:00:11.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_debug/pam_debug.c	2004-05-24 11:22:06.000000000 -0400
@@ -102,7 +102,9 @@
     }
     if (user == NULL || *user == '\0') {
 	D(("username not known"));
-	pam_set_item(pamh, PAM_USER, (const void *) DEFAULT_USER);
+	retval = pam_set_item(pamh, PAM_USER, (const void *) DEFAULT_USER);
+	if (retval != PAM_SUCCESS)
+		return retval;
     }
     user = NULL;                                            /* clean up */
 
diff -urN Linux-PAM-0.77.orig/modules/pam_env/pam_env.c Linux-PAM-0.77/modules/pam_env/pam_env.c
--- Linux-PAM-0.77.orig/modules/pam_env/pam_env.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_env/pam_env.c	2004-05-24 11:22:06.000000000 -0400
@@ -165,8 +165,8 @@
       return PAM_IGNORE;
     }
 
-    /* _pam_assemble_line will provide a complete line from the config file, with all 
-     * comments removed and any escaped newlines fixed up
+    /* _pam_assemble_line will provide a complete line from the config file, 
+     * with all comments removed and any escaped newlines fixed up
      */
 
     while (( retval = _assemble_line(conf, buffer, BUF_SIZE)) > 0) {
@@ -192,12 +192,13 @@
     (void) fclose(conf);
 
     /* tidy up */
-    _clean_var(var);        /* We could have got here prematurely, this is safe though */
+    _clean_var(var);	/* We could have got here prematurely, 
+			 * this is safe though */
     _pam_overwrite(*conffile);
     _pam_drop(*conffile);
     file = NULL;
     D(("Exit."));
-    return (retval<0?PAM_ABORT:PAM_SUCCESS);
+    return (retval!=0 ? PAM_ABORT : PAM_SUCCESS);
 }
 
 static int _parse_env_file(pam_handle_t *pamh, int ctrl, char **env_file)
@@ -231,7 +232,7 @@
 	    continue;
 
 	/* skip over "export " if present so we can be compat with
-	   bash type declerations */
+	   bash type declarations */
 	if (strncmp(key, "export ", (size_t) 7) == 0)
 	    key += 7;
 
@@ -279,7 +280,7 @@
     _pam_drop(*env_file);
     file = NULL;
     D(("Exit."));
-    return (retval<0?PAM_IGNORE:PAM_SUCCESS);
+    return (retval!=0 ? PAM_IGNORE : PAM_SUCCESS);
 }
 
 /*
@@ -765,8 +766,8 @@
 
   retval = _parse_config_file(pamh, ctrl, &conf_file);
 
-  if(readenv)
-    _parse_env_file(pamh, ctrl, &env_file);
+  if(readenv && retval == PAM_SUCCESS)
+    retval = _parse_env_file(pamh, ctrl, &env_file);
 
   /* indicate success or failure */
   
@@ -798,8 +799,8 @@
   
   retval = _parse_config_file(pamh, ctrl, &conf_file);
   
-  if(readenv)
-    _parse_env_file(pamh, ctrl, &env_file);
+  if(readenv && retval == PAM_SUCCESS)
+    retval = _parse_env_file(pamh, ctrl, &env_file);
 
   /* indicate success or failure */
   
diff -urN Linux-PAM-0.77.orig/modules/pam_filter/pam_filter.c Linux-PAM-0.77/modules/pam_filter/pam_filter.c
--- Linux-PAM-0.77.orig/modules/pam_filter/pam_filter.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_filter/pam_filter.c	2004-05-24 11:22:06.000000000 -0400
@@ -131,7 +131,7 @@
     } else {
 	char **levp;
 	const char *tmp;
-	int i,size;
+	int i,size, retval;
 
 	*filtername = *++argv;
 	if (ctrl & FILTER_DEBUG) {
@@ -177,7 +177,15 @@
 #define SERVICE_OFFSET    8                    /*  strlen('SERVICE=');  */
 #define SERVICE_NAME      "SERVICE="
 
-	pam_get_item(pamh, PAM_SERVICE, (const void **)&tmp);
+	retval = pam_get_item(pamh, PAM_SERVICE, (const void **)&tmp);
+	if (retval != PAM_SUCCESS || tmp == NULL) {
+	    _pam_log(LOG_CRIT,"service name not found");
+	    if (levp) {
+		free(levp[0]);
+		free(levp);
+	    }
+	    return -1;
+	}
 	size = SERVICE_OFFSET+strlen(tmp);
 
 	levp[1] = (char *) malloc(size+1);
@@ -199,6 +207,7 @@
 #define USER_OFFSET    5                          /*  strlen('USER=');  */
 #define USER_NAME      "USER="
 
+	tmp = NULL;
 	pam_get_user(pamh, &tmp, NULL);
 	if (tmp == NULL) {
 	    tmp = "<unknown>";
diff -urN Linux-PAM-0.77.orig/modules/pam_filter/upperLOWER/Makefile Linux-PAM-0.77/modules/pam_filter/upperLOWER/Makefile
--- Linux-PAM-0.77.orig/modules/pam_filter/upperLOWER/Makefile	2001-11-11 02:43:54.000000000 -0500
+++ Linux-PAM-0.77/modules/pam_filter/upperLOWER/Makefile	2004-05-24 11:22:06.000000000 -0400
@@ -12,16 +12,19 @@
 
 #
 
-CFLAGS += -I../include
+CFLAGS += -I../include -I../../pammodutil/include
 
 OBJS = $(TITLE).o
 
+LIBS +=  $(GLIB_LIBS) -L../../pammodutil -lpammodutil
+LDFLAGS = $(LIBS)
+
 ####################### don't edit below #######################
 
 all: $(TITLE)
 
 $(TITLE): $(OBJS)
-	$(CC) $(CFLAGS) -o $(TITLE) $(OBJS)
+	$(CC) $(CFLAGS) -o $(TITLE) $(OBJS) $(LDFLAGS)
 	$(STRIP) $(TITLE)
 
 install:
diff -urN Linux-PAM-0.77.orig/modules/pam_filter/upperLOWER/upperLOWER.c Linux-PAM-0.77/modules/pam_filter/upperLOWER/upperLOWER.c
--- Linux-PAM-0.77.orig/modules/pam_filter/upperLOWER/upperLOWER.c	2001-12-09 16:44:58.000000000 -0500
+++ Linux-PAM-0.77/modules/pam_filter/upperLOWER/upperLOWER.c	2004-05-24 11:22:06.000000000 -0400
@@ -21,6 +21,9 @@
 #include <unistd.h>
 
 #include <security/pam_filter.h>
+#include <security/pam_modules.h>
+#include <security/_pam_macros.h>
+#include <security/_pam_modutil.h>
 
 /* ---------------------------------------------------------------- */
 
@@ -109,27 +112,27 @@
 	  /* application errors */
 
 	  if ( FD_ISSET(APPERR_FILENO,&readers) ) {
-	       int got = read(APPERR_FILENO, buffer, BUFSIZ);
+	       int got = _pammodutil_read(APPERR_FILENO, buffer, BUFSIZ);
 	       if (got <= 0) {
 		    break;
 	       } else {
 		    /* translate to give to real terminal */
 		    if (before_user != NULL)
 			 before_user(buffer, got);
-		    if ( write(STDERR_FILENO, buffer, got) != got ) {
+		    if (_pammodutil_write(STDERR_FILENO, buffer, got) != got ) {
 			 log_this(LOG_WARNING,"couldn't write %d bytes?!",got);
 			 break;
 		    }
 	       }
 	  } else if ( FD_ISSET(APPOUT_FILENO,&readers) ) {    /* app output */
-	       int got = read(APPOUT_FILENO, buffer, BUFSIZ);
+	       int got = _pammodutil_read(APPOUT_FILENO, buffer, BUFSIZ);
 	       if (got <= 0) {
 		    break;
 	       } else {
 		    /* translate to give to real terminal */
 		    if (before_user != NULL)
 			 before_user(buffer, got);
-		    if ( write(STDOUT_FILENO, buffer, got) != got ) {
+		    if (_pammodutil_write(STDOUT_FILENO, buffer, got) != got ) {
 			 log_this(LOG_WARNING,"couldn't write %d bytes!?",got);
 			 break;
 		    }
@@ -137,7 +140,7 @@
 	  }
 
 	  if ( FD_ISSET(STDIN_FILENO, &readers) ) {  /* user input */
-	       int got = read(STDIN_FILENO, buffer, BUFSIZ);
+	       int got = _pammodutil_read(STDIN_FILENO, buffer, BUFSIZ);
 	       if (got < 0) {
 		    log_this(LOG_WARNING,"user input junked");
 		    break;
@@ -145,7 +148,7 @@
 		    /* translate to give to application */
 		    if (before_app != NULL)
 			 before_app(buffer, got);
-		    if ( write(APPIN_FILENO, buffer, got) != got ) {
+		    if (_pammodutil_write(APPIN_FILENO, buffer, got) != got ) {
 			 log_this(LOG_WARNING,"couldn't pass %d bytes!?",got);
 			 break;
 		    }
diff -urN Linux-PAM-0.77.orig/modules/pam_ftp/pam_ftp.c Linux-PAM-0.77/modules/pam_ftp/pam_ftp.c
--- Linux-PAM-0.77.orig/modules/pam_ftp/pam_ftp.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_ftp/pam_ftp.c	2004-05-24 11:22:06.000000000 -0400
@@ -58,7 +58,7 @@
     D(("begin to converse\n"));
 
     retval = pam_get_item( pamh, PAM_CONV, (const void **) &conv ) ; 
-    if ( retval == PAM_SUCCESS ) {
+    if ( retval == PAM_SUCCESS && conv) {
 
 	retval = conv->conv(nargs, ( const struct pam_message ** ) message
 			    , response, conv->appdata_ptr);
@@ -73,6 +73,8 @@
     } else {
 	_pam_log(LOG_ERR, "couldn't obtain coversation function [%s]"
 		 , pam_strerror(pamh, retval));
+	if (retval == PAM_SUCCESS)
+		retval = PAM_BAD_ITEM;	/* conv was NULL */
     }
 
     D(("ready to return from module conversation\n"));
diff -urN Linux-PAM-0.77.orig/modules/pam_group/pam_group.c Linux-PAM-0.77/modules/pam_group/pam_group.c
--- Linux-PAM-0.77.orig/modules/pam_group/pam_group.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_group/pam_group.c	2004-05-24 11:22:06.000000000 -0400
@@ -6,7 +6,7 @@
  * Written by Andrew Morgan <morgan@linux.kernel.org> 1996/7/6
  */
 
-const static char rcsid[] =
+static const char rcsid[] =
 "$Id: pam_group.c,v 1.4 2001/05/08 05:02:50 agmorgan Exp $;\n"
 "Version 0.5 for Linux-PAM\n"
 "Copyright (c) Andrew G. Morgan 1996 <morgan@linux.kernel.org>\n";
@@ -80,6 +80,12 @@
     }
 }
 
+/* This function should initially be called with buf = NULL. If
+ * an error occurs, the file descriptor is closed. Subsequent
+ * calls with a closed descriptor will cause buf to be deallocated.
+ * Therefore, always check buf after calling this to see if an error
+ * occurred.
+ */
 static int read_field(int fd, char **buf, int *from, int *to)
 {
     /* is buf set ? */
@@ -127,6 +133,7 @@
 	i = read(fd, *to + *buf, PAM_GROUP_BUFLEN - *to);
 	if (i < 0) {
 	    _log_err("error reading " PAM_GROUP_CONF);
+	    close(fd);
 	    return -1;
 	} else if (!i) {
 	    close(fd);
@@ -167,6 +174,7 @@
 		} else {
 		    _log_err("internal error in " __FILE__
 			     " at line %d", __LINE__ );
+	            close(fd);
 		    return -1;
 		}
 		break;
diff -urN Linux-PAM-0.77.orig/modules/pam_issue/pam_issue.c Linux-PAM-0.77/modules/pam_issue/pam_issue.c
--- Linux-PAM-0.77.orig/modules/pam_issue/pam_issue.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_issue/pam_issue.c	2004-05-24 11:22:06.000000000 -0400
@@ -84,12 +84,19 @@
     if ((fd = fopen(issue_file, "r")) != NULL) {
 	int tot_size = 0;
 
-	if (fstat(fileno(fd), &st) < 0)
+	if (fstat(fileno(fd), &st) < 0) {
+	    fclose(fd);
+	    if (issue_file)
+	        free(issue_file);
 	    return PAM_IGNORE;
+	}
 
 	retval = pam_get_item(pamh, PAM_USER_PROMPT,
 			      (const void **) &cur_prompt);
 	if (retval != PAM_SUCCESS) {
+	    fclose(fd);
+	    if (issue_file)
+	        free(issue_file);
 	    return PAM_IGNORE;
 	}
 	if (cur_prompt == NULL) {
@@ -101,6 +108,9 @@
 	if (parse_esc) {
 	    prompt_tmp = do_prompt(fd);
 	    if (prompt_tmp == NULL) {
+	        fclose(fd);
+	        if (issue_file)
+	           free(issue_file);
 		return PAM_IGNORE;
 	    }
 	} else {
@@ -108,13 +118,17 @@
 
 	    prompt_tmp = malloc(st.st_size + 1);
 	    if (prompt_tmp == NULL) {
+	        fclose(fd);
+	        if (issue_file)
+	           free(issue_file);
 		return PAM_IGNORE;
 	    }
 	    memset (prompt_tmp, '\0', st.st_size + 1);
 	    count = fread(prompt_tmp, sizeof(char), st.st_size, fd);
 	    if (count != st.st_size) {
-		free(prompt_tmp);
-		return PAM_IGNORE;
+	        fclose(fd);
+		retval = PAM_IGNORE;
+		goto cleanup;
 	    }
 	    prompt_tmp[st.st_size] = '\0';
 	}
@@ -151,6 +165,7 @@
 
     } else {
 	D(("could not open issue_file: %s", issue_file));
+	free(issue_file);
 	return PAM_IGNORE;
     }
 
@@ -167,11 +182,15 @@
 static char *do_prompt(FILE *fd)
 {
     int c, size = 1024;
-    char *issue = (char *)malloc(size);
+    char *issue;
     char buf[1024];
     struct utsname uts;
 
-    if (issue == NULL || fd == NULL)
+    if (fd == NULL)
+	return NULL;
+
+    issue = (char *)malloc(size);
+    if (issue == NULL)
 	return NULL;
 
     issue[0] = '\0'; /* zero this, for strcat to work on first buf */
diff -urN Linux-PAM-0.77.orig/modules/pam_lastlog/pam_lastlog.c Linux-PAM-0.77/modules/pam_lastlog/pam_lastlog.c
--- Linux-PAM-0.77.orig/modules/pam_lastlog/pam_lastlog.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_lastlog/pam_lastlog.c	2004-05-24 11:22:06.000000000 -0400
@@ -150,7 +150,7 @@
     D(("begin to converse"));
 
     retval = pam_get_item( pamh, PAM_CONV, (const void **) &conv ) ; 
-    if ( retval == PAM_SUCCESS ) {
+    if ( retval == PAM_SUCCESS && conv) {
 
 	retval = conv->conv(nargs, ( const struct pam_message ** ) message
 			    , response, conv->appdata_ptr);
@@ -165,6 +165,8 @@
     } else {
 	_log_err(LOG_ERR, "couldn't obtain coversation function [%s]"
 		 , pam_strerror(pamh, retval));
+	if (retval == PAM_SUCCESS)
+		retval = PAM_BAD_ITEM; /* conv was NULL */
     }
 
     D(("ready to return from module conversation"));
@@ -237,7 +239,7 @@
 	    sleep(LASTLOG_IGNORE_LOCK_TIME);
 	}
 
-	win = ( read(last_fd, &last_login, sizeof(last_login))
+	win = ( _pammodutil_read(last_fd, &last_login, sizeof(last_login))
 		== sizeof(last_login) );
 
 	last_lock.l_type = F_UNLCK;
@@ -374,7 +376,7 @@
 	    }
 
 	    D(("writing to the last_log file"));
-	    (void) write(last_fd, &last_login, sizeof(last_login));
+	    (void) _pammodutil_write(last_fd, &last_login, sizeof(last_login));
 
 	    last_lock.l_type = F_UNLCK;
 	    (void) fcntl(last_fd, F_SETLK, &last_lock);        /* unlock */
@@ -444,7 +446,7 @@
 int pam_sm_close_session(pam_handle_t *pamh,int flags,int argc
 			 ,const char **argv)
 {
-    const char *terminal_line;
+    const char *terminal_line = NULL;
 
     pam_get_item(pamh, PAM_TTY, (const void **)&terminal_line);
 
diff -urN Linux-PAM-0.77.orig/modules/pam_limits/pam_limits.c Linux-PAM-0.77/modules/pam_limits/pam_limits.c
--- Linux-PAM-0.77.orig/modules/pam_limits/pam_limits.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_limits/pam_limits.c	2004-05-24 11:22:06.000000000 -0400
@@ -54,6 +54,8 @@
        "GROUP",
        "DEFAULT",
        "NONE",
+       "ALL",
+       "ALLGROUP",
        NULL,
 };
 
diff -urN Linux-PAM-0.77.orig/modules/pam_localuser/pam_localuser.c Linux-PAM-0.77/modules/pam_localuser/pam_localuser.c
--- Linux-PAM-0.77.orig/modules/pam_localuser/pam_localuser.c	2002-04-18 11:27:10.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_localuser/pam_localuser.c	2004-05-24 11:22:06.000000000 -0400
@@ -97,6 +97,15 @@
 		openlog(MODULE_NAME, LOG_PID, LOG_AUTHPRIV);
 		syslog(LOG_ERR, "user name not specified yet");
 		closelog();
+		fclose(fp);
+		return PAM_SYSTEM_ERR;
+	}
+
+	if ((user == NULL) || (strlen(user) == 0)) {
+		openlog(MODULE_NAME, LOG_PID, LOG_AUTHPRIV);
+		syslog(LOG_ERR, "user name not valid");
+		closelog();
+		fclose(fp);
 		return PAM_SYSTEM_ERR;
 	}
 
diff -urN Linux-PAM-0.77.orig/modules/pam_mail/pam_mail.c Linux-PAM-0.77/modules/pam_mail/pam_mail.c
--- Linux-PAM-0.77.orig/modules/pam_mail/pam_mail.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_mail/pam_mail.c	2004-05-24 11:22:06.000000000 -0400
@@ -144,7 +144,7 @@
     D(("begin to converse"));
 
     retval = pam_get_item( pamh, PAM_CONV, (const void **) &conv ) ; 
-    if ( retval == PAM_SUCCESS ) {
+    if ( retval == PAM_SUCCESS && conv) {
 
 	retval = conv->conv(nargs, ( const struct pam_message ** ) message
 			    , response, conv->appdata_ptr);
@@ -159,6 +159,8 @@
     } else {
 	_log_err(LOG_ERR, "couldn't obtain coversation function [%s]"
 		 , pam_strerror(pamh, retval));
+	if (retval == PAM_SUCCESS)
+		retval = PAM_BAD_ITEM; /* conv was NULL */
     }
 
     D(("ready to return from module conversation"));
@@ -235,7 +237,8 @@
 		_pam_overwrite(hash);
 		_pam_drop(hash);
 	    } else {
-		sprintf(folder, "error");
+		_pam_drop(folder);
+		folder = NULL;
 	    }
 	}
 	D(("folder =[%s]", folder));
@@ -387,7 +390,7 @@
 int pam_sm_close_session(pam_handle_t *pamh,int flags,int argc
 			 ,const char **argv)
 {
-    return _do_mail(pamh,flags,argc,argv,0);;
+    return _do_mail(pamh,flags,argc,argv,0);
 }
 
 /* Checking mail as part of the session management */
diff -urN Linux-PAM-0.77.orig/modules/pam_mkhomedir/pam_mkhomedir.c Linux-PAM-0.77/modules/pam_mkhomedir/pam_mkhomedir.c
--- Linux-PAM-0.77.orig/modules/pam_mkhomedir/pam_mkhomedir.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_mkhomedir/pam_mkhomedir.c	2004-05-24 11:22:06.000000000 -0400
@@ -112,7 +112,7 @@
    D(("begin to converse"));
 
    retval = pam_get_item(pamh, PAM_CONV, (const void **) &conv);
-   if (retval == PAM_SUCCESS)
+   if (retval == PAM_SUCCESS && conv)
    {
 
       retval = conv->conv(nargs, (const struct pam_message **) message
@@ -131,6 +131,8 @@
    {
       _log_err(LOG_ERR, "couldn't obtain coversation function [%s]"
 	       ,pam_strerror(pamh, retval));
+     if (retval == PAM_SUCCESS)
+         retval = PAM_BAD_ITEM; /* conv was NULL */
    }
 
    D(("ready to return from module conversation"));
@@ -236,7 +238,11 @@
       /* If it's a directory, recurse. */
       if (S_ISDIR(St.st_mode))
       {
-         create_homedir(pamh, ctrl, pwd, newsource, newdest);
+         int retval = create_homedir(pamh, ctrl, pwd, newsource, newdest);
+         if (retval != PAM_SUCCESS) {
+            closedir(D);
+            return retval;
+         }
          continue;
       }
 
@@ -251,6 +257,7 @@
             {
                if (lchown(newdest,pwd->pw_uid,pwd->pw_gid) != 0)
                {
+                   closedir(D);
                    _log_err(LOG_DEBUG, "unable to chang perms on link %s",
                             newdest);
                    return PAM_PERM_DENIED;
@@ -270,6 +277,7 @@
       /* Open the source file */
       if ((SrcFd = open(newsource,O_RDONLY)) < 0 || fstat(SrcFd,&St) != 0)
       {
+         closedir(D);
          _log_err(LOG_DEBUG, "unable to open src file %s",newsource);
 	 return PAM_PERM_DENIED;
       }
@@ -279,6 +287,7 @@
       if ((DestFd = open(newdest,O_WRONLY | O_TRUNC | O_CREAT,0600)) < 0)
       {
 	 close(SrcFd);
+	 closedir(D);
          _log_err(LOG_DEBUG, "unable to open dest file %s",newdest);
 	 return PAM_PERM_DENIED;
       }
@@ -291,6 +300,7 @@
       {
          close(SrcFd);
          close(DestFd);
+         closedir(D);
          _log_err(LOG_DEBUG, "unable to chang perms on copy %s",newdest);
 	 return PAM_PERM_DENIED;
       }
@@ -298,19 +308,29 @@
       /* Copy the file */
       do
       {
-         Res = read(SrcFd,remark,sizeof(remark));
-	 if (Res < 0 || write(DestFd,remark,Res) != Res)
-	 {
-	    close(SrcFd);
-	    close(DestFd);
-	    _log_err(LOG_DEBUG, "unable to perform IO");
-	    return PAM_PERM_DENIED;
+	 Res = _pammodutil_read(SrcFd,remark,sizeof(remark));
+
+	 if (Res == 0)
+	     continue;
+
+	 if (Res > 0) {
+	     if (_pammodutil_write(DestFd,remark,Res) == Res)
+		continue;
 	 }
+
+	 /* If we get here, pammodutil_read returned a -1 or
+	    _pammodutil_write returned something unexpected. */
+	 close(SrcFd);
+	 close(DestFd);
+	 closedir(D);
+	 _log_err(LOG_DEBUG, "unable to perform IO");
+	 return PAM_PERM_DENIED;
       }
       while (Res != 0);
       close(SrcFd);
       close(DestFd);
    }
+   closedir(D);
 
    return PAM_SUCCESS;
 }
diff -urN Linux-PAM-0.77.orig/modules/pammodutil/include/security/_pam_modutil.h Linux-PAM-0.77/modules/pammodutil/include/security/_pam_modutil.h
--- Linux-PAM-0.77.orig/modules/pammodutil/include/security/_pam_modutil.h	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pammodutil/include/security/_pam_modutil.h	2004-05-24 11:22:06.000000000 -0400
@@ -56,4 +56,9 @@
 extern int _pammodutil_user_in_group_uid_gid(pam_handle_t *pamh,
 					     uid_t user,
 					     gid_t group);
+
+extern int _pammodutil_read(int fd, char *buffer, int count);
+
+extern int _pammodutil_write(int fd, const char *buffer, int count);
+
 #endif /* _PAM_MODUTIL_H */
diff -urN Linux-PAM-0.77.orig/modules/pammodutil/Makefile Linux-PAM-0.77/modules/pammodutil/Makefile
--- Linux-PAM-0.77.orig/modules/pammodutil/Makefile	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pammodutil/Makefile	2004-05-24 11:22:06.000000000 -0400
@@ -18,7 +18,7 @@
   -DLIBPAM_VERSION_MINOR=$(MINOR_REL)
 
 # all the object files we care about
-LIBOBJECTS = modutil_cleanup.o modutil_getpwnam.o modutil_getpwuid.o modutil_getspnam.o modutil_getgrnam.o modutil_getgrgid.o modutil_ingroup.o
+LIBOBJECTS = modutil_cleanup.o modutil_getpwnam.o modutil_getpwuid.o modutil_getspnam.o modutil_getgrnam.o modutil_getgrgid.o modutil_ingroup.o modutil_ioloop.o
 
 # static library name
 LIBSTATIC = $(LIBNAME).a
diff -urN Linux-PAM-0.77.orig/modules/pammodutil/modutil_ioloop.c Linux-PAM-0.77/modules/pammodutil/modutil_ioloop.c
--- Linux-PAM-0.77.orig/modules/pammodutil/modutil_ioloop.c	1969-12-31 19:00:00.000000000 -0500
+++ Linux-PAM-0.77/modules/pammodutil/modutil_ioloop.c	2004-05-24 11:22:06.000000000 -0400
@@ -0,0 +1,50 @@
+/*
+ * $Id$
+ *
+ * These functions provides common methods for ensure a complete read or
+ * write occurs. It handles EINTR and partial read/write returns.
+ */
+
+#include <unistd.h>
+#include <errno.h>
+
+int _pammodutil_read(int fd, char *buffer, int count)
+{
+       int block, offset = 0;
+ 
+       while (count > 0) {
+               block = read(fd, &buffer[offset], count);
+
+               if (block < 0) {
+                       if (errno == EINTR) continue;
+                       return block;
+               }
+               if (block == 0) return offset;
+
+               offset += block;
+               count -= block;
+       }
+
+       return offset;
+}
+
+int _pammodutil_write(int fd, const char *buffer, int count)
+{
+       int block, offset = 0;
+                                                                                
+       while (count > 0) {
+               block = write(fd, &buffer[offset], count);
+
+               if (block < 0) {
+                       if (errno == EINTR) continue;
+                       return block;
+               }
+               if (block == 0) return offset;
+
+               offset += block;
+               count -= block;
+       }
+                                                                                
+       return offset;
+}
+
diff -urN Linux-PAM-0.77.orig/modules/pam_motd/pam_motd.c Linux-PAM-0.77/modules/pam_motd/pam_motd.c
--- Linux-PAM-0.77.orig/modules/pam_motd/pam_motd.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_motd/pam_motd.c	2004-05-24 11:22:06.000000000 -0400
@@ -33,6 +33,7 @@
 #define DEFAULT_MOTD	"/etc/motd"
 
 #include <security/pam_modules.h>
+#include <security/_pam_modutil.h>
 
 /* --- session management functions (only) --- */
 
@@ -80,24 +81,33 @@
 
      if ((fd = open(motd_path, O_RDONLY, 0)) >= 0) {
        /* fill in message buffer with contents of motd */
-       if ((fstat(fd, &st) < 0) || !st.st_size)
+       if ((fstat(fd, &st) < 0) || !st.st_size) {
+         close(fd);
          return retval;
+       }
        message.msg = mtmp = malloc(st.st_size+1);
        /* if malloc failed... */
-       if (!message.msg) return retval;
-       read(fd, mtmp, st.st_size);
-       if (mtmp[st.st_size-1] == '\n')
-	  mtmp[st.st_size-1] = '\0';
-       else
-	  mtmp[st.st_size] = '\0';
-       close(fd);
-       /* Use conversation function to give user contents of motd */
-       pam_get_item(pamh, PAM_CONV, (const void **)&conversation);
-       conversation->conv(1, (const struct pam_message **)&pmessage,
-			  &resp, conversation->appdata_ptr);
+       if (!message.msg) {
+           close(fd);
+           return retval;
+       }
+       if (_pammodutil_read(fd, mtmp, st.st_size) == st.st_size) {
+	   if (mtmp[st.st_size-1] == '\n')
+		mtmp[st.st_size-1] = '\0';
+	   else
+		mtmp[st.st_size] = '\0';
+	   close(fd);
+
+ 	   /* Use conversation function to give user contents of motd */
+	   if (pam_get_item(pamh, PAM_CONV, (const void **)&conversation) ==
+	               PAM_SUCCESS && conversation) {
+	       conversation->conv(1, (const struct pam_message **)&pmessage,
+	            &resp, conversation->appdata_ptr);
+	       if (resp)
+	           _pam_drop_reply(resp, 1);
+           }
+       }
        free(mtmp);
-       if (resp)
-	   _pam_drop_reply(resp, 1);
      }
 
      return retval;
diff -urN Linux-PAM-0.77.orig/modules/pam_nologin/pam_nologin.c Linux-PAM-0.77/modules/pam_nologin/pam_nologin.c
--- Linux-PAM-0.77.orig/modules/pam_nologin/pam_nologin.c	2002-07-13 01:10:54.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_nologin/pam_nologin.c	2004-05-24 11:22:06.000000000 -0400
@@ -117,21 +117,30 @@
 	    goto clean_up_fd;
 	}
 
-	read(fd, mtmp, st.st_size);
-	mtmp[st.st_size] = '\000';
+	if (_pammodutil_read(fd, mtmp, st.st_size) == st.st_size) {
+		mtmp[st.st_size] = '\000';
 
-	/*
-	 * Use conversation function to give user contents of /etc/nologin
-	 */
-
-	pam_get_item(pamh, PAM_CONV, (const void **)&conversation);
-	(void) conversation->conv(1, (const struct pam_message **)&pmessage,
-				  &resp, conversation->appdata_ptr);
-	free(mtmp);
-
-	if (resp) {
-	    _pam_drop_reply(resp, 1);
+		/*
+		 * Use conversation function to give user contents 
+		 * of /etc/nologin
+		 */
+
+		retval = pam_get_item(pamh, PAM_CONV, 
+				(const void **)&conversation);
+		if ((retval == PAM_SUCCESS) && (conversation)) {
+			(void) conversation->conv(1, 
+				(const struct pam_message **)&pmessage,
+				&resp, conversation->appdata_ptr);
+
+			if (resp) {
+			    _pam_drop_reply(resp, 1);
+			}
+		}
 	}
+	else
+	    retval = PAM_SYSTEM_ERR;
+
+	free(mtmp);
 
     clean_up_fd:
 
diff -urN Linux-PAM-0.77.orig/modules/pam_permit/pam_permit.c Linux-PAM-0.77/modules/pam_permit/pam_permit.c
--- Linux-PAM-0.77.orig/modules/pam_permit/pam_permit.c	2000-12-04 14:02:34.000000000 -0500
+++ Linux-PAM-0.77/modules/pam_permit/pam_permit.c	2004-05-24 11:22:06.000000000 -0400
@@ -45,7 +45,9 @@
     }
     if (user == NULL || *user == '\0') {
 	D(("username not known"));
-	pam_set_item(pamh, PAM_USER, (const void *) DEFAULT_USER);
+	retval = pam_set_item(pamh, PAM_USER, (const void *) DEFAULT_USER);
+	if (retval != PAM_SUCCESS)
+	    return PAM_USER_UNKNOWN;
     }
     user = NULL;                                            /* clean up */
 
diff -urN Linux-PAM-0.77.orig/modules/pam_rps/pam_rps.c Linux-PAM-0.77/modules/pam_rps/pam_rps.c
--- Linux-PAM-0.77.orig/modules/pam_rps/pam_rps.c	2003-06-25 15:30:12.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_rps/pam_rps.c	2004-05-24 11:22:06.000000000 -0400
@@ -43,7 +43,9 @@
 #include <string.h>
 #include <syslog.h>
 #include <unistd.h>
+#include <errno.h>
 #include <security/pam_modules.h>
+#include <security/_pam_macros.h>
 
 #define MODULE_PREFIX "pam_rps: "
 
@@ -104,12 +106,15 @@
 			c = 0;
 			do {
 				ret = read(fd, &c, 1);
-			} while ((ret == 1) && (c == 0xff));
+			} while ( ((ret ==  1) && (c == 0xff)) ||
+                                  ((ret == -1) && (errno == EINTR)) );
 			/* We drop 0xff here to avoid a variation on
 			 * Bleichenbacher's attack. */
 			r = c / 85;
 			close(fd);
 		}
+		else /* Something is wrong with /dev/urandom */
+			return PAM_CONV_ERR;
 	}
 	switch (r) {
 	case 0:
@@ -144,6 +149,9 @@
 	} else {
 		ret = PAM_AUTH_ERR;
 	}
+        if (responses) {
+            _pam_drop_reply(responses, 1);
+        }
 	return ret;
 }
 
diff -urN Linux-PAM-0.77.orig/modules/pam_shells/pam_shells.c Linux-PAM-0.77/modules/pam_shells/pam_shells.c
--- Linux-PAM-0.77.orig/modules/pam_shells/pam_shells.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_shells/pam_shells.c	2004-05-24 11:22:06.000000000 -0400
@@ -60,11 +60,16 @@
 	return PAM_SERVICE_ERR;
     }
 
-    if (!userName || (strlen(userName) <= 0)) {
+    if (!userName || (userName[0] == 0)) {
+
 	/* Don't let them use a NULL username... */
-	pam_get_user(pamh,&userName,NULL);
+	retval = pam_get_user(pamh,&userName,NULL);
         if (retval != PAM_SUCCESS)
 	    return PAM_SERVICE_ERR;
+
+	/* It could still be NULL the second time. */
+    	if (!userName || (userName[0] == 0))
+	    return PAM_SERVICE_ERR;
     }
 
     pw = _pammodutil_getpwnam(pamh, userName);
@@ -94,7 +99,7 @@
 
     retval = 1;
 
-    while((fgets(shellFileLine, 255, shellFile) != NULL) && retval) {
+    while(retval && (fgets(shellFileLine, 255, shellFile) != NULL)) {
 	if (shellFileLine[strlen(shellFileLine) - 1] == '\n')
 	    shellFileLine[strlen(shellFileLine) - 1] = '\0';
 	retval = strcmp(shellFileLine, userShell);
diff -urN Linux-PAM-0.77.orig/modules/pam_stack/pam_stack.c Linux-PAM-0.77/modules/pam_stack/pam_stack.c
--- Linux-PAM-0.77.orig/modules/pam_stack/pam_stack.c	2003-07-07 23:16:28.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_stack/pam_stack.c	2004-05-24 11:22:06.000000000 -0400
@@ -401,7 +401,16 @@
 
 		memset(stack_this, 0, sizeof(struct stack_data));
 		stack_this->service = _pam_strdup(service);
+		if (stack_this->service == NULL) {
+			_pam_drop(stack_this);
+			return PAM_BUF_ERR;
+		}
 		stack_this->pamh = calloc(1, sizeof(pam_handle_t));
+		if (stack_this->pamh == NULL) {
+			_pam_drop(stack_this->service);
+			_pam_drop(stack_this);
+			return PAM_BUF_ERR;
+		}
 
 		/* Create an environment for the child. */
 		if(debug) {
@@ -415,6 +424,9 @@
 			syslog(LOG_ERR, "_pam_make_env() returned %s",
 			       pam_strerror(stack_this->pamh, ret));
 			closelog();
+			_pam_drop(stack_this->service);
+			_pam_drop(stack_this->pamh);
+			_pam_drop(stack_this);
 			return PAM_SYSTEM_ERR;
 		}
 
@@ -425,6 +437,9 @@
 			syslog(LOG_ERR, "pam_set_item(PAM_SERVICE) returned %d (%s)",
 			       ret, pam_strerror(stack_this->pamh, ret));
 			closelog();
+			_pam_drop(stack_this->service);
+			_pam_drop(stack_this->pamh);
+			_pam_drop(stack_this);
 			return PAM_SYSTEM_ERR;
 		}
 
@@ -436,14 +451,22 @@
 			syslog(LOG_ERR, "_pam_init_handlers() returned %d (%s)",
 			       ret, pam_strerror(stack_this->pamh, ret));
 			closelog();
+			_pam_drop(stack_this->service);
+			_pam_drop(stack_this->pamh);
+			_pam_drop(stack_this);
 			return PAM_SYSTEM_ERR;
 		}
 
 		/* Insert the data item at the end of the stack list, or make
 		 * it the head if we don't have one yet. */
 		if(stack_data == NULL) {
-			pam_set_data(pamh, STACK_DATA_NAME, stack_this,
-				     _pam_stack_cleanup);
+			if (pam_set_data(pamh, STACK_DATA_NAME, stack_this,
+				     _pam_stack_cleanup) != PAM_SUCCESS) {
+					_pam_drop(stack_this->service);
+        				_pam_drop(stack_this->pamh);
+                			_pam_drop(stack_this);
+					return PAM_SYSTEM_ERR;
+				}
 		} else {
 			while(stack_data->next != NULL) {
 				stack_data = stack_data->next;
diff -urN Linux-PAM-0.77.orig/modules/pam_stress/pam_stress.c Linux-PAM-0.77/modules/pam_stress/pam_stress.c
--- Linux-PAM-0.77.orig/modules/pam_stress/pam_stress.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_stress/pam_stress.c	2004-05-24 11:22:06.000000000 -0400
@@ -32,13 +32,6 @@
 #include <security/pam_modules.h>
 #include <security/_pam_macros.h>
 
-static char *_strdup(const char *x)
-{
-     char *new;
-     new = malloc(strlen(x)+1);
-     strcpy(new,x);
-     return new;
-}
 
 /* log errors */
 
@@ -142,8 +135,8 @@
      int retval;
      struct pam_conv *conv;
 
-     if ((retval = pam_get_item(pamh,PAM_CONV,(const void **)&conv))
-	 == PAM_SUCCESS) {
+     retval = pam_get_item(pamh,PAM_CONV,(const void **)&conv);
+     if (retval == PAM_SUCCESS && conv) {
 	  retval = conv->conv(nargs, (const struct pam_message **) message
 			      , response, conv->appdata_ptr);
 	  if (retval != PAM_SUCCESS) {
@@ -152,6 +145,8 @@
 	  }
      } else {
 	  _pam_log(LOG_ERR,"(pam_stress) converse failed to get pam_conv");
+         if (retval == PAM_SUCCESS)
+             retval = PAM_BAD_ITEM; /* conv was null */
      }
 
      return retval;
@@ -168,7 +163,8 @@
 	 && (pam_get_item(pamh,PAM_AUTHTOK,(const void **)&pass)
 	     == PAM_SUCCESS)
 	 && (pass != NULL) ) {
-	  pass = _strdup(pass);
+	  if ((pass = strdup(pass)) == NULL)
+	       return PAM_BUF_ERR;
      } else if ((ctrl & PAM_ST_USE_PASS1)) {
 	  _pam_log(LOG_WARNING, "pam_stress: no forwarded password");
 	  return PAM_PERM_DENIED;
@@ -207,7 +203,8 @@
 	       _pam_log(LOG_DEBUG,"getting password, but NULL returned!?");
 	       return PAM_CONV_ERR;
 	  }
-	  free(resp);
+	  if (resp)
+	       free(resp);
      }
 
      *password = pass;             /* this *MUST* be free()'d by this module */
@@ -239,12 +236,15 @@
      /* try to get the username */
 
      retval = pam_get_user(pamh, &username, "username: ");
-     if ((ctrl & PAM_ST_DEBUG) && (retval == PAM_SUCCESS)) {
-	  _pam_log(LOG_DEBUG, "pam_sm_authenticate: username = %s", username);
-     } else if (retval != PAM_SUCCESS) {
+     if (retval != PAM_SUCCESS || !username) {
 	  _pam_log(LOG_WARNING, "pam_sm_authenticate: failed to get username");
+	  if (retval == PAM_SUCCESS)
+	      retval = PAM_USER_UNKNOWN; /* username was null */
 	  return retval;
      }
+     else if ((ctrl & PAM_ST_DEBUG) && (retval == PAM_SUCCESS)) {
+	  _pam_log(LOG_DEBUG, "pam_sm_authenticate: username = %s", username);
+     }
 
      /* now get the password */
 
@@ -258,20 +258,15 @@
      /* try to set password item */
 
      retval = pam_set_item(pamh,PAM_AUTHTOK,pass);
+     _pam_overwrite(pass); /* clean up local copy of password */
+     free(pass);
+     pass = NULL;
      if (retval != PAM_SUCCESS) {
 	  _pam_log(LOG_WARNING, "pam_sm_authenticate: "
 		   "failed to store new password");
-	  _pam_overwrite(pass);
-	  free(pass);
 	  return retval;
      }
 
-     /* clean up local copy of password */
-
-     _pam_overwrite(pass);
-     free(pass);
-     pass = NULL;
-
      /* if we are debugging then we print the password */
 
      if (ctrl & PAM_ST_DEBUG) {
@@ -320,9 +315,18 @@
      if (ctrl & PAM_ST_FAIL_1)
 	  return PAM_PERM_DENIED;
      else if (ctrl & PAM_ST_EXPIRED) {
-	  void *text = malloc(sizeof("yes")+1);
-	  strcpy(text,"yes");
-	  pam_set_data(pamh,"stress_new_pwd",text,wipe_up);
+	  int retval;
+	  void *text = strdup("yes");
+	  if (!text)
+	        return PAM_BUF_ERR;
+	  retval = pam_set_data(pamh,"stress_new_pwd",text,wipe_up);
+	  if (retval != PAM_SUCCESS) {
+	        _pam_log(LOG_DEBUG,
+	                 "pam_sm_acct_mgmt: failed setting stress_new_pwd");
+	        free(text);
+	        return retval;
+	  }
+
 	  if (ctrl & PAM_ST_DEBUG) {
 	       _pam_log(LOG_DEBUG,"pam_sm_acct_mgmt: need a new password");
 	  }
@@ -344,9 +348,9 @@
      _pam_report(ctrl,"pam_sm_open_session", flags, argc, argv);
 
      if ((pam_get_item(pamh, PAM_USER, (const void **) &username)
-	  != PAM_SUCCESS)
+	  != PAM_SUCCESS || !username)
 	 || (pam_get_item(pamh, PAM_SERVICE, (const void **) &service)
-	     != PAM_SUCCESS)) {
+	     != PAM_SUCCESS || !service)) {
 	  _pam_log(LOG_WARNING,"pam_sm_open_session: for whom?");
 	  return PAM_SESSION_ERR;
      }
@@ -372,9 +376,9 @@
      _pam_report(ctrl,"pam_sm_close_session", flags, argc, argv);
 
      if ((pam_get_item(pamh, PAM_USER, (const void **)&username)
-	  != PAM_SUCCESS)
+	  != PAM_SUCCESS || !username)
 	 || (pam_get_item(pamh, PAM_SERVICE, (const void **)&service)
-	     != PAM_SUCCESS)) {
+	     != PAM_SUCCESS || !service)) {
 	  _pam_log(LOG_WARNING,"pam_sm_close_session: for whom?");
 	  return PAM_SESSION_ERR;
      }
@@ -448,15 +452,14 @@
 		    return retval;
 	       }
 	       retval = pam_set_item(pamh, PAM_OLDAUTHTOK, pass);
+	       _pam_overwrite(pass);
+	       free(pass);
+	       pass = NULL;
 	       if (retval != PAM_SUCCESS) {
 		    _pam_log(LOG_DEBUG
 			     ,"pam_sm_chauthtok: could not set OLDAUTHTOK");
-		    _pam_overwrite(pass);
-		    free(pass);
 		    return retval;
 	       }
-	       _pam_overwrite(pass);
-	       free(pass);
 	  }
 
 	  /* set up for conversation */
@@ -517,7 +520,7 @@
 			 pmsg[0] = &msg[0];
 			 msg[0].msg_style = PAM_ERROR_MSG;
 			 msg[0].msg = "Verification mis-typed; "
-			      "password unchaged";
+			      "password unchanged";
 			 resp = NULL;
 			 (void) converse(pamh,1,pmsg,&resp);
 			 if (resp) {
diff -urN Linux-PAM-0.77.orig/modules/pam_succeed_if/pam_succeed_if.c Linux-PAM-0.77/modules/pam_succeed_if/pam_succeed_if.c
--- Linux-PAM-0.77.orig/modules/pam_succeed_if/pam_succeed_if.c	2003-07-22 00:22:25.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_succeed_if/pam_succeed_if.c	2004-05-24 11:22:06.000000000 -0400
@@ -68,6 +68,7 @@
 		snprintf(fmt2, strlen(fmt) + strlen(MODULE) + 3,
 			 "%s: %s", MODULE, fmt);
 		vsyslog(LOG_AUTHPRIV | priority, fmt2, va);
+		free(fmt2);
 	}
 	va_end(va);
 }
@@ -82,14 +83,15 @@
 	char *p;
 	int ret = PAM_SUCCESS;
 
+	errno = 0;
 	l = strtol(left, &p, 0);
-	if ((p == NULL) || (*p != '\0')) {
+	if ((p == NULL) || (*p != '\0') || errno) {
 		log_error(LOG_INFO, "\"%s\" is not a number", left);
 		ret = PAM_SERVICE_ERR;
 	}
 
 	r = strtol(right, &p, 0);
-	if ((p == NULL) || (*p != '\0')) {
+	if ((p == NULL) || (*p != '\0') || errno) {
 		log_error(LOG_INFO, "\"%s\" is not a number", right);
 		ret = PAM_SERVICE_ERR;
 	}
@@ -381,6 +383,8 @@
 	grlistlen = 2;
 	do {
 		grouplist = malloc(sizeof(gid_t) * grlistlen);
+		if (!grouplist)
+			return PAM_BUF_ERR;
 		ret = getgrouplist(pwd->pw_name, pwd->pw_gid,
 				   grouplist, &grlistlen);
 		if (ret == -1) {
diff -urN Linux-PAM-0.77.orig/modules/pam_tally/pam_tally.c Linux-PAM-0.77/modules/pam_tally/pam_tally.c
--- Linux-PAM-0.77.orig/modules/pam_tally/pam_tally.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_tally/pam_tally.c	2004-05-24 11:22:06.000000000 -0400
@@ -110,7 +110,7 @@
 
 static int pam_get_uid( pam_handle_t *pamh, uid_t *uid, const char **userp ) 
   {
-    const char *user;
+    const char *user = NULL;
     struct passwd *pw;
 
 #ifdef MAIN
@@ -190,7 +190,8 @@
 
     if ( fseek( *TALLY, uid * sizeof(struct faillog), SEEK_SET ) ) {
           _pam_log(LOG_ALERT, "fseek failed %s", filename);
-                return PAM_AUTH_ERR;
+          fclose(*TALLY);
+          return PAM_AUTH_ERR;
     }
                     
     if ( fileinfo.st_size <= uid * sizeof(struct faillog) ) {
@@ -528,6 +529,8 @@
 			 user,uid,
 			 fsp->fs_fail_time+fsp->fs_faillog.fail_locktime
 			 -time(NULL));
+		if (TALLY)
+			fclose(TALLY);
       		return PAM_AUTH_ERR;
       	}
       }
@@ -538,6 +541,8 @@
         ) {
         _pam_log(LOG_NOTICE,"user %s ("UID_FMT") tally "TALLY_FMT", deny "TALLY_FMT,
                  user, uid, tally, deny);
+		if (TALLY)
+			fclose(TALLY);
         return PAM_AUTH_ERR;                 /* Only unconditional failure   */
       }
       
diff -urN Linux-PAM-0.77.orig/modules/pam_time/pam_time.c Linux-PAM-0.77/modules/pam_time/pam_time.c
--- Linux-PAM-0.77.orig/modules/pam_time/pam_time.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_time/pam_time.c	2004-05-24 11:22:06.000000000 -0400
@@ -8,7 +8,7 @@
  * shadow-960129)
  */
 
-const static char rcsid[] =
+static const char rcsid[] =
 "$Id: pam_time.c,v 1.4 2001/05/08 05:02:50 agmorgan Exp $;\n"
 "\t\tVersion 0.22 for Linux-PAM\n"
 "Copyright (C) Andrew G. Morgan 1996 <morgan@linux.kernel.org>\n";
@@ -127,6 +127,7 @@
 	i = read(fd, *to + *buf, PAM_TIME_BUFLEN - *to);
 	if (i < 0) {
 	    _log_err("error reading " PAM_TIME_CONF);
+	    close(fd);
 	    return -1;
 	} else if (!i) {
 	    close(fd);
@@ -167,6 +168,7 @@
 		} else {
 		    _log_err("internal error in " __FILE__
 			     " at line %d", __LINE__ );
+		    close(fd);
 		    return -1;
 		}
 		break;
diff -urN Linux-PAM-0.77.orig/modules/pam_timestamp/hmacsha1.c Linux-PAM-0.77/modules/pam_timestamp/hmacsha1.c
--- Linux-PAM-0.77.orig/modules/pam_timestamp/hmacsha1.c	2003-07-07 23:16:28.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_timestamp/hmacsha1.c	2004-05-24 11:22:06.000000000 -0400
@@ -75,6 +75,11 @@
 	/* Read random data for use as the key. */
 	key = malloc(key_size);
 	count = 0;
+	if (!key) {
+		close(keyfd);
+		close(randfd);
+		return;
+	}
 	while (count < key_size) {
 		i = read(randfd, key + count, key_size - count);
 		if ((i == 0) || (i == -1)) {
@@ -129,16 +134,22 @@
 					owner, group);
 			keyfd = open(filename, O_RDONLY);
 		}
+		if (keyfd == -1)
+			return;
 	}
 
 	/* If we failed to open the file, we're done. */
-	if ((keyfd == -1) || (fstat(keyfd, &st) == -1)) {
+	if (fstat(keyfd, &st) == -1) {
 		close(keyfd);
 		return;
 	}
 
 	/* Read the contents of the file. */
 	tmp = malloc(st.st_size);
+	if (!tmp) {
+		close(keyfd);
+		return;
+	}
 
 	count = 0;
 	while (count < st.st_size) {
diff -urN Linux-PAM-0.77.orig/modules/pam_timestamp/pam_timestamp.c Linux-PAM-0.77/modules/pam_timestamp/pam_timestamp.c
--- Linux-PAM-0.77.orig/modules/pam_timestamp/pam_timestamp.c	2003-10-17 13:02:43.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_timestamp/pam_timestamp.c	2004-05-24 11:22:06.000000000 -0400
@@ -417,6 +417,10 @@
 		/* Read the file contents. */
 		message = malloc(st.st_size);
 		count = 0;
+                if (!message) {
+			close(fd);
+			return PAM_BUF_ERR;
+		}
 		while (count < st.st_size) {
 			i = read(fd, message + count, st.st_size - count);
 			if ((i == 0) || (i == -1)) {
@@ -428,6 +432,7 @@
 			syslog(LOG_NOTICE, MODULE ": error reading timestamp "
 				"file `%s'", path);
 			close(fd);
+			free(message);
 			return PAM_AUTH_ERR;
 		}
 		message_end = message + strlen(path) + 1 + sizeof(then);
@@ -441,6 +446,7 @@
 			syslog(LOG_NOTICE, MODULE ": timestamp file `%s' is "
 				"corrupted", path);
 			close(fd);
+			free(message);
 			return PAM_AUTH_ERR;
 		}
 		free(mac);
@@ -450,6 +456,7 @@
 		/* Compare the dates. */
 		now = time(NULL);
 		if (timestamp_good(then, now, interval) == PAM_SUCCESS) {
+			close(fd);
 			syslog(LOG_NOTICE, MODULE ": timestamp file `%s' is "
 			       "only %ld seconds old, allowing access to %s "
 			       "for UID %ld", path, (long) (now - st.st_mtime),
@@ -459,6 +466,7 @@
 			}
 			return PAM_SUCCESS;
 		} else {
+			close(fd);
 			syslog(LOG_NOTICE, MODULE ": timestamp file `%s' has "
 			       "unacceptable age (%ld seconds), disallowing "
 			       "access to %s for UID %ld",
diff -urN Linux-PAM-0.77.orig/modules/pam_timestamp/sha1.c Linux-PAM-0.77/modules/pam_timestamp/sha1.c
--- Linux-PAM-0.77.orig/modules/pam_timestamp/sha1.c	2003-07-02 19:37:02.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_timestamp/sha1.c	2004-05-24 11:22:06.000000000 -0400
@@ -142,7 +142,7 @@
 	ctx->d += d;
 	ctx->e += e;
 
-	memset(buffer, 0, sizeof(buffer));
+	memset(buffer, 0, sizeof(buffer[0]) * SHA1_BLOCK_SIZE / 4);
 	memset(data, 0, sizeof(data));
 }
 
diff -urN Linux-PAM-0.77.orig/modules/pam_unix/pam_unix_auth.c Linux-PAM-0.77/modules/pam_unix/pam_unix_auth.c
--- Linux-PAM-0.77.orig/modules/pam_unix/pam_unix_auth.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_unix/pam_unix_auth.c	2004-05-24 11:22:06.000000000 -0400
@@ -89,6 +89,8 @@
 		pam_set_data(pamh, "unix_setcred_return",	\
 		             (void *) ret_data, setcred_free);	\
 	}							\
+	else if (ret_data)						\
+		free(ret_data);					\
 	D(("done. [%s]", pam_strerror(pamh, retval)));		\
 	return retval;						\
 } while (0)
diff -urN Linux-PAM-0.77.orig/modules/pam_unix/support.c Linux-PAM-0.77/modules/pam_unix/support.c
--- Linux-PAM-0.77.orig/modules/pam_unix/support.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_unix/support.c	2004-05-24 11:22:06.000000000 -0400
@@ -6,6 +6,7 @@
 
 #define _BSD_SOURCE
 
+#include <../../_pam_aconf.h>
 #include <stdlib.h>
 #include <unistd.h>
 #include <stdarg.h>
@@ -523,10 +524,6 @@
 					setreuid( 0, -1 );
 					if(setreuid( -1, pwd->pw_uid ) == -1)
 						/* Will fail elsewhere. */
-#if HAVE_GETPWNAM_R
-						if (buf)
-							free(buf);
-#endif
 						return 0;
 				}
 			}
@@ -566,11 +563,6 @@
 	if (salt)
 		_pam_delete(salt);
 
-#if HAVE_GETPWNAM_R
-	if (buf)
-		free(buf);
-#endif
-
 	return retval;
 }
 
diff -urN Linux-PAM-0.77.orig/modules/pam_userdb/pam_userdb.c Linux-PAM-0.77/modules/pam_userdb/pam_userdb.c
--- Linux-PAM-0.77.orig/modules/pam_userdb/pam_userdb.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_userdb/pam_userdb.c	2004-05-24 11:22:06.000000000 -0400
@@ -50,7 +50,7 @@
     va_list args;
 
     va_start(args, format);
-    openlog(MODULE_NAME, LOG_CONS|LOG_PID, LOG_AUTH);
+    openlog("pam_userdb", LOG_CONS|LOG_PID, LOG_AUTH);
     vsyslog(err, format, args);
     va_end(args);
     closelog();
diff -urN Linux-PAM-0.77.orig/modules/pam_wheel/pam_wheel.c Linux-PAM-0.77/modules/pam_wheel/pam_wheel.c
--- Linux-PAM-0.77.orig/modules/pam_wheel/pam_wheel.c	2004-05-24 11:21:06.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_wheel/pam_wheel.c	2004-05-24 11:22:06.000000000 -0400
@@ -144,7 +144,7 @@
 {
     const char *username = NULL;
     char *fromsu;
-    struct passwd *pwd, *tpwd;
+    struct passwd *pwd, *tpwd = NULL;
     struct group *grp;
     int retval = PAM_AUTH_ERR;
 
diff -urN Linux-PAM-0.77.orig/modules/pam_xauth/pam_xauth.c Linux-PAM-0.77/modules/pam_xauth/pam_xauth.c
--- Linux-PAM-0.77.orig/modules/pam_xauth/pam_xauth.c	2003-10-22 14:58:11.000000000 -0400
+++ Linux-PAM-0.77/modules/pam_xauth/pam_xauth.c	2004-05-24 11:22:06.000000000 -0400
@@ -107,7 +107,7 @@
 		setgroups(0, NULL);
 		setuid(uid);
 		/* Initialize the argument list. */
-		memset(&args, 0, sizeof(args));
+		memset(args, 0, sizeof(args));
 		/* Set the pipe descriptors up as stdin and stdout, and close
 		 * everything else, including the original values for the
 		 * descriptors. */
@@ -139,12 +139,12 @@
 	close(opipe[1]);
 	/* Send input to the process (if we have any), then send an EOF. */
 	if (input) {
-		write(ipipe[1], input, strlen(input));
+		(void)_pammodutil_write(ipipe[1], input, strlen(input));
 	}
 	close(ipipe[1]);
 
 	/* Read data output until we run out of stuff to read. */
-	i = read(opipe[0], buf, sizeof(buf));
+	i = _pammodutil_read(opipe[0], buf, sizeof(buf));
 	while ((i != 0) && (i != -1)) {
 		char *tmp;
 		/* Resize the buffer to hold the data. */
@@ -166,7 +166,7 @@
 		buffer[buffer_size + i] = '\0';
 		buffer_size += i;
 		/* Try to read again. */
-		i = read(opipe[0], buf, sizeof(buf));
+		i = _pammodutil_read(opipe[0], buf, sizeof(buf));
 	}
 	/* No more data.  Clean up and return data. */
 	close(opipe[0]);
