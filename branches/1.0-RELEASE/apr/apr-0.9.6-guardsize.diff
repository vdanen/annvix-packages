diff -Naur apr-0.9.6/include/apr_thread_proc.h apr-0.9.6.oden/include/apr_thread_proc.h
--- apr-0.9.6/include/apr_thread_proc.h	2005-02-04 21:36:31.000000000 +0100
+++ apr-0.9.6.oden/include/apr_thread_proc.h	2005-02-07 16:40:35.296155670 +0100
@@ -226,7 +226,18 @@
  */
 APR_DECLARE(apr_status_t) apr_threadattr_stacksize_set(apr_threadattr_t *attr,
                                                        apr_size_t stacksize);
-
+/**
+ * Set the stack guard area size of newly created threads.
+ * @param attr The threadattr to affect 
+ * @param guardsize The stack guard area size in bytes
+ * @note Thread library implementations commonly use a "guard area"
+ * after each thread's stack which is not readable or writable such that
+ * stack overflows cause a segfault; this consumes e.g. 4K of memory
+ * and increases memory management overhead.  Setting the guard area
+ * size to zero hence trades off reliable behaviour on stack overflow
+ * for performance. */
+APR_DECLARE(apr_status_t) apr_threadattr_guardsize_set(apr_threadattr_t *attr,
+                                                       apr_size_t guardsize);
 /**
  * Create a new thread of execution
  * @param new_thread The newly created thread handle.
diff -Naur apr-0.9.6/threadproc/unix/thread.c apr-0.9.6.oden/threadproc/unix/thread.c
--- apr-0.9.6/threadproc/unix/thread.c	2005-02-04 21:36:31.000000000 +0100
+++ apr-0.9.6.oden/threadproc/unix/thread.c	2005-02-07 16:41:28.692468763 +0100
@@ -99,6 +99,12 @@
     return stat;
 }
 
+APR_DECLARE(apr_status_t) apr_threadattr_guardsize_set(apr_threadattr_t *attr,
+                                                       apr_size_t size)
+{
+    return pthread_attr_setguardsize(attr->attr, size);
+}
+
 static void *dummy_worker(void *opaque)
 {
     apr_thread_t *thread = (apr_thread_t*)opaque;
