--- src/info.c
+++ src/info.c
@@ -74,10 +74,7 @@ info_show_info (WInfo *info)
     printw (_("Midnight Commander %s"), VERSION);
     attrset (NORMAL_COLOR);
     widget_move (&info->widget, 2, 1);
-    /* .ado: info->widget.x has wrong value (==0) on Win32, why? */
-#ifndef NATIVE_WIN32
-    hline (ACS_HLINE|NORMAL_COLOR, info->widget.x-2);
-#endif
+    hline (ACS_HLINE|NORMAL_COLOR, info->widget.cols-2);
     if (get_current_type () != view_listing)
 	return;
 
--- src/main.c
+++ src/main.c
@@ -868,7 +868,7 @@ load_prompt (int fd, void *unused)
 	int prompt_len;
 
 	prompt = strip_ctrl_codes (subshell_prompt);
-	prompt_len = strlen (prompt);
+	prompt_len = mbstrlen (prompt);
 
 	/* Check for prompts too big */
 	if (COLS > 8 && prompt_len > COLS - 8) {
@@ -1844,7 +1844,7 @@ update_xterm_title_path (void)
     if (xterm_flag && xterm_title) {
 	p = s = g_strdup (strip_home_and_password (cpanel->cwd));
 	do {
-	    if (!is_printable (*s))
+	    if (*s < ' ')
 		*s = '?';
 	} while (*++s);
 	fprintf (stdout, "\33]0;mc - %s\7", p);
--- src/menu.c
+++ src/menu.c
@@ -20,6 +20,7 @@
 #include <stdarg.h>
 #include <sys/types.h>
 #include <ctype.h>
+#include <wchar.h>
 #include "global.h"
 #include "tty.h"
 #include "menu.h"
--- src/screen.c
+++ src/screen.c
@@ -523,6 +523,7 @@ format_file (WPanel *panel, int file_ind
 #else
     char     buffer[BUF_MEDIUM];
 #endif
+    int txtwidth;
 
     length     = 0;
     empty_line = (file_index >= panel->count);
@@ -575,13 +576,18 @@ format_file (WPanel *panel, int file_ind
 		if (txtlen < 0) {
 		    txt = " ";
 		    txtlen = 1;
-		} else
+		} else {
 		    wide = 1;
+		    txtwidth = wcswidth(buffer, txtlen);
+		}
 	    } else
 #endif
+	    {
 		txtlen = strlen (txt);
+		txtwidth = txtlen;
+	    }
 
-	    over = txtlen > len;
+	    over = txtwidth > len;
 	    still = over ? txtlen - len : len - txtlen;
 
 	    switch (HIDE_FIT(format->just_mode)) {
@@ -602,19 +608,46 @@ format_file (WPanel *panel, int file_ind
 #ifdef UTF8
 		if (over) {
 		    if (IS_FIT (format->just_mode)) {
-			int len2 = len / 2 - 1 + (len % 2);
+			int n1 = 0;
+			int width1 = 0;
+			int n2 = 0;
+			int width2 = 0;
+			int len1 = len / 2;
+			int len2;
+			
+			while (1) {
+			    int w = wcwidth(((wchar_t *) buffer)[n1]);
+			    if (width1 + w <= len1) {
+				width1 += w;
+				n1++;
+			    }
+			    else
+				break;
+			}
+			len2 = len - width1 - 1;
+
+			while (1) {
+			    int w = wcwidth(((wchar_t *) buffer)[txtlen - n2 - 1]);
+			    if (width2 + w <= len2) {
+				width2 += w;
+				n2++;
+			    }
+			    else
+				break;
+			}
+			
 
-			SLsmg_write_nwchars ((wchar_t *) buffer,
-					     len / 2);
+			SLsmg_write_nwchars ((wchar_t *) buffer, n1);
 			SLsmg_write_nwchars (L"~", 1);
+			printw ("%*s", len - width1 - width2 - 1, "");
 			SLsmg_write_nwchars (((wchar_t *) buffer)
-					     + txtlen - len2, len2);
+					     + txtlen - n2, n2);
 		    } else
 			SLsmg_write_nwchars ((wchar_t *) buffer, len);
 		} else {
 		    printw ("%*s", still, "");
 		    SLsmg_write_nwchars ((wchar_t *) buffer, txtlen);
-		    printw ("%*s", len - txtlen - still, "");
+		    printw ("%*s", len - txtwidth - still, "");
 		}
 #endif
 	    } else {
--- src/util.c
+++ src/util.c
@@ -84,11 +84,13 @@ mbstrlen (const char *str)
     if (SLsmg_Is_Unicode) {
 	static mbstate_t s;
 	int len;
+	const char *str0 = str;
 
 	len = mbsrtowcs (NULL, &str, -1, &s);
 	if (len < 0) {
-	    memset (&s, 0, sizeof (s));
-	    return -1;
+	    	memset (&s, 0, sizeof (s));
+		/* invalid multibyte character, probably not UTF-8 string */
+		return strlen (str0);
 	}
 	return len;
     } else
@@ -917,7 +919,7 @@ char *strip_ctrl_codes (char *s)
 	    continue;
 	}
 
-	if (is_printable(*r))
+	if ((unsigned char)*r >= ' ')
 	    *w++ = *r;
 	++r;
     }
--- src/widget.c
+++ src/widget.c
@@ -134,10 +134,11 @@ button_callback (WButton *b, int Msg, in
 	    attrset ((b->selected) ? HOT_FOCUSC : HOT_NORMALC);
 	    widget_move (&b->widget, 0, b->hotpos+off);
 #ifdef UTF8
-	    SLsmg_write_nwchars (&b->hotwc, 1);
-#else
-	    addch ((unsigned char)b->text [b->hotpos]);
+	    if (SLsmg_Is_Unicode) 
+		SLsmg_write_nwchars (&b->hotwc, 1);
+	    else
 #endif
+	    addch ((unsigned char)b->text [b->hotpos]);
         }
 	if (Msg == WIDGET_FOCUS)
 	    break;
@@ -220,7 +221,7 @@ scan_hotkey(char *text, int *hotposp, in
 	} else
 #endif
 	{
-	    *hotkeyp = tolower (*cp);
+	    *hotkeyp = tolower (*(cp+1));
 	    *hotposp = cp - text;
 	}
 	strcpy (cp, cp+1);
@@ -464,10 +465,11 @@ check_callback (WCheck *c, int Msg, int 
 	    attrset ((Msg == WIDGET_FOCUS) ? HOT_FOCUSC : HOT_NORMALC);
 	    widget_move (&c->widget, 0, + c->hotpos+4);
 #ifdef UTF8
-	    SLsmg_write_nwchars (&c->hotwc, 1);
-#else
-	    addch ((unsigned char)c->text [c->hotpos]);
+	    if (SLsmg_Is_Unicode)
+		SLsmg_write_nwchars (&c->hotwc, 1);
+	    else
 #endif
+	    addch ((unsigned char)c->text [c->hotpos]);
 	}
 	return 1;
     }
