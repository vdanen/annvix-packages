diff -urN readline-4.1.org/Makefile.in readline-4.1/Makefile.in
--- readline-4.1.org/Makefile.in	Thu Dec 30 07:02:40 1999
+++ readline-4.1/Makefile.in	Sat May  6 02:52:08 2000
@@ -85,19 +85,21 @@
 	   $(srcdir)/callback.c $(srcdir)/terminal.c $(srcdir)/xmalloc.c \
 	   $(srcdir)/history.c $(srcdir)/histsearch.c $(srcdir)/histexpand.c \
 	   $(srcdir)/histfile.c $(srcdir)/nls.c $(srcdir)/search.c \
-	   $(srcdir)/shell.c $(srcdir)/savestring.c $(srcdir)/tilde.c
+	   $(srcdir)/shell.c $(srcdir)/savestring.c $(srcdir)/tilde.c \
+	   $(srcdir)/multibyte.c
 
 # The header files for this library.
 HSOURCES = readline.h rldefs.h chardefs.h keymaps.h history.h histlib.h \
 	   posixstat.h posixdir.h posixjmp.h tilde.h rlconf.h rltty.h \
-	   ansi_stdlib.h tcap.h rlstdc.h xmalloc.h rlprivate.h rlshell.h
+	   ansi_stdlib.h tcap.h rlstdc.h xmalloc.h rlprivate.h rlshell.h \
+	   multibyte.h
 
 HISTOBJ = history.o histexpand.o histfile.o histsearch.o shell.o 
 TILDEOBJ = tilde.o
 OBJECTS = readline.o vi_mode.o funmap.o keymaps.o parens.o search.o \
 	  rltty.o complete.o bind.o isearch.o display.o signals.o \
 	  util.o kill.o undo.o macro.o input.o callback.o terminal.o \
-	  nls.o xmalloc.o $(HISTOBJ) $(TILDEOBJ)
+	  nls.o xmalloc.o multibyte.o $(HISTOBJ) $(TILDEOBJ)
 
 # The texinfo files which document this library.
 DOCSOURCE = doc/rlman.texinfo doc/rltech.texinfo doc/rluser.texinfo
diff -urN readline-4.1.org/TODO-i18n readline-4.1/TODO-i18n
--- readline-4.1.org/TODO-i18n	Thu Jan  1 09:00:00 1970
+++ readline-4.1/TODO-i18n	Sun May  7 00:21:22 2000
@@ -0,0 +1,30 @@
+# it's TODO for i18n...
+
+女教授要請事項.
+1.  いまのところ, wcswidth がきちんと動く stable な glibc が
+  (手元に) 無いため, カラム = byte 数として処理. 
+    しかし, wcswidth を使って処理をするとすると, 
+  内部コードを char で処理する必要性がかなり薄くなりがち. 
+
+
+2.  forword_word や backward_word で, 
+  文字種が変更したとき ( ex. ひらがな -> カタカナ )
+  それを区切りをすべきか? 
+  
+
+その他
+
+1. *complete* 関数が i18n まだ. 必要アリ??
+
+2. プロンプト関係が i18n まだ. 必要アリ??
+
+3. search 系が i18n まだ. 面倒くさい. 
+
+4. vi モードが変かも ( テストまだ )
+
+5. コメントの整合性が取れてないかも. 
+
+6. ちと重い. 
+
+7. wchar_t がきちんと動作するようになれば, そちらを使って i18n 化するので, 
+ 今はこのくらいでよいのではないか? 
diff -urN readline-4.1.org/display.c readline-4.1/display.c
--- readline-4.1.org/display.c	Fri Sep 17 00:19:40 1999
+++ readline-4.1/display.c	Sun May  7 21:31:52 2000
@@ -338,7 +338,7 @@
 void
 rl_redisplay ()
 {
-  register int in, out, c, linenum, cursor_linenum;
+  register int in, out, in_next, c, linenum, cursor_linenum;
   register char *line;
   int c_pos, inv_botlin, lb_botlin, lb_linenum;
   int newlines, lpos, temp;
@@ -444,9 +444,9 @@
 	  } \
       } while (0)
 	  
-#define CHECK_LPOS() \
+#define CHECK_LPOS(x) \
       do { \
-	lpos++; \
+	lpos += x; \
 	if (lpos >= screenwidth) \
 	  { \
 	    if (newlines >= (inv_lbsize - 2)) \
@@ -479,11 +479,13 @@
     }
 
   lb_linenum = 0;
-  for (in = 0; in < rl_end; in++)
+  in = 0;
+  in_next = next_point (rl_line_buffer, in);
+  while ((in < rl_end) && (in < in_next))
     {
       c = (unsigned char)rl_line_buffer[in];
 
-      if (out + 8 >= line_size)		/* XXX - 8 for \t */
+      if (out + in_next - in + 8 >= line_size)		/* XXX - 8 for \t */
 	{
 	  line_size *= 2;
 	  visible_line = xrealloc (visible_line, line_size);
@@ -497,29 +499,21 @@
 	  lb_linenum = newlines;
 	}
 
-      if (META_CHAR (c))
+      if (META_CHAR (c) && !_rl_output_meta_chars)
 	{
-	  if (_rl_output_meta_chars == 0)
-	    {
-	      sprintf (line + out, "\\%o", c);
-
-	      if (lpos + 4 >= screenwidth)
-		{
-		  temp = screenwidth - lpos;
-		  CHECK_INV_LBREAKS ();
-		  inv_lbreaks[++newlines] = out + temp;
-		  lpos = 4 - temp;
-		}
-	      else
-		lpos += 4;
+	  sprintf (line + out, "\\%o", c);
 
-	      out += 4;
-	    }
-	  else
+	  if (lpos + 4 >= screenwidth)
 	    {
-	      line[out++] = c;
-	      CHECK_LPOS();
+	      temp = screenwidth - lpos;
+	      CHECK_INV_LBREAKS ();
+	      inv_lbreaks[++newlines] = out + temp;
+	      lpos = 4 - temp;
 	    }
+	  else
+	    lpos += 4;
+
+	  out += 4;
 	}
 #if defined (DISPLAY_TABS)
       else if (c == '\t')
@@ -560,17 +554,34 @@
       else if (CTRL_CHAR (c) || c == RUBOUT)
 	{
 	  line[out++] = '^';
-	  CHECK_LPOS();
+	  CHECK_LPOS(1);
 	  line[out++] = CTRL_CHAR (c) ? UNCTRL (c) : '?';
-	  CHECK_LPOS();
+	  CHECK_LPOS(1);
 	}
       else
 	{
-	  line[out++] = c;
-	  CHECK_LPOS();
+	  /* it's bad code, because it assume 'column == byte' */
+	  int i;
+
+	  if (in_next - in + lpos >= screenwidth)
+	    {
+	      /* padding left ' '. */
+	      for (i = 0; i < screenwidth - lpos; ++i)
+		line[out++] = ' ';
+	      CHECK_LPOS(in_next - in);
+	    }
+
+	  for (i = in; i < in_next; ++i)
+	    {
+	      line[out++] = (unsigned char)rl_line_buffer[i];
+	    }
+	  CHECK_LPOS(in_next - in); 
 	}
+      in = in_next;
+      in_next = next_point (rl_line_buffer, in);
     }
   line[out] = '\0';
+
   if (c_pos < 0)
     {
       c_pos = out;
@@ -605,7 +616,7 @@
 	     only display a screenful.  We should display the last screen,
 	     not the first.  */
 	  if (out >= screenchars)
-	    out = screenchars - 1;
+	    out = adjust_point (rl_line_buffer, screenchars - 1);
 
 	  /* The first line is at character position 0 in the buffer.  The
 	     second and subsequent lines start at inv_lbreaks[N], offset by
diff -urN readline-4.1.org/multibyte.c readline-4.1/multibyte.c
--- readline-4.1.org/multibyte.c	Thu Jan  1 09:00:00 1970
+++ readline-4.1/multibyte.c	Sat May  6 01:55:05 2000
@@ -0,0 +1,141 @@
+/* multibyte.h -- functions for i18n. */
+
+/* Copyright (C) 1999 Free Software Foundation, Inc.
+
+   This file is part of the GNU Readline Library, a library for
+   reading lines of text with interactive input and history editing.
+
+   The GNU Readline Library is free software; you can redistribute it
+   and/or modify it under the terms of the GNU General Public License
+   as published by the Free Software Foundation; either version 2, or
+   (at your option) any later version.
+
+   The GNU Readline Library is distributed in the hope that it will be
+   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
+   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   The GNU General Public License is often shipped with GNU software, and
+   is generally kept in a file called COPYING or LICENSE.  If you do not
+   have a copy of the license, write to the Free Software Foundation,
+   59 Temple Place, Suite 330, Boston, MA 02111 USA. */
+#define READLINE_LIBRARY
+
+#if defined (HAVE_CONFIG_H)
+#include <config.h>
+#endif
+
+#include <stdio.h>
+
+#if defined (HAVE_STDLIB_H)
+#  include <stdlib.h>
+#else
+#  include "ansi_stdlib.h"
+#endif /* HAVE_STDLIB_H */
+
+#if defined (HAVE_LOCALE_H)
+#  include <locale.h>
+#endif
+
+#include "xmalloc.h"
+#include "multibyte.h"
+
+/* return previous point of 'point' in 'buf'.  */
+int
+previous_point(buf, point)
+     const char *buf;
+     const int point;
+{
+  int i, size;
+  int r_point = 0; 
+
+  size = mblen(buf + r_point, strlen(buf)); 
+  while ((size > -1) && (r_point + size < point))
+    {
+      r_point += size;
+      size = mblen(buf + r_point, strlen(buf)); 
+    }
+     
+  return r_point;
+}
+
+
+/* return next point of 'point' in 'buf'.  */
+int 
+next_point (buf, point)
+     const char *buf;
+     const int point;
+{
+  int size = mblen(buf + point, strlen(buf));
+  int r_point = (size > -1) ? point + size : point; 
+
+  if (r_point > strlen(buf))
+    r_point = strlen(buf);
+
+  return r_point;
+}
+
+
+/* return multibyte boundary point near 'point'. 
+   "return value <= point" . 
+   if only 'point' on multibyte boundary, 
+   "return value = point" 
+*/
+
+int 
+adjust_point (buf, point)
+     const char *buf;
+     const int point;
+{
+  int r_point = 0;
+  int next = next_point (buf, r_point);
+
+  while ((r_point < next) && (next <= point))
+    {
+      r_point = next;
+      next = next_point (buf, r_point); 
+    }
+
+  return r_point;
+}
+
+/* return to wchar_t which allocated with malloc. 
+   see mbstowcs(3). */
+wchar_t *
+rl_mbstowcs (src)
+     const char *src;
+{
+  wchar_t *dest; 
+  size_t size = mbstowcs(NULL, src, 0) + 1;
+
+  if (size > 0)
+    {
+      dest = (wchar_t*)xmalloc (size * sizeof(wchar_t));
+      mbstowcs(dest, src, size);
+
+      return dest;
+    }
+  else
+    return NULL;
+}
+
+
+/* return to char which allocated with malloc. 
+   see wcstombs(3). */
+char *
+rl_wcstombs (src)
+     const wchar_t *src;
+{
+  char *dest; 
+  size_t size = wcstombs(NULL, src, 0) + 1;
+
+  if (size > 0)
+    {
+      dest = xmalloc(size * sizeof(char));
+      wcstombs(dest, src, size);
+
+      return dest;
+    }
+  else
+    return NULL;
+}
diff -urN readline-4.1.org/multibyte.h readline-4.1/multibyte.h
--- readline-4.1.org/multibyte.h	Thu Jan  1 09:00:00 1970
+++ readline-4.1/multibyte.h	Sat May  6 02:20:38 2000
@@ -0,0 +1,39 @@
+/* multibyte.h -- functions for i18n */
+
+/* Copyright (C) 1987, 1989, 1992 Free Software Foundation, Inc.
+
+   This file is part of the GNU Readline Library, a library for
+   reading lines of text with interactive input and history editing.
+
+   The GNU Readline Library is free software; you can redistribute it
+   and/or modify it under the terms of the GNU General Public License
+   as published by the Free Software Foundation; either version 2, or
+   (at your option) any later version.
+
+   The GNU Readline Library is distributed in the hope that it will be
+   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
+   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   The GNU General Public License is often shipped with GNU software, and
+   is generally kept in a file called COPYING or LICENSE.  If you do not
+   have a copy of the license, write to the Free Software Foundation,
+   59 Temple Place, Suite 330, Boston, MA 02111 USA. */
+
+#if !defined (_MULTIBYTE_H_)
+#define _MULTIBYTE_H_
+
+#if defined (READLINE_LIBRARY)
+#  include "rlstdc.h"
+#else
+#  include <readline/rlstdc.h>
+#endif
+
+extern int previous_point __P((const char *, const int));
+extern int next_point __P((const char *, const int));
+extern int adjust_point __P((const char *, const int));
+
+extern wchar_t *rl_mbstowcs __P((const char *));
+extern char *rl_wcstombs __P((const wchar_t *));
+
+#endif
diff -urN readline-4.1.org/readline.c readline-4.1/readline.c
--- readline-4.1.org/readline.c	Thu Aug  5 21:10:46 1999
+++ readline-4.1/readline.c	Sat May  6 17:20:16 2000
@@ -48,6 +48,7 @@
 #endif
 
 #include <stdio.h>
+#include <ctype.h>
 #include "posixjmp.h"
 
 /* System-specific feature definitions and include files. */
@@ -65,6 +66,7 @@
 #include "rlprivate.h"
 #include "rlshell.h"
 #include "xmalloc.h"
+#include "multibyte.h"
 
 #ifndef RL_LIBRARY_VERSION
 #  define RL_LIBRARY_VERSION "4.1"
@@ -1051,12 +1053,22 @@
     rl_backward (-count, key);
   else if (count > 0)
     {
-      int end = rl_point + count;
 #if defined (VI_MODE)
-      int lend = rl_end - (rl_editing_mode == vi_mode);
+      int lend = (rl_editing_mode == vi_mode) ? 
+	previous_point (the_line, rl_end) : rl_end; 
 #else
       int lend = rl_end;
 #endif
+      int end = rl_point; 
+      while (count > 0)
+	{
+	  end = next_point(the_line, end);
+	  --count; 
+	}
+      if (end == rl_point)
+	{
+	  ding();
+	}
 
       if (end > lend)
 	{
@@ -1082,13 +1094,19 @@
     rl_forward (-count, key);
   else if (count > 0)
     {
-      if (rl_point < count)
+      int point = rl_point;
+      while (count > 0){
+	point = previous_point(the_line, point);
+	--count;
+      }
+
+      if (rl_point > 0)
+        rl_point = point;
+      else
 	{
 	  rl_point = 0;
 	  ding ();
 	}
-      else
-        rl_point -= count;
     }
   return 0;
 }
@@ -1116,7 +1134,8 @@
 rl_forward_word (count, key)
      int count, key;
 {
-  int c;
+  wchar_t c;
+  int point;
 
   if (count < 0)
     {
@@ -1130,23 +1149,28 @@
 	return 0;
 
       /* If we are not in a word, move forward until we are in one.
-	 Then, move forward until we hit a non-alphabetic character. */
-      c = the_line[rl_point];
-      if (alphabetic (c) == 0)
+	 Then, move forward until we hit a non-punct. */
+      mbtowc(&c, the_line + rl_point, rl_end - rl_point);
+      point = next_point (the_line, rl_point); 
+      if (iswpunct (c) || iswspace (c))
 	{
-	  while (++rl_point < rl_end)
+	  while ((rl_point < point) && (point <= rl_end))
 	    {
-	      c = the_line[rl_point];
-	      if (alphabetic (c))
+	      rl_point = point; 
+	      mbtowc(&c, the_line + rl_point, rl_end - rl_point);
+	      point = next_point (the_line, rl_point);
+	      if (!iswpunct (c) && !iswspace (c))
 		break;
 	    }
 	}
       if (rl_point == rl_end)
 	return 0;
-      while (++rl_point < rl_end)
+      while ((rl_point < point) && (point <= rl_end))
 	{
-	  c = the_line[rl_point];
-	  if (alphabetic (c) == 0)
+	  rl_point = point; 
+	  mbtowc(&c, the_line + rl_point, rl_end - rl_point);
+	  point = next_point (the_line, rl_point);
+	  if (iswpunct (c) || iswspace (c))
 	    break;
 	}
       --count;
@@ -1159,7 +1183,8 @@
 rl_backward_word (count, key)
      int count, key;
 {
-  int c;
+  wchar_t c;
+  int point;
 
   if (count < 0)
     {
@@ -1169,30 +1194,33 @@
 
   while (count)
     {
+      int point; 
       if (!rl_point)
 	return 0;
 
       /* Like rl_forward_word (), except that we look at the characters
 	 just before point. */
-
-      c = the_line[rl_point - 1];
-      if (alphabetic (c) == 0)
+      point = previous_point (the_line, rl_point);
+      mbtowc(&c, the_line + point, rl_end - point);
+      if (iswpunct (c) || iswspace (c))
 	{
-	  while (--rl_point)
+	  while ((0 <= point) && (point < rl_point))
 	    {
-	      c = the_line[rl_point - 1];
-	      if (alphabetic (c))
+	      rl_point = point; 
+	      point = previous_point (the_line, rl_point);
+	      mbtowc(&c, the_line + point, rl_end - point);
+	      if (!iswpunct (c) && !iswspace (c))
 		break;
 	    }
 	}
 
-      while (rl_point)
+      while ((0 <= point) && ( point < rl_point))
 	{
-	  c = the_line[rl_point - 1];
-	  if (alphabetic (c) == 0)
+	  rl_point = point;
+	  point = previous_point (the_line, rl_point);
+	  mbtowc(&c, the_line + point, rl_end - point);
+	  if (iswpunct (c) || iswspace (c))
 	    break;
-	  else
-	    --rl_point;
 	}
       --count;
     }
@@ -1422,25 +1450,13 @@
       ding ();
       return -1;
     }
-
-  if (count > 1 || rl_explicit_arg)
+  else
     {
       int orig_point = rl_point;
       rl_backward (count, key);
       rl_kill_text (orig_point, rl_point);
     }
-  else
-    {
-      int c = the_line[--rl_point];
-      rl_delete_text (rl_point, rl_point + 1);
 
-      if (rl_point == rl_end && isprint (c) && _rl_last_c_pos)
-	{
-	  int l;
-	  l = rl_character_len (c, rl_point);
-	  _rl_erase_at_end_of_line (l);
-	}
-    }
   return 0;
 }
 
@@ -1458,8 +1474,7 @@
       ding ();
       return -1;
     }
-
-  if (count > 1 || rl_explicit_arg)
+  else
     {
       int orig_point = rl_point;
       rl_forward (count, key);
@@ -1467,8 +1482,6 @@
       rl_point = orig_point;
       return 0;
     }
-  else
-    return (rl_delete_text (rl_point, rl_point + 1));
 }
 
 /* Delete the character under the cursor, unless the insertion
@@ -1491,14 +1504,26 @@
      int count, ignore;
 {
   int start = rl_point;
+  int point; 
 
-  while (rl_point && whitespace (the_line[rl_point - 1]))
-    rl_point--;
+  while (rl_point)
+    {
+      point = previous_point (the_line, rl_point);
+      if (!whitespace (the_line[point]))
+	break;
+      else
+	rl_point = point;
+    }
+  
 
   start = rl_point;
 
-  while (rl_point < rl_end && whitespace (the_line[rl_point]))
-    rl_point++;
+  while (rl_point < rl_end)
+    {
+      rl_point = next_point (the_line, rl_point);
+      if (!whitespace (the_line[rl_point]))
+	break;
+    }
 
   if (start != rl_point)
     {
@@ -1584,7 +1609,9 @@
      int count, op;
 {
   register int start, end;
-  int inword, c;
+  int inword;
+  wchar_t *ws, *ws_start;
+  char* cs;
 
   start = rl_point;
   rl_forward_word (count, 0);
@@ -1593,34 +1620,56 @@
   if (count < 0)
     SWAP (start, end);
 
-  /* We are going to modify some text, so let's prepare to undo it. */
-  rl_modifying (start, end);
+  cs = rl_copy_text (start, end);
+  ws_start = rl_mbstowcs (cs);
+  xfree(cs);
+  if (!ws_start)
+    return -1; 
 
-  for (inword = 0; start < end; start++)
+  ws = ws_start;
+  for (inword = 0; *ws; ++ws)
     {
-      c = the_line[start];
       switch (op)
 	{
 	case UpCase:
-	  the_line[start] = _rl_to_upper (c);
+	  *ws = toupper (*ws);
 	  break;
 
 	case DownCase:
-	  the_line[start] = _rl_to_lower (c);
+	  *ws = tolower (*ws);
 	  break;
 
 	case CapCase:
-	  the_line[start] = (inword == 0) ? _rl_to_upper (c) : _rl_to_lower (c);
-	  inword = alphabetic (the_line[start]);
+	  *ws = (inword == 0) ? toupper (*ws) : tolower (*ws);
+	  inword = iswalpha (*ws);
 	  break;
 
 	default:
-	  ding ();
+	  ding();
 	  return -1;
 	}
     }
-  rl_point = end;
-  return 0;
+
+  cs = rl_wcstombs(ws_start);
+
+  if (!cs)
+    {
+      free(ws_start);
+      return -1;
+    }
+  else
+    {
+      rl_begin_undo_group ();
+      rl_delete_text (start, end);
+      rl_point = start;
+      rl_insert_text (cs);
+      rl_end_undo_group ();
+
+      free(ws_start);
+      free(cs);
+      
+      return 0;
+    }
 }
 
 /* **************************************************************** */
@@ -1629,39 +1678,24 @@
 /*								    */
 /* **************************************************************** */
 
-/* Transpose the words at point. */
+/* Transpose strings on rl_line_buffer.  */
 int
-rl_transpose_words (count, key)
-     int count, key;
+rl_transpose (s1_beg, s1_end, s2_beg, s2_end)
+     int s1_beg, s1_end, s2_beg, s2_end;
 {
-  char *word1, *word2;
-  int w1_beg, w1_end, w2_beg, w2_end;
-  int orig_point = rl_point;
-
-  if (!count)
-    return 0;
-
-  /* Find the two words. */
-  rl_forward_word (count, key);
-  w2_end = rl_point;
-  rl_backward_word (1, key);
-  w2_beg = rl_point;
-  rl_backward_word (count, key);
-  w1_beg = rl_point;
-  rl_forward_word (1, key);
-  w1_end = rl_point;
+  char* word1; 
+  char* word2; 
 
   /* Do some check to make sure that there really are two words. */
-  if ((w1_beg == w2_beg) || (w2_beg < w1_end))
+  if ((s1_beg == s2_beg) || (s2_beg < s1_end))
     {
       ding ();
-      rl_point = orig_point;
       return -1;
     }
 
   /* Get the text of the words. */
-  word1 = rl_copy_text (w1_beg, w1_end);
-  word2 = rl_copy_text (w2_beg, w2_end);
+  word1 = rl_copy_text (s1_beg, s1_end);
+  word2 = rl_copy_text (s2_beg, s2_end);
 
   /* We are about to do many insertions and deletions.  Remember them
      as one operation. */
@@ -1669,17 +1703,17 @@
 
   /* Do the stuff at word2 first, so that we don't have to worry
      about word1 moving. */
-  rl_point = w2_beg;
-  rl_delete_text (w2_beg, w2_end);
+  rl_point = s2_beg;
+  rl_delete_text (s2_beg, s2_end);
   rl_insert_text (word1);
 
-  rl_point = w1_beg;
-  rl_delete_text (w1_beg, w1_end);
+  rl_point = s1_beg;
+  rl_delete_text (s1_beg, s1_end);
   rl_insert_text (word2);
 
   /* This is exactly correct since the text before this point has not
      changed in length. */
-  rl_point = w2_end;
+  rl_point = s2_end;
 
   /* I think that does it. */
   rl_end_undo_group ();
@@ -1689,45 +1723,62 @@
   return 0;
 }
 
-/* Transpose the characters at point.  If point is at the end of the line,
-   then transpose the characters before point. */
+/* Transpose the words at point. */
 int
-rl_transpose_chars (count, key)
+rl_transpose_words (count, key)
      int count, key;
 {
-  char dummy[2];
+  int w1_beg, w1_end, w2_beg, w2_end;
+  int orig_point = rl_point;
 
   if (!count)
     return 0;
 
-  if (!rl_point || rl_end < 2)
-    {
-      ding ();
-      return -1;
-    }
+  /* Find the two words. */
+  rl_forward_word (count, key);
+  w2_end = rl_point;
+  rl_backward_word (1, key);
+  w2_beg = rl_point;
+  rl_backward_word (count, key);
+  w1_beg = rl_point;
+  rl_forward_word (1, key);
+  w1_end = rl_point;
 
-  rl_begin_undo_group ();
+  rl_point = orig_point; 
+  rl_transpose (w1_beg, w1_end, w2_beg, w2_end);
 
-  if (rl_point == rl_end)
-    {
-      --rl_point;
-      count = 1;
-    }
-  rl_point--;
+  return 0;
+}
+
+/* Transpose the characters at point.  If point is at the end of the line,
+   then transpose the characters before point. */
+int
+rl_transpose_chars (count, key)
+     int count, key;
+{
+  int c1_beg, c1_end, c2_beg, c2_end;
+  int orig_point = rl_point;
 
-  dummy[0] = the_line[rl_point];
-  dummy[1] = '\0';
+  if (!count)
+    return 0;
 
-  rl_delete_text (rl_point, rl_point + 1);
+  /* Find the two words. */
+  rl_point = next_point (the_line, rl_point);
+  c2_end = rl_point; 
+  rl_point = previous_point (the_line, rl_point);
+  c2_beg = rl_point;
+  rl_point = previous_point (the_line, rl_point);
+  c1_beg = rl_point;
+  rl_point = next_point (the_line, rl_point);
+  c1_end = rl_point;
 
-  rl_point += count;
-  _rl_fix_point (0);
-  rl_insert_text (dummy);
+  rl_point = orig_point;
+  rl_transpose (c1_beg, c1_end, c2_beg, c2_end);
 
-  rl_end_undo_group ();
   return 0;
 }
 
+
 /* **************************************************************** */
 /*								    */
 /*			Character Searching			    */
@@ -1738,10 +1789,9 @@
 _rl_char_search_internal (count, dir, schar)
      int count, dir, schar;
 {
-  int pos, inc;
+  int pos;
 
   pos = rl_point;
-  inc = (dir < 0) ? -1 : 1;
   while (count)
     {
       if ((dir < 0 && pos <= 0) || (dir > 0 && pos >= rl_end))
@@ -1750,20 +1800,23 @@
 	  return -1;
 	}
 
-      pos += inc;
+      pos = (dir < 0) ? previous_point (the_line, pos) :
+	next_point (the_line, pos); 
       do
 	{
 	  if (rl_line_buffer[pos] == schar)
 	    {
 	      count--;
 	      if (dir < 0)
-	        rl_point = (dir == BTO) ? pos + 1 : pos;
+	        rl_point = (dir == BTO) ? next_point (the_line, pos) : pos;
 	      else
-		rl_point = (dir == FTO) ? pos - 1 : pos;
+		rl_point = (dir == FTO) ? previous_point (the_line, pos) : pos;
 	      break;
 	    }
+	  pos = (dir < 0) ? previous_point (the_line, pos) :
+	    next_point (the_line, pos); 
 	}
-      while ((dir < 0) ? pos-- : ++pos < rl_end);
+      while (0 < pos && pos < rl_end);
     }
   return (0);
 }
diff -urN readline-4.1.org/shlib/Makefile.in readline-4.1/shlib/Makefile.in
--- readline-4.1.org/shlib/Makefile.in	Thu Aug  5 23:56:46 1999
+++ readline-4.1/shlib/Makefile.in	Sun May  7 21:30:15 2000
@@ -108,19 +108,21 @@
 	   $(topdir)/callback.c $(topdir)/terminal.c $(topdir)/xmalloc.c \
 	   $(topdir)/history.c $(topdir)/histsearch.c $(topdir)/histexpand.c \
 	   $(topdir)/histfile.c $(topdir)/nls.c $(topdir)/search.c \
-	   $(topdir)/shell.c $(topdir)/savestring.c $(topdir)/tilde.c
+	   $(topdir)/shell.c $(topdir)/savestring.c $(topdir)/tilde.c \
+	   $(topdir)/multibyte.c
 
 # The header files for this library.
 HSOURCES = readline.h rldefs.h chardefs.h keymaps.h history.h histlib.h \
 	   posixstat.h posixdir.h posixjmp.h tilde.h rlconf.h rltty.h \
-	   ansi_stdlib.h tcap.h xmalloc.h rlprivate.h rlshell.h
+	   ansi_stdlib.h tcap.h xmalloc.h rlprivate.h rlshell.h \
+	   multibyte.h
 
 SHARED_HISTOBJ = history.so histexpand.so histfile.so histsearch.so shell.so
 SHARED_TILDEOBJ = tilde.so
 SHARED_OBJ = readline.so vi_mode.so funmap.so keymaps.so parens.so search.so \
 	  rltty.so complete.so bind.so isearch.so display.so signals.so \
 	  util.so kill.so undo.so macro.so input.so callback.so terminal.so \
-	  nls.so xmalloc.so $(SHARED_HISTOBJ) $(SHARED_TILDEOBJ)
+	  nls.so xmalloc.so multibyte.so $(SHARED_HISTOBJ) $(SHARED_TILDEOBJ)
 
 ##########################################################################
 
