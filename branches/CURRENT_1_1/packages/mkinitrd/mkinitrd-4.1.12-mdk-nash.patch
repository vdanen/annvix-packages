--- mkinitrd-4.1.12/nash/mount_by_label.h.mdk	2002-01-11 17:00:09.000000000 +0100
+++ mkinitrd-4.1.12/nash/mount_by_label.h	2004-09-26 11:11:24.216330824 +0200
@@ -1,2 +1,3 @@
 char * get_spec_by_uuid(const char *uuid, int * major, int * minor);
 char * get_spec_by_volume_label(const char *volumelabel, int * major, int * minor);
+int display_uuid_cache(void);
--- mkinitrd-4.1.12/nash/name_to_dev_t.c.mdk	2004-08-16 19:11:01.000000000 +0200
+++ mkinitrd-4.1.12/nash/name_to_dev_t.c	2004-09-26 11:11:24.280330567 +0200
@@ -18,7 +18,7 @@
 
 	/* read device number from .../dev */
 
-	sprintf(path, "/sys/block/%s/dev", name);
+	snprintf(path, 64, "/sys/block/%s/dev", name);
 	fd = open(path, O_RDONLY);
 	if (fd < 0)
 		goto fail;
--- mkinitrd-4.1.12/nash/nash.8.mdk	2004-08-03 00:28:09.000000000 +0200
+++ mkinitrd-4.1.12/nash/nash.8	2004-09-26 11:11:24.344330309 +0200
@@ -1,4 +1,5 @@
-.TH NASH 8 "Mon Aug 02 2004"
+.TH NASH 8 "Sun Aug 29 2004"
+.LO 1
 .SH NAME
 nash \- script interpretor to interpret linuxrc images
 .SH SYNOPSIS
@@ -47,6 +48,12 @@
 system. If none is available, no output is displayed.
 
 .TP
+\fBinsmod\fR
+If \fBnash\fR is running on kernel 2.5 or greater it will load the specified
+module. If it is running on a previous kernel it will invoke an external
+\fBinsmod\fR command to load the module.
+
+.TP
 \fBlosetup \fI/dev/loopdev\fR \fIfile\fR
 Binds \fIfile\fR to the loopback device \fI/dev/loopdev\fR. See
 \fBlosetup(8)\fR for information on loopback devices.
@@ -94,18 +101,31 @@
 The \fBdefaults\fR mount option is silently ignored.
 
 .TP
+\fBmountdev\fR
+Useful if initrd uses a read-only filesystem, if \fI/devfs\fR
+is not in use it will mount a \fItmpfs\fR over \fI/dev\fR
+and create some basic device file.
+
+.TP
 \fBpivot_root \fInewrootpath\fR \fIoldrootpath\fR
 Makes the filesystem mounted at \fInewrootpath\fR the new root filesystem,
 and mounts the current root filesystem as \fIoldrootpath\fR.
 
 .TP
+\fBraidautorun \fImddevice\fR
+Runs raid autodetection on all raid-typed partitions. \fImddevice\fR must
+be a raid device (any will do).
+
+.TP
 \fBreadlink \fIpath\fR
 Displays the value of the symbolic link \fIpath\fR.
 
 .TP
-\fBraidautorun \fImddevice\fR
-Runs raid autodetection on all raid-typed partitions. \fImddevice\fR must
-be a raid device (any will do).
+\fBremountdev\fR \fI[-f]\fR \fIpath\fR
+remount \fI/dev\fR onto the specified path if it is a \fIdevfs\fR or the
+\fI-f\fR (force) flag is given.
+It is needed before using switchroot if using \fIdevfs\fR or \fIudev\fR, to
+remount the tmpfs on the new root.
 
 .TP
 \fBsetquiet\fR
@@ -146,4 +166,6 @@
 .SH AUTHOR
 .nf
 Erik Troan <ewt@redhat.com>
+Patches for MandrakeSoft by Guillaume Cottenceau <gc at mandrakesoft.com> and
+Luca Berra <bluca at vodka.it>
 .fi
--- mkinitrd-4.1.12/nash/Makefile.mdk	2004-09-10 23:22:15.000000000 +0200
+++ mkinitrd-4.1.12/nash/Makefile	2004-09-26 11:11:24.149331094 +0200
@@ -1,16 +1,16 @@
 CFLAGS=-Wall -Werror -DVERSION=\"$(VERSION)\" -g 
 VERSION=$(shell awk -F= '/^VERSION=/ { print $$2 }' ../mkinitrd)
 
-ARCH := $(patsubst i%86,i386,$(shell uname -m))
-ARCH := $(patsubst sparc%,sparc,$(ARCH))
-
-ifeq (i386, $(ARCH))
+ifeq ($(DIET), 1)
 CC:=diet $(CC)
-CFLAGS += -DUSE_DIET=1
 else
 STATIC=-static
 endif
 
+ifeq ($(DEBUG),1)
+CFLAGS += -DDEBUG
+endif
+
 mandir=usr/share/man
 
 nash: nash.o mount_by_label.o name_to_dev_t.o
--- mkinitrd-4.1.12/nash/nash.c.mdk	2004-09-10 23:22:15.000000000 +0200
+++ mkinitrd-4.1.12/nash/nash.c	2004-09-26 11:13:52.343733705 +0200
@@ -6,6 +6,7 @@
  *
  * Erik Troan (ewt@redhat.com)
  * Jeremy Katz (katzj@redhat.com)
+ * Luca Berra (bluca@vodka.it)
  *
  * Copyright 2002-2004 Red Hat Software 
  *
@@ -50,7 +51,9 @@
 
 /* Need to tell loop.h what the actual dev_t type is. */
 #undef dev_t
-#if defined(__alpha) || (defined(__sparc__) && defined(__arch64__))
+#if defined(__x86_64__)
+#define dev_t unsigned long
+#elif defined(__alpha) || (defined(__sparc__) && defined(__arch64__))
 #define dev_t unsigned int
 #else
 #define dev_t unsigned short
@@ -98,19 +101,24 @@
 int smartmknod(char * device, mode_t mode, dev_t dev) {
     char buf[256];
     char * end;
+    struct stat statbuf;
+
+    if ((stat(device, &statbuf) == 0) &&
+	((mode & S_IFMT) == (statbuf.st_mode & S_IFMT)) &&
+	(dev == statbuf.st_dev))
+	    return 0;
 
     strncpy(buf, device, 256);
 
     end = buf;
     while (*end) {
+	end++; /* i dont need to create the root directory */
 	if (*end == '/') {
 	    *end = '\0';
 	    if (access(buf, F_OK) && errno == ENOENT) 
 		mkdir(buf, 0755);
 	    *end = '/';
 	}
-
-	end++;
     }
 
     return mknod(device, mode, dev);
@@ -180,6 +188,7 @@
     if (i < 0) {
 	printf("getKernelCmdLine: failed to read /proc/cmdline: %d\n", errno);
 	close(fd);
+	free(buf);
 	return NULL;
     }
 
@@ -220,6 +229,7 @@
     char * mntPoint;
     char * deviceDir = NULL;
     char * options = NULL;
+    char * options_mount = NULL;
     int mustRemove = 0;
     int mustRemoveDir = 0;
     int rc = 0;
@@ -332,7 +342,8 @@
 	    start = end;
 	}
 
-	options = newOpts;
+	if (*newOpts)
+	    options_mount = newOpts;
     }
 
     if (!strncmp("LABEL=", device, 6)) {
@@ -388,12 +399,23 @@
 		(flags & MS_NOATIME) ? "noatime " : ""
 	    );
     } else {
-	if (mount(device, mntPoint, fsType, flags, options)) {
-	    printf("mount: error %d mounting %s\n", errno, fsType);
-	    rc = 1;
-	}
+	    if (mount(device, mntPoint, fsType, flags, options_mount)) {
+		    printf("mount: error %d mounting %s flags %s\n", errno, fsType, options);
+		    if (flags != MS_MGC_VAL) {
+			    printf("well, retrying without the option flags\n");
+			    if (!mount(device, mntPoint, fsType, flags, NULL))
+				    goto mount_ok;
+			    printf("mount: error %d mounting %s\n", errno, fsType);
+		    }
+		    printf("well, retrying read-only without any flag\n");
+		    if (mount(device, mntPoint, fsType, MS_MGC_VAL|MS_RDONLY, NULL)) {
+			    printf("mount: error %d mounting %s\n", errno, fsType);
+			    rc = 1;
+		    }
+	    }
     }
 
+mount_ok:
     if (mustRemove) unlink(device);
     if (mustRemoveDir) rmdir(deviceDir);
 
@@ -636,7 +658,6 @@
     return 0;
 }
 
-#define RAID_MAJOR 9
 int raidautorunCommand(char * cmd, char * end) {
     char * device;
     int fd;
@@ -661,7 +682,7 @@
             return 1;
         }
 
-        if (smartmknod(device, S_IFBLK | 0600, makedev(RAID_MAJOR, minor))) {
+        if (smartmknod(device, S_IFBLK | 0600, makedev(MD_MAJOR, minor))) {
             printf("raidautorun: unable to autocreate %s\n", device);
             return 1;
         }
@@ -683,12 +704,12 @@
     return 0;
 }
 
-#ifdef USE_DIET
+#ifdef __dietlibc__
 extern int pivot_root(char *, char *);
 #endif
 
 static int my_pivot_root(char * one, char * two) {
-#ifdef USE_DIET
+#ifdef __dietlibc__
     return pivot_root(one, two);
 #else
     return syscall(__NR_pivot_root, one, two);
@@ -744,7 +765,7 @@
         return 1;
     }
 
-    if ((fd = open("/dev/console", O_RDWR)) < 0) {
+    if ((fd = open("./dev/console", O_RDWR)) < 0) {
         printf("ERROR opening /dev/console!!!!: %d\n", errno);
     } 
 
@@ -758,6 +779,10 @@
     if (init == NULL)
         cmdline = getKernelCmdLine();
 
+    umount("/dev");
+    umount("/sys");
+    umount("/proc");
+
     if (mount(".", "/", NULL, MS_MOVE, NULL)) {
         printf("switchroot: mount failed: %d\n", errno);
         return 1;
@@ -850,6 +875,7 @@
         newline = 0;
 	num -= 2;
     }
+
     string = (char *)malloc(length * sizeof(char));
     *string = '\0';
     for (i = 0; i < num;i ++) {
@@ -1119,7 +1145,7 @@
 	strcat(strBuf, "/");
 	strcat(strBuf, d->d_name);
 
-	if (!strcmp(d->d_name, name))
+	if (!strcmp("*", name) || !strcmp(d->d_name, name))
 	    printf("%s\n", strBuf);
 
 	if (!strcmp(d->d_name, ".") || !strcmp(d->d_name, "..")) {
@@ -1180,11 +1206,11 @@
 	return 1;
     }
 
-    if (!access("/dev/.devfsd", X_OK))
+    if (!access("/dev/.devfsd", F_OK))
 	strcpy(separator, "/");
 
     for (devNum = 0; devNum < 256; devNum++) {
-	sprintf(devName, "/dev/loop%s%d", separator, devNum);
+	snprintf(devName, 20, "/dev/loop%s%d", separator, devNum);
 	if ((fd = open(devName, O_RDONLY)) < 0) return 0;
 
 	if (ioctl(fd, LOOP_GET_STATUS, &loopInfo)) {
@@ -1265,6 +1291,11 @@
 	return 1;
     }
 
+    snprintf(devName, 128, "%s/.devfsd", prefix);
+    if (!access(devName, F_OK)) {
+	return 0;
+    }
+
     if ((fd = open("/proc/partitions", O_RDONLY)) < 0) {
 	printf("mkrootdev: failed to open /proc/partitions: %d\n", errno);
 	return 1;
@@ -1312,27 +1343,9 @@
 		    if (testing) {
 			printf("% 3d % 3d %s\n", major, minor, start);
 		    } else {
-			char * ptr, * deviceDir;
-			int i;
-
-			sprintf(devName, "%s/%s", prefix, start);
+			snprintf(devName, 128, "%s/%s", prefix, start);
 			unlink(devName);
 
-			ptr = devName;
-			i = 0;
-			while (*ptr)
-			    if (*ptr++ == '/')
-				i++;
-			if (i > 2) {
-			    deviceDir = alloca(strlen(devName) + 1);
-			    strcpy(deviceDir, devName);
-			    ptr = deviceDir + (strlen(devName) - 1);
-			    while (*ptr != '/')
-				*ptr-- = '\0';
-			    if (access(deviceDir, X_OK) && mkdir(deviceDir, 0644)) {
-				printf("mkdir: cannot create directory %s: %d\n", deviceDir, errno);
-			    }
-			}
 			if (smartmknod(devName, S_IFBLK | 0600, 
 				  makedev(major, minor))) {
 			    printf("failed to create %s\n", devName);
@@ -1417,19 +1430,133 @@
 }
 
 int setQuietCommand(char * cmd, char * end) {
-    int fd, rc;
+    char * buf = getKernelCmdLine();
+
+    if (strstr(buf, "quiet") != NULL) {
+	quiet = 1;
+	reallyquiet = 1;
 
-    if ((fd = open("/proc/cmdline", O_RDONLY)) >= 0) {
-        char * buf = malloc(512);
-        rc = read(fd, buf, 511);
-        if (strstr(buf, "quiet") != NULL)
-            reallyquiet = 1;
-        close(fd);
-        free(buf);
     }
 
-    if (reallyquiet)
-          quiet = 1;
+    free(buf);
+    return 0;
+}
+
+int remountdevCommand(char * cmd, char * end) {
+    int forceflag = 0;
+    char * newdev;
+
+    if (!(cmd = getArg(cmd, end, &newdev))) {
+	printf("remountdev: path expected\n");
+	return 1;
+    }
+
+    if (!strcmp(newdev,"-f")) {
+	forceflag = 1;
+	if (!(cmd = getArg(cmd, end, &newdev))) {
+	    printf("remountdev: path expected\n");
+	    return 1;
+	}
+    }
+
+    if (cmd < end) {
+	printf("remountdev: unexpected arguments\n");
+	return 1;
+    }
+
+    if (access("/dev/.devfsd", F_OK)) {
+	if (!forceflag)
+	    return 0;
+    	return mount("/dev", newdev, "none", MS_MGC_VAL|MS_BIND, NULL);
+    } else {
+	return mount("none", newdev, "devfs", MS_MGC_VAL, NULL);
+    }
+}
+
+int mountdevCommand(char * cmd, char * end) {
+    char devName[128];
+    char * options;
+    int i;
+
+    if (access("/dev/.devfsd", F_OK) == 0)
+	return 0;
+
+    cmd = getArg(cmd, end, &options);
+
+    printf("mounting tmpfs on /dev\n");
+    mount("/dev", "/dev", "tmpfs", MS_MGC_VAL, cmd?options:NULL);
+    smartmknod("/dev/console", S_IFCHR | 0600, makedev(5, 1));
+    smartmknod("/dev/null", S_IFCHR | 0666, makedev(1, 3));
+    for (i=1;i<8;i++) {
+	snprintf(devName, 128, "/dev/tty%d", i);
+	smartmknod(devName, S_IFCHR | 0600, makedev(4, i));
+    }
+    mkdir("/dev/shm", 0755);
+    mkdir("/dev/pts", 0755);
+
+    return 0;
+}
+
+/* this was grabbed from modules-init-tools
+    insmod.c: insert a module into the kernel.
+    Copyright (C) 2001  Rusty Russell.
+    Copyright (C) 2002  Rusty Russell, IBM Corporation.
+*/
+extern long create_module(const char *, size_t);
+extern long init_module(void *, unsigned long, const char *);
+
+static void *grab_file(const char *filename, unsigned long *size)
+{
+    unsigned int max = 16384;
+    int ret, fd;
+    void *buffer = malloc(max);
+
+    fd = open(filename, O_RDONLY, 0);
+
+    if (fd < 0)
+	return NULL;
+
+    *size = 0;
+    while ((ret = read(fd, buffer + *size, max - *size)) > 0) {
+	*size += ret;
+	if (*size == max)
+	    buffer = realloc(buffer, max *= 2);
+    }
+    if (ret < 0) {
+	free(buffer);
+	buffer = NULL;
+    }
+    close(fd);
+    return buffer;
+}
+
+int insmodCommand(char * cmd, char * end) {
+    unsigned long len;
+    void *file = NULL;
+    char *filename = NULL;
+    
+    /* check if we must run the external pre-2.5 version */
+    if (create_module(NULL, 0) >= 0 || errno != ENOSYS)
+	return otherCommand("insmod", cmd, end, 1);
+
+    if (!(cmd = getArg(cmd, end, &filename))) {
+	printf("insmod: module expected\n");
+	return 1;
+    }
+
+    file = grab_file(filename, &len);
+    if (!file) {
+	printf("insmod: can't read '%s': errno=%d\n", filename, errno);
+	return 1;
+    }
+
+    if (cmd<end)
+	*end='\0';
+
+    if (init_module(file, len, (cmd<end)?cmd:"") != 0) {
+	printf("insmod: error inserting '%s': errno=%d\n", filename, errno);
+	return 1;
+    }
 
     return 0;
 }
@@ -1514,12 +1641,18 @@
 	    rc = sleepCommand(chptr, end);
 	else if (!strncmp(start, "mknod", MAX(5, chptr-start)))
 	    rc = mknodCommand(chptr, end);
-        else if (!strncmp(start, "mkdmnod", MAX(7, chptr-start)))
-            rc = mkDMNodCommand(chptr, end);
-        else if (!strncmp(start, "readlink", MAX(8, chptr-start)))
-            rc = readlinkCommand(chptr, end);
-        else if (!strncmp(start, "setquiet", MAX(8, chptr-start)))
-            rc = setQuietCommand(chptr, end);
+	else if (!strncmp(start, "mkdmnod", MAX(7, chptr-start)))
+	    rc = mkDMNodCommand(chptr, end);
+	else if (!strncmp(start, "readlink", MAX(8, chptr-start)))
+	    rc = readlinkCommand(chptr, end);
+	else if (!strncmp(start, "setquiet", MAX(8, chptr-start)))
+	    rc = setQuietCommand(chptr, end);
+	else if (!strncmp(start, "remountdev", MAX(10, chptr - start)))
+	    rc = remountdevCommand(chptr, end);
+	else if (!strncmp(start, "mountdev", MAX(8, chptr - start)))
+	    rc = mountdevCommand(chptr, end);
+	else if (!strncmp(start, "insmod", MAX(6, chptr - start)))
+	    rc = insmodCommand(chptr, end);
 #ifdef DEBUG
         else if (!strncmp(start, "cat", MAX(3, chptr-start)))
             rc = catCommand(chptr, end);
@@ -1551,7 +1684,7 @@
 
     if (!strcmp(name, "modprobe"))
 	exit(0);
-    if (!strcmp(name, "hotplug")) {
+    if (strstr(name, "hotplug")) {
         argv[0] = strdup("/sbin/udev");
         execv(argv[0], argv);
         printf("ERROR: exec of udev failed!\n");
@@ -1578,6 +1711,17 @@
 	}
     }
 
+    if (mount("/proc", "/proc", "proc", 0, NULL)) {
+	if (!quiet)
+	    printf("Couldn't mount proc filesystem\n");
+    } else {
+	setQuietCommand(NULL,NULL);
+	if (umount("/proc")) {
+	    if (!quiet)
+		printf("Umount of proc failed: %d\n", errno);
+	}
+    }
+
     if (force && !quiet)
 	printf("(forcing normal run)\n");
 
