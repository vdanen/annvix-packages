2005-01-27  Gwenole Beauchesne  <gbeauchesne@mandrakesoft.com>

	MDK BZ/#13268
	* build/rpmfc.c (rpmfcSCRIPT): Generate package requires only if
	requested

2005-01-20  Gwenole Beauchesne  <gbeauchesne@mandrakesoft.com>

	* Enable files coloring even if the external dependencies
	generator is used.
	* Assign a color to *.so symlinks that are found in the usual
	development libdirs.
	* Likewise for static *.a archives if it includes ELF objects.

--- rpm-4.2.3/build/rpmfc.c.coloring	2005-01-13 11:55:04.000000000 +0100
+++ rpm-4.2.3/build/rpmfc.c	2005-01-27 22:50:43.208284487 +0100
@@ -437,6 +437,10 @@ static struct rpmfcTokens_s rpmfcTokens[
   { " not stripped",		RPMFC_NOTSTRIPPED },
   { " archive",			RPMFC_ARCHIVE },
 
+  { "ar archive with 32-bit ELF",	RPMFC_ELF32|RPMFC_STATIC|RPMFC_LIBRARY|RPMFC_ARCHIVE|RPMFC_INCLUDE },
+  { "ar archive with 64-bit ELF",	RPMFC_ELF64|RPMFC_STATIC|RPMFC_LIBRARY|RPMFC_ARCHIVE|RPMFC_INCLUDE },
+  { "symbolic link to ELF 32-bit",	RPMFC_ELF32|RPMFC_SYMLINK|RPMFC_INCLUDE },
+  { "symbolic link to ELF 64-bit",	RPMFC_ELF64|RPMFC_SYMLINK|RPMFC_INCLUDE },
   { "ELF 32-bit",		RPMFC_ELF32|RPMFC_INCLUDE },
   { "ELF 64-bit",		RPMFC_ELF64|RPMFC_INCLUDE },
 
@@ -688,7 +692,7 @@ static int rpmfcSCRIPT(rpmfc fc)
 	*se = '\0';
 	se++;
 
-	if (is_executable) {
+	if (is_executable && !fc->skipReq) {
 	    /* Add to package requires. */
 	    ds = rpmdsSingle(RPMTAG_REQUIRENAME, s, "", RPMSENSE_FIND_REQUIRES);
 	    xx = rpmdsMerge(&fc->requires, ds);
@@ -765,6 +769,10 @@ static int rpmfcELF(rpmfc fc)
     static int filter_GLIBC_PRIVATE = 0;
     static int oneshot = 0;
 
+    /* Skip static archives and symlinks to DSOs.  */
+    if (fc->fcolor->vals[fc->ix] & (RPMFC_SYMLINK|RPMFC_STATIC|RPMFC_LIBRARY))
+	return 0;
+
     if (oneshot == 0) {
 	oneshot = 1;
 	filter_GLIBC_PRIVATE = rpmExpandNumeric("%{?_filter_GLIBC_PRIVATE}");
@@ -1429,6 +1437,7 @@ int rpmfcGenerateDepends(const Spec spec
     char buf[BUFSIZ];
     const char * N;
     const char * EVR;
+    int externalDepsGenerator = 0;
     int genConfigDeps;
     int c;
     int rc = 0;
@@ -1445,9 +1454,10 @@ int rpmfcGenerateDepends(const Spec spec
     /* If new-fangled dependency generation is disabled ... */
     if (!rpmExpandNumeric("%{?_use_internal_dependency_generator}")) {
 	/* ... then generate dependencies using %{__find_requires} et al. */
+	externalDepsGenerator = 1;
 	rc = rpmfcGenerateDependsHelper(spec, pkg, fi);
-	printDeps(pkg->header);
-	return rc;
+	if (rc)
+	    return rc;
     }
 
     /* Extract absolute file paths in argv format. */
@@ -1470,8 +1480,8 @@ int rpmfcGenerateDepends(const Spec spec
 /*@=boundswrite@*/
 
     fc = rpmfcNew();
-    fc->skipProv = !pkg->autoProv;
-    fc->skipReq = !pkg->autoReq;
+    fc->skipProv = externalDepsGenerator || !pkg->autoProv;
+    fc->skipReq = externalDepsGenerator || !pkg->autoReq;
     fc->tracked = 0;
 
     /* Copy (and delete) manually generated dependencies to dictionary. */
--- rpm-4.2.3/file/src/fsmagic.c.coloring	2005-01-13 11:56:01.000000000 +0100
+++ rpm-4.2.3/file/src/fsmagic.c	2005-01-27 21:41:04.000000000 +0100
@@ -33,10 +33,193 @@ FILE_RCSID("@(#)Id: fsmagic.c,v 1.36 200
 
 /*@access fmagic @*/
 
+static int do_fmagicD(fmagic fm, int fdepth)
+	/*@globals fileSystem, internalState @*/
+	/*@modifies fm, fileSystem, internalState @*/;
+static int do_fmagicProcess(fmagic fm, const char *fn, int wid, int fdepth)
+	/*@globals fileSystem, internalState @*/
+	/*@modifies fm, fileSystem, internalState @*/;
+
+#define RE_DEVEL_LIBDIR "(/usr(/X11R6)?)?/lib(|64)(/gcc(-lib)?/.+)?/"
+static const char re_devel_symlink[] = RE_DEVEL_LIBDIR "[^/]+\\.so$";
+static const char re_devel_archive[] = RE_DEVEL_LIBDIR "[^/]+\\.a$";
+
+static int
+is_devel_symlink(const char *fn)
+{
+    enum {
+	RE_STATUS_INIT,
+	RE_STATUS_ERROR,
+	RE_STATUS_RUN
+    };
+    static int re_status = RE_STATUS_INIT;
+    static regex_t re;
+    int err;
+
+    switch (re_status) {
+    case RE_STATUS_INIT:
+	err = regcomp(&re, re_devel_symlink, REG_EXTENDED);
+	if (err != REG_NOERROR) {
+	    re_status = RE_STATUS_ERROR;
+	    return 0;
+	}
+	/* fall through */
+    case RE_STATUS_RUN:
+    {
+	regmatch_t pmatch[1];
+	err = regexec(&re, fn, sizeof(pmatch)/sizeof(pmatch[0]), pmatch, 0);
+	return err == 0;
+    }
+    case RE_STATUS_ERROR:
+    default:
+	return 0;
+    }
+}
+
+static int
+is_devel_archive(const char *fn)
+{
+    enum {
+	RE_STATUS_INIT,
+	RE_STATUS_ERROR,
+	RE_STATUS_RUN
+    };
+    static int re_status = RE_STATUS_INIT;
+    static regex_t re;
+    int err;
+
+    switch (re_status) {
+    case RE_STATUS_INIT:
+	err = regcomp(&re, re_devel_archive, REG_EXTENDED);
+	if (err != REG_NOERROR) {
+	    re_status = RE_STATUS_ERROR;
+	    return 0;
+	}
+	/* fall through */
+    case RE_STATUS_RUN:
+    {
+	regmatch_t pmatch[1];
+	err = regexec(&re, fn, sizeof(pmatch)/sizeof(pmatch[0]), pmatch, 0);
+	return err == 0;
+    }
+    case RE_STATUS_ERROR:
+    default:
+	return 0;
+    }
+}
+
+/* Static archive parser derived from X.org code.  */
+#define ARMAG	"!<arch>\n"
+#define SARMAG	8
+
+struct ar_hdr {
+    char ar_name[16];
+    char ar_date[12];
+    char ar_uid[6];
+    char ar_gid[6];
+    char ar_mode[8];
+    char ar_size[10];
+    char ar_fmag[2];
+};
+
+#define ELFMAG	"\177ELF"
+#define SELFMAG	4
+
+#define EI_NIDENT	16
+#define EI_CLASS	4
+#define ELFCLASS32	1
+#define ELFCLASS64	2
+
+static int
+classify_archive_fd(int arfd)
+{
+    unsigned char armagic[SARMAG];
+    unsigned char e_ident[EI_NIDENT];
+    struct ar_hdr hdr;
+    unsigned int size;
+    unsigned int offset;
+
+    /* Check archive magic.  */
+    read(arfd, armagic, SARMAG);
+    if (strncmp(armagic, ARMAG, SARMAG) != 0)
+	return -1;
+
+    /* Sequentially read all the contents until an object is found.  */
+    while (read(arfd, &hdr, sizeof(struct ar_hdr))) {
+	sscanf(hdr.ar_size, "%u", &size);
+	offset = lseek(arfd, 0, SEEK_CUR);
+
+	/* Skip Symbol Table.  */
+	if ((hdr.ar_name[0] == '/' && hdr.ar_name[1] == ' ') ||
+	    strncmp(hdr.ar_name, "__.SYMDEF", 9) == 0) {
+	    /* If the file name is NULL, then it is a symbol table */
+	    offset = lseek(arfd, offset + size, SEEK_SET);
+	    if (offset & 0x1)	/* odd value */
+		offset = lseek(arfd, 1, SEEK_CUR);	/* make it an even boundary */
+	    continue;
+	}
+
+	/* Skip String Table.  */
+	if (hdr.ar_name[0] == '/' && hdr.ar_name[1] == '/') {
+	    /* If the file name is '/', then it is a string table */
+	    offset = lseek(arfd, size, SEEK_CUR);
+	    if (offset & 0x1)	/* odd value */
+		offset = lseek(arfd, 1, SEEK_CUR);	/* make it an even boundary */
+	    continue;
+	}
+
+	/* Reajust offset for BSD 4.4 style long member name.  */
+	if (hdr.ar_name[0] == '#' && hdr.ar_name[1] == '1' &&
+	    hdr.ar_name[2] == '/') {
+	    int namesz;
+	    if (sscanf(&hdr.ar_name[3], "%d", &namesz) != 1)
+		return -1;
+	    offset += namesz;
+	    size -= namesz;
+	}
+
+	/* Check for an ELF object.  */
+	read(arfd, e_ident, sizeof(e_ident));
+	if (strncmp(&e_ident[0], ELFMAG, SELFMAG) == 0) {
+	    switch (e_ident[EI_CLASS]) {
+	    case ELFCLASS32: return 32;
+	    case ELFCLASS64: return 64;
+	    }
+	}
+
+	offset = lseek(arfd, offset + size, SEEK_SET);
+	if (offset & 0x1)	/* odd value */
+	    lseek(arfd, 1, SEEK_CUR);	/* make it an even boundary */
+  }
+
+  return -1;
+}
+
+static int
+classify_archive(const char *archive_filename)
+{
+    int elf_class;
+    int fd;
+
+    if ((fd = open(archive_filename, O_RDONLY)) < 0)
+	return -1;
+
+    elf_class = classify_archive_fd(fd);
+    close(fd);
+    return elf_class;
+}
+
 /*@-bounds@*/
 int
 fmagicD(fmagic fm)
 {
+	return do_fmagicD(fm, 0);
+}
+
+/*@-bounds@*/
+static int
+do_fmagicD(fmagic fm, int fdepth)
+{
 	const char * fn = fm->fn;
 	struct stat * st = &fm->sb;
 	int ret = 0;
@@ -149,6 +332,8 @@ fmagicD(fmagic fm)
 	case S_IFLNK:
 		{
 			char buf[BUFSIZ+4];
+			char buf2[BUFSIZ+BUFSIZ+4];
+			char *dbuf = buf;
 			int nch;
 			struct stat tstatbuf;
 
@@ -169,7 +354,6 @@ fmagicD(fmagic fm)
 			}
 			else {
 			    char *tmp;
-			    char buf2[BUFSIZ+BUFSIZ+4];
 
 			    if ((tmp = strrchr(fn,  '/')) == NULL) {
 				tmp = buf; /* in current directory anyway */
@@ -184,16 +368,27 @@ fmagicD(fmagic fm)
 				file_printf(fm, "broken symbolic link to %s", buf);
 				return 1;
 			    }
+			    dbuf = buf2;
                         }
 /*@=branchstate@*/
 
 			/* Otherwise, handle it. */
 			if ((fm->flags & FMAGIC_FLAGS_FOLLOW)) {
 				file_printf(fm, "\n");
-				xx = fmagicProcess(fm, buf, strlen(buf));
+				xx = do_fmagicProcess(fm, buf, strlen(buf), fdepth + 1);
+				return 1;
+			} else if ((fm->flags & FMAGIC_FLAGS_FOLLOW_DEVEL)) {
+				xx = do_fmagicProcess(fm, dbuf, strlen(dbuf), fdepth + 1);
 				return 1;
 			} else { /* just print what it points to */
-				file_printf(fm, "symbolic link to %s", buf);
+			    /* special output for -devel .so symlinks */
+			    if (fdepth == 0 && is_devel_symlink(fn)) {
+				file_printf(fm, "symbolic link to ");
+				fm->flags |= FMAGIC_FLAGS_BRIEF | FMAGIC_FLAGS_FOLLOW_DEVEL;
+				xx = do_fmagicProcess(fm, dbuf, strlen(dbuf), fdepth + 1);
+				return 1;
+			    }
+			    file_printf(fm, "symbolic link to %s", buf);
 			}
 		}
 		return 1;
@@ -274,6 +469,13 @@ fmagicF(fmagic fm, int zfl)
 int
 fmagicProcess(fmagic fm, const char *fn, int wid)
 {
+	return do_fmagicProcess(fm, fn, wid, 0);
+}
+
+/*@-bounds@*/
+int
+do_fmagicProcess(fmagic fm, const char *fn, int wid, int fdepth)
+{
 	static const char stdname[] = "standard input";
 	char match = '\0';
 	int ret = 0;
@@ -304,9 +506,18 @@ fmagicProcess(fmagic fm, const char *fn,
 		/*
 		 * first try judging the file based on its filesystem status
 		 */
-		if (fmagicD(fm) != 0)
+		if (do_fmagicD(fm, fdepth) != 0)
 			goto exit;
 
+		/* Check for static archives in usual development libdirs.  */
+		if (is_devel_archive(fm->fn)) {
+		    int ar_class = classify_archive(fm->fn);
+		    if (ar_class == 32 || ar_class == 64) {
+			file_printf(fm, "ar archive with %d-bit ELF objects", ar_class);
+			goto exit;
+		    }
+		}
+
 		if ((fm->fd = open(fm->fn, O_RDONLY)) < 0) {
 			/* We can't open it, but we were able to stat it. */
 			if (fm->sb.st_mode & 0002)
@@ -318,7 +529,6 @@ fmagicProcess(fmagic fm, const char *fn,
 		}
 	}
 
-
 	/*
 	 * try looking at the first HOWMANY bytes
 	 */
--- rpm-4.2.3/file/src/file.h.coloring	2005-01-13 11:56:01.000000000 +0100
+++ rpm-4.2.3/file/src/file.h	2005-01-27 21:41:04.000000000 +0100
@@ -171,7 +171,8 @@ enum fmagicFlags_e {
     FMAGIC_FLAGS_FOLLOW		= (1 << 4),	/*!< follow symlinks? */
     FMAGIC_FLAGS_SPECIAL	= (1 << 5),	/*!< analyze block devices? */
     FMAGIC_FLAGS_UNCOMPRESS	= (1 << 6),	/*!< uncompress files? */
-    FMAGIC_FLAGS_NOPAD		= (1 << 7)	/*!< don't pad output */
+    FMAGIC_FLAGS_NOPAD		= (1 << 7),	/*!< don't pad output */
+    FMAGIC_FLAGS_FOLLOW_DEVEL	= (1 << 8)	/*!< follow devel symlinks? */
 };
 
 struct fmagic_s {
