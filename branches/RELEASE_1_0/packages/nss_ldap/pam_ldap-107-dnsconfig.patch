--- pam_ldap-107/Makefile.am.dnsconfig	Mon Jan  8 18:00:14 2001
+++ pam_ldap-107/Makefile.am	Wed Apr 25 16:49:34 2001
@@ -2,7 +2,7 @@
 EXTRA_DIST = COPYING.LIB CVSVersionInfo.txt ChangeLog README \
 	     ldap.conf pam.conf pam_ldap.spec pam.d
 
-pam_ldap_so_SOURCES = pam_ldap.c pam_ldap.h md5.c md5.h
+pam_ldap_so_SOURCES = pam_ldap.c pam_ldap.h md5.c md5.h resolve.c resolve.h dnsconfig.c dnsconfig.h
 pam_ldap_so_LDFLAGS = @pam_ldap_so_LDFLAGS@
 
 
--- pam_ldap-107/configure.in.dnsconfig	Fri Apr 13 22:08:11 2001
+++ pam_ldap-107/configure.in	Wed Apr 25 16:49:34 2001
@@ -91,6 +91,9 @@
 AC_CHECK_FUNCS(ldap_init ldapssl_init ldap_start_tls_s ldap_get_lderrno ldap_parse_result ldap_memfree ldap_controls_free ldap_set_option ldap_get_option)
 AC_CHECK_FUNCS(ldap_initialize)
 AC_CHECK_FUNCS(gethostbyname_r)
+AC_CHECK_FUNCS(snprintf strtok_r)
+AC_CHECK_LIB(resolv, main)
+AC_CHECK_FUNCS(res_search dn_expand)
 
 if test "$ac_cv_func_gethostbyname_r" = "yes"; then
 AC_CACHE_CHECK(whether gethostbyname_r takes 6 arguments, pam_ldap_cv_gethostbyname_r_args, [
--- pam_ldap-107/pam_ldap.c.dnsconfig	Fri Apr 13 22:08:12 2001
+++ pam_ldap-107/pam_ldap.c	Wed Apr 25 16:57:33 2001
@@ -123,6 +123,7 @@
 #endif /* YPLDAPD */
 
 #include "pam_ldap.h"
+#include "dnsconfig.h"
 #include "md5.h"
 
 #ifdef HAVE_SECURITY_PAM_MISC_H
@@ -159,6 +160,55 @@
 			syslog(LOG_DEBUG, "%s:%i " fmt , __FUNCTION__ , __LINE__ , ## args); \
 	} while (0)
 
+/* Configuration file routines */
+static int _alloc_config (pam_ldap_config_t **);
+static void _release_config (pam_ldap_config_t **);
+static int _read_config (const char *, pam_ldap_config_t **);
+#ifdef YPLDAPD
+static int _ypldapd_read_config (pam_ldap_config_t **);
+#endif /* YPLDAPD */
+
+/* Internal memory management */
+static void _release_user_info (pam_ldap_user_info_t **);
+
+/* Internal LDAP session management */
+static int _open_session (pam_ldap_session_t *);
+static int _connect_anonymously (pam_ldap_session_t *);
+#if defined(LDAP_API_FEATURE_X_OPENLDAP) && (LDAP_API_VERSION > 2000)
+static int _rebind_proc (LDAP * ld, LDAP_CONST char *url, int request, ber_int_t msgid);
+#else
+#if LDAP_SET_REBIND_PROC_ARGS == 3
+static int _rebind_proc (LDAP *, char **, char **, int *, int, void *);
+#else
+static int _rebind_proc (LDAP * ld, char **whop, char **credp, int *methodp, int freeit);
+#endif
+#endif /* OpenLDAP */
+static int _connect_as_user (pam_ldap_session_t *, const char *);
+static int _reopen (pam_ldap_session_t *);
+
+/* LDAP entry helper routines */
+static int _get_integer_value (LDAP *, LDAPMessage *, const char *, int *);
+static int _get_long_integer_value (LDAP *, LDAPMessage *, const char *, long int *);
+static int _get_string_values (LDAP *, LDAPMessage *, const char *, char ***);
+static int _has_value (char **, const char *);
+static int _host_ok (pam_ldap_session_t * session);
+static char *_get_salt (char buf[16]);
+static char *_get_md5_salt (char buf[16]);
+static void _cleanup_data (pam_handle_t *, void *, int);
+
+/* LDAP cover routines */
+static int _get_user_info (pam_ldap_session_t *, const char *);
+static int _get_password_policy (pam_ldap_session_t *, pam_ldap_password_policy_t *);
+static int _do_authentication (pam_ldap_session_t *, const char *, const char *);
+static int _update_authtok (pam_ldap_session_t *, const char *, const char *, const char *);
+
+/* PAM API helpers, public session management */
+static void _pam_ldap_cleanup_session (pam_handle_t *, void *, int);
+
+static int _pam_ldap_get_session (pam_handle_t *, const char *, const char *, pam_ldap_session_t **);
+
+static int _get_authtok (pam_handle_t *, int, int);
+static int _conv_sendmsg (struct pam_conv *, const char *, int, int);
 
 #ifdef HAVE_LIBPTHREAD
 #include <dlfcn.h>
@@ -895,6 +935,7 @@
    * not the buffer
    */
   memset (b, 0, BUFSIZ);
+  *presult = result;
   return PAM_SUCCESS;
 }
 
@@ -1745,16 +1786,31 @@
       _release_config (&session->conf);
 #endif /* YPLDAPD */
       rc = _read_config (configFile, &session->conf);
-      if (rc != PAM_SUCCESS)
+      if ((rc != PAM_SUCCESS) || (session->conf->host == NULL))
 	{
-	  _release_config (&session->conf);
-	  free (session);
-	  return rc;
+          rc = _pam_ldap_readconfigfromdns(session->conf);
+          if (rc != PAM_SUCCESS)
+	    {
+	      _release_config (&session->conf);
+	      free (session);
+	      return rc;
+	    }
 	}
 #ifdef YPLDAPD
     }
 #endif /* YPLDAPD */
 
+    if (session->conf->host == NULL)
+      {
+        /* 
+         * According to PAM Documentation, such an error in a config file
+         * SHOULD be logged at LOG_ALERT level
+         */
+        syslog (LOG_ALERT, "pam_ldap: missing \"host\" in file \"ldap.conf\","
+		" and no information in DNS");
+        return PAM_SYSTEM_ERR;
+      }
+
   rc =
     pam_set_data (pamh, PADL_LDAP_SESSION_DATA, (void *) session,
 		  _pam_ldap_cleanup_session);
--- pam_ldap-107/pam_ldap.h.dnsconfig	Fri Apr 13 22:03:44 2001
+++ pam_ldap-107/pam_ldap.h	Wed Apr 25 16:57:02 2001
@@ -19,6 +19,9 @@
  * Boston, MA 02111-1307, USA.
  */
 
+#ifndef _LDAP_PAM_LDAP_H
+#define _LDAP_PAM_LDAP_H
+
 #ifdef HAVE_SECURITY_PAM_APPL_H
 #include <security/pam_appl.h>
 #endif
@@ -93,6 +96,7 @@
     uid_t min_uid;
     /* max uid */
     uid_t max_uid;
+    struct pam_ldap_config *next;
     /* tls check peer */
     int tls_checkpeer;
     /* tls ca certificate file */
@@ -313,4 +317,4 @@
 /* PAM authorization routine */
 #define PAM_SM_ACCOUNT
 PAM_EXTERN int pam_sm_acct_mgmt (pam_handle_t *, int, int, const char **);
-
+#endif
--- pam_ldap-107/dnsconfig.c.dnsconfig	Wed Apr 25 16:49:35 2001
+++ pam_ldap-107/dnsconfig.c	Wed Apr 25 16:49:35 2001
@@ -0,0 +1,200 @@
+
+/* Copyright (C) 1997-2001 Luke Howard.
+   This file started off as part of the nss_ldap library.
+   Contributed by Luke Howard, <lukeh@padl.com>, 1997.
+   (The author maintains a non-exclusive licence to distribute this file
+   under their own conditions.)
+
+   The nss_ldap library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Library General Public License as
+   published by the Free Software Foundation; either version 2 of the
+   License, or (at your option) any later version.
+
+   The nss_ldap library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Library General Public License for more details.
+
+   You should have received a copy of the GNU Library General Public
+   License along with the nss_ldap library; see the file COPYING.LIB.  If not,
+   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.
+ */
+
+/*
+ * Support DNS SRV records. I look up the SRV record for
+ * _ldap._tcp.gnu.org.
+ * and build the DN DC=gnu,DC=org.
+ * Thanks to Assar & co for resolve.[ch].
+ */
+
+static char rcsId[] = "$Id: dnsconfig.c,v 2.24 2001/02/27 14:44:31 lukeh Exp $";
+
+#include "config.h"
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#include <sys/param.h>
+#include <netdb.h>
+#include <syslog.h>
+#include <netinet/in.h>
+#include <arpa/nameser.h>
+#include <resolv.h>
+#include <string.h>
+
+#ifdef HAVE_LBER_H
+#include <lber.h>
+#endif
+#ifdef HAVE_LDAP_H
+#include <ldap.h>
+#endif
+
+#ifndef HAVE_SNPRINTF
+#include "snprintf.h"
+#endif
+
+#include "pam_ldap.h"
+#include "resolve.h"
+#include "dnsconfig.h"
+
+#define DC_ATTR "DC"
+#define DC_ATTR_AVA DC_ATTR "="
+#define DC_ATTR_AVA_LEN (sizeof(DC_ATTR_AVA) - 1)
+
+/* map gnu.org into DC=gnu,DC=org */
+int
+_pam_ldap_getdnsdn (char *src_domain, char **rval)
+{
+  char *p;
+  int len = 0;
+#ifdef HAVE_STRTOK_R
+  char *st = NULL;
+#endif
+  char *domain;
+  char domain_copy[BUFSIZ], buffer[BUFSIZ];
+
+  /* we need to take a copy of domain, because strtok() modifies
+   * it in place. Bad.
+   */
+  if (strlen (src_domain) >= sizeof (domain_copy))
+    {
+      return PAM_SYSTEM_ERR;
+    }
+  memset (domain_copy, '\0', sizeof (domain_copy));
+  memset (buffer, '\0', sizeof (buffer));
+  strcpy (domain_copy, src_domain);
+
+  domain = domain_copy;
+
+#ifndef HAVE_STRTOK_R
+  while ((p = strtok (domain, ".")))
+#else
+  while ((p = strtok_r (domain, ".", &st)))
+#endif
+    {
+      len = strlen (p);
+
+      if (strlen (buffer) + DC_ATTR_AVA_LEN + len + 1 >= sizeof (buffer))
+	{
+	  return PAM_SYSTEM_ERR;
+	}
+
+      if (domain == NULL)
+	{
+	  strcat (buffer, ",");
+	}
+      else
+	{
+	  domain = NULL;
+	}
+
+      strcat (buffer, DC_ATTR_AVA);
+      strcat (buffer, p);
+    }
+
+  if (rval != NULL)
+    {
+      *rval = strdup (buffer);
+    }
+
+  return PAM_SUCCESS;
+}
+
+
+int
+_pam_ldap_readconfigfromdns (pam_ldap_config_t * result)
+{
+  int stat = PAM_SUCCESS;
+  struct dns_reply *r;
+  struct resource_record *rr;
+  char domain[MAXHOSTNAMELEN + 1];
+
+  /* only reinitialize variables we'll change here */
+  result->host = NULL;
+  result->base = NULL;
+  result->port = LDAP_PORT;
+#ifdef LDAP_VERSION3
+  result->version = LDAP_VERSION3;
+#else
+  result->version = LDAP_VERSION2;
+#endif /* LDAP_VERSION3 */
+
+  if ((_res.options & RES_INIT) == 0 && res_init () == -1)
+    {
+      return PAM_SYSTEM_ERR;
+    }
+
+  snprintf (domain, sizeof (domain), "_ldap._tcp.%s.", _res.defdname);
+
+  r = dns_lookup (domain, "srv");
+  if (r == NULL)
+    {
+      return PAM_SYSTEM_ERR;
+    }
+
+  /* XXX need to sort by priority */
+  for (rr = r->head; rr != NULL; rr = rr->next)
+    {
+      if (rr->type == T_SRV)
+	{
+	  if (result->host != NULL)
+	    {
+	      /* need more space */
+	      result->next = (pam_ldap_config_t *) malloc (sizeof (*result));
+	      if (result->next == NULL)
+		{
+		  dns_free_data (r);
+		  return PAM_BUF_ERR;
+		}
+	      result = result->next;
+	    }
+
+	  /* Server Host */
+	  result->host = strdup (rr->u.srv->target);
+
+	  /* Port */
+	  result->port = rr->u.srv->port;
+#ifdef LDAPS_PORT
+	  /* Hack: if the port is the registered SSL port, enable SSL. */
+	  if (result->port == LDAPS_PORT)
+	    {
+	      result->ssl_on = SSL_LDAPS;
+	    }
+#endif /* SSL */
+
+	  /* DN */
+	  stat = _pam_ldap_getdnsdn (_res.defdname, &result->base);
+	  if (stat != PAM_SUCCESS)
+	    {
+	      dns_free_data (r);
+	      return stat;
+	    }
+	}
+    }
+
+  dns_free_data (r);
+  stat = PAM_SUCCESS;
+
+  return stat;
+}
--- pam_ldap-107/dnsconfig.h.dnsconfig	Wed Apr 25 16:49:35 2001
+++ pam_ldap-107/dnsconfig.h	Wed Apr 25 16:49:35 2001
@@ -0,0 +1,35 @@
+/* Copyright (C) 1997-2001 Luke Howard.
+   This file started off as part of the nss_ldap library.
+   Contributed by Luke Howard, <lukeh@padl.com>, 1997.
+   (The author maintains a non-exclusive licence to distribute this file
+   under their own conditions.)
+
+   The nss_ldap library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Library General Public License as
+   published by the Free Software Foundation; either version 2 of the
+   License, or (at your option) any later version.
+
+   The nss_ldap library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Library General Public License for more details.
+
+   You should have received a copy of the GNU Library General Public
+   License along with the nss_ldap library; see the file COPYING.LIB.  If not,
+   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.
+ */
+
+#ifndef _LDAP_PAM_LDAP_DNSCONFIG_H
+#define _LDAP_PAM_LDAP_DNSCONFIG_H
+
+/* utility routines.  */
+
+int _pam_ldap_getdnsdn (
+			char *domain,
+			char **rval);
+
+int _pam_ldap_readconfigfromdns (
+				 pam_ldap_config_t *result);
+
+#endif /* _LDAP_PAM_LDAP_DNSCONFIG_H */
