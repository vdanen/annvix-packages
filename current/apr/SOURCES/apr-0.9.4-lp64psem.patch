Support POSIX semaphores on LP64 platforms:

* configure.in: Don't disable POSIX semaphore support on LP64
platforms.

* include/arch/unix/apr_arch_proc_mutex.h (struct apr_proc_mutex_t):
Add a sem_t pointer field.

* locks/unix/proc_mutex.c (proc_mutex_posix_create,
proc_mutex_posix_cleanup, proc_mutex_posix_acquire,
prox_mutex_posix_release): Use the sem_t pointer not the fd for the
semaphore.

--- apr-0.9.4/include/arch/unix/apr_arch_proc_mutex.h.lp64psem
+++ apr-0.9.4/include/arch/unix/apr_arch_proc_mutex.h
@@ -157,6 +157,9 @@
 #if APR_HAS_SYSVSEM_SERIALIZE || APR_HAS_FCNTL_SERIALIZE || APR_HAS_FLOCK_SERIALIZE
     apr_file_t *interproc;
 #endif
+#if APR_HAS_POSIXSEM_SERIALIZE
+    sem_t *psem_interproc;
+#endif
 #if APR_HAS_PROC_PTHREAD_SERIALIZE
     pthread_mutex_t *pthread_interproc;
 #endif
--- apr-0.9.4/locks/unix/proc_mutex.c.lp64psem
+++ apr-0.9.4/locks/unix/proc_mutex.c
@@ -83,7 +83,7 @@
     apr_status_t stat = APR_SUCCESS;
     
     if (mutex->interproc->filedes != -1) {
-        if (sem_close((sem_t *)mutex->interproc->filedes) < 0) {
+        if (sem_close(mutex->psem_interproc) < 0) {
             stat = errno;
         }
     }
@@ -146,7 +146,7 @@
     }
     /* Ahhh. The joys of Posix sems. Predelete it... */
     sem_unlink((const char *) semname);
-    new_mutex->interproc->filedes = (int)psem;	/* Ugg */
+    new_mutex->psem_interproc = psem;
     new_mutex->fname = apr_pstrdup(new_mutex->pool, semname);
     apr_pool_cleanup_register(new_mutex->pool, (void *)new_mutex,
                               apr_proc_mutex_cleanup, 
@@ -158,7 +158,7 @@
 {
     int rc;
 
-    if ((rc = sem_wait((sem_t *)mutex->interproc->filedes)) < 0) {
+    if ((rc = sem_wait(mutex->psem_interproc)) < 0) {
         return errno;
     }
     mutex->curr_locked = 1;
@@ -170,7 +170,7 @@
     int rc;
 
     mutex->curr_locked = 0;
-    if ((rc = sem_post((sem_t *)mutex->interproc->filedes)) < 0) {
+    if ((rc = sem_post(mutex->psem_interproc)) < 0) {
         return errno;
     }
     return APR_SUCCESS;
--- apr-0.9.4/configure.in.lp64psem
+++ apr-0.9.4/configure.in
@@ -1403,8 +1403,6 @@
     sem_t *psem;
     const char *sem_name = "/apr_autoconf";
 
-    if (sizeof(int) < sizeof(sem_t *))
-        exit(1);
     psem = sem_open(sem_name, O_CREAT, 0644, 1);
     if (psem == (sem_t *)SEM_FAILED) {
 	exit(1);
