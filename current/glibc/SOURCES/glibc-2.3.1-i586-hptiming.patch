FIXME: get back some minimal support for timings in statistics mode.

2003-07-25  Jakub Jelinek  <jakub@redhat.com>

	* elf/dl-support.c (_dl_hwcap): Add nocommon attribute.

2003-07-22  H.J. Lu  <hongjiu.lu@intel.com>

	* elf/dl-support.c (_dl_aux_init): Initialize GL(dl_hwcap) for
	static binaries.

2002-12-24  Gwenole Beauchesne  <gbeauchesne@mandrakesoft.com>

	* elf/dl-support.c (_dl_hwcap): Define.
	
2002-12-19  Gwenole Beauchesne  <gbeauchesne@mandrakesoft.com>

	* sysdeps/unix/sysv/linux/i386/i586/hp-timing.h: Don't include
	<ldsodefs.h>.
	* sysdeps/posix/tempname.c: Include <ldsodefs.h> prior to
	including <hp-timing.h> so that GL() is defined first.

2002-12-07  Gwenole Beauchesne  <gbeauchesne@mandrakesoft.com>

	Let an i586 rtld load i686 libraries (especially libpthread)

	* elf/rtld.c (HP_TIMING_FORCE_NONAVAIL): Define if
	HP_TIMING_MAYBE_AVAIL.
	(_dl_start_final): Move dl_cpuclock_offset initialization to ...
	* sysdeps/generic/dl-sysdep.c (_dl_sysdep_start): ... here.
	* sysdeps/generic/hp-timing.h (HP_TIMING_MAYBE_AVAIL): New.
	(hp_timing_t): Make it global typedef.
	* sysdeps/generic/ldsodefs.h (rtld_global): Declare
	_dl_cpuclock_offset if HP_TIMING_MAYBE_AVAIL is defined too.

	* sysdeps/posix/tempname.c (RANDOM_BITS): Define for
	HP_TIMING_MAYBE_AVAIL too.
	(__gen_tempname): Call RANDOM_BITS() if HP_TIMING_AVAIL or
	HP_TIMING_MAYBE_AVAIL is defined.

	* sysdeps/unix/sysv/linux/i386/i586/Makefile: New file.
	* sysdeps/unix/sysv/linux/i386/i586/hp-timing.c: New file.
	* sysdeps/unix/sysv/linux/i386/i586/hp-timing.h: New file.
	* sysdeps/unix/sysv/linux/i386/dl-procinfo.h (HWCAP_I386_*): Move to...
	* sysdeps/unix/sysv/linux/i386/dl-hwcapinfo.h: ... here. New file.

--- glibc-2.3.1/elf/rtld.c.i586-hptiming	2002-12-07 12:33:18.000000000 -0500
+++ glibc-2.3.1/elf/rtld.c	2002-12-12 11:43:38.000000000 -0500
@@ -119,6 +119,13 @@ static struct libname_list _dl_rtld_libn
 # define HP_TIMING_AVAIL HP_SMALL_TIMING_AVAIL
 #endif
 
+/* Disable statistics even if HP_TIMING_AVAIL is defined because
+   GL(dl_hwcap) is not set at this stage.  */
+#if HP_TIMING_MAYBE_AVAIL
+# define HP_TIMING_FORCE_NONAVAIL 1
+# include <sysdeps/generic/hp-timing.h>
+#endif
+
 /* Variable for statistics.  */
 #ifndef HP_TIMING_NONAVAIL
 static hp_timing_t rtld_total_time;
@@ -235,10 +242,6 @@ _dl_start_final (void *arg, struct dl_st
 
 #endif
 
-#if HP_TIMING_AVAIL
-  HP_TIMING_NOW (GL(dl_cpuclock_offset));
-#endif
-
   /* Call the OS-dependent function to set up life so we can do things like
      file access.  It will call `dl_main' (below) to do all the real work
      of the dynamic linker, and then unwind our frame and run the user
--- glibc-2.3.1/sysdeps/generic/dl-sysdep.c.i586-hptiming	2002-07-20 13:28:08.000000000 -0400
+++ glibc-2.3.1/sysdeps/generic/dl-sysdep.c	2002-12-12 11:43:38.000000000 -0500
@@ -136,6 +136,13 @@ _dl_sysdep_start (void **start_argptr,
 	break;
       }
 
+  if (HP_TIMING_AVAIL
+#if   HP_TIMING_MAYBE_AVAIL
+   || HP_TIMING_HWCAP_AVAIL
+#endif
+      )
+    HP_TIMING_NOW (GL(dl_cpuclock_offset));
+
 #ifdef DL_SYSDEP_OSCHECK
   DL_SYSDEP_OSCHECK (dl_fatal);
 #endif
--- glibc-2.3.1/sysdeps/generic/hp-timing.h.i586-hptiming	2001-07-06 00:55:49.000000000 -0400
+++ glibc-2.3.1/sysdeps/generic/hp-timing.h	2002-12-12 11:44:08.000000000 -0500
@@ -18,6 +18,23 @@
    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
    02111-1307 USA.  */
 
+#if HP_TIMING_FORCE_NONAVAIL
+/* Undefine HP_TIMING macros.  */
+#undef HP_TIMING_AVAIL
+#undef HP_TIMING_MAYBE_AVAIL
+#undef HP_TIMING_HWCAP_AVAIL
+#undef HP_TIMING_INLINE
+#undef HP_TIMING_ZERO
+#undef HP_TIMING_NOW
+#undef HP_TIMING_DIFF_INIT
+#undef HP_TIMING_DIFF
+#undef HP_TIMING_ACCUM
+#undef HP_TIMING_ACCUM_NT
+#undef HP_TIMING_PRINT
+/* Fall-through to dummy definitions.  */
+#undef _HP_TIMING_H
+#endif
+
 #ifndef _HP_TIMING_H
 #define _HP_TIMING_H	1
 
@@ -65,10 +82,16 @@
 
 */
 
+/* hp_timing_t is already defined if we come here by
+   HP_TIMING_FORCE_NONAVAIL.  */
+#ifndef HP_TIMING_FORCE_NONAVAIL
+typedef int hp_timing_t;
+#endif
+
 /* Provide dummy definitions.  */
 #define HP_TIMING_AVAIL		(0)
+#define HP_TIMING_MAYBE_AVAIL	(0)
 #define HP_TIMING_INLINE	(0)
-typedef int hp_timing_t;
 #define HP_TIMING_ZERO(Var)
 #define HP_TIMING_NOW(var)
 #define HP_TIMING_DIFF_INIT()
--- glibc-2.3.1/sysdeps/generic/ldsodefs.h.i586-hptiming	2002-12-07 12:33:37.000000000 -0500
+++ glibc-2.3.1/sysdeps/generic/ldsodefs.h	2002-12-12 11:43:38.000000000 -0500
@@ -285,7 +284,7 @@
   /* The object to be initialized first.  */
   EXTERN struct link_map *_dl_initfirst;
 
-#if HP_TIMING_AVAIL || HP_SMALL_TIMING_AVAIL
+#if HP_TIMING_AVAIL || HP_TIMING_MAYBE_AVAIL || HP_SMALL_TIMING_AVAIL
   /* Start time on CPU clock.  */
   EXTERN hp_timing_t _dl_cpuclock_offset;
 
--- glibc-2.3.1/sysdeps/posix/tempname.c.i586-hptiming	2001-11-26 22:35:06.000000000 -0500
+++ glibc-2.3.1/sysdeps/posix/tempname.c	2002-12-12 11:43:38.000000000 -0500
@@ -108,9 +108,10 @@
 #endif
 
 #ifdef _LIBC
+# include <ldsodefs.h>
 # include <hp-timing.h>
-# if HP_TIMING_AVAIL
-#  define RANDOM_BITS(Var) \
+# if HP_TIMING_AVAIL || HP_TIMING_MAYBE_AVAIL
+#  define RANDOM_BITS(Var) do { \
   if (__builtin_expect (value == UINT64_C (0), 0))			      \
     {									      \
       /* If this is the first time this function is used initialize	      \
@@ -122,7 +122,8 @@
       __gettimeofday (&tv, NULL);					      \
       value = ((uint64_t) tv.tv_usec << 16) ^ tv.tv_sec;		      \
     }									      \
-  HP_TIMING_NOW (Var)
+  HP_TIMING_NOW (Var);							      \
+} while (0)
 # endif
 #endif
 
@@ -260,17 +261,22 @@ __gen_tempname (char *tmpl, int kind)
 
   /* Get some more or less random data.  */
 #ifdef RANDOM_BITS
-  RANDOM_BITS (random_time_bits);
-#else
-# if HAVE_GETTIMEOFDAY || _LIBC
+  if (HP_TIMING_AVAIL
+#if   HP_TIMING_MAYBE_AVAIL
+   || HP_TIMING_HWCAP_AVAIL
+#endif
+      )
+    RANDOM_BITS (random_time_bits);
+  else
+#endif
+#if HAVE_GETTIMEOFDAY || _LIBC
   {
     struct timeval tv;
     __gettimeofday (&tv, NULL);
     random_time_bits = ((uint64_t) tv.tv_usec << 16) ^ tv.tv_sec;
   }
-# else
+#else
   random_time_bits = time (NULL);
-# endif
 #endif
   value += random_time_bits ^ __getpid ();
 
--- glibc-2.3.1/sysdeps/unix/sysv/linux/i386/i586/Makefile.i586-hptiming	2002-12-12 11:43:38.000000000 -0500
+++ glibc-2.3.1/sysdeps/unix/sysv/linux/i386/i586/Makefile	2002-12-12 11:43:38.000000000 -0500
@@ -0,0 +1,4 @@
+ifeq ($(subdir),csu)
+sysdep_routines += hp-timing
+static-only-routines += hp-timing
+endif
--- glibc-2.3.1/sysdeps/unix/sysv/linux/i386/i586/hp-timing.c.i586-hptiming	2002-12-12 11:43:38.000000000 -0500
+++ glibc-2.3.1/sysdeps/unix/sysv/linux/i386/i586/hp-timing.c	2002-12-12 11:43:38.000000000 -0500
@@ -0,0 +1,2 @@
+/* We can use the i686 implementation without changes.  */
+#include <sysdeps/i386/i686/hp-timing.c>
--- glibc-2.3.1/sysdeps/unix/sysv/linux/i386/i586/hp-timing.h.i586-hptiming	2002-12-12 11:43:38.000000000 -0500
+++ glibc-2.3.1/sysdeps/unix/sysv/linux/i386/i586/hp-timing.h	2002-12-12 11:47:15.000000000 -0500
@@ -0,0 +1,17 @@
+/* We can use the i686 implementation with slight changes.  */
+#include <sysdeps/i386/i686/hp-timing.h>
+
+/* We need the definition of HWCAP_I386_TSC.  */
+#include <sysdeps/unix/sysv/linux/i386/dl-hwcapinfo.h>
+
+/* We need to perform a runtime check for the timestamp register.  */
+#undef  HP_TIMING_AVAIL
+#define HP_TIMING_AVAIL		(0)
+#undef  HP_TIMING_MAYBE_AVAIL
+#define HP_TIMING_MAYBE_AVAIL	(1)
+
+/* HP_TIMING_HWCAP_AVAIL: this macro performs a run-time check for the
+   capability. This requires HP_TIMING_MAYBE_AVAIL to be set so that
+   #if preprocessing directives could work. HP_TIMING_HWCAP_AVAIL has
+   to be used in normal conditionals however.  */
+#define HP_TIMING_HWCAP_AVAIL	(GL(dl_hwcap) & HWCAP_I386_TSC)
--- glibc-2.3.1/sysdeps/unix/sysv/linux/i386/dl-procinfo.h.i586-hptiming	2002-09-21 17:14:11.000000000 -0400
+++ glibc-2.3.1/sysdeps/unix/sysv/linux/i386/dl-procinfo.h	2002-12-12 11:43:38.000000000 -0500
@@ -67,34 +67,8 @@ _dl_platform_string (int idx)
   return GL(dl_x86_platforms)[idx - _DL_FIRST_PLATFORM];
 };
 
-enum
-{
-  HWCAP_I386_FPU   = 1 << 0,
-  HWCAP_I386_VME   = 1 << 1,
-  HWCAP_I386_DE    = 1 << 2,
-  HWCAP_I386_PSE   = 1 << 3,
-  HWCAP_I386_TSC   = 1 << 4,
-  HWCAP_I386_MSR   = 1 << 5,
-  HWCAP_I386_PAE   = 1 << 6,
-  HWCAP_I386_MCE   = 1 << 7,
-  HWCAP_I386_CX8   = 1 << 8,
-  HWCAP_I386_APIC  = 1 << 9,
-  HWCAP_I386_SEP   = 1 << 11,
-  HWCAP_I386_MTRR  = 1 << 12,
-  HWCAP_I386_PGE   = 1 << 13,
-  HWCAP_I386_MCA   = 1 << 14,
-  HWCAP_I386_CMOV  = 1 << 15,
-  HWCAP_I386_FCMOV = 1 << 16,
-  HWCAP_I386_MMX   = 1 << 23,
-  HWCAP_I386_OSFXSR = 1 << 24,
-  HWCAP_I386_XMM   = 1 << 25,
-  HWCAP_I386_XMM2  = 1 << 26,
-  HWCAP_I386_AMD3D = 1 << 31,
-
-  /* XXX Which others to add here?  */
-  HWCAP_IMPORTANT = (HWCAP_I386_MMX)
-
-};
+/* Get hwcap definitions.  */
+#include <sysdeps/unix/sysv/linux/i386/dl-hwcapinfo.h>
 
 static inline int
 __attribute__ ((unused))
--- glibc-2.3.1/sysdeps/unix/sysv/linux/i386/dl-hwcapinfo.h.i586-hptiming	2002-12-12 11:43:38.000000000 -0500
+++ glibc-2.3.1/sysdeps/unix/sysv/linux/i386/dl-hwcapinfo.h	2002-12-12 11:43:38.000000000 -0500
@@ -0,0 +1,53 @@
+/* Linux/i386 version of processor capability definitions.
+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1998.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#ifndef _DL_HWCAPINFO_H
+#define _DL_HWCAPINFO_H	1
+
+enum
+{
+  HWCAP_I386_FPU   = 1 << 0,
+  HWCAP_I386_VME   = 1 << 1,
+  HWCAP_I386_DE    = 1 << 2,
+  HWCAP_I386_PSE   = 1 << 3,
+  HWCAP_I386_TSC   = 1 << 4,
+  HWCAP_I386_MSR   = 1 << 5,
+  HWCAP_I386_PAE   = 1 << 6,
+  HWCAP_I386_MCE   = 1 << 7,
+  HWCAP_I386_CX8   = 1 << 8,
+  HWCAP_I386_APIC  = 1 << 9,
+  HWCAP_I386_SEP   = 1 << 11,
+  HWCAP_I386_MTRR  = 1 << 12,
+  HWCAP_I386_PGE   = 1 << 13,
+  HWCAP_I386_MCA   = 1 << 14,
+  HWCAP_I386_CMOV  = 1 << 15,
+  HWCAP_I386_FCMOV = 1 << 16,
+  HWCAP_I386_MMX   = 1 << 23,
+  HWCAP_I386_OSFXSR = 1 << 24,
+  HWCAP_I386_XMM   = 1 << 25,
+  HWCAP_I386_XMM2  = 1 << 26,
+  HWCAP_I386_AMD3D = 1 << 31,
+
+  /* XXX Which others to add here?  */
+  HWCAP_IMPORTANT = (HWCAP_I386_MMX)
+
+};
+
+#endif /* dl-hwcapinfo.h */
--- glibc-2.3.1/elf/dl-support.c.i586-hptiming	2002-12-10 16:55:11.000000000 +0100
+++ glibc-2.3.1/elf/dl-support.c	2002-12-24 00:46:49.000000000 +0100
@@ -39,6 +39,9 @@ char **_dl_argv = &__progname;	/* This i
 const char *_dl_platform;
 size_t _dl_platformlen;
 
+/* CPU capabilities. Default to none.  */
+unsigned long int _dl_hwcap __attribute__ ((nocommon)) = 0;
+
 int _dl_debug_mask;
 int _dl_lazy;
 /* XXX I know about at least one case where we depend on the old weak
@@ -170,6 +170,9 @@
       case AT_PHNUM:
 	GL(dl_phnum) = av->a_un.a_val;
 	break;
+      case AT_HWCAP:
+	GL(dl_hwcap) = av->a_un.a_val;
+	break;
 #ifdef NEED_DL_SYSINFO
       case AT_SYSINFO:
 	GL(dl_sysinfo) = av->a_un.a_val;
